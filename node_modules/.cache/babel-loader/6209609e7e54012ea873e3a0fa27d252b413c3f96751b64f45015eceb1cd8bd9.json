{"ast":null,"code":"import CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\nclass FunctionNode extends CodeNode {\n  constructor() {\n    let code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    super(code);\n    this.keywords = {};\n  }\n  getNodeType(builder) {\n    return this.getNodeFunction(builder).type;\n  }\n  getInputs(builder) {\n    return this.getNodeFunction(builder).inputs;\n  }\n  getNodeFunction(builder) {\n    const nodeData = builder.getDataFromNode(this);\n    let nodeFunction = nodeData.nodeFunction;\n    if (nodeFunction === undefined) {\n      nodeFunction = builder.parser.parseFunction(this.code);\n      nodeData.nodeFunction = nodeFunction;\n    }\n    return nodeFunction;\n  }\n  call() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return new FunctionCallNode(this, parameters);\n  }\n  generate(builder, output) {\n    super.generate(builder);\n    const nodeFunction = this.getNodeFunction(builder);\n    const name = nodeFunction.name;\n    const type = nodeFunction.type;\n    const nodeCode = builder.getCodeFromNode(this, type);\n    if (name !== '') {\n      // use a custom property name\n      nodeCode.name = name;\n    }\n    const propertyName = builder.getPropertyName(nodeCode);\n    let code = this.getNodeFunction(builder).getCode(propertyName);\n    const keywords = this.keywords;\n    const keywordsProperties = Object.keys(keywords);\n    if (keywordsProperties.length > 0) {\n      for (const property of keywordsProperties) {\n        const propertyRegExp = new RegExp(`\\\\b${property}\\\\b`, 'g');\n        const nodeProperty = keywords[property].build(builder, 'property');\n        code = code.replace(propertyRegExp, nodeProperty);\n      }\n    }\n    nodeCode.code = code;\n    if (output === 'property') {\n      return propertyName;\n    } else {\n      return builder.format(`${propertyName}()`, type, output);\n    }\n  }\n}\nexport default FunctionNode;","map":{"version":3,"names":["CodeNode","FunctionCallNode","FunctionNode","constructor","code","arguments","length","undefined","keywords","getNodeType","builder","getNodeFunction","type","getInputs","inputs","nodeData","getDataFromNode","nodeFunction","parser","parseFunction","call","parameters","generate","output","name","nodeCode","getCodeFromNode","propertyName","getPropertyName","getCode","keywordsProperties","Object","keys","property","propertyRegExp","RegExp","nodeProperty","build","replace","format"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/nodes/core/FunctionNode.js"],"sourcesContent":["import CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\n\nclass FunctionNode extends CodeNode {\n  constructor(code = '') {\n    super(code);\n    this.keywords = {};\n  }\n\n  getNodeType(builder) {\n    return this.getNodeFunction(builder).type;\n  }\n\n  getInputs(builder) {\n    return this.getNodeFunction(builder).inputs;\n  }\n\n  getNodeFunction(builder) {\n    const nodeData = builder.getDataFromNode(this);\n    let nodeFunction = nodeData.nodeFunction;\n\n    if (nodeFunction === undefined) {\n      nodeFunction = builder.parser.parseFunction(this.code);\n      nodeData.nodeFunction = nodeFunction;\n    }\n\n    return nodeFunction;\n  }\n\n  call(parameters = {}) {\n    return new FunctionCallNode(this, parameters);\n  }\n\n  generate(builder, output) {\n    super.generate(builder);\n    const nodeFunction = this.getNodeFunction(builder);\n    const name = nodeFunction.name;\n    const type = nodeFunction.type;\n    const nodeCode = builder.getCodeFromNode(this, type);\n\n    if (name !== '') {\n      // use a custom property name\n      nodeCode.name = name;\n    }\n\n    const propertyName = builder.getPropertyName(nodeCode);\n    let code = this.getNodeFunction(builder).getCode(propertyName);\n    const keywords = this.keywords;\n    const keywordsProperties = Object.keys(keywords);\n\n    if (keywordsProperties.length > 0) {\n      for (const property of keywordsProperties) {\n        const propertyRegExp = new RegExp(`\\\\b${property}\\\\b`, 'g');\n        const nodeProperty = keywords[property].build(builder, 'property');\n        code = code.replace(propertyRegExp, nodeProperty);\n      }\n    }\n\n    nodeCode.code = code;\n\n    if (output === 'property') {\n      return propertyName;\n    } else {\n      return builder.format(`${propertyName}()`, type, output);\n    }\n  }\n\n}\n\nexport default FunctionNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}