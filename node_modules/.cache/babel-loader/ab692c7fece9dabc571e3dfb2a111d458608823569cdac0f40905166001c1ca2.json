{"ast":null,"code":"import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nvar TexturePass = function (map, opacity) {\n  if (CopyShader === undefined) console.error('THREE.TexturePass relies on CopyShader');\n  var shader = CopyShader;\n  this.map = map;\n  this.opacity = opacity !== undefined ? opacity : 1.0;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader,\n    depthTest: false,\n    depthWrite: false\n  });\n  this.needsSwap = false;\n  this.fsQuad = new FullScreenQuad(null);\n};\nTexturePass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: TexturePass,\n  render: function (renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */) {\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    this.fsQuad.material = this.material;\n    this.uniforms['opacity'].value = this.opacity;\n    this.uniforms['tDiffuse'].value = this.map;\n    this.material.transparent = this.opacity < 1.0;\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n    renderer.autoClear = oldAutoClear;\n  }\n});\nexport { TexturePass };","map":{"version":3,"names":["UniformsUtils","ShaderMaterial","FullScreenQuad","Pass","CopyShader","TexturePass","map","opacity","undefined","console","error","shader","uniforms","clone","material","vertexShader","fragmentShader","depthTest","depthWrite","needsSwap","fsQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","value","transparent","setRenderTarget","renderToScreen","clear"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/postprocessing/TexturePass.js"],"sourcesContent":["import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar TexturePass = function (map, opacity) {\n  if (CopyShader === undefined) console.error('THREE.TexturePass relies on CopyShader');\n  var shader = CopyShader;\n  this.map = map;\n  this.opacity = opacity !== undefined ? opacity : 1.0;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader,\n    depthTest: false,\n    depthWrite: false\n  });\n  this.needsSwap = false;\n  this.fsQuad = new FullScreenQuad(null);\n};\n\nTexturePass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: TexturePass,\n  render: function (renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    this.fsQuad.material = this.material;\n    this.uniforms['opacity'].value = this.opacity;\n    this.uniforms['tDiffuse'].value = this.map;\n    this.material.transparent = this.opacity < 1.0;\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n    renderer.autoClear = oldAutoClear;\n  }\n});\n\nexport { TexturePass };\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,cAAc,QAAQ,OAAO;AACrD,SAASC,cAAc,EAAEC,IAAI,QAAQ,WAAW;AAChD,SAASC,UAAU,QAAQ,0BAA0B;AAErD,IAAIC,WAAW,GAAG,SAAAA,CAAUC,GAAG,EAAEC,OAAO,EAAE;EACxC,IAAIH,UAAU,KAAKI,SAAS,EAAEC,OAAO,CAACC,KAAK,CAAC,wCAAwC,CAAC;EACrF,IAAIC,MAAM,GAAGP,UAAU;EACvB,IAAI,CAACE,GAAG,GAAGA,GAAG;EACd,IAAI,CAACC,OAAO,GAAGA,OAAO,KAAKC,SAAS,GAAGD,OAAO,GAAG,GAAG;EACpD,IAAI,CAACK,QAAQ,GAAGZ,aAAa,CAACa,KAAK,CAACF,MAAM,CAACC,QAAQ,CAAC;EACpD,IAAI,CAACE,QAAQ,GAAG,IAAIb,cAAc,CAAC;IACjCW,QAAQ,EAAE,IAAI,CAACA,QAAQ;IACvBG,YAAY,EAAEJ,MAAM,CAACI,YAAY;IACjCC,cAAc,EAAEL,MAAM,CAACK,cAAc;IACrCC,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE;EACd,CAAC,CAAC;EACF,IAAI,CAACC,SAAS,GAAG,KAAK;EACtB,IAAI,CAACC,MAAM,GAAG,IAAIlB,cAAc,CAAC,IAAI,CAAC;AACxC,CAAC;AAEDG,WAAW,CAACgB,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACE,MAAM,CAACrB,IAAI,CAACkB,SAAS,CAAC,EAAE;EACnEI,WAAW,EAAEpB,WAAW;EACxBqB,MAAM,EAAE,SAAAA,CAAUC,QAAQ,EAAEC,WAAW,EAAEC;EACzC,8BACE;IACA,IAAIC,YAAY,GAAGH,QAAQ,CAACI,SAAS;IACrCJ,QAAQ,CAACI,SAAS,GAAG,KAAK;IAC1B,IAAI,CAACX,MAAM,CAACN,QAAQ,GAAG,IAAI,CAACA,QAAQ;IACpC,IAAI,CAACF,QAAQ,CAAC,SAAS,CAAC,CAACoB,KAAK,GAAG,IAAI,CAACzB,OAAO;IAC7C,IAAI,CAACK,QAAQ,CAAC,UAAU,CAAC,CAACoB,KAAK,GAAG,IAAI,CAAC1B,GAAG;IAC1C,IAAI,CAACQ,QAAQ,CAACmB,WAAW,GAAG,IAAI,CAAC1B,OAAO,GAAG,GAAG;IAC9CoB,QAAQ,CAACO,eAAe,CAAC,IAAI,CAACC,cAAc,GAAG,IAAI,GAAGN,UAAU,CAAC;IACjE,IAAI,IAAI,CAACO,KAAK,EAAET,QAAQ,CAACS,KAAK,EAAE;IAChC,IAAI,CAAChB,MAAM,CAACM,MAAM,CAACC,QAAQ,CAAC;IAC5BA,QAAQ,CAACI,SAAS,GAAGD,YAAY;EACnC;AACF,CAAC,CAAC;AAEF,SAASzB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}