{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport Node from '../core/Node.js';\nimport { ShaderNode, sub, mul, pow, vec3, lessThanEqual, mix, join } from '../ShaderNode.js';\nimport { LinearEncoding, sRGBEncoding } from 'three';\nconst LinearToLinear = new ShaderNode(inputs => {\n  return inputs.value;\n});\nconst LinearTosRGB = new ShaderNode(inputs => {\n  const {\n    value\n  } = inputs;\n  const rgb = value.rgb;\n  const a = sub(mul(pow(value.rgb, vec3(0.41666)), 1.055), vec3(0.055));\n  const b = mul(rgb, 12.92);\n  const factor = vec3(lessThanEqual(rgb, vec3(0.0031308)));\n  const rgbResult = mix(a, b, factor);\n  return join(rgbResult.r, rgbResult.g, rgbResult.b, value.a);\n});\nconst EncodingLib = {\n  LinearToLinear,\n  LinearTosRGB\n};\nclass ColorSpaceNode extends Node {\n  constructor(method, node) {\n    super('vec4');\n    this.method = method;\n    this.node = node;\n  }\n  fromEncoding(encoding) {\n    let method = null;\n    if (encoding === LinearEncoding) {\n      method = 'Linear';\n    } else if (encoding === sRGBEncoding) {\n      method = 'sRGB';\n    }\n    this.method = 'LinearTo' + method;\n    return this;\n  }\n  generate(builder) {\n    const type = this.getNodeType(builder);\n    const method = this.method;\n    const node = this.node;\n    if (method !== ColorSpaceNode.LINEAR_TO_LINEAR) {\n      const encodingFunctionNode = EncodingLib[method];\n      return encodingFunctionNode({\n        value: node\n      }).build(builder, type);\n    } else {\n      return node.build(builder, type);\n    }\n  }\n}\n_defineProperty(ColorSpaceNode, \"LINEAR_TO_LINEAR\", 'LinearToLinear');\n_defineProperty(ColorSpaceNode, \"LINEAR_TO_SRGB\", 'LinearTosRGB');\nexport default ColorSpaceNode;\nexport { LinearToLinear, LinearTosRGB };","map":{"version":3,"names":["_defineProperty","Node","ShaderNode","sub","mul","pow","vec3","lessThanEqual","mix","join","LinearEncoding","sRGBEncoding","LinearToLinear","inputs","value","LinearTosRGB","rgb","a","b","factor","rgbResult","r","g","EncodingLib","ColorSpaceNode","constructor","method","node","fromEncoding","encoding","generate","builder","type","getNodeType","LINEAR_TO_LINEAR","encodingFunctionNode","build"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/nodes/display/ColorSpaceNode.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport Node from '../core/Node.js';\nimport { ShaderNode, sub, mul, pow, vec3, lessThanEqual, mix, join } from '../ShaderNode.js';\nimport { LinearEncoding, sRGBEncoding } from 'three';\n\nconst LinearToLinear = new ShaderNode(inputs => {\n  return inputs.value;\n});\nconst LinearTosRGB = new ShaderNode(inputs => {\n  const {\n    value\n  } = inputs;\n  const rgb = value.rgb;\n  const a = sub(mul(pow(value.rgb, vec3(0.41666)), 1.055), vec3(0.055));\n  const b = mul(rgb, 12.92);\n  const factor = vec3(lessThanEqual(rgb, vec3(0.0031308)));\n  const rgbResult = mix(a, b, factor);\n  return join(rgbResult.r, rgbResult.g, rgbResult.b, value.a);\n});\nconst EncodingLib = {\n  LinearToLinear,\n  LinearTosRGB\n};\n\nclass ColorSpaceNode extends Node {\n  constructor(method, node) {\n    super('vec4');\n    this.method = method;\n    this.node = node;\n  }\n\n  fromEncoding(encoding) {\n    let method = null;\n\n    if (encoding === LinearEncoding) {\n      method = 'Linear';\n    } else if (encoding === sRGBEncoding) {\n      method = 'sRGB';\n    }\n\n    this.method = 'LinearTo' + method;\n    return this;\n  }\n\n  generate(builder) {\n    const type = this.getNodeType(builder);\n    const method = this.method;\n    const node = this.node;\n\n    if (method !== ColorSpaceNode.LINEAR_TO_LINEAR) {\n      const encodingFunctionNode = EncodingLib[method];\n      return encodingFunctionNode({\n        value: node\n      }).build(builder, type);\n    } else {\n      return node.build(builder, type);\n    }\n  }\n\n}\n\n_defineProperty(ColorSpaceNode, \"LINEAR_TO_LINEAR\", 'LinearToLinear');\n\n_defineProperty(ColorSpaceNode, \"LINEAR_TO_SRGB\", 'LinearTosRGB');\n\nexport default ColorSpaceNode;\nexport { LinearToLinear, LinearTosRGB };\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,2CAA2C;AACvE,OAAOC,IAAI,MAAM,iBAAiB;AAClC,SAASC,UAAU,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,aAAa,EAAEC,GAAG,EAAEC,IAAI,QAAQ,kBAAkB;AAC5F,SAASC,cAAc,EAAEC,YAAY,QAAQ,OAAO;AAEpD,MAAMC,cAAc,GAAG,IAAIV,UAAU,CAACW,MAAM,IAAI;EAC9C,OAAOA,MAAM,CAACC,KAAK;AACrB,CAAC,CAAC;AACF,MAAMC,YAAY,GAAG,IAAIb,UAAU,CAACW,MAAM,IAAI;EAC5C,MAAM;IACJC;EACF,CAAC,GAAGD,MAAM;EACV,MAAMG,GAAG,GAAGF,KAAK,CAACE,GAAG;EACrB,MAAMC,CAAC,GAAGd,GAAG,CAACC,GAAG,CAACC,GAAG,CAACS,KAAK,CAACE,GAAG,EAAEV,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,EAAEA,IAAI,CAAC,KAAK,CAAC,CAAC;EACrE,MAAMY,CAAC,GAAGd,GAAG,CAACY,GAAG,EAAE,KAAK,CAAC;EACzB,MAAMG,MAAM,GAAGb,IAAI,CAACC,aAAa,CAACS,GAAG,EAAEV,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;EACxD,MAAMc,SAAS,GAAGZ,GAAG,CAACS,CAAC,EAAEC,CAAC,EAAEC,MAAM,CAAC;EACnC,OAAOV,IAAI,CAACW,SAAS,CAACC,CAAC,EAAED,SAAS,CAACE,CAAC,EAAEF,SAAS,CAACF,CAAC,EAAEJ,KAAK,CAACG,CAAC,CAAC;AAC7D,CAAC,CAAC;AACF,MAAMM,WAAW,GAAG;EAClBX,cAAc;EACdG;AACF,CAAC;AAED,MAAMS,cAAc,SAASvB,IAAI,CAAC;EAChCwB,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAE;IACxB,KAAK,CAAC,MAAM,CAAC;IACb,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAClB;EAEAC,YAAYA,CAACC,QAAQ,EAAE;IACrB,IAAIH,MAAM,GAAG,IAAI;IAEjB,IAAIG,QAAQ,KAAKnB,cAAc,EAAE;MAC/BgB,MAAM,GAAG,QAAQ;IACnB,CAAC,MAAM,IAAIG,QAAQ,KAAKlB,YAAY,EAAE;MACpCe,MAAM,GAAG,MAAM;IACjB;IAEA,IAAI,CAACA,MAAM,GAAG,UAAU,GAAGA,MAAM;IACjC,OAAO,IAAI;EACb;EAEAI,QAAQA,CAACC,OAAO,EAAE;IAChB,MAAMC,IAAI,GAAG,IAAI,CAACC,WAAW,CAACF,OAAO,CAAC;IACtC,MAAML,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMC,IAAI,GAAG,IAAI,CAACA,IAAI;IAEtB,IAAID,MAAM,KAAKF,cAAc,CAACU,gBAAgB,EAAE;MAC9C,MAAMC,oBAAoB,GAAGZ,WAAW,CAACG,MAAM,CAAC;MAChD,OAAOS,oBAAoB,CAAC;QAC1BrB,KAAK,EAAEa;MACT,CAAC,CAAC,CAACS,KAAK,CAACL,OAAO,EAAEC,IAAI,CAAC;IACzB,CAAC,MAAM;MACL,OAAOL,IAAI,CAACS,KAAK,CAACL,OAAO,EAAEC,IAAI,CAAC;IAClC;EACF;AAEF;AAEAhC,eAAe,CAACwB,cAAc,EAAE,kBAAkB,EAAE,gBAAgB,CAAC;AAErExB,eAAe,CAACwB,cAAc,EAAE,gBAAgB,EAAE,cAAc,CAAC;AAEjE,eAAeA,cAAc;AAC7B,SAASZ,cAAc,EAAEG,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}