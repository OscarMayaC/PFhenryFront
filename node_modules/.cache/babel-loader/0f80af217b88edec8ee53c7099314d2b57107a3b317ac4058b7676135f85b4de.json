{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { Vector2, Color, WebGLRenderTarget, MeshDepthMaterial, DoubleSide, RGBADepthPacking, NoBlending, UniformsUtils, ShaderMaterial, Matrix4, Vector3, AdditiveBlending } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nclass OutlinePass extends Pass {\n  constructor(resolution, scene, camera, selectedObjects) {\n    super();\n    _defineProperty(this, \"renderScene\", void 0);\n    _defineProperty(this, \"renderCamera\", void 0);\n    _defineProperty(this, \"selectedObjects\", void 0);\n    _defineProperty(this, \"visibleEdgeColor\", void 0);\n    _defineProperty(this, \"hiddenEdgeColor\", void 0);\n    _defineProperty(this, \"edgeGlow\", void 0);\n    _defineProperty(this, \"usePatternTexture\", void 0);\n    _defineProperty(this, \"edgeThickness\", void 0);\n    _defineProperty(this, \"edgeStrength\", void 0);\n    _defineProperty(this, \"downSampleRatio\", void 0);\n    _defineProperty(this, \"pulsePeriod\", void 0);\n    _defineProperty(this, \"resolution\", void 0);\n    _defineProperty(this, \"renderTargetMaskBuffer\", void 0);\n    _defineProperty(this, \"depthMaterial\", void 0);\n    _defineProperty(this, \"prepareMaskMaterial\", void 0);\n    _defineProperty(this, \"renderTargetDepthBuffer\", void 0);\n    _defineProperty(this, \"renderTargetMaskDownSampleBuffer\", void 0);\n    _defineProperty(this, \"renderTargetBlurBuffer1\", void 0);\n    _defineProperty(this, \"renderTargetBlurBuffer2\", void 0);\n    _defineProperty(this, \"edgeDetectionMaterial\", void 0);\n    _defineProperty(this, \"renderTargetEdgeBuffer1\", void 0);\n    _defineProperty(this, \"renderTargetEdgeBuffer2\", void 0);\n    _defineProperty(this, \"separableBlurMaterial1\", void 0);\n    _defineProperty(this, \"separableBlurMaterial2\", void 0);\n    _defineProperty(this, \"overlayMaterial\", void 0);\n    _defineProperty(this, \"materialCopy\", void 0);\n    _defineProperty(this, \"oldClearAlpha\", void 0);\n    _defineProperty(this, \"fsQuad\", void 0);\n    _defineProperty(this, \"tempPulseColor1\", void 0);\n    _defineProperty(this, \"tempPulseColor2\", void 0);\n    _defineProperty(this, \"textureMatrix\", void 0);\n    _defineProperty(this, \"patternTexture\", void 0);\n    _defineProperty(this, \"_visibilityCache\", void 0);\n    _defineProperty(this, \"_oldClearColor\", void 0);\n    _defineProperty(this, \"copyUniforms\", void 0);\n    _defineProperty(this, \"BlurDirectionX\", new Vector2(1.0, 0.0));\n    _defineProperty(this, \"BlurDirectionY\", new Vector2(0.0, 1.0));\n    this.renderScene = scene;\n    this.renderCamera = camera;\n    this.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\n    this.visibleEdgeColor = new Color(1, 1, 1);\n    this.hiddenEdgeColor = new Color(0.1, 0.04, 0.02);\n    this.edgeGlow = 0.0;\n    this.usePatternTexture = false;\n    this.edgeThickness = 1.0;\n    this.edgeStrength = 3.0;\n    this.downSampleRatio = 2;\n    this.pulsePeriod = 0;\n    this._visibilityCache = new Map();\n    this.resolution = resolution !== undefined ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n    const resx = Math.round(this.resolution.x / this.downSampleRatio);\n    const resy = Math.round(this.resolution.y / this.downSampleRatio);\n    this.renderTargetMaskBuffer = new WebGLRenderTarget(this.resolution.x, this.resolution.y);\n    this.renderTargetMaskBuffer.texture.name = 'OutlinePass.mask';\n    this.renderTargetMaskBuffer.texture.generateMipmaps = false;\n    this.depthMaterial = new MeshDepthMaterial();\n    this.depthMaterial.side = DoubleSide;\n    this.depthMaterial.depthPacking = RGBADepthPacking;\n    this.depthMaterial.blending = NoBlending;\n    this.prepareMaskMaterial = this.getPrepareMaskMaterial();\n    this.prepareMaskMaterial.side = DoubleSide;\n    this.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ(this.prepareMaskMaterial.fragmentShader, this.renderCamera);\n    this.renderTargetDepthBuffer = new WebGLRenderTarget(this.resolution.x, this.resolution.y);\n    this.renderTargetDepthBuffer.texture.name = 'OutlinePass.depth';\n    this.renderTargetDepthBuffer.texture.generateMipmaps = false;\n    this.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget(resx, resy);\n    this.renderTargetMaskDownSampleBuffer.texture.name = 'OutlinePass.depthDownSample';\n    this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n    this.renderTargetBlurBuffer1 = new WebGLRenderTarget(resx, resy);\n    this.renderTargetBlurBuffer1.texture.name = 'OutlinePass.blur1';\n    this.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n    this.renderTargetBlurBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2));\n    this.renderTargetBlurBuffer2.texture.name = 'OutlinePass.blur2';\n    this.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n    this.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\n    this.renderTargetEdgeBuffer1 = new WebGLRenderTarget(resx, resy);\n    this.renderTargetEdgeBuffer1.texture.name = 'OutlinePass.edge1';\n    this.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n    this.renderTargetEdgeBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2));\n    this.renderTargetEdgeBuffer2.texture.name = 'OutlinePass.edge2';\n    this.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n    const MAX_EDGE_THICKNESS = 4;\n    const MAX_EDGE_GLOW = 4;\n    this.separableBlurMaterial1 = this.getSeperableBlurMaterial(MAX_EDGE_THICKNESS);\n    this.separableBlurMaterial1.uniforms['texSize'].value.set(resx, resy);\n    this.separableBlurMaterial1.uniforms['kernelRadius'].value = 1;\n    this.separableBlurMaterial2 = this.getSeperableBlurMaterial(MAX_EDGE_GLOW);\n    this.separableBlurMaterial2.uniforms['texSize'].value.set(Math.round(resx / 2), Math.round(resy / 2));\n    this.separableBlurMaterial2.uniforms['kernelRadius'].value = MAX_EDGE_GLOW; // Overlay material\n\n    this.overlayMaterial = this.getOverlayMaterial(); // copy material\n\n    if (CopyShader === undefined) console.error('THREE.OutlinePass relies on CopyShader');\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.copyUniforms['opacity'].value = 1.0;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: NoBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.enabled = true;\n    this.needsSwap = false;\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.fsQuad = new FullScreenQuad(this.materialCopy);\n    this.tempPulseColor1 = new Color();\n    this.tempPulseColor2 = new Color();\n    this.textureMatrix = new Matrix4();\n    function replaceDepthToViewZ(string, camera) {\n      const type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\n      return string.replace(/DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ');\n    }\n  }\n  dispose() {\n    this.renderTargetMaskBuffer.dispose();\n    this.renderTargetDepthBuffer.dispose();\n    this.renderTargetMaskDownSampleBuffer.dispose();\n    this.renderTargetBlurBuffer1.dispose();\n    this.renderTargetBlurBuffer2.dispose();\n    this.renderTargetEdgeBuffer1.dispose();\n    this.renderTargetEdgeBuffer2.dispose();\n  }\n  setSize(width, height) {\n    this.renderTargetMaskBuffer.setSize(width, height);\n    this.renderTargetDepthBuffer.setSize(width, height);\n    let resx = Math.round(width / this.downSampleRatio);\n    let resy = Math.round(height / this.downSampleRatio);\n    this.renderTargetMaskDownSampleBuffer.setSize(resx, resy);\n    this.renderTargetBlurBuffer1.setSize(resx, resy);\n    this.renderTargetEdgeBuffer1.setSize(resx, resy);\n    this.separableBlurMaterial1.uniforms['texSize'].value.set(resx, resy);\n    resx = Math.round(resx / 2);\n    resy = Math.round(resy / 2);\n    this.renderTargetBlurBuffer2.setSize(resx, resy);\n    this.renderTargetEdgeBuffer2.setSize(resx, resy);\n    this.separableBlurMaterial2.uniforms['texSize'].value.set(resx, resy);\n  }\n  changeVisibilityOfSelectedObjects(bVisible) {\n    const cache = this._visibilityCache;\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) {\n        if (bVisible === true) {\n          object.visible = cache.get(object);\n        } else {\n          cache.set(object, object.visible);\n          object.visible = bVisible;\n        }\n      }\n    }\n    for (let i = 0; i < this.selectedObjects.length; i++) {\n      const selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n  }\n  changeVisibilityOfNonSelectedObjects(bVisible) {\n    const cache = this._visibilityCache;\n    const selectedMeshes = [];\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) selectedMeshes.push(object);\n    }\n    for (let i = 0; i < this.selectedObjects.length; i++) {\n      const selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n    function VisibilityChangeCallBack(object) {\n      if (object.isMesh || object.isSprite) {\n        // only meshes and sprites are supported by OutlinePass\n        let bFound = false;\n        for (let i = 0; i < selectedMeshes.length; i++) {\n          const selectedObjectId = selectedMeshes[i].id;\n          if (selectedObjectId === object.id) {\n            bFound = true;\n            break;\n          }\n        }\n        if (bFound === false) {\n          const visibility = object.visible;\n          if (bVisible === false || cache.get(object) === true) {\n            object.visible = bVisible;\n          }\n          cache.set(object, visibility);\n        }\n      } else if (object.isPoints || object.isLine) {\n        // the visibilty of points and lines is always set to false in order to\n        // not affect the outline computation\n        if (bVisible === true) {\n          object.visible = cache.get(object); // restore\n        } else {\n          cache.set(object, object.visible);\n          object.visible = bVisible;\n        }\n      }\n    }\n    this.renderScene.traverse(VisibilityChangeCallBack);\n  }\n  updateTextureMatrix() {\n    this.textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    this.textureMatrix.multiply(this.renderCamera.projectionMatrix);\n    this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (this.selectedObjects.length > 0) {\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      const oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      if (maskActive) renderer.state.buffers.stencil.setTest(false);\n      renderer.setClearColor(0xffffff, 1); // Make selected objects invisible\n\n      this.changeVisibilityOfSelectedObjects(false);\n      const currentBackground = this.renderScene.background;\n      this.renderScene.background = null; // 1. Draw Non Selected objects in the depth buffer\n\n      this.renderScene.overrideMaterial = this.depthMaterial;\n      renderer.setRenderTarget(this.renderTargetDepthBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera); // Make selected objects visible\n\n      this.changeVisibilityOfSelectedObjects(true);\n      this._visibilityCache.clear(); // Update Texture Matrix for Depth compare\n\n      this.updateTextureMatrix(); // Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\n\n      this.changeVisibilityOfNonSelectedObjects(false);\n      this.renderScene.overrideMaterial = this.prepareMaskMaterial;\n      this.prepareMaskMaterial.uniforms['cameraNearFar'].value.set(this.renderCamera.near, this.renderCamera.far);\n      this.prepareMaskMaterial.uniforms['depthTexture'].value = this.renderTargetDepthBuffer.texture;\n      this.prepareMaskMaterial.uniforms['textureMatrix'].value = this.textureMatrix;\n      renderer.setRenderTarget(this.renderTargetMaskBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera);\n      this.renderScene.overrideMaterial = null;\n      this.changeVisibilityOfNonSelectedObjects(true);\n      this._visibilityCache.clear();\n      this.renderScene.background = currentBackground; // 2. Downsample to Half resolution\n\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms['tDiffuse'].value = this.renderTargetMaskBuffer.texture;\n      renderer.setRenderTarget(this.renderTargetMaskDownSampleBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.tempPulseColor1.copy(this.visibleEdgeColor);\n      this.tempPulseColor2.copy(this.hiddenEdgeColor);\n      if (this.pulsePeriod > 0) {\n        const scalar = (1 + 0.25) / 2 + Math.cos(performance.now() * 0.01 / this.pulsePeriod) * (1.0 - 0.25) / 2;\n        this.tempPulseColor1.multiplyScalar(scalar);\n        this.tempPulseColor2.multiplyScalar(scalar);\n      } // 3. Apply Edge Detection Pass\n\n      this.fsQuad.material = this.edgeDetectionMaterial;\n      this.edgeDetectionMaterial.uniforms['maskTexture'].value = this.renderTargetMaskDownSampleBuffer.texture;\n      this.edgeDetectionMaterial.uniforms['texSize'].value.set(this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height);\n      this.edgeDetectionMaterial.uniforms['visibleEdgeColor'].value = this.tempPulseColor1;\n      this.edgeDetectionMaterial.uniforms['hiddenEdgeColor'].value = this.tempPulseColor2;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer); // 4. Apply Blur on Half res\n\n      this.fsQuad.material = this.separableBlurMaterial1;\n      this.separableBlurMaterial1.uniforms['colorTexture'].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial1.uniforms['direction'].value = this.BlurDirectionX;\n      this.separableBlurMaterial1.uniforms['kernelRadius'].value = this.edgeThickness;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial1.uniforms['colorTexture'].value = this.renderTargetBlurBuffer1.texture;\n      this.separableBlurMaterial1.uniforms['direction'].value = this.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Apply Blur on quarter res\n\n      this.fsQuad.material = this.separableBlurMaterial2;\n      this.separableBlurMaterial2.uniforms['colorTexture'].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial2.uniforms['direction'].value = this.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial2.uniforms['colorTexture'].value = this.renderTargetBlurBuffer2.texture;\n      this.separableBlurMaterial2.uniforms['direction'].value = this.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Blend it additively over the input texture\n\n      this.fsQuad.material = this.overlayMaterial;\n      this.overlayMaterial.uniforms['maskTexture'].value = this.renderTargetMaskBuffer.texture;\n      this.overlayMaterial.uniforms['edgeTexture1'].value = this.renderTargetEdgeBuffer1.texture;\n      this.overlayMaterial.uniforms['edgeTexture2'].value = this.renderTargetEdgeBuffer2.texture;\n      this.overlayMaterial.uniforms['patternTexture'].value = this.patternTexture;\n      this.overlayMaterial.uniforms['edgeStrength'].value = this.edgeStrength;\n      this.overlayMaterial.uniforms['edgeGlow'].value = this.edgeGlow;\n      this.overlayMaterial.uniforms['usePatternTexture'].value = this.usePatternTexture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      renderer.setRenderTarget(readBuffer);\n      this.fsQuad.render(renderer);\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms['tDiffuse'].value = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    }\n  }\n  getPrepareMaskMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        depthTexture: {\n          value: null\n        },\n        cameraNearFar: {\n          value: new Vector2(0.5, 0.5)\n        },\n        textureMatrix: {\n          value: null\n        }\n      },\n      vertexShader: `#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tvoid main() {\n\t\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <morphtarget_vertex>\n\t\t\t\t\t#include <skinning_vertex>\n\t\t\t\t\t#include <project_vertex>\n\t\t\t\t\tvPosition = mvPosition;\n\t\t\t\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t\t\t\t\tprojTexCoord = textureMatrix * worldPosition;\n\t\t\t\t}`,\n      fragmentShader: `#include <packing>\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tuniform sampler2D depthTexture;\n\t\t\t\tuniform vec2 cameraNearFar;\n\t\t\t\tvoid main() {\n\t\t\t\t\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\n\t\t\t\t\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\n\t\t\t\t\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\n\t\t\t\t\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\n\t\t\t\t}`\n    });\n  }\n  getEdgeDetectionMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        maskTexture: {\n          value: null\n        },\n        texSize: {\n          value: new Vector2(0.5, 0.5)\n        },\n        visibleEdgeColor: {\n          value: new Vector3(1.0, 1.0, 1.0)\n        },\n        hiddenEdgeColor: {\n          value: new Vector3(1.0, 1.0, 1.0)\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec3 visibleEdgeColor;\n\t\t\t\tuniform vec3 hiddenEdgeColor;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\n\t\t\t\t}`\n    });\n  }\n  getSeperableBlurMaterial(maxRadius) {\n    return new ShaderMaterial({\n      defines: {\n        MAX_RADIUS: maxRadius\n      },\n      uniforms: {\n        colorTexture: {\n          value: null\n        },\n        texSize: {\n          value: new Vector2(0.5, 0.5)\n        },\n        direction: {\n          value: new Vector2(0.5, 0.5)\n        },\n        kernelRadius: {\n          value: 1.0\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float kernelRadius;\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\n\t\t\t\t\tvec2 uvOffset = delta;\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\n\t\t\t\t\t\tweightSum += (2.0 * w);\n\t\t\t\t\t\tuvOffset += delta;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\n\t\t\t\t}`\n    });\n  }\n  getOverlayMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        maskTexture: {\n          value: null\n        },\n        edgeTexture1: {\n          value: null\n        },\n        edgeTexture2: {\n          value: null\n        },\n        patternTexture: {\n          value: null\n        },\n        edgeStrength: {\n          value: 1.0\n        },\n        edgeGlow: {\n          value: 1.0\n        },\n        usePatternTexture: {\n          value: 0.0\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform sampler2D edgeTexture1;\n\t\t\t\tuniform sampler2D edgeTexture2;\n\t\t\t\tuniform sampler2D patternTexture;\n\t\t\t\tuniform float edgeStrength;\n\t\t\t\tuniform float edgeGlow;\n\t\t\t\tuniform bool usePatternTexture;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\n\t\t\t\t\tif(usePatternTexture)\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\n\t\t\t\t\tgl_FragColor = finalColor;\n\t\t\t\t}`,\n      blending: AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n  }\n}\nexport { OutlinePass };","map":{"version":3,"names":["_defineProperty","Pass","FullScreenQuad","Vector2","Color","WebGLRenderTarget","MeshDepthMaterial","DoubleSide","RGBADepthPacking","NoBlending","UniformsUtils","ShaderMaterial","Matrix4","Vector3","AdditiveBlending","CopyShader","OutlinePass","constructor","resolution","scene","camera","selectedObjects","renderScene","renderCamera","undefined","visibleEdgeColor","hiddenEdgeColor","edgeGlow","usePatternTexture","edgeThickness","edgeStrength","downSampleRatio","pulsePeriod","_visibilityCache","Map","x","y","resx","Math","round","resy","renderTargetMaskBuffer","texture","name","generateMipmaps","depthMaterial","side","depthPacking","blending","prepareMaskMaterial","getPrepareMaskMaterial","fragmentShader","replaceDepthToViewZ","renderTargetDepthBuffer","renderTargetMaskDownSampleBuffer","renderTargetBlurBuffer1","renderTargetBlurBuffer2","edgeDetectionMaterial","getEdgeDetectionMaterial","renderTargetEdgeBuffer1","renderTargetEdgeBuffer2","MAX_EDGE_THICKNESS","MAX_EDGE_GLOW","separableBlurMaterial1","getSeperableBlurMaterial","uniforms","value","set","separableBlurMaterial2","overlayMaterial","getOverlayMaterial","console","error","copyShader","copyUniforms","clone","materialCopy","vertexShader","depthTest","depthWrite","transparent","enabled","needsSwap","_oldClearColor","oldClearAlpha","fsQuad","tempPulseColor1","tempPulseColor2","textureMatrix","string","type","isPerspectiveCamera","replace","dispose","setSize","width","height","changeVisibilityOfSelectedObjects","bVisible","cache","gatherSelectedMeshesCallBack","object","isMesh","visible","get","i","length","selectedObject","traverse","changeVisibilityOfNonSelectedObjects","selectedMeshes","push","VisibilityChangeCallBack","isSprite","bFound","selectedObjectId","id","visibility","isPoints","isLine","updateTextureMatrix","multiply","projectionMatrix","matrixWorldInverse","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","getClearColor","getClearAlpha","oldAutoClear","autoClear","state","buffers","stencil","setTest","setClearColor","currentBackground","background","overrideMaterial","setRenderTarget","clear","near","far","material","copy","scalar","cos","performance","now","multiplyScalar","BlurDirectionX","BlurDirectionY","patternTexture","renderToScreen","depthTexture","cameraNearFar","maskTexture","texSize","maxRadius","defines","MAX_RADIUS","colorTexture","direction","kernelRadius","edgeTexture1","edgeTexture2"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/postprocessing/OutlinePass.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { Vector2, Color, WebGLRenderTarget, MeshDepthMaterial, DoubleSide, RGBADepthPacking, NoBlending, UniformsUtils, ShaderMaterial, Matrix4, Vector3, AdditiveBlending } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass OutlinePass extends Pass {\n  constructor(resolution, scene, camera, selectedObjects) {\n    super();\n\n    _defineProperty(this, \"renderScene\", void 0);\n\n    _defineProperty(this, \"renderCamera\", void 0);\n\n    _defineProperty(this, \"selectedObjects\", void 0);\n\n    _defineProperty(this, \"visibleEdgeColor\", void 0);\n\n    _defineProperty(this, \"hiddenEdgeColor\", void 0);\n\n    _defineProperty(this, \"edgeGlow\", void 0);\n\n    _defineProperty(this, \"usePatternTexture\", void 0);\n\n    _defineProperty(this, \"edgeThickness\", void 0);\n\n    _defineProperty(this, \"edgeStrength\", void 0);\n\n    _defineProperty(this, \"downSampleRatio\", void 0);\n\n    _defineProperty(this, \"pulsePeriod\", void 0);\n\n    _defineProperty(this, \"resolution\", void 0);\n\n    _defineProperty(this, \"renderTargetMaskBuffer\", void 0);\n\n    _defineProperty(this, \"depthMaterial\", void 0);\n\n    _defineProperty(this, \"prepareMaskMaterial\", void 0);\n\n    _defineProperty(this, \"renderTargetDepthBuffer\", void 0);\n\n    _defineProperty(this, \"renderTargetMaskDownSampleBuffer\", void 0);\n\n    _defineProperty(this, \"renderTargetBlurBuffer1\", void 0);\n\n    _defineProperty(this, \"renderTargetBlurBuffer2\", void 0);\n\n    _defineProperty(this, \"edgeDetectionMaterial\", void 0);\n\n    _defineProperty(this, \"renderTargetEdgeBuffer1\", void 0);\n\n    _defineProperty(this, \"renderTargetEdgeBuffer2\", void 0);\n\n    _defineProperty(this, \"separableBlurMaterial1\", void 0);\n\n    _defineProperty(this, \"separableBlurMaterial2\", void 0);\n\n    _defineProperty(this, \"overlayMaterial\", void 0);\n\n    _defineProperty(this, \"materialCopy\", void 0);\n\n    _defineProperty(this, \"oldClearAlpha\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"tempPulseColor1\", void 0);\n\n    _defineProperty(this, \"tempPulseColor2\", void 0);\n\n    _defineProperty(this, \"textureMatrix\", void 0);\n\n    _defineProperty(this, \"patternTexture\", void 0);\n\n    _defineProperty(this, \"_visibilityCache\", void 0);\n\n    _defineProperty(this, \"_oldClearColor\", void 0);\n\n    _defineProperty(this, \"copyUniforms\", void 0);\n\n    _defineProperty(this, \"BlurDirectionX\", new Vector2(1.0, 0.0));\n\n    _defineProperty(this, \"BlurDirectionY\", new Vector2(0.0, 1.0));\n\n    this.renderScene = scene;\n    this.renderCamera = camera;\n    this.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\n    this.visibleEdgeColor = new Color(1, 1, 1);\n    this.hiddenEdgeColor = new Color(0.1, 0.04, 0.02);\n    this.edgeGlow = 0.0;\n    this.usePatternTexture = false;\n    this.edgeThickness = 1.0;\n    this.edgeStrength = 3.0;\n    this.downSampleRatio = 2;\n    this.pulsePeriod = 0;\n    this._visibilityCache = new Map();\n    this.resolution = resolution !== undefined ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n    const resx = Math.round(this.resolution.x / this.downSampleRatio);\n    const resy = Math.round(this.resolution.y / this.downSampleRatio);\n    this.renderTargetMaskBuffer = new WebGLRenderTarget(this.resolution.x, this.resolution.y);\n    this.renderTargetMaskBuffer.texture.name = 'OutlinePass.mask';\n    this.renderTargetMaskBuffer.texture.generateMipmaps = false;\n    this.depthMaterial = new MeshDepthMaterial();\n    this.depthMaterial.side = DoubleSide;\n    this.depthMaterial.depthPacking = RGBADepthPacking;\n    this.depthMaterial.blending = NoBlending;\n    this.prepareMaskMaterial = this.getPrepareMaskMaterial();\n    this.prepareMaskMaterial.side = DoubleSide;\n    this.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ(this.prepareMaskMaterial.fragmentShader, this.renderCamera);\n    this.renderTargetDepthBuffer = new WebGLRenderTarget(this.resolution.x, this.resolution.y);\n    this.renderTargetDepthBuffer.texture.name = 'OutlinePass.depth';\n    this.renderTargetDepthBuffer.texture.generateMipmaps = false;\n    this.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget(resx, resy);\n    this.renderTargetMaskDownSampleBuffer.texture.name = 'OutlinePass.depthDownSample';\n    this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n    this.renderTargetBlurBuffer1 = new WebGLRenderTarget(resx, resy);\n    this.renderTargetBlurBuffer1.texture.name = 'OutlinePass.blur1';\n    this.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n    this.renderTargetBlurBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2));\n    this.renderTargetBlurBuffer2.texture.name = 'OutlinePass.blur2';\n    this.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n    this.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\n    this.renderTargetEdgeBuffer1 = new WebGLRenderTarget(resx, resy);\n    this.renderTargetEdgeBuffer1.texture.name = 'OutlinePass.edge1';\n    this.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n    this.renderTargetEdgeBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2));\n    this.renderTargetEdgeBuffer2.texture.name = 'OutlinePass.edge2';\n    this.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n    const MAX_EDGE_THICKNESS = 4;\n    const MAX_EDGE_GLOW = 4;\n    this.separableBlurMaterial1 = this.getSeperableBlurMaterial(MAX_EDGE_THICKNESS);\n    this.separableBlurMaterial1.uniforms['texSize'].value.set(resx, resy);\n    this.separableBlurMaterial1.uniforms['kernelRadius'].value = 1;\n    this.separableBlurMaterial2 = this.getSeperableBlurMaterial(MAX_EDGE_GLOW);\n    this.separableBlurMaterial2.uniforms['texSize'].value.set(Math.round(resx / 2), Math.round(resy / 2));\n    this.separableBlurMaterial2.uniforms['kernelRadius'].value = MAX_EDGE_GLOW; // Overlay material\n\n    this.overlayMaterial = this.getOverlayMaterial(); // copy material\n\n    if (CopyShader === undefined) console.error('THREE.OutlinePass relies on CopyShader');\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.copyUniforms['opacity'].value = 1.0;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: NoBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.enabled = true;\n    this.needsSwap = false;\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.fsQuad = new FullScreenQuad(this.materialCopy);\n    this.tempPulseColor1 = new Color();\n    this.tempPulseColor2 = new Color();\n    this.textureMatrix = new Matrix4();\n\n    function replaceDepthToViewZ(string, camera) {\n      const type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\n      return string.replace(/DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ');\n    }\n  }\n\n  dispose() {\n    this.renderTargetMaskBuffer.dispose();\n    this.renderTargetDepthBuffer.dispose();\n    this.renderTargetMaskDownSampleBuffer.dispose();\n    this.renderTargetBlurBuffer1.dispose();\n    this.renderTargetBlurBuffer2.dispose();\n    this.renderTargetEdgeBuffer1.dispose();\n    this.renderTargetEdgeBuffer2.dispose();\n  }\n\n  setSize(width, height) {\n    this.renderTargetMaskBuffer.setSize(width, height);\n    this.renderTargetDepthBuffer.setSize(width, height);\n    let resx = Math.round(width / this.downSampleRatio);\n    let resy = Math.round(height / this.downSampleRatio);\n    this.renderTargetMaskDownSampleBuffer.setSize(resx, resy);\n    this.renderTargetBlurBuffer1.setSize(resx, resy);\n    this.renderTargetEdgeBuffer1.setSize(resx, resy);\n    this.separableBlurMaterial1.uniforms['texSize'].value.set(resx, resy);\n    resx = Math.round(resx / 2);\n    resy = Math.round(resy / 2);\n    this.renderTargetBlurBuffer2.setSize(resx, resy);\n    this.renderTargetEdgeBuffer2.setSize(resx, resy);\n    this.separableBlurMaterial2.uniforms['texSize'].value.set(resx, resy);\n  }\n\n  changeVisibilityOfSelectedObjects(bVisible) {\n    const cache = this._visibilityCache;\n\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) {\n        if (bVisible === true) {\n          object.visible = cache.get(object);\n        } else {\n          cache.set(object, object.visible);\n          object.visible = bVisible;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.selectedObjects.length; i++) {\n      const selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n  }\n\n  changeVisibilityOfNonSelectedObjects(bVisible) {\n    const cache = this._visibilityCache;\n    const selectedMeshes = [];\n\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) selectedMeshes.push(object);\n    }\n\n    for (let i = 0; i < this.selectedObjects.length; i++) {\n      const selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n\n    function VisibilityChangeCallBack(object) {\n      if (object.isMesh || object.isSprite) {\n        // only meshes and sprites are supported by OutlinePass\n        let bFound = false;\n\n        for (let i = 0; i < selectedMeshes.length; i++) {\n          const selectedObjectId = selectedMeshes[i].id;\n\n          if (selectedObjectId === object.id) {\n            bFound = true;\n            break;\n          }\n        }\n\n        if (bFound === false) {\n          const visibility = object.visible;\n\n          if (bVisible === false || cache.get(object) === true) {\n            object.visible = bVisible;\n          }\n\n          cache.set(object, visibility);\n        }\n      } else if (object.isPoints || object.isLine) {\n        // the visibilty of points and lines is always set to false in order to\n        // not affect the outline computation\n        if (bVisible === true) {\n          object.visible = cache.get(object); // restore\n        } else {\n          cache.set(object, object.visible);\n          object.visible = bVisible;\n        }\n      }\n    }\n\n    this.renderScene.traverse(VisibilityChangeCallBack);\n  }\n\n  updateTextureMatrix() {\n    this.textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    this.textureMatrix.multiply(this.renderCamera.projectionMatrix);\n    this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse);\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (this.selectedObjects.length > 0) {\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      const oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      if (maskActive) renderer.state.buffers.stencil.setTest(false);\n      renderer.setClearColor(0xffffff, 1); // Make selected objects invisible\n\n      this.changeVisibilityOfSelectedObjects(false);\n      const currentBackground = this.renderScene.background;\n      this.renderScene.background = null; // 1. Draw Non Selected objects in the depth buffer\n\n      this.renderScene.overrideMaterial = this.depthMaterial;\n      renderer.setRenderTarget(this.renderTargetDepthBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera); // Make selected objects visible\n\n      this.changeVisibilityOfSelectedObjects(true);\n\n      this._visibilityCache.clear(); // Update Texture Matrix for Depth compare\n\n\n      this.updateTextureMatrix(); // Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\n\n      this.changeVisibilityOfNonSelectedObjects(false);\n      this.renderScene.overrideMaterial = this.prepareMaskMaterial;\n      this.prepareMaskMaterial.uniforms['cameraNearFar'].value.set(this.renderCamera.near, this.renderCamera.far);\n      this.prepareMaskMaterial.uniforms['depthTexture'].value = this.renderTargetDepthBuffer.texture;\n      this.prepareMaskMaterial.uniforms['textureMatrix'].value = this.textureMatrix;\n      renderer.setRenderTarget(this.renderTargetMaskBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera);\n      this.renderScene.overrideMaterial = null;\n      this.changeVisibilityOfNonSelectedObjects(true);\n\n      this._visibilityCache.clear();\n\n      this.renderScene.background = currentBackground; // 2. Downsample to Half resolution\n\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms['tDiffuse'].value = this.renderTargetMaskBuffer.texture;\n      renderer.setRenderTarget(this.renderTargetMaskDownSampleBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.tempPulseColor1.copy(this.visibleEdgeColor);\n      this.tempPulseColor2.copy(this.hiddenEdgeColor);\n\n      if (this.pulsePeriod > 0) {\n        const scalar = (1 + 0.25) / 2 + Math.cos(performance.now() * 0.01 / this.pulsePeriod) * (1.0 - 0.25) / 2;\n        this.tempPulseColor1.multiplyScalar(scalar);\n        this.tempPulseColor2.multiplyScalar(scalar);\n      } // 3. Apply Edge Detection Pass\n\n\n      this.fsQuad.material = this.edgeDetectionMaterial;\n      this.edgeDetectionMaterial.uniforms['maskTexture'].value = this.renderTargetMaskDownSampleBuffer.texture;\n      this.edgeDetectionMaterial.uniforms['texSize'].value.set(this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height);\n      this.edgeDetectionMaterial.uniforms['visibleEdgeColor'].value = this.tempPulseColor1;\n      this.edgeDetectionMaterial.uniforms['hiddenEdgeColor'].value = this.tempPulseColor2;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer); // 4. Apply Blur on Half res\n\n      this.fsQuad.material = this.separableBlurMaterial1;\n      this.separableBlurMaterial1.uniforms['colorTexture'].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial1.uniforms['direction'].value = this.BlurDirectionX;\n      this.separableBlurMaterial1.uniforms['kernelRadius'].value = this.edgeThickness;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial1.uniforms['colorTexture'].value = this.renderTargetBlurBuffer1.texture;\n      this.separableBlurMaterial1.uniforms['direction'].value = this.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Apply Blur on quarter res\n\n      this.fsQuad.material = this.separableBlurMaterial2;\n      this.separableBlurMaterial2.uniforms['colorTexture'].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial2.uniforms['direction'].value = this.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial2.uniforms['colorTexture'].value = this.renderTargetBlurBuffer2.texture;\n      this.separableBlurMaterial2.uniforms['direction'].value = this.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Blend it additively over the input texture\n\n      this.fsQuad.material = this.overlayMaterial;\n      this.overlayMaterial.uniforms['maskTexture'].value = this.renderTargetMaskBuffer.texture;\n      this.overlayMaterial.uniforms['edgeTexture1'].value = this.renderTargetEdgeBuffer1.texture;\n      this.overlayMaterial.uniforms['edgeTexture2'].value = this.renderTargetEdgeBuffer2.texture;\n      this.overlayMaterial.uniforms['patternTexture'].value = this.patternTexture;\n      this.overlayMaterial.uniforms['edgeStrength'].value = this.edgeStrength;\n      this.overlayMaterial.uniforms['edgeGlow'].value = this.edgeGlow;\n      this.overlayMaterial.uniforms['usePatternTexture'].value = this.usePatternTexture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      renderer.setRenderTarget(readBuffer);\n      this.fsQuad.render(renderer);\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms['tDiffuse'].value = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    }\n  }\n\n  getPrepareMaskMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        depthTexture: {\n          value: null\n        },\n        cameraNearFar: {\n          value: new Vector2(0.5, 0.5)\n        },\n        textureMatrix: {\n          value: null\n        }\n      },\n      vertexShader: `#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tvoid main() {\n\t\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <morphtarget_vertex>\n\t\t\t\t\t#include <skinning_vertex>\n\t\t\t\t\t#include <project_vertex>\n\t\t\t\t\tvPosition = mvPosition;\n\t\t\t\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t\t\t\t\tprojTexCoord = textureMatrix * worldPosition;\n\t\t\t\t}`,\n      fragmentShader: `#include <packing>\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tuniform sampler2D depthTexture;\n\t\t\t\tuniform vec2 cameraNearFar;\n\t\t\t\tvoid main() {\n\t\t\t\t\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\n\t\t\t\t\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\n\t\t\t\t\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\n\t\t\t\t\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\n\t\t\t\t}`\n    });\n  }\n\n  getEdgeDetectionMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        maskTexture: {\n          value: null\n        },\n        texSize: {\n          value: new Vector2(0.5, 0.5)\n        },\n        visibleEdgeColor: {\n          value: new Vector3(1.0, 1.0, 1.0)\n        },\n        hiddenEdgeColor: {\n          value: new Vector3(1.0, 1.0, 1.0)\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec3 visibleEdgeColor;\n\t\t\t\tuniform vec3 hiddenEdgeColor;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\n\t\t\t\t}`\n    });\n  }\n\n  getSeperableBlurMaterial(maxRadius) {\n    return new ShaderMaterial({\n      defines: {\n        MAX_RADIUS: maxRadius\n      },\n      uniforms: {\n        colorTexture: {\n          value: null\n        },\n        texSize: {\n          value: new Vector2(0.5, 0.5)\n        },\n        direction: {\n          value: new Vector2(0.5, 0.5)\n        },\n        kernelRadius: {\n          value: 1.0\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float kernelRadius;\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\n\t\t\t\t\tvec2 uvOffset = delta;\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\n\t\t\t\t\t\tweightSum += (2.0 * w);\n\t\t\t\t\t\tuvOffset += delta;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\n\t\t\t\t}`\n    });\n  }\n\n  getOverlayMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        maskTexture: {\n          value: null\n        },\n        edgeTexture1: {\n          value: null\n        },\n        edgeTexture2: {\n          value: null\n        },\n        patternTexture: {\n          value: null\n        },\n        edgeStrength: {\n          value: 1.0\n        },\n        edgeGlow: {\n          value: 1.0\n        },\n        usePatternTexture: {\n          value: 0.0\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform sampler2D edgeTexture1;\n\t\t\t\tuniform sampler2D edgeTexture2;\n\t\t\t\tuniform sampler2D patternTexture;\n\t\t\t\tuniform float edgeStrength;\n\t\t\t\tuniform float edgeGlow;\n\t\t\t\tuniform bool usePatternTexture;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\n\t\t\t\t\tif(usePatternTexture)\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\n\t\t\t\t\tgl_FragColor = finalColor;\n\t\t\t\t}`,\n      blending: AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n  }\n\n}\n\nexport { OutlinePass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}