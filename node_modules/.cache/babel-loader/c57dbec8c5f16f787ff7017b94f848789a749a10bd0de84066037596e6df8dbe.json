{"ast":null,"code":"import { Matrix4, Vector3, Box3, DirectionalLight, MathUtils, ShaderChunk, Vector2 } from 'three';\nimport { CSMFrustum } from './CSMFrustum.js';\nimport { CSMShader } from './CSMShader.js';\nconst _cameraToLightMatrix = new Matrix4();\nconst _lightSpaceFrustum = new CSMFrustum();\nconst _center = new Vector3();\nconst _bbox = new Box3();\nconst _uniformArray = [];\nconst _logArray = [];\nclass CSM {\n  constructor(data) {\n    data = data || {};\n    this.camera = data.camera;\n    this.parent = data.parent;\n    this.cascades = data.cascades || 3;\n    this.maxFar = data.maxFar || 100000;\n    this.mode = data.mode || 'practical';\n    this.shadowMapSize = data.shadowMapSize || 2048;\n    this.shadowBias = data.shadowBias || 0.000001;\n    this.lightDirection = data.lightDirection || new Vector3(1, -1, 1).normalize();\n    this.lightIntensity = data.lightIntensity || 1;\n    this.lightNear = data.lightNear || 1;\n    this.lightFar = data.lightFar || 2000;\n    this.lightMargin = data.lightMargin || 200;\n    this.customSplitsCallback = data.customSplitsCallback;\n    this.fade = false;\n    this.mainFrustum = new CSMFrustum();\n    this.frustums = [];\n    this.breaks = [];\n    this.lights = [];\n    this.shaders = new Map();\n    this.createLights();\n    this.updateFrustums();\n    this.injectInclude();\n  }\n  createLights() {\n    for (let i = 0; i < this.cascades; i++) {\n      const light = new DirectionalLight(0xffffff, this.lightIntensity);\n      light.castShadow = true;\n      light.shadow.mapSize.width = this.shadowMapSize;\n      light.shadow.mapSize.height = this.shadowMapSize;\n      light.shadow.camera.near = this.lightNear;\n      light.shadow.camera.far = this.lightFar;\n      light.shadow.bias = this.shadowBias;\n      this.parent.add(light);\n      this.parent.add(light.target);\n      this.lights.push(light);\n    }\n  }\n  initCascades() {\n    const camera = this.camera;\n    camera.updateProjectionMatrix();\n    this.mainFrustum.setFromProjectionMatrix(camera.projectionMatrix, this.maxFar);\n    this.mainFrustum.split(this.breaks, this.frustums);\n  }\n  updateShadowBounds() {\n    const frustums = this.frustums;\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const frustum = this.frustums[i]; // Get the two points that represent that furthest points on the frustum assuming\n      // that's either the diagonal across the far plane or the diagonal across the whole\n      // frustum itself.\n\n      const nearVerts = frustum.vertices.near;\n      const farVerts = frustum.vertices.far;\n      const point1 = farVerts[0];\n      let point2;\n      if (point1.distanceTo(farVerts[2]) > point1.distanceTo(nearVerts[2])) {\n        point2 = farVerts[2];\n      } else {\n        point2 = nearVerts[2];\n      }\n      let squaredBBWidth = point1.distanceTo(point2);\n      if (this.fade) {\n        // expand the shadow extents by the fade margin if fade is enabled.\n        const camera = this.camera;\n        const far = Math.max(camera.far, this.maxFar);\n        const linearDepth = frustum.vertices.far[0].z / (far - camera.near);\n        const margin = 0.25 * Math.pow(linearDepth, 2.0) * (far - camera.near);\n        squaredBBWidth += margin;\n      }\n      shadowCam.left = -squaredBBWidth / 2;\n      shadowCam.right = squaredBBWidth / 2;\n      shadowCam.top = squaredBBWidth / 2;\n      shadowCam.bottom = -squaredBBWidth / 2;\n      shadowCam.updateProjectionMatrix();\n    }\n  }\n  getBreaks() {\n    const camera = this.camera;\n    const far = Math.min(camera.far, this.maxFar);\n    this.breaks.length = 0;\n    switch (this.mode) {\n      case 'uniform':\n        uniformSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n      case 'logarithmic':\n        logarithmicSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n      case 'practical':\n        practicalSplit(this.cascades, camera.near, far, 0.5, this.breaks);\n        break;\n      case 'custom':\n        if (this.customSplitsCallback === undefined) console.error('CSM: Custom split scheme callback not defined.');\n        this.customSplitsCallback(this.cascades, camera.near, far, this.breaks);\n        break;\n    }\n    function uniformSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push((near + (far - near) * i / amount) / far);\n      }\n      target.push(1);\n    }\n    function logarithmicSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push(near * (far / near) ** (i / amount) / far);\n      }\n      target.push(1);\n    }\n    function practicalSplit(amount, near, far, lambda, target) {\n      _uniformArray.length = 0;\n      _logArray.length = 0;\n      logarithmicSplit(amount, near, far, _logArray);\n      uniformSplit(amount, near, far, _uniformArray);\n      for (let i = 1; i < amount; i++) {\n        target.push(MathUtils.lerp(_uniformArray[i - 1], _logArray[i - 1], lambda));\n      }\n      target.push(1);\n    }\n  }\n  update() {\n    const camera = this.camera;\n    const frustums = this.frustums;\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const texelWidth = (shadowCam.right - shadowCam.left) / this.shadowMapSize;\n      const texelHeight = (shadowCam.top - shadowCam.bottom) / this.shadowMapSize;\n      light.shadow.camera.updateMatrixWorld(true);\n      _cameraToLightMatrix.multiplyMatrices(light.shadow.camera.matrixWorldInverse, camera.matrixWorld);\n      frustums[i].toSpace(_cameraToLightMatrix, _lightSpaceFrustum);\n      const nearVerts = _lightSpaceFrustum.vertices.near;\n      const farVerts = _lightSpaceFrustum.vertices.far;\n      _bbox.makeEmpty();\n      for (let j = 0; j < 4; j++) {\n        _bbox.expandByPoint(nearVerts[j]);\n        _bbox.expandByPoint(farVerts[j]);\n      }\n      _bbox.getCenter(_center);\n      _center.z = _bbox.max.z + this.lightMargin;\n      _center.x = Math.floor(_center.x / texelWidth) * texelWidth;\n      _center.y = Math.floor(_center.y / texelHeight) * texelHeight;\n      _center.applyMatrix4(light.shadow.camera.matrixWorld);\n      light.position.copy(_center);\n      light.target.position.copy(_center);\n      light.target.position.x += this.lightDirection.x;\n      light.target.position.y += this.lightDirection.y;\n      light.target.position.z += this.lightDirection.z;\n    }\n  }\n  injectInclude() {\n    ShaderChunk.lights_fragment_begin = CSMShader.lights_fragment_begin;\n    ShaderChunk.lights_pars_begin = CSMShader.lights_pars_begin;\n  }\n  setupMaterial(material) {\n    material.defines = material.defines || {};\n    material.defines.USE_CSM = 1;\n    material.defines.CSM_CASCADES = this.cascades;\n    if (this.fade) {\n      material.defines.CSM_FADE = '';\n    }\n    const breaksVec2 = [];\n    const scope = this;\n    const shaders = this.shaders;\n    material.onBeforeCompile = function (shader) {\n      const far = Math.min(scope.camera.far, scope.maxFar);\n      scope.getExtendedBreaks(breaksVec2);\n      shader.uniforms.CSM_cascades = {\n        value: breaksVec2\n      };\n      shader.uniforms.cameraNear = {\n        value: scope.camera.near\n      };\n      shader.uniforms.shadowFar = {\n        value: far\n      };\n      shaders.set(material, shader);\n    };\n    shaders.set(material, null);\n  }\n  updateUniforms() {\n    const far = Math.min(this.camera.far, this.maxFar);\n    const shaders = this.shaders;\n    shaders.forEach(function (shader, material) {\n      if (shader !== null) {\n        const uniforms = shader.uniforms;\n        this.getExtendedBreaks(uniforms.CSM_cascades.value);\n        uniforms.cameraNear.value = this.camera.near;\n        uniforms.shadowFar.value = far;\n      }\n      if (!this.fade && 'CSM_FADE' in material.defines) {\n        delete material.defines.CSM_FADE;\n        material.needsUpdate = true;\n      } else if (this.fade && !('CSM_FADE' in material.defines)) {\n        material.defines.CSM_FADE = '';\n        material.needsUpdate = true;\n      }\n    }, this);\n  }\n  getExtendedBreaks(target) {\n    while (target.length < this.breaks.length) {\n      target.push(new Vector2());\n    }\n    target.length = this.breaks.length;\n    for (let i = 0; i < this.cascades; i++) {\n      const amount = this.breaks[i];\n      const prev = this.breaks[i - 1] || 0;\n      target[i].x = prev;\n      target[i].y = amount;\n    }\n  }\n  updateFrustums() {\n    this.getBreaks();\n    this.initCascades();\n    this.updateShadowBounds();\n    this.updateUniforms();\n  }\n  remove() {\n    for (let i = 0; i < this.lights.length; i++) {\n      this.parent.remove(this.lights[i]);\n    }\n  }\n  dispose() {\n    const shaders = this.shaders;\n    shaders.forEach(function (shader, material) {\n      delete material.onBeforeCompile;\n      delete material.defines.USE_CSM;\n      delete material.defines.CSM_CASCADES;\n      delete material.defines.CSM_FADE;\n      if (shader !== null) {\n        delete shader.uniforms.CSM_cascades;\n        delete shader.uniforms.cameraNear;\n        delete shader.uniforms.shadowFar;\n      }\n      material.needsUpdate = true;\n    });\n    shaders.clear();\n  }\n}\nexport { CSM };","map":{"version":3,"names":["Matrix4","Vector3","Box3","DirectionalLight","MathUtils","ShaderChunk","Vector2","CSMFrustum","CSMShader","_cameraToLightMatrix","_lightSpaceFrustum","_center","_bbox","_uniformArray","_logArray","CSM","constructor","data","camera","parent","cascades","maxFar","mode","shadowMapSize","shadowBias","lightDirection","normalize","lightIntensity","lightNear","lightFar","lightMargin","customSplitsCallback","fade","mainFrustum","frustums","breaks","lights","shaders","Map","createLights","updateFrustums","injectInclude","i","light","castShadow","shadow","mapSize","width","height","near","far","bias","add","target","push","initCascades","updateProjectionMatrix","setFromProjectionMatrix","projectionMatrix","split","updateShadowBounds","length","shadowCam","frustum","nearVerts","vertices","farVerts","point1","point2","distanceTo","squaredBBWidth","Math","max","linearDepth","z","margin","pow","left","right","top","bottom","getBreaks","min","uniformSplit","logarithmicSplit","practicalSplit","undefined","console","error","amount","lambda","lerp","update","texelWidth","texelHeight","updateMatrixWorld","multiplyMatrices","matrixWorldInverse","matrixWorld","toSpace","makeEmpty","j","expandByPoint","getCenter","x","floor","y","applyMatrix4","position","copy","lights_fragment_begin","lights_pars_begin","setupMaterial","material","defines","USE_CSM","CSM_CASCADES","CSM_FADE","breaksVec2","scope","onBeforeCompile","shader","getExtendedBreaks","uniforms","CSM_cascades","value","cameraNear","shadowFar","set","updateUniforms","forEach","needsUpdate","prev","remove","dispose","clear"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/csm/CSM.js"],"sourcesContent":["import { Matrix4, Vector3, Box3, DirectionalLight, MathUtils, ShaderChunk, Vector2 } from 'three';\nimport { CSMFrustum } from './CSMFrustum.js';\nimport { CSMShader } from './CSMShader.js';\n\nconst _cameraToLightMatrix = new Matrix4();\n\nconst _lightSpaceFrustum = new CSMFrustum();\n\nconst _center = new Vector3();\n\nconst _bbox = new Box3();\n\nconst _uniformArray = [];\nconst _logArray = [];\nclass CSM {\n  constructor(data) {\n    data = data || {};\n    this.camera = data.camera;\n    this.parent = data.parent;\n    this.cascades = data.cascades || 3;\n    this.maxFar = data.maxFar || 100000;\n    this.mode = data.mode || 'practical';\n    this.shadowMapSize = data.shadowMapSize || 2048;\n    this.shadowBias = data.shadowBias || 0.000001;\n    this.lightDirection = data.lightDirection || new Vector3(1, -1, 1).normalize();\n    this.lightIntensity = data.lightIntensity || 1;\n    this.lightNear = data.lightNear || 1;\n    this.lightFar = data.lightFar || 2000;\n    this.lightMargin = data.lightMargin || 200;\n    this.customSplitsCallback = data.customSplitsCallback;\n    this.fade = false;\n    this.mainFrustum = new CSMFrustum();\n    this.frustums = [];\n    this.breaks = [];\n    this.lights = [];\n    this.shaders = new Map();\n    this.createLights();\n    this.updateFrustums();\n    this.injectInclude();\n  }\n\n  createLights() {\n    for (let i = 0; i < this.cascades; i++) {\n      const light = new DirectionalLight(0xffffff, this.lightIntensity);\n      light.castShadow = true;\n      light.shadow.mapSize.width = this.shadowMapSize;\n      light.shadow.mapSize.height = this.shadowMapSize;\n      light.shadow.camera.near = this.lightNear;\n      light.shadow.camera.far = this.lightFar;\n      light.shadow.bias = this.shadowBias;\n      this.parent.add(light);\n      this.parent.add(light.target);\n      this.lights.push(light);\n    }\n  }\n\n  initCascades() {\n    const camera = this.camera;\n    camera.updateProjectionMatrix();\n    this.mainFrustum.setFromProjectionMatrix(camera.projectionMatrix, this.maxFar);\n    this.mainFrustum.split(this.breaks, this.frustums);\n  }\n\n  updateShadowBounds() {\n    const frustums = this.frustums;\n\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const frustum = this.frustums[i]; // Get the two points that represent that furthest points on the frustum assuming\n      // that's either the diagonal across the far plane or the diagonal across the whole\n      // frustum itself.\n\n      const nearVerts = frustum.vertices.near;\n      const farVerts = frustum.vertices.far;\n      const point1 = farVerts[0];\n      let point2;\n\n      if (point1.distanceTo(farVerts[2]) > point1.distanceTo(nearVerts[2])) {\n        point2 = farVerts[2];\n      } else {\n        point2 = nearVerts[2];\n      }\n\n      let squaredBBWidth = point1.distanceTo(point2);\n\n      if (this.fade) {\n        // expand the shadow extents by the fade margin if fade is enabled.\n        const camera = this.camera;\n        const far = Math.max(camera.far, this.maxFar);\n        const linearDepth = frustum.vertices.far[0].z / (far - camera.near);\n        const margin = 0.25 * Math.pow(linearDepth, 2.0) * (far - camera.near);\n        squaredBBWidth += margin;\n      }\n\n      shadowCam.left = -squaredBBWidth / 2;\n      shadowCam.right = squaredBBWidth / 2;\n      shadowCam.top = squaredBBWidth / 2;\n      shadowCam.bottom = -squaredBBWidth / 2;\n      shadowCam.updateProjectionMatrix();\n    }\n  }\n\n  getBreaks() {\n    const camera = this.camera;\n    const far = Math.min(camera.far, this.maxFar);\n    this.breaks.length = 0;\n\n    switch (this.mode) {\n      case 'uniform':\n        uniformSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n\n      case 'logarithmic':\n        logarithmicSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n\n      case 'practical':\n        practicalSplit(this.cascades, camera.near, far, 0.5, this.breaks);\n        break;\n\n      case 'custom':\n        if (this.customSplitsCallback === undefined) console.error('CSM: Custom split scheme callback not defined.');\n        this.customSplitsCallback(this.cascades, camera.near, far, this.breaks);\n        break;\n    }\n\n    function uniformSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push((near + (far - near) * i / amount) / far);\n      }\n\n      target.push(1);\n    }\n\n    function logarithmicSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push(near * (far / near) ** (i / amount) / far);\n      }\n\n      target.push(1);\n    }\n\n    function practicalSplit(amount, near, far, lambda, target) {\n      _uniformArray.length = 0;\n      _logArray.length = 0;\n      logarithmicSplit(amount, near, far, _logArray);\n      uniformSplit(amount, near, far, _uniformArray);\n\n      for (let i = 1; i < amount; i++) {\n        target.push(MathUtils.lerp(_uniformArray[i - 1], _logArray[i - 1], lambda));\n      }\n\n      target.push(1);\n    }\n  }\n\n  update() {\n    const camera = this.camera;\n    const frustums = this.frustums;\n\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const texelWidth = (shadowCam.right - shadowCam.left) / this.shadowMapSize;\n      const texelHeight = (shadowCam.top - shadowCam.bottom) / this.shadowMapSize;\n      light.shadow.camera.updateMatrixWorld(true);\n\n      _cameraToLightMatrix.multiplyMatrices(light.shadow.camera.matrixWorldInverse, camera.matrixWorld);\n\n      frustums[i].toSpace(_cameraToLightMatrix, _lightSpaceFrustum);\n      const nearVerts = _lightSpaceFrustum.vertices.near;\n      const farVerts = _lightSpaceFrustum.vertices.far;\n\n      _bbox.makeEmpty();\n\n      for (let j = 0; j < 4; j++) {\n        _bbox.expandByPoint(nearVerts[j]);\n\n        _bbox.expandByPoint(farVerts[j]);\n      }\n\n      _bbox.getCenter(_center);\n\n      _center.z = _bbox.max.z + this.lightMargin;\n      _center.x = Math.floor(_center.x / texelWidth) * texelWidth;\n      _center.y = Math.floor(_center.y / texelHeight) * texelHeight;\n\n      _center.applyMatrix4(light.shadow.camera.matrixWorld);\n\n      light.position.copy(_center);\n      light.target.position.copy(_center);\n      light.target.position.x += this.lightDirection.x;\n      light.target.position.y += this.lightDirection.y;\n      light.target.position.z += this.lightDirection.z;\n    }\n  }\n\n  injectInclude() {\n    ShaderChunk.lights_fragment_begin = CSMShader.lights_fragment_begin;\n    ShaderChunk.lights_pars_begin = CSMShader.lights_pars_begin;\n  }\n\n  setupMaterial(material) {\n    material.defines = material.defines || {};\n    material.defines.USE_CSM = 1;\n    material.defines.CSM_CASCADES = this.cascades;\n\n    if (this.fade) {\n      material.defines.CSM_FADE = '';\n    }\n\n    const breaksVec2 = [];\n    const scope = this;\n    const shaders = this.shaders;\n\n    material.onBeforeCompile = function (shader) {\n      const far = Math.min(scope.camera.far, scope.maxFar);\n      scope.getExtendedBreaks(breaksVec2);\n      shader.uniforms.CSM_cascades = {\n        value: breaksVec2\n      };\n      shader.uniforms.cameraNear = {\n        value: scope.camera.near\n      };\n      shader.uniforms.shadowFar = {\n        value: far\n      };\n      shaders.set(material, shader);\n    };\n\n    shaders.set(material, null);\n  }\n\n  updateUniforms() {\n    const far = Math.min(this.camera.far, this.maxFar);\n    const shaders = this.shaders;\n    shaders.forEach(function (shader, material) {\n      if (shader !== null) {\n        const uniforms = shader.uniforms;\n        this.getExtendedBreaks(uniforms.CSM_cascades.value);\n        uniforms.cameraNear.value = this.camera.near;\n        uniforms.shadowFar.value = far;\n      }\n\n      if (!this.fade && 'CSM_FADE' in material.defines) {\n        delete material.defines.CSM_FADE;\n        material.needsUpdate = true;\n      } else if (this.fade && !('CSM_FADE' in material.defines)) {\n        material.defines.CSM_FADE = '';\n        material.needsUpdate = true;\n      }\n    }, this);\n  }\n\n  getExtendedBreaks(target) {\n    while (target.length < this.breaks.length) {\n      target.push(new Vector2());\n    }\n\n    target.length = this.breaks.length;\n\n    for (let i = 0; i < this.cascades; i++) {\n      const amount = this.breaks[i];\n      const prev = this.breaks[i - 1] || 0;\n      target[i].x = prev;\n      target[i].y = amount;\n    }\n  }\n\n  updateFrustums() {\n    this.getBreaks();\n    this.initCascades();\n    this.updateShadowBounds();\n    this.updateUniforms();\n  }\n\n  remove() {\n    for (let i = 0; i < this.lights.length; i++) {\n      this.parent.remove(this.lights[i]);\n    }\n  }\n\n  dispose() {\n    const shaders = this.shaders;\n    shaders.forEach(function (shader, material) {\n      delete material.onBeforeCompile;\n      delete material.defines.USE_CSM;\n      delete material.defines.CSM_CASCADES;\n      delete material.defines.CSM_FADE;\n\n      if (shader !== null) {\n        delete shader.uniforms.CSM_cascades;\n        delete shader.uniforms.cameraNear;\n        delete shader.uniforms.shadowFar;\n      }\n\n      material.needsUpdate = true;\n    });\n    shaders.clear();\n  }\n\n}\n\nexport { CSM };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}