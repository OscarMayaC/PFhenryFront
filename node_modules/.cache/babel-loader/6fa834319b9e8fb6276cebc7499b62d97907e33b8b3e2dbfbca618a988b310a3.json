{"ast":null,"code":"import { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\nclass LineGeometry extends LineSegmentsGeometry {\n  constructor() {\n    super();\n    this.isLineGeometry = true;\n    this.type = 'LineGeometry';\n  }\n  setPositions(array) {\n    // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n    const length = array.length - 3;\n    const points = new Float32Array(2 * length);\n    for (let i = 0; i < length; i += 3) {\n      points[2 * i] = array[i];\n      points[2 * i + 1] = array[i + 1];\n      points[2 * i + 2] = array[i + 2];\n      points[2 * i + 3] = array[i + 3];\n      points[2 * i + 4] = array[i + 4];\n      points[2 * i + 5] = array[i + 5];\n    }\n    super.setPositions(points);\n    return this;\n  }\n  setColors(array) {\n    // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n    const length = array.length - 3;\n    const colors = new Float32Array(2 * length);\n    for (let i = 0; i < length; i += 3) {\n      colors[2 * i] = array[i];\n      colors[2 * i + 1] = array[i + 1];\n      colors[2 * i + 2] = array[i + 2];\n      colors[2 * i + 3] = array[i + 3];\n      colors[2 * i + 4] = array[i + 4];\n      colors[2 * i + 5] = array[i + 5];\n    }\n    super.setColors(colors);\n    return this;\n  }\n  fromLine(line) {\n    const geometry = line.geometry;\n    this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n    // set colors, maybe\n\n    return this;\n  }\n}\nexport { LineGeometry };","map":{"version":3,"names":["LineSegmentsGeometry","LineGeometry","constructor","isLineGeometry","type","setPositions","array","length","points","Float32Array","i","setColors","colors","fromLine","line","geometry","attributes","position"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/lines/LineGeometry.js"],"sourcesContent":["import { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\n\nclass LineGeometry extends LineSegmentsGeometry {\n  constructor() {\n    super();\n    this.isLineGeometry = true;\n    this.type = 'LineGeometry';\n  }\n\n  setPositions(array) {\n    // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n    const length = array.length - 3;\n    const points = new Float32Array(2 * length);\n\n    for (let i = 0; i < length; i += 3) {\n      points[2 * i] = array[i];\n      points[2 * i + 1] = array[i + 1];\n      points[2 * i + 2] = array[i + 2];\n      points[2 * i + 3] = array[i + 3];\n      points[2 * i + 4] = array[i + 4];\n      points[2 * i + 5] = array[i + 5];\n    }\n\n    super.setPositions(points);\n    return this;\n  }\n\n  setColors(array) {\n    // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n    const length = array.length - 3;\n    const colors = new Float32Array(2 * length);\n\n    for (let i = 0; i < length; i += 3) {\n      colors[2 * i] = array[i];\n      colors[2 * i + 1] = array[i + 1];\n      colors[2 * i + 2] = array[i + 2];\n      colors[2 * i + 3] = array[i + 3];\n      colors[2 * i + 4] = array[i + 4];\n      colors[2 * i + 5] = array[i + 5];\n    }\n\n    super.setColors(colors);\n    return this;\n  }\n\n  fromLine(line) {\n    const geometry = line.geometry;\n    this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n    // set colors, maybe\n\n    return this;\n  }\n\n}\n\nexport { LineGeometry };\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,2BAA2B;AAEhE,MAAMC,YAAY,SAASD,oBAAoB,CAAC;EAC9CE,WAAWA,CAAA,EAAG;IACZ,KAAK,EAAE;IACP,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,IAAI,GAAG,cAAc;EAC5B;EAEAC,YAAYA,CAACC,KAAK,EAAE;IAClB;IACA,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAAM,GAAG,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAIC,YAAY,CAAC,CAAC,GAAGF,MAAM,CAAC;IAE3C,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,IAAI,CAAC,EAAE;MAClCF,MAAM,CAAC,CAAC,GAAGE,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,CAAC;MACxBF,MAAM,CAAC,CAAC,GAAGE,CAAC,GAAG,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC;MAChCF,MAAM,CAAC,CAAC,GAAGE,CAAC,GAAG,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC;MAChCF,MAAM,CAAC,CAAC,GAAGE,CAAC,GAAG,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC;MAChCF,MAAM,CAAC,CAAC,GAAGE,CAAC,GAAG,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC;MAChCF,MAAM,CAAC,CAAC,GAAGE,CAAC,GAAG,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC;IAClC;IAEA,KAAK,CAACL,YAAY,CAACG,MAAM,CAAC;IAC1B,OAAO,IAAI;EACb;EAEAG,SAASA,CAACL,KAAK,EAAE;IACf;IACA,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAAM,GAAG,CAAC;IAC/B,MAAMK,MAAM,GAAG,IAAIH,YAAY,CAAC,CAAC,GAAGF,MAAM,CAAC;IAE3C,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,IAAI,CAAC,EAAE;MAClCE,MAAM,CAAC,CAAC,GAAGF,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,CAAC;MACxBE,MAAM,CAAC,CAAC,GAAGF,CAAC,GAAG,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC;MAChCE,MAAM,CAAC,CAAC,GAAGF,CAAC,GAAG,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC;MAChCE,MAAM,CAAC,CAAC,GAAGF,CAAC,GAAG,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC;MAChCE,MAAM,CAAC,CAAC,GAAGF,CAAC,GAAG,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC;MAChCE,MAAM,CAAC,CAAC,GAAGF,CAAC,GAAG,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC;IAClC;IAEA,KAAK,CAACC,SAAS,CAACC,MAAM,CAAC;IACvB,OAAO,IAAI;EACb;EAEAC,QAAQA,CAACC,IAAI,EAAE;IACb,MAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC9B,IAAI,CAACV,YAAY,CAACU,QAAQ,CAACC,UAAU,CAACC,QAAQ,CAACX,KAAK,CAAC,CAAC,CAAC;IACvD;;IAEA,OAAO,IAAI;EACb;AAEF;AAEA,SAASL,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}