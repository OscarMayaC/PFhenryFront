{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from 'three';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\nclass BloomPass extends Pass {\n  constructor() {\n    let strength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let kernelSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 25;\n    let sigma = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    let resolution = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;\n    super(); // render targets\n\n    _defineProperty(this, \"renderTargetX\", void 0);\n    _defineProperty(this, \"renderTargetY\", void 0);\n    _defineProperty(this, \"materialCombine\", void 0);\n    _defineProperty(this, \"materialConvolution\", void 0);\n    _defineProperty(this, \"fsQuad\", void 0);\n    _defineProperty(this, \"combineUniforms\", void 0);\n    _defineProperty(this, \"convolutionUniforms\", void 0);\n    _defineProperty(this, \"blurX\", new Vector2(0.001953125, 0.0));\n    _defineProperty(this, \"blurY\", new Vector2(0.0, 0.001953125));\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetX.texture.name = 'BloomPass.x';\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetY.texture.name = 'BloomPass.y'; // combine material\n\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    this.combineUniforms['strength'].value = strength;\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    }); // convolution material\n\n    if (ConvolutionShader === undefined) console.error('BloomPass relies on ConvolutionShader');\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n    this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialConvolution);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n    this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n    this.convolutionUniforms['uImageIncrement'].value = this.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n    this.fsQuad.material = this.materialCombine;\n    this.combineUniforms['tDiffuse'].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n}\nconst CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1.0\n    }\n  },\n  vertexShader: /* glsl */\n  `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`,\n  fragmentShader: /* glsl */\n  `\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }`\n};\nexport { BloomPass };","map":{"version":3,"names":["_defineProperty","Pass","FullScreenQuad","Vector2","WebGLRenderTarget","UniformsUtils","ShaderMaterial","AdditiveBlending","ConvolutionShader","BloomPass","constructor","strength","arguments","length","undefined","kernelSize","sigma","resolution","renderTargetX","texture","name","renderTargetY","combineUniforms","clone","CombineShader","uniforms","value","materialCombine","vertexShader","fragmentShader","blending","transparent","console","error","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","fsQuad","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY","tDiffuse"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/postprocessing/BloomPass.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from 'three';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nclass BloomPass extends Pass {\n  constructor(strength = 1, kernelSize = 25, sigma = 4, resolution = 256) {\n    super(); // render targets\n\n    _defineProperty(this, \"renderTargetX\", void 0);\n\n    _defineProperty(this, \"renderTargetY\", void 0);\n\n    _defineProperty(this, \"materialCombine\", void 0);\n\n    _defineProperty(this, \"materialConvolution\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"combineUniforms\", void 0);\n\n    _defineProperty(this, \"convolutionUniforms\", void 0);\n\n    _defineProperty(this, \"blurX\", new Vector2(0.001953125, 0.0));\n\n    _defineProperty(this, \"blurY\", new Vector2(0.0, 0.001953125));\n\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetX.texture.name = 'BloomPass.x';\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetY.texture.name = 'BloomPass.y'; // combine material\n\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    this.combineUniforms['strength'].value = strength;\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    }); // convolution material\n\n    if (ConvolutionShader === undefined) console.error('BloomPass relies on ConvolutionShader');\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n    this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialConvolution);\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n    this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n    this.convolutionUniforms['uImageIncrement'].value = this.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n    this.fsQuad.material = this.materialCombine;\n    this.combineUniforms['tDiffuse'].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n\n}\n\nconst CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`,\n  fragmentShader:\n  /* glsl */\n  `\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }`\n};\n\nexport { BloomPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}