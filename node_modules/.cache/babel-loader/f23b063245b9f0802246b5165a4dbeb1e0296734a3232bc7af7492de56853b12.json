{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onClick\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"onMouseUp\", \"onPaste\", \"error\"];\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useTheme } from '@mui/material/styles';\nimport { useValidation } from '../validation/useValidation';\nimport { useUtils } from '../useUtils';\nimport { adjustSectionValue, isAndroid, cleanString, getSectionOrder } from './useField.utils';\nimport { useFieldState } from './useFieldState';\nimport { useFieldCharacterEditing } from './useFieldCharacterEditing';\nimport { getActiveElement } from '../../utils/utils';\nexport const useField = params => {\n  const utils = useUtils();\n  const {\n    state,\n    selectedSectionIndexes,\n    setSelectedSections,\n    clearValue,\n    clearActiveSection,\n    updateSectionValue,\n    updateValueFromValueStr,\n    setTempAndroidValueStr,\n    sectionsValueBoundaries\n  } = useFieldState(params);\n  const {\n    applyCharacterEditing,\n    resetCharacterQuery\n  } = useFieldCharacterEditing({\n    sections: state.sections,\n    updateSectionValue,\n    sectionsValueBoundaries,\n    setTempAndroidValueStr\n  });\n  const {\n      inputRef: inputRefProp,\n      internalProps,\n      internalProps: {\n        readOnly = false,\n        unstableFieldRef\n      },\n      forwardedProps: {\n        onClick,\n        onKeyDown,\n        onFocus,\n        onBlur,\n        onMouseUp,\n        onPaste,\n        error\n      },\n      fieldValueManager,\n      valueManager,\n      validator\n    } = params,\n    otherForwardedProps = _objectWithoutPropertiesLoose(params.forwardedProps, _excluded);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(inputRefProp, inputRef);\n  const focusTimeoutRef = React.useRef(undefined);\n  const theme = useTheme();\n  const sectionOrder = React.useMemo(() => getSectionOrder(state.sections, theme.direction === 'rtl'), [theme.direction, state.sections]);\n  const syncSelectionFromDOM = () => {\n    var _selectionStart;\n    if (readOnly) {\n      setSelectedSections(null);\n      return;\n    }\n    const browserStartIndex = (_selectionStart = inputRef.current.selectionStart) != null ? _selectionStart : 0;\n    const nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.\n    : state.sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);\n    const sectionIndex = nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n    setSelectedSections(sectionIndex);\n  };\n  const handleInputClick = useEventCallback(function () {\n    onClick == null ? void 0 : onClick(...arguments);\n    syncSelectionFromDOM();\n  });\n  const handleInputMouseUp = useEventCallback(event => {\n    onMouseUp == null ? void 0 : onMouseUp(event);\n\n    // Without this, the browser will remove the selected when clicking inside an already-selected section.\n    event.preventDefault();\n  });\n  const handleInputFocus = useEventCallback(function () {\n    onFocus == null ? void 0 : onFocus(...arguments);\n    // The ref is guaranteed to be resolved at this point.\n    const input = inputRef.current;\n    clearTimeout(focusTimeoutRef.current);\n    focusTimeoutRef.current = setTimeout(() => {\n      // The ref changed, the component got remounted, the focus event is no longer relevant.\n      if (!input || input !== inputRef.current) {\n        return;\n      }\n      if (selectedSectionIndexes != null || readOnly) {\n        return;\n      }\n      if (\n      // avoid selecting all sections when focusing empty field without value\n      input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length) {\n        setSelectedSections('all');\n      } else {\n        syncSelectionFromDOM();\n      }\n    });\n  });\n  const handleInputBlur = useEventCallback(function () {\n    onBlur == null ? void 0 : onBlur(...arguments);\n    setSelectedSections(null);\n  });\n  const handleInputPaste = useEventCallback(event => {\n    onPaste == null ? void 0 : onPaste(event);\n    if (readOnly) {\n      event.preventDefault();\n      return;\n    }\n    const pastedValue = event.clipboardData.getData('text');\n    if (selectedSectionIndexes && selectedSectionIndexes.startIndex === selectedSectionIndexes.endIndex) {\n      const activeSection = state.sections[selectedSectionIndexes.startIndex];\n      const lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);\n      const digitsOnly = /^[0-9]+$/.test(pastedValue);\n      const isValidPastedValue = activeSection.contentType === 'letter' && lettersOnly || activeSection.contentType === 'digit' && digitsOnly;\n      if (isValidPastedValue) {\n        // Early return to let the paste update section, value\n        return;\n      }\n      if (lettersOnly || digitsOnly) {\n        // The pasted value correspond to a single section but not the expected type\n        // skip the modification\n        event.preventDefault();\n        return;\n      }\n    }\n    event.preventDefault();\n    updateValueFromValueStr(pastedValue);\n  });\n  const handleInputChange = useEventCallback(event => {\n    if (readOnly) {\n      return;\n    }\n    const valueStr = event.target.value;\n    const cleanValueStr = cleanString(valueStr);\n\n    // If no section is selected, we just try to parse the new value\n    // This line is mostly triggered by imperative code / application tests.\n    if (selectedSectionIndexes == null) {\n      updateValueFromValueStr(cleanValueStr);\n      return;\n    }\n    let keyPressed;\n    if (selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {\n      keyPressed = cleanValueStr;\n    } else {\n      const prevValueStr = cleanString(fieldValueManager.getValueStrFromSections(state.sections));\n      let startOfDiffIndex = -1;\n      let endOfDiffIndex = -1;\n      for (let i = 0; i < prevValueStr.length; i += 1) {\n        if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {\n          startOfDiffIndex = i;\n        }\n        if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {\n          endOfDiffIndex = i;\n        }\n      }\n      const activeSection = state.sections[selectedSectionIndexes.startIndex];\n      const hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;\n      if (hasDiffOutsideOfActiveSection) {\n        // TODO: Support if the new date is valid\n        return;\n      }\n\n      // The active section being selected, the browser has replaced its value with the key pressed by the user.\n      const activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || '').length;\n      keyPressed = cleanValueStr.slice(activeSection.start, activeSectionEndRelativeToNewValue);\n    }\n    if (isAndroid() && keyPressed.length === 0) {\n      setTempAndroidValueStr(valueStr);\n      return;\n    }\n    applyCharacterEditing({\n      keyPressed,\n      sectionIndex: selectedSectionIndexes.startIndex\n    });\n  });\n  const handleInputKeyDown = useEventCallback(event => {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n\n    // eslint-disable-next-line default-case\n    switch (true) {\n      // Select all\n      case event.key === 'a' && (event.ctrlKey || event.metaKey):\n        {\n          // prevent default to make sure that the next line \"select all\" while updating\n          // the internal state at the same time.\n          event.preventDefault();\n          setSelectedSections('all');\n          break;\n        }\n\n      // Move selection to next section\n      case event.key === 'ArrowRight':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            setSelectedSections(sectionOrder.startIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            setSelectedSections(selectedSectionIndexes.endIndex);\n          } else {\n            const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].rightIndex;\n            if (nextSectionIndex !== null) {\n              setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Move selection to previous section\n      case event.key === 'ArrowLeft':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            setSelectedSections(sectionOrder.endIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            setSelectedSections(selectedSectionIndexes.startIndex);\n          } else {\n            const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].leftIndex;\n            if (nextSectionIndex !== null) {\n              setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Reset the value of the selected section\n      case ['Backspace', 'Delete'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly) {\n            break;\n          }\n          if (selectedSectionIndexes == null || selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {\n            clearValue();\n          } else {\n            clearActiveSection();\n          }\n          resetCharacterQuery();\n          break;\n        }\n\n      // Increment / decrement the selected section value\n      case ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly || selectedSectionIndexes == null) {\n            break;\n          }\n          const activeSection = state.sections[selectedSectionIndexes.startIndex];\n          const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n          const newSectionValue = adjustSectionValue(utils, activeSection, event.key, sectionsValueBoundaries, activeDateManager.activeDate);\n          updateSectionValue({\n            activeSection,\n            newSectionValue,\n            shouldGoToNextSection: false\n          });\n          break;\n        }\n    }\n  });\n  useEnhancedEffect(() => {\n    if (selectedSectionIndexes == null) {\n      if (inputRef.current.scrollLeft) {\n        // Ensure that input content is not marked as selected.\n        // setting selection range to 0 causes issues in Safari.\n        // https://bugs.webkit.org/show_bug.cgi?id=224425\n        inputRef.current.scrollLeft = 0;\n      }\n      return;\n    }\n    const firstSelectedSection = state.sections[selectedSectionIndexes.startIndex];\n    const lastSelectedSection = state.sections[selectedSectionIndexes.endIndex];\n    let selectionStart = firstSelectedSection.startInInput;\n    let selectionEnd = lastSelectedSection.endInInput;\n    if (selectedSectionIndexes.shouldSelectBoundarySelectors) {\n      selectionStart -= firstSelectedSection.startSeparator.length;\n      selectionEnd += lastSelectedSection.endSeparator.length;\n    }\n    if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {\n      // Fix scroll jumping on iOS browser: https://github.com/mui/mui-x/issues/8321\n      const currentScrollTop = inputRef.current.scrollTop;\n      inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n      // Even reading this variable seems to do the trick, but also setting it just to make use of it\n      inputRef.current.scrollTop = currentScrollTop;\n    }\n  });\n  const validationError = useValidation(_extends({}, internalProps, {\n    value: state.value\n  }), validator, valueManager.isSameError, valueManager.defaultErrorState);\n  const inputError = React.useMemo(() => {\n    // only override when `error` is undefined.\n    // in case of multi input fields, the `error` value is provided externally and will always be defined.\n    if (error !== undefined) {\n      return error;\n    }\n    return fieldValueManager.hasError(validationError);\n  }, [fieldValueManager, validationError, error]);\n  React.useEffect(() => {\n    // Select the right section when focused on mount (`autoFocus = true` on the input)\n    if (inputRef.current && inputRef.current === document.activeElement) {\n      setSelectedSections('all');\n    }\n    return () => window.clearTimeout(focusTimeoutRef.current);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // If `state.tempValueStrAndroid` is still defined when running `useEffect`,\n  // Then `onChange` has only been called once, which means the user pressed `Backspace` to reset the section.\n  // This causes a small flickering on Android,\n  // But we can't use `useEnhancedEffect` which is always called before the second `onChange` call and then would cause false positives.\n  React.useEffect(() => {\n    if (state.tempValueStrAndroid != null && selectedSectionIndexes != null) {\n      resetCharacterQuery();\n      clearActiveSection();\n    }\n  }, [state.tempValueStrAndroid]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const valueStr = React.useMemo(() => {\n    var _state$tempValueStrAn;\n    return (_state$tempValueStrAn = state.tempValueStrAndroid) != null ? _state$tempValueStrAn : fieldValueManager.getValueStrFromSections(state.sections);\n  }, [state.sections, fieldValueManager, state.tempValueStrAndroid]);\n  const inputMode = React.useMemo(() => {\n    if (selectedSectionIndexes == null) {\n      return 'text';\n    }\n    if (state.sections[selectedSectionIndexes.startIndex].contentType === 'letter') {\n      return 'text';\n    }\n    return 'tel';\n  }, [selectedSectionIndexes, state.sections]);\n  const inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);\n  const shouldShowPlaceholder = !inputHasFocus && valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);\n  React.useImperativeHandle(unstableFieldRef, () => ({\n    getSections: () => state.sections,\n    getActiveSectionIndex: () => {\n      var _selectionStart2, _selectionEnd;\n      const browserStartIndex = (_selectionStart2 = inputRef.current.selectionStart) != null ? _selectionStart2 : 0;\n      const browserEndIndex = (_selectionEnd = inputRef.current.selectionEnd) != null ? _selectionEnd : 0;\n      if (browserStartIndex === 0 && browserEndIndex === 0) {\n        return null;\n      }\n      const nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.\n      : state.sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);\n      return nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n    },\n    setSelectedSections: activeSectionIndex => setSelectedSections(activeSectionIndex)\n  }));\n  return _extends({\n    placeholder: state.placeholder,\n    autoComplete: 'off'\n  }, otherForwardedProps, {\n    value: shouldShowPlaceholder ? '' : valueStr,\n    inputMode,\n    readOnly,\n    onClick: handleInputClick,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    onPaste: handleInputPaste,\n    onChange: handleInputChange,\n    onKeyDown: handleInputKeyDown,\n    onMouseUp: handleInputMouseUp,\n    error: inputError,\n    ref: handleRef\n  });\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","useEnhancedEffect","useEventCallback","useForkRef","useTheme","useValidation","useUtils","adjustSectionValue","isAndroid","cleanString","getSectionOrder","useFieldState","useFieldCharacterEditing","getActiveElement","useField","params","utils","state","selectedSectionIndexes","setSelectedSections","clearValue","clearActiveSection","updateSectionValue","updateValueFromValueStr","setTempAndroidValueStr","sectionsValueBoundaries","applyCharacterEditing","resetCharacterQuery","sections","inputRef","inputRefProp","internalProps","readOnly","unstableFieldRef","forwardedProps","onClick","onKeyDown","onFocus","onBlur","onMouseUp","onPaste","error","fieldValueManager","valueManager","validator","otherForwardedProps","useRef","handleRef","focusTimeoutRef","undefined","theme","sectionOrder","useMemo","direction","syncSelectionFromDOM","_selectionStart","browserStartIndex","current","selectionStart","nextSectionIndex","startInInput","findIndex","section","startSeparator","length","sectionIndex","handleInputClick","arguments","handleInputMouseUp","event","preventDefault","handleInputFocus","input","clearTimeout","setTimeout","value","Number","selectionEnd","handleInputBlur","handleInputPaste","pastedValue","clipboardData","getData","startIndex","endIndex","activeSection","lettersOnly","test","digitsOnly","isValidPastedValue","contentType","handleInputChange","valueStr","target","cleanValueStr","keyPressed","prevValueStr","getValueStrFromSections","startOfDiffIndex","endOfDiffIndex","i","hasDiffOutsideOfActiveSection","start","end","activeSectionEndRelativeToNewValue","endSeparator","slice","handleInputKeyDown","key","ctrlKey","metaKey","neighbors","rightIndex","leftIndex","includes","activeDateManager","getActiveDateManager","newSectionValue","activeDate","shouldGoToNextSection","scrollLeft","firstSelectedSection","lastSelectedSection","endInInput","shouldSelectBoundarySelectors","currentScrollTop","scrollTop","setSelectionRange","validationError","isSameError","defaultErrorState","inputError","hasError","useEffect","document","activeElement","window","tempValueStrAndroid","_state$tempValueStrAn","inputMode","inputHasFocus","shouldShowPlaceholder","areValuesEqual","emptyValue","useImperativeHandle","getSections","getActiveSectionIndex","_selectionStart2","_selectionEnd","browserEndIndex","activeSectionIndex","placeholder","autoComplete","onChange","ref"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onClick\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"onMouseUp\", \"onPaste\", \"error\"];\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useTheme } from '@mui/material/styles';\nimport { useValidation } from '../validation/useValidation';\nimport { useUtils } from '../useUtils';\nimport { adjustSectionValue, isAndroid, cleanString, getSectionOrder } from './useField.utils';\nimport { useFieldState } from './useFieldState';\nimport { useFieldCharacterEditing } from './useFieldCharacterEditing';\nimport { getActiveElement } from '../../utils/utils';\nexport const useField = params => {\n  const utils = useUtils();\n  const {\n    state,\n    selectedSectionIndexes,\n    setSelectedSections,\n    clearValue,\n    clearActiveSection,\n    updateSectionValue,\n    updateValueFromValueStr,\n    setTempAndroidValueStr,\n    sectionsValueBoundaries\n  } = useFieldState(params);\n  const {\n    applyCharacterEditing,\n    resetCharacterQuery\n  } = useFieldCharacterEditing({\n    sections: state.sections,\n    updateSectionValue,\n    sectionsValueBoundaries,\n    setTempAndroidValueStr\n  });\n  const {\n      inputRef: inputRefProp,\n      internalProps,\n      internalProps: {\n        readOnly = false,\n        unstableFieldRef\n      },\n      forwardedProps: {\n        onClick,\n        onKeyDown,\n        onFocus,\n        onBlur,\n        onMouseUp,\n        onPaste,\n        error\n      },\n      fieldValueManager,\n      valueManager,\n      validator\n    } = params,\n    otherForwardedProps = _objectWithoutPropertiesLoose(params.forwardedProps, _excluded);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(inputRefProp, inputRef);\n  const focusTimeoutRef = React.useRef(undefined);\n  const theme = useTheme();\n  const sectionOrder = React.useMemo(() => getSectionOrder(state.sections, theme.direction === 'rtl'), [theme.direction, state.sections]);\n  const syncSelectionFromDOM = () => {\n    var _selectionStart;\n    if (readOnly) {\n      setSelectedSections(null);\n      return;\n    }\n    const browserStartIndex = (_selectionStart = inputRef.current.selectionStart) != null ? _selectionStart : 0;\n    const nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.\n    : state.sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);\n    const sectionIndex = nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n    setSelectedSections(sectionIndex);\n  };\n  const handleInputClick = useEventCallback((...args) => {\n    onClick == null ? void 0 : onClick(...args);\n    syncSelectionFromDOM();\n  });\n  const handleInputMouseUp = useEventCallback(event => {\n    onMouseUp == null ? void 0 : onMouseUp(event);\n\n    // Without this, the browser will remove the selected when clicking inside an already-selected section.\n    event.preventDefault();\n  });\n  const handleInputFocus = useEventCallback((...args) => {\n    onFocus == null ? void 0 : onFocus(...args);\n    // The ref is guaranteed to be resolved at this point.\n    const input = inputRef.current;\n    clearTimeout(focusTimeoutRef.current);\n    focusTimeoutRef.current = setTimeout(() => {\n      // The ref changed, the component got remounted, the focus event is no longer relevant.\n      if (!input || input !== inputRef.current) {\n        return;\n      }\n      if (selectedSectionIndexes != null || readOnly) {\n        return;\n      }\n      if (\n      // avoid selecting all sections when focusing empty field without value\n      input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length) {\n        setSelectedSections('all');\n      } else {\n        syncSelectionFromDOM();\n      }\n    });\n  });\n  const handleInputBlur = useEventCallback((...args) => {\n    onBlur == null ? void 0 : onBlur(...args);\n    setSelectedSections(null);\n  });\n  const handleInputPaste = useEventCallback(event => {\n    onPaste == null ? void 0 : onPaste(event);\n    if (readOnly) {\n      event.preventDefault();\n      return;\n    }\n    const pastedValue = event.clipboardData.getData('text');\n    if (selectedSectionIndexes && selectedSectionIndexes.startIndex === selectedSectionIndexes.endIndex) {\n      const activeSection = state.sections[selectedSectionIndexes.startIndex];\n      const lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);\n      const digitsOnly = /^[0-9]+$/.test(pastedValue);\n      const isValidPastedValue = activeSection.contentType === 'letter' && lettersOnly || activeSection.contentType === 'digit' && digitsOnly;\n      if (isValidPastedValue) {\n        // Early return to let the paste update section, value\n        return;\n      }\n      if (lettersOnly || digitsOnly) {\n        // The pasted value correspond to a single section but not the expected type\n        // skip the modification\n        event.preventDefault();\n        return;\n      }\n    }\n    event.preventDefault();\n    updateValueFromValueStr(pastedValue);\n  });\n  const handleInputChange = useEventCallback(event => {\n    if (readOnly) {\n      return;\n    }\n    const valueStr = event.target.value;\n    const cleanValueStr = cleanString(valueStr);\n\n    // If no section is selected, we just try to parse the new value\n    // This line is mostly triggered by imperative code / application tests.\n    if (selectedSectionIndexes == null) {\n      updateValueFromValueStr(cleanValueStr);\n      return;\n    }\n    let keyPressed;\n    if (selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {\n      keyPressed = cleanValueStr;\n    } else {\n      const prevValueStr = cleanString(fieldValueManager.getValueStrFromSections(state.sections));\n      let startOfDiffIndex = -1;\n      let endOfDiffIndex = -1;\n      for (let i = 0; i < prevValueStr.length; i += 1) {\n        if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {\n          startOfDiffIndex = i;\n        }\n        if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {\n          endOfDiffIndex = i;\n        }\n      }\n      const activeSection = state.sections[selectedSectionIndexes.startIndex];\n      const hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;\n      if (hasDiffOutsideOfActiveSection) {\n        // TODO: Support if the new date is valid\n        return;\n      }\n\n      // The active section being selected, the browser has replaced its value with the key pressed by the user.\n      const activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || '').length;\n      keyPressed = cleanValueStr.slice(activeSection.start, activeSectionEndRelativeToNewValue);\n    }\n    if (isAndroid() && keyPressed.length === 0) {\n      setTempAndroidValueStr(valueStr);\n      return;\n    }\n    applyCharacterEditing({\n      keyPressed,\n      sectionIndex: selectedSectionIndexes.startIndex\n    });\n  });\n  const handleInputKeyDown = useEventCallback(event => {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n\n    // eslint-disable-next-line default-case\n    switch (true) {\n      // Select all\n      case event.key === 'a' && (event.ctrlKey || event.metaKey):\n        {\n          // prevent default to make sure that the next line \"select all\" while updating\n          // the internal state at the same time.\n          event.preventDefault();\n          setSelectedSections('all');\n          break;\n        }\n\n      // Move selection to next section\n      case event.key === 'ArrowRight':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            setSelectedSections(sectionOrder.startIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            setSelectedSections(selectedSectionIndexes.endIndex);\n          } else {\n            const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].rightIndex;\n            if (nextSectionIndex !== null) {\n              setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Move selection to previous section\n      case event.key === 'ArrowLeft':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            setSelectedSections(sectionOrder.endIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            setSelectedSections(selectedSectionIndexes.startIndex);\n          } else {\n            const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].leftIndex;\n            if (nextSectionIndex !== null) {\n              setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Reset the value of the selected section\n      case ['Backspace', 'Delete'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly) {\n            break;\n          }\n          if (selectedSectionIndexes == null || selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {\n            clearValue();\n          } else {\n            clearActiveSection();\n          }\n          resetCharacterQuery();\n          break;\n        }\n\n      // Increment / decrement the selected section value\n      case ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly || selectedSectionIndexes == null) {\n            break;\n          }\n          const activeSection = state.sections[selectedSectionIndexes.startIndex];\n          const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n          const newSectionValue = adjustSectionValue(utils, activeSection, event.key, sectionsValueBoundaries, activeDateManager.activeDate);\n          updateSectionValue({\n            activeSection,\n            newSectionValue,\n            shouldGoToNextSection: false\n          });\n          break;\n        }\n    }\n  });\n  useEnhancedEffect(() => {\n    if (selectedSectionIndexes == null) {\n      if (inputRef.current.scrollLeft) {\n        // Ensure that input content is not marked as selected.\n        // setting selection range to 0 causes issues in Safari.\n        // https://bugs.webkit.org/show_bug.cgi?id=224425\n        inputRef.current.scrollLeft = 0;\n      }\n      return;\n    }\n    const firstSelectedSection = state.sections[selectedSectionIndexes.startIndex];\n    const lastSelectedSection = state.sections[selectedSectionIndexes.endIndex];\n    let selectionStart = firstSelectedSection.startInInput;\n    let selectionEnd = lastSelectedSection.endInInput;\n    if (selectedSectionIndexes.shouldSelectBoundarySelectors) {\n      selectionStart -= firstSelectedSection.startSeparator.length;\n      selectionEnd += lastSelectedSection.endSeparator.length;\n    }\n    if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {\n      // Fix scroll jumping on iOS browser: https://github.com/mui/mui-x/issues/8321\n      const currentScrollTop = inputRef.current.scrollTop;\n      inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n      // Even reading this variable seems to do the trick, but also setting it just to make use of it\n      inputRef.current.scrollTop = currentScrollTop;\n    }\n  });\n  const validationError = useValidation(_extends({}, internalProps, {\n    value: state.value\n  }), validator, valueManager.isSameError, valueManager.defaultErrorState);\n  const inputError = React.useMemo(() => {\n    // only override when `error` is undefined.\n    // in case of multi input fields, the `error` value is provided externally and will always be defined.\n    if (error !== undefined) {\n      return error;\n    }\n    return fieldValueManager.hasError(validationError);\n  }, [fieldValueManager, validationError, error]);\n  React.useEffect(() => {\n    // Select the right section when focused on mount (`autoFocus = true` on the input)\n    if (inputRef.current && inputRef.current === document.activeElement) {\n      setSelectedSections('all');\n    }\n    return () => window.clearTimeout(focusTimeoutRef.current);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // If `state.tempValueStrAndroid` is still defined when running `useEffect`,\n  // Then `onChange` has only been called once, which means the user pressed `Backspace` to reset the section.\n  // This causes a small flickering on Android,\n  // But we can't use `useEnhancedEffect` which is always called before the second `onChange` call and then would cause false positives.\n  React.useEffect(() => {\n    if (state.tempValueStrAndroid != null && selectedSectionIndexes != null) {\n      resetCharacterQuery();\n      clearActiveSection();\n    }\n  }, [state.tempValueStrAndroid]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const valueStr = React.useMemo(() => {\n    var _state$tempValueStrAn;\n    return (_state$tempValueStrAn = state.tempValueStrAndroid) != null ? _state$tempValueStrAn : fieldValueManager.getValueStrFromSections(state.sections);\n  }, [state.sections, fieldValueManager, state.tempValueStrAndroid]);\n  const inputMode = React.useMemo(() => {\n    if (selectedSectionIndexes == null) {\n      return 'text';\n    }\n    if (state.sections[selectedSectionIndexes.startIndex].contentType === 'letter') {\n      return 'text';\n    }\n    return 'tel';\n  }, [selectedSectionIndexes, state.sections]);\n  const inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);\n  const shouldShowPlaceholder = !inputHasFocus && valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);\n  React.useImperativeHandle(unstableFieldRef, () => ({\n    getSections: () => state.sections,\n    getActiveSectionIndex: () => {\n      var _selectionStart2, _selectionEnd;\n      const browserStartIndex = (_selectionStart2 = inputRef.current.selectionStart) != null ? _selectionStart2 : 0;\n      const browserEndIndex = (_selectionEnd = inputRef.current.selectionEnd) != null ? _selectionEnd : 0;\n      if (browserStartIndex === 0 && browserEndIndex === 0) {\n        return null;\n      }\n      const nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.\n      : state.sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);\n      return nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n    },\n    setSelectedSections: activeSectionIndex => setSelectedSections(activeSectionIndex)\n  }));\n  return _extends({\n    placeholder: state.placeholder,\n    autoComplete: 'off'\n  }, otherForwardedProps, {\n    value: shouldShowPlaceholder ? '' : valueStr,\n    inputMode,\n    readOnly,\n    onClick: handleInputClick,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    onPaste: handleInputPaste,\n    onChange: handleInputChange,\n    onKeyDown: handleInputKeyDown,\n    onMouseUp: handleInputMouseUp,\n    error: inputError,\n    ref: handleRef\n  });\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}