import { Document } from '../document';
import { JSONDocument } from '../json-document';
import { PlatformIO } from './platform-io';
/**
 * # NodeIO
 *
 * *I/O service for Node.js.*
 *
 * The most common use of the I/O service is to read/write a {@link Document} with a given path.
 * Methods are also available for converting in-memory representations of raw glTF files, both
 * binary (*ArrayBuffer*) and JSON ({@link JSONDocument}).
 *
 * Usage:
 *
 * ```typescript
 * const fs = require('fs');
 * const path = require('path');
 * const { NodeIO } = require('@gltf-transform/core');
 *
 * const io = new NodeIO();
 *
 * // Read.
 * io.read('model.glb');             // → Document
 * io.readBinary(ArrayBuffer);       // → Document
 *
 * // Write.
 * io.write('model.glb', doc); // → void
 * io.writeBinary(doc);        // → ArrayBuffer
 * ```
 *
 * @category I/O
 */
export declare class NodeIO extends PlatformIO {
    private _fs;
    private _path;
    /** @hidden */
    lastReadBytes: number;
    /** @hidden */
    lastWriteBytes: number;
    /** Constructs a new NodeIO service. Instances are reusable. */
    constructor();
    /**********************************************************************************************
     * Public.
     */
    /** Loads a local path and returns a {@link Document} instance. */
    read(uri: string): Document;
    /** Loads a local path and returns a {@link JSONDocument} struct, without parsing. */
    readAsJSON(uri: string): JSONDocument;
    /** Writes a {@link Document} instance to a local path. */
    write(uri: string, doc: Document): void;
}
