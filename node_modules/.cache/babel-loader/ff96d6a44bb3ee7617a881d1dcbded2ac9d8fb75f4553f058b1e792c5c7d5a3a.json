{"ast":null,"code":"import { Mesh, Vector3, Matrix3 } from 'three';\n\n/**\n * https://github.com/gkjohnson/ply-exporter-js\n *\n * Usage:\n *  const exporter = new PLYExporter();\n *\n *  // second argument is a list of options\n *  exporter.parse(mesh, data => console.log(data), { binary: true, excludeAttributes: [ 'color' ], littleEndian: true });\n *\n * Format Definition:\n * http://paulbourke.net/dataformats/ply/\n */\n\nclass PLYExporter {\n  parse(object, onDone, options) {\n    if (onDone && typeof onDone === 'object') {\n      console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\n      options = onDone;\n      onDone = undefined;\n    } // Default options\n\n    const defaultOptions = {\n      binary: false,\n      excludeAttributes: [],\n      // normal, uv, color, index\n      littleEndian: false\n    };\n    options = Object.assign(defaultOptions, options);\n    const excludeAttributes = options.excludeAttributes;\n    let includeNormals = false;\n    let includeColors = false;\n    let includeUVs = false; // count the vertices, check which properties are used,\n    // and cache the BufferGeometry\n\n    let vertexCount = 0;\n    let faceCount = 0;\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n        if (!geometry.isBufferGeometry) {\n          throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n        if (vertices === undefined) {\n          return;\n        }\n        vertexCount += vertices.count;\n        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        if (normals !== undefined) includeNormals = true;\n        if (uvs !== undefined) includeUVs = true;\n        if (colors !== undefined) includeColors = true;\n      }\n    });\n    const includeIndices = (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('index')) === -1;\n    includeNormals = includeNormals && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('normal')) === -1;\n    includeColors = includeColors && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('color')) === -1;\n    includeUVs = includeUVs && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('uv')) === -1;\n    if (includeIndices && faceCount !== Math.floor(faceCount)) {\n      // point cloud meshes will not have an index array and may not have a\n      // number of vertices that is divisble by 3 (and therefore representable\n      // as triangles)\n      console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');\n      return null;\n    }\n    const indexByteCount = 4;\n    let header = 'ply\\n' + `format ${options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii'} 1.0\\n` + `element vertex ${vertexCount}\\n` +\n    // position\n    'property float x\\n' + 'property float y\\n' + 'property float z\\n';\n    if (includeNormals) {\n      // normal\n      header += 'property float nx\\n' + 'property float ny\\n' + 'property float nz\\n';\n    }\n    if (includeUVs) {\n      // uvs\n      header += 'property float s\\n' + 'property float t\\n';\n    }\n    if (includeColors) {\n      // colors\n      header += 'property uchar red\\n' + 'property uchar green\\n' + 'property uchar blue\\n';\n    }\n    if (includeIndices) {\n      // faces\n      header += `${`element face ${faceCount}\\n`}property list uchar int vertex_index\\n`;\n    }\n    header += 'end_header\\n'; // Generate attribute data\n\n    const vertex = new Vector3();\n    const normalMatrixWorld = new Matrix3();\n    let result = null;\n    if (options.binary) {\n      // Binary File Generation\n      const headerBin = new TextEncoder().encode(header); // 3 position values at 4 bytes\n      // 3 normal values at 4 bytes\n      // 3 color channels with 1 byte\n      // 2 uv values at 4 bytes\n\n      const vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0)); // 1 byte shape desciptor\n      // 3 vertex indices at ${indexByteCount} bytes\n\n      const faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n      const output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n      new Uint8Array(output.buffer).set(headerBin, 0);\n      let vOffset = headerBin.length;\n      let fOffset = headerBin.length + vertexListLength;\n      let writtenVertices = 0;\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n          output.setFloat32(vOffset, vertex.x, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.y, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.z, options.littleEndian);\n          vOffset += 4; // Normal information\n\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              output.setFloat32(vOffset, vertex.x, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.y, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.z, options.littleEndian);\n              vOffset += 4;\n            } else {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          } // UV information\n\n          if (includeUVs) {\n            if (uvs != null) {\n              output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n              vOffset += 4;\n            } else if (!includeUVs) {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          } // Color information\n\n          if (includeColors) {\n            if (colors != null) {\n              output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n              vOffset += 1;\n            } else {\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n            }\n          }\n        }\n        if (includeIndices) {\n          // Create the face list\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, writtenVertices + i, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          }\n        } // Save the amount of verts we've already written so we can offset\n        // the face index on the next mesh\n\n        writtenVertices += vertices.count;\n      });\n      result = output.buffer;\n    } else {\n      // Ascii File Generation\n      // count the number of vertices\n      let writtenVertices = 0;\n      let vertexList = '';\n      let faceList = '';\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld); // form each line\n\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n          let line = vertex.x + ' ' + vertex.y + ' ' + vertex.z; // Normal information\n\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              line += ' ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z;\n            } else {\n              line += ' 0 0 0';\n            }\n          } // UV information\n\n          if (includeUVs) {\n            if (uvs != null) {\n              line += ' ' + uvs.getX(i) + ' ' + uvs.getY(i);\n            } else if (includeUVs) {\n              line += ' 0 0';\n            }\n          } // Color information\n\n          if (includeColors) {\n            if (colors != null) {\n              line += ' ' + Math.floor(colors.getX(i) * 255) + ' ' + Math.floor(colors.getY(i) * 255) + ' ' + Math.floor(colors.getZ(i) * 255);\n            } else {\n              line += ' 255 255 255';\n            }\n          }\n          vertexList += line + '\\n';\n        } // Create the face list\n\n        if (includeIndices) {\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              faceList += `3 ${indices.getX(i + 0) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 1) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 2) + writtenVertices}\\n`;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              faceList += `3 ${writtenVertices + i} ${writtenVertices + i + 1} ${writtenVertices + i + 2}\\n`;\n            }\n          }\n          faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        }\n        writtenVertices += vertices.count;\n      });\n      result = `${header}${vertexList}${includeIndices ? `${faceList}\\n` : '\\n'}`;\n    }\n    if (typeof onDone === 'function') {\n      requestAnimationFrame(() => onDone && onDone(typeof result === 'string' ? result : ''));\n    }\n    return result;\n  } // Iterate over the valid meshes in the object\n\n  traverseMeshes(object, cb) {\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n        if (!geometry.isBufferGeometry) {\n          throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n        if (geometry.hasAttribute('position')) {\n          cb(mesh, geometry);\n        }\n      }\n    });\n  }\n}\nexport { PLYExporter };","map":{"version":3,"names":["Mesh","Vector3","Matrix3","PLYExporter","parse","object","onDone","options","console","warn","undefined","defaultOptions","binary","excludeAttributes","littleEndian","Object","assign","includeNormals","includeColors","includeUVs","vertexCount","faceCount","traverse","child","isMesh","mesh","geometry","isBufferGeometry","Error","vertices","getAttribute","normals","uvs","colors","indices","getIndex","count","includeIndices","indexOf","Math","floor","error","indexByteCount","header","vertex","normalMatrixWorld","result","headerBin","TextEncoder","encode","vertexListLength","faceListLength","output","DataView","ArrayBuffer","length","Uint8Array","buffer","set","vOffset","fOffset","writtenVertices","traverseMeshes","getNormalMatrix","matrixWorld","i","l","x","getX","y","getY","z","getZ","applyMatrix4","setFloat32","applyMatrix3","normalize","setUint8","setUint32","vertexList","faceList","line","requestAnimationFrame","cb","hasAttribute"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/exporters/PLYExporter.js"],"sourcesContent":["import { Mesh, Vector3, Matrix3 } from 'three';\n\n/**\n * https://github.com/gkjohnson/ply-exporter-js\n *\n * Usage:\n *  const exporter = new PLYExporter();\n *\n *  // second argument is a list of options\n *  exporter.parse(mesh, data => console.log(data), { binary: true, excludeAttributes: [ 'color' ], littleEndian: true });\n *\n * Format Definition:\n * http://paulbourke.net/dataformats/ply/\n */\n\nclass PLYExporter {\n  parse(object, onDone, options) {\n    if (onDone && typeof onDone === 'object') {\n      console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\n      options = onDone;\n      onDone = undefined;\n    } // Default options\n\n\n    const defaultOptions = {\n      binary: false,\n      excludeAttributes: [],\n      // normal, uv, color, index\n      littleEndian: false\n    };\n    options = Object.assign(defaultOptions, options);\n    const excludeAttributes = options.excludeAttributes;\n    let includeNormals = false;\n    let includeColors = false;\n    let includeUVs = false; // count the vertices, check which properties are used,\n    // and cache the BufferGeometry\n\n    let vertexCount = 0;\n    let faceCount = 0;\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n\n        if (!geometry.isBufferGeometry) {\n          throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n\n        if (vertices === undefined) {\n          return;\n        }\n\n        vertexCount += vertices.count;\n        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        if (normals !== undefined) includeNormals = true;\n        if (uvs !== undefined) includeUVs = true;\n        if (colors !== undefined) includeColors = true;\n      }\n    });\n    const includeIndices = (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('index')) === -1;\n    includeNormals = includeNormals && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('normal')) === -1;\n    includeColors = includeColors && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('color')) === -1;\n    includeUVs = includeUVs && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('uv')) === -1;\n\n    if (includeIndices && faceCount !== Math.floor(faceCount)) {\n      // point cloud meshes will not have an index array and may not have a\n      // number of vertices that is divisble by 3 (and therefore representable\n      // as triangles)\n      console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');\n      return null;\n    }\n\n    const indexByteCount = 4;\n    let header = 'ply\\n' + `format ${options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii'} 1.0\\n` + `element vertex ${vertexCount}\\n` + // position\n    'property float x\\n' + 'property float y\\n' + 'property float z\\n';\n\n    if (includeNormals) {\n      // normal\n      header += 'property float nx\\n' + 'property float ny\\n' + 'property float nz\\n';\n    }\n\n    if (includeUVs) {\n      // uvs\n      header += 'property float s\\n' + 'property float t\\n';\n    }\n\n    if (includeColors) {\n      // colors\n      header += 'property uchar red\\n' + 'property uchar green\\n' + 'property uchar blue\\n';\n    }\n\n    if (includeIndices) {\n      // faces\n      header += `${`element face ${faceCount}\\n`}property list uchar int vertex_index\\n`;\n    }\n\n    header += 'end_header\\n'; // Generate attribute data\n\n    const vertex = new Vector3();\n    const normalMatrixWorld = new Matrix3();\n    let result = null;\n\n    if (options.binary) {\n      // Binary File Generation\n      const headerBin = new TextEncoder().encode(header); // 3 position values at 4 bytes\n      // 3 normal values at 4 bytes\n      // 3 color channels with 1 byte\n      // 2 uv values at 4 bytes\n\n      const vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0)); // 1 byte shape desciptor\n      // 3 vertex indices at ${indexByteCount} bytes\n\n      const faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n      const output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n      new Uint8Array(output.buffer).set(headerBin, 0);\n      let vOffset = headerBin.length;\n      let fOffset = headerBin.length + vertexListLength;\n      let writtenVertices = 0;\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n          output.setFloat32(vOffset, vertex.x, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.y, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.z, options.littleEndian);\n          vOffset += 4; // Normal information\n\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              output.setFloat32(vOffset, vertex.x, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.y, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.z, options.littleEndian);\n              vOffset += 4;\n            } else {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          } // UV information\n\n\n          if (includeUVs) {\n            if (uvs != null) {\n              output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n              vOffset += 4;\n            } else if (!includeUVs) {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          } // Color information\n\n\n          if (includeColors) {\n            if (colors != null) {\n              output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n              vOffset += 1;\n            } else {\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n            }\n          }\n        }\n\n        if (includeIndices) {\n          // Create the face list\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, writtenVertices + i, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          }\n        } // Save the amount of verts we've already written so we can offset\n        // the face index on the next mesh\n\n\n        writtenVertices += vertices.count;\n      });\n      result = output.buffer;\n    } else {\n      // Ascii File Generation\n      // count the number of vertices\n      let writtenVertices = 0;\n      let vertexList = '';\n      let faceList = '';\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld); // form each line\n\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n          let line = vertex.x + ' ' + vertex.y + ' ' + vertex.z; // Normal information\n\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              line += ' ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z;\n            } else {\n              line += ' 0 0 0';\n            }\n          } // UV information\n\n\n          if (includeUVs) {\n            if (uvs != null) {\n              line += ' ' + uvs.getX(i) + ' ' + uvs.getY(i);\n            } else if (includeUVs) {\n              line += ' 0 0';\n            }\n          } // Color information\n\n\n          if (includeColors) {\n            if (colors != null) {\n              line += ' ' + Math.floor(colors.getX(i) * 255) + ' ' + Math.floor(colors.getY(i) * 255) + ' ' + Math.floor(colors.getZ(i) * 255);\n            } else {\n              line += ' 255 255 255';\n            }\n          }\n\n          vertexList += line + '\\n';\n        } // Create the face list\n\n\n        if (includeIndices) {\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              faceList += `3 ${indices.getX(i + 0) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 1) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 2) + writtenVertices}\\n`;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              faceList += `3 ${writtenVertices + i} ${writtenVertices + i + 1} ${writtenVertices + i + 2}\\n`;\n            }\n          }\n\n          faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        }\n\n        writtenVertices += vertices.count;\n      });\n      result = `${header}${vertexList}${includeIndices ? `${faceList}\\n` : '\\n'}`;\n    }\n\n    if (typeof onDone === 'function') {\n      requestAnimationFrame(() => onDone && onDone(typeof result === 'string' ? result : ''));\n    }\n\n    return result;\n  } // Iterate over the valid meshes in the object\n\n\n  traverseMeshes(object, cb) {\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n\n        if (!geometry.isBufferGeometry) {\n          throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n\n        if (geometry.hasAttribute('position')) {\n          cb(mesh, geometry);\n        }\n      }\n    });\n  }\n\n}\n\nexport { PLYExporter };\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,OAAO,EAAEC,OAAO,QAAQ,OAAO;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,CAAC;EAChBC,KAAKA,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAE;IAC7B,IAAID,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MACxCE,OAAO,CAACC,IAAI,CAAC,oIAAoI,CAAC;MAClJF,OAAO,GAAGD,MAAM;MAChBA,MAAM,GAAGI,SAAS;IACpB,CAAC,CAAC;;IAGF,MAAMC,cAAc,GAAG;MACrBC,MAAM,EAAE,KAAK;MACbC,iBAAiB,EAAE,EAAE;MACrB;MACAC,YAAY,EAAE;IAChB,CAAC;IACDP,OAAO,GAAGQ,MAAM,CAACC,MAAM,CAACL,cAAc,EAAEJ,OAAO,CAAC;IAChD,MAAMM,iBAAiB,GAAGN,OAAO,CAACM,iBAAiB;IACnD,IAAII,cAAc,GAAG,KAAK;IAC1B,IAAIC,aAAa,GAAG,KAAK;IACzB,IAAIC,UAAU,GAAG,KAAK,CAAC,CAAC;IACxB;;IAEA,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,SAAS,GAAG,CAAC;IACjBhB,MAAM,CAACiB,QAAQ,CAAC,UAAUC,KAAK,EAAE;MAC/B,IAAIA,KAAK,YAAYvB,IAAI,IAAIuB,KAAK,CAACC,MAAM,EAAE;QACzC,MAAMC,IAAI,GAAGF,KAAK;QAClB,MAAMG,QAAQ,GAAGD,IAAI,CAACC,QAAQ;QAE9B,IAAI,CAACA,QAAQ,CAACC,gBAAgB,EAAE;UAC9B,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;QACrF;QAEA,MAAMC,QAAQ,GAAGH,QAAQ,CAACI,YAAY,CAAC,UAAU,CAAC;QAClD,MAAMC,OAAO,GAAGL,QAAQ,CAACI,YAAY,CAAC,QAAQ,CAAC;QAC/C,MAAME,GAAG,GAAGN,QAAQ,CAACI,YAAY,CAAC,IAAI,CAAC;QACvC,MAAMG,MAAM,GAAGP,QAAQ,CAACI,YAAY,CAAC,OAAO,CAAC;QAC7C,MAAMI,OAAO,GAAGR,QAAQ,CAACS,QAAQ,EAAE;QAEnC,IAAIN,QAAQ,KAAKnB,SAAS,EAAE;UAC1B;QACF;QAEAU,WAAW,IAAIS,QAAQ,CAACO,KAAK;QAC7Bf,SAAS,IAAIa,OAAO,GAAGA,OAAO,CAACE,KAAK,GAAG,CAAC,GAAGP,QAAQ,CAACO,KAAK,GAAG,CAAC;QAC7D,IAAIL,OAAO,KAAKrB,SAAS,EAAEO,cAAc,GAAG,IAAI;QAChD,IAAIe,GAAG,KAAKtB,SAAS,EAAES,UAAU,GAAG,IAAI;QACxC,IAAIc,MAAM,KAAKvB,SAAS,EAAEQ,aAAa,GAAG,IAAI;MAChD;IACF,CAAC,CAAC;IACF,MAAMmB,cAAc,GAAG,CAACxB,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACyB,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACxIrB,cAAc,GAAGA,cAAc,IAAI,CAACJ,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACyB,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACrJpB,aAAa,GAAGA,aAAa,IAAI,CAACL,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACyB,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAClJnB,UAAU,GAAGA,UAAU,IAAI,CAACN,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACyB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAEzI,IAAID,cAAc,IAAIhB,SAAS,KAAKkB,IAAI,CAACC,KAAK,CAACnB,SAAS,CAAC,EAAE;MACzD;MACA;MACA;MACAb,OAAO,CAACiC,KAAK,CAAC,qFAAqF,GAAG,0CAA0C,CAAC;MACjJ,OAAO,IAAI;IACb;IAEA,MAAMC,cAAc,GAAG,CAAC;IACxB,IAAIC,MAAM,GAAG,OAAO,GAAI,UAASpC,OAAO,CAACK,MAAM,GAAGL,OAAO,CAACO,YAAY,GAAG,sBAAsB,GAAG,mBAAmB,GAAG,OAAQ,QAAO,GAAI,kBAAiBM,WAAY,IAAG;IAAG;IAC9K,oBAAoB,GAAG,oBAAoB,GAAG,oBAAoB;IAElE,IAAIH,cAAc,EAAE;MAClB;MACA0B,MAAM,IAAI,qBAAqB,GAAG,qBAAqB,GAAG,qBAAqB;IACjF;IAEA,IAAIxB,UAAU,EAAE;MACd;MACAwB,MAAM,IAAI,oBAAoB,GAAG,oBAAoB;IACvD;IAEA,IAAIzB,aAAa,EAAE;MACjB;MACAyB,MAAM,IAAI,sBAAsB,GAAG,wBAAwB,GAAG,uBAAuB;IACvF;IAEA,IAAIN,cAAc,EAAE;MAClB;MACAM,MAAM,IAAK,GAAG,gBAAetB,SAAU,IAAI,wCAAuC;IACpF;IAEAsB,MAAM,IAAI,cAAc,CAAC,CAAC;;IAE1B,MAAMC,MAAM,GAAG,IAAI3C,OAAO,EAAE;IAC5B,MAAM4C,iBAAiB,GAAG,IAAI3C,OAAO,EAAE;IACvC,IAAI4C,MAAM,GAAG,IAAI;IAEjB,IAAIvC,OAAO,CAACK,MAAM,EAAE;MAClB;MACA,MAAMmC,SAAS,GAAG,IAAIC,WAAW,EAAE,CAACC,MAAM,CAACN,MAAM,CAAC,CAAC,CAAC;MACpD;MACA;MACA;;MAEA,MAAMO,gBAAgB,GAAG9B,WAAW,IAAI,CAAC,GAAG,CAAC,IAAIH,cAAc,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIC,aAAa,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIC,UAAU,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACpI;;MAEA,MAAMgC,cAAc,GAAGd,cAAc,GAAGhB,SAAS,IAAIqB,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MAChF,MAAMU,MAAM,GAAG,IAAIC,QAAQ,CAAC,IAAIC,WAAW,CAACP,SAAS,CAACQ,MAAM,GAAGL,gBAAgB,GAAGC,cAAc,CAAC,CAAC;MAClG,IAAIK,UAAU,CAACJ,MAAM,CAACK,MAAM,CAAC,CAACC,GAAG,CAACX,SAAS,EAAE,CAAC,CAAC;MAC/C,IAAIY,OAAO,GAAGZ,SAAS,CAACQ,MAAM;MAC9B,IAAIK,OAAO,GAAGb,SAAS,CAACQ,MAAM,GAAGL,gBAAgB;MACjD,IAAIW,eAAe,GAAG,CAAC;MACvB,IAAI,CAACC,cAAc,CAACzD,MAAM,EAAE,UAAUoB,IAAI,EAAEC,QAAQ,EAAE;QACpD,MAAMG,QAAQ,GAAGH,QAAQ,CAACI,YAAY,CAAC,UAAU,CAAC;QAClD,MAAMC,OAAO,GAAGL,QAAQ,CAACI,YAAY,CAAC,QAAQ,CAAC;QAC/C,MAAME,GAAG,GAAGN,QAAQ,CAACI,YAAY,CAAC,IAAI,CAAC;QACvC,MAAMG,MAAM,GAAGP,QAAQ,CAACI,YAAY,CAAC,OAAO,CAAC;QAC7C,MAAMI,OAAO,GAAGR,QAAQ,CAACS,QAAQ,EAAE;QACnCU,iBAAiB,CAACkB,eAAe,CAACtC,IAAI,CAACuC,WAAW,CAAC;QAEnD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGrC,QAAQ,CAACO,KAAK,EAAE6B,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;UAC9CrB,MAAM,CAACuB,CAAC,GAAGtC,QAAQ,CAACuC,IAAI,CAACH,CAAC,CAAC;UAC3BrB,MAAM,CAACyB,CAAC,GAAGxC,QAAQ,CAACyC,IAAI,CAACL,CAAC,CAAC;UAC3BrB,MAAM,CAAC2B,CAAC,GAAG1C,QAAQ,CAAC2C,IAAI,CAACP,CAAC,CAAC;UAC3BrB,MAAM,CAAC6B,YAAY,CAAChD,IAAI,CAACuC,WAAW,CAAC,CAAC,CAAC;;UAEvCZ,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAEf,MAAM,CAACuB,CAAC,EAAE5D,OAAO,CAACO,YAAY,CAAC;UAC1D6C,OAAO,IAAI,CAAC;UACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAEf,MAAM,CAACyB,CAAC,EAAE9D,OAAO,CAACO,YAAY,CAAC;UAC1D6C,OAAO,IAAI,CAAC;UACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAEf,MAAM,CAAC2B,CAAC,EAAEhE,OAAO,CAACO,YAAY,CAAC;UAC1D6C,OAAO,IAAI,CAAC,CAAC,CAAC;;UAEd,IAAI1C,cAAc,EAAE;YAClB,IAAIc,OAAO,IAAI,IAAI,EAAE;cACnBa,MAAM,CAACuB,CAAC,GAAGpC,OAAO,CAACqC,IAAI,CAACH,CAAC,CAAC;cAC1BrB,MAAM,CAACyB,CAAC,GAAGtC,OAAO,CAACuC,IAAI,CAACL,CAAC,CAAC;cAC1BrB,MAAM,CAAC2B,CAAC,GAAGxC,OAAO,CAACyC,IAAI,CAACP,CAAC,CAAC;cAC1BrB,MAAM,CAAC+B,YAAY,CAAC9B,iBAAiB,CAAC,CAAC+B,SAAS,EAAE;cAClDxB,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAEf,MAAM,CAACuB,CAAC,EAAE5D,OAAO,CAACO,YAAY,CAAC;cAC1D6C,OAAO,IAAI,CAAC;cACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAEf,MAAM,CAACyB,CAAC,EAAE9D,OAAO,CAACO,YAAY,CAAC;cAC1D6C,OAAO,IAAI,CAAC;cACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAEf,MAAM,CAAC2B,CAAC,EAAEhE,OAAO,CAACO,YAAY,CAAC;cAC1D6C,OAAO,IAAI,CAAC;YACd,CAAC,MAAM;cACLP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAE,CAAC,EAAEpD,OAAO,CAACO,YAAY,CAAC;cACnD6C,OAAO,IAAI,CAAC;cACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAE,CAAC,EAAEpD,OAAO,CAACO,YAAY,CAAC;cACnD6C,OAAO,IAAI,CAAC;cACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAE,CAAC,EAAEpD,OAAO,CAACO,YAAY,CAAC;cACnD6C,OAAO,IAAI,CAAC;YACd;UACF,CAAC,CAAC;;UAGF,IAAIxC,UAAU,EAAE;YACd,IAAIa,GAAG,IAAI,IAAI,EAAE;cACfoB,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAE3B,GAAG,CAACoC,IAAI,CAACH,CAAC,CAAC,EAAE1D,OAAO,CAACO,YAAY,CAAC;cAC7D6C,OAAO,IAAI,CAAC;cACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAE3B,GAAG,CAACsC,IAAI,CAACL,CAAC,CAAC,EAAE1D,OAAO,CAACO,YAAY,CAAC;cAC7D6C,OAAO,IAAI,CAAC;YACd,CAAC,MAAM,IAAI,CAACxC,UAAU,EAAE;cACtBiC,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAE,CAAC,EAAEpD,OAAO,CAACO,YAAY,CAAC;cACnD6C,OAAO,IAAI,CAAC;cACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAE,CAAC,EAAEpD,OAAO,CAACO,YAAY,CAAC;cACnD6C,OAAO,IAAI,CAAC;YACd;UACF,CAAC,CAAC;;UAGF,IAAIzC,aAAa,EAAE;YACjB,IAAIe,MAAM,IAAI,IAAI,EAAE;cAClBmB,MAAM,CAACyB,QAAQ,CAAClB,OAAO,EAAEpB,IAAI,CAACC,KAAK,CAACP,MAAM,CAACmC,IAAI,CAACH,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;cAC1DN,OAAO,IAAI,CAAC;cACZP,MAAM,CAACyB,QAAQ,CAAClB,OAAO,EAAEpB,IAAI,CAACC,KAAK,CAACP,MAAM,CAACqC,IAAI,CAACL,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;cAC1DN,OAAO,IAAI,CAAC;cACZP,MAAM,CAACyB,QAAQ,CAAClB,OAAO,EAAEpB,IAAI,CAACC,KAAK,CAACP,MAAM,CAACuC,IAAI,CAACP,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;cAC1DN,OAAO,IAAI,CAAC;YACd,CAAC,MAAM;cACLP,MAAM,CAACyB,QAAQ,CAAClB,OAAO,EAAE,GAAG,CAAC;cAC7BA,OAAO,IAAI,CAAC;cACZP,MAAM,CAACyB,QAAQ,CAAClB,OAAO,EAAE,GAAG,CAAC;cAC7BA,OAAO,IAAI,CAAC;cACZP,MAAM,CAACyB,QAAQ,CAAClB,OAAO,EAAE,GAAG,CAAC;cAC7BA,OAAO,IAAI,CAAC;YACd;UACF;QACF;QAEA,IAAItB,cAAc,EAAE;UAClB;UACA,IAAIH,OAAO,KAAK,IAAI,EAAE;YACpB,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGhC,OAAO,CAACE,KAAK,EAAE6B,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAI,CAAC,EAAE;cAChDb,MAAM,CAACyB,QAAQ,CAACjB,OAAO,EAAE,CAAC,CAAC;cAC3BA,OAAO,IAAI,CAAC;cACZR,MAAM,CAAC0B,SAAS,CAAClB,OAAO,EAAE1B,OAAO,CAACkC,IAAI,CAACH,CAAC,GAAG,CAAC,CAAC,GAAGJ,eAAe,EAAEtD,OAAO,CAACO,YAAY,CAAC;cACtF8C,OAAO,IAAIlB,cAAc;cACzBU,MAAM,CAAC0B,SAAS,CAAClB,OAAO,EAAE1B,OAAO,CAACkC,IAAI,CAACH,CAAC,GAAG,CAAC,CAAC,GAAGJ,eAAe,EAAEtD,OAAO,CAACO,YAAY,CAAC;cACtF8C,OAAO,IAAIlB,cAAc;cACzBU,MAAM,CAAC0B,SAAS,CAAClB,OAAO,EAAE1B,OAAO,CAACkC,IAAI,CAACH,CAAC,GAAG,CAAC,CAAC,GAAGJ,eAAe,EAAEtD,OAAO,CAACO,YAAY,CAAC;cACtF8C,OAAO,IAAIlB,cAAc;YAC3B;UACF,CAAC,MAAM;YACL,KAAK,IAAIuB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGrC,QAAQ,CAACO,KAAK,EAAE6B,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAI,CAAC,EAAE;cACjDb,MAAM,CAACyB,QAAQ,CAACjB,OAAO,EAAE,CAAC,CAAC;cAC3BA,OAAO,IAAI,CAAC;cACZR,MAAM,CAAC0B,SAAS,CAAClB,OAAO,EAAEC,eAAe,GAAGI,CAAC,EAAE1D,OAAO,CAACO,YAAY,CAAC;cACpE8C,OAAO,IAAIlB,cAAc;cACzBU,MAAM,CAAC0B,SAAS,CAAClB,OAAO,EAAEC,eAAe,GAAGI,CAAC,GAAG,CAAC,EAAE1D,OAAO,CAACO,YAAY,CAAC;cACxE8C,OAAO,IAAIlB,cAAc;cACzBU,MAAM,CAAC0B,SAAS,CAAClB,OAAO,EAAEC,eAAe,GAAGI,CAAC,GAAG,CAAC,EAAE1D,OAAO,CAACO,YAAY,CAAC;cACxE8C,OAAO,IAAIlB,cAAc;YAC3B;UACF;QACF,CAAC,CAAC;QACF;;QAGAmB,eAAe,IAAIhC,QAAQ,CAACO,KAAK;MACnC,CAAC,CAAC;MACFU,MAAM,GAAGM,MAAM,CAACK,MAAM;IACxB,CAAC,MAAM;MACL;MACA;MACA,IAAII,eAAe,GAAG,CAAC;MACvB,IAAIkB,UAAU,GAAG,EAAE;MACnB,IAAIC,QAAQ,GAAG,EAAE;MACjB,IAAI,CAAClB,cAAc,CAACzD,MAAM,EAAE,UAAUoB,IAAI,EAAEC,QAAQ,EAAE;QACpD,MAAMG,QAAQ,GAAGH,QAAQ,CAACI,YAAY,CAAC,UAAU,CAAC;QAClD,MAAMC,OAAO,GAAGL,QAAQ,CAACI,YAAY,CAAC,QAAQ,CAAC;QAC/C,MAAME,GAAG,GAAGN,QAAQ,CAACI,YAAY,CAAC,IAAI,CAAC;QACvC,MAAMG,MAAM,GAAGP,QAAQ,CAACI,YAAY,CAAC,OAAO,CAAC;QAC7C,MAAMI,OAAO,GAAGR,QAAQ,CAACS,QAAQ,EAAE;QACnCU,iBAAiB,CAACkB,eAAe,CAACtC,IAAI,CAACuC,WAAW,CAAC,CAAC,CAAC;;QAErD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGrC,QAAQ,CAACO,KAAK,EAAE6B,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;UAC9CrB,MAAM,CAACuB,CAAC,GAAGtC,QAAQ,CAACuC,IAAI,CAACH,CAAC,CAAC;UAC3BrB,MAAM,CAACyB,CAAC,GAAGxC,QAAQ,CAACyC,IAAI,CAACL,CAAC,CAAC;UAC3BrB,MAAM,CAAC2B,CAAC,GAAG1C,QAAQ,CAAC2C,IAAI,CAACP,CAAC,CAAC;UAC3BrB,MAAM,CAAC6B,YAAY,CAAChD,IAAI,CAACuC,WAAW,CAAC,CAAC,CAAC;;UAEvC,IAAIiB,IAAI,GAAGrC,MAAM,CAACuB,CAAC,GAAG,GAAG,GAAGvB,MAAM,CAACyB,CAAC,GAAG,GAAG,GAAGzB,MAAM,CAAC2B,CAAC,CAAC,CAAC;;UAEvD,IAAItD,cAAc,EAAE;YAClB,IAAIc,OAAO,IAAI,IAAI,EAAE;cACnBa,MAAM,CAACuB,CAAC,GAAGpC,OAAO,CAACqC,IAAI,CAACH,CAAC,CAAC;cAC1BrB,MAAM,CAACyB,CAAC,GAAGtC,OAAO,CAACuC,IAAI,CAACL,CAAC,CAAC;cAC1BrB,MAAM,CAAC2B,CAAC,GAAGxC,OAAO,CAACyC,IAAI,CAACP,CAAC,CAAC;cAC1BrB,MAAM,CAAC+B,YAAY,CAAC9B,iBAAiB,CAAC,CAAC+B,SAAS,EAAE;cAClDK,IAAI,IAAI,GAAG,GAAGrC,MAAM,CAACuB,CAAC,GAAG,GAAG,GAAGvB,MAAM,CAACyB,CAAC,GAAG,GAAG,GAAGzB,MAAM,CAAC2B,CAAC;YAC1D,CAAC,MAAM;cACLU,IAAI,IAAI,QAAQ;YAClB;UACF,CAAC,CAAC;;UAGF,IAAI9D,UAAU,EAAE;YACd,IAAIa,GAAG,IAAI,IAAI,EAAE;cACfiD,IAAI,IAAI,GAAG,GAAGjD,GAAG,CAACoC,IAAI,CAACH,CAAC,CAAC,GAAG,GAAG,GAAGjC,GAAG,CAACsC,IAAI,CAACL,CAAC,CAAC;YAC/C,CAAC,MAAM,IAAI9C,UAAU,EAAE;cACrB8D,IAAI,IAAI,MAAM;YAChB;UACF,CAAC,CAAC;;UAGF,IAAI/D,aAAa,EAAE;YACjB,IAAIe,MAAM,IAAI,IAAI,EAAE;cAClBgD,IAAI,IAAI,GAAG,GAAG1C,IAAI,CAACC,KAAK,CAACP,MAAM,CAACmC,IAAI,CAACH,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG1B,IAAI,CAACC,KAAK,CAACP,MAAM,CAACqC,IAAI,CAACL,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG1B,IAAI,CAACC,KAAK,CAACP,MAAM,CAACuC,IAAI,CAACP,CAAC,CAAC,GAAG,GAAG,CAAC;YAClI,CAAC,MAAM;cACLgB,IAAI,IAAI,cAAc;YACxB;UACF;UAEAF,UAAU,IAAIE,IAAI,GAAG,IAAI;QAC3B,CAAC,CAAC;;QAGF,IAAI5C,cAAc,EAAE;UAClB,IAAIH,OAAO,KAAK,IAAI,EAAE;YACpB,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGhC,OAAO,CAACE,KAAK,EAAE6B,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAI,CAAC,EAAE;cAChDe,QAAQ,IAAK,KAAI9C,OAAO,CAACkC,IAAI,CAACH,CAAC,GAAG,CAAC,CAAC,GAAGJ,eAAgB,EAAC;cACxDmB,QAAQ,IAAK,IAAG9C,OAAO,CAACkC,IAAI,CAACH,CAAC,GAAG,CAAC,CAAC,GAAGJ,eAAgB,EAAC;cACvDmB,QAAQ,IAAK,IAAG9C,OAAO,CAACkC,IAAI,CAACH,CAAC,GAAG,CAAC,CAAC,GAAGJ,eAAgB,IAAG;YAC3D;UACF,CAAC,MAAM;YACL,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGrC,QAAQ,CAACO,KAAK,EAAE6B,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAI,CAAC,EAAE;cACjDe,QAAQ,IAAK,KAAInB,eAAe,GAAGI,CAAE,IAAGJ,eAAe,GAAGI,CAAC,GAAG,CAAE,IAAGJ,eAAe,GAAGI,CAAC,GAAG,CAAE,IAAG;YAChG;UACF;UAEA5C,SAAS,IAAIa,OAAO,GAAGA,OAAO,CAACE,KAAK,GAAG,CAAC,GAAGP,QAAQ,CAACO,KAAK,GAAG,CAAC;QAC/D;QAEAyB,eAAe,IAAIhC,QAAQ,CAACO,KAAK;MACnC,CAAC,CAAC;MACFU,MAAM,GAAI,GAAEH,MAAO,GAAEoC,UAAW,GAAE1C,cAAc,GAAI,GAAE2C,QAAS,IAAG,GAAG,IAAK,EAAC;IAC7E;IAEA,IAAI,OAAO1E,MAAM,KAAK,UAAU,EAAE;MAChC4E,qBAAqB,CAAC,MAAM5E,MAAM,IAAIA,MAAM,CAAC,OAAOwC,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAG,EAAE,CAAC,CAAC;IACzF;IAEA,OAAOA,MAAM;EACf,CAAC,CAAC;;EAGFgB,cAAcA,CAACzD,MAAM,EAAE8E,EAAE,EAAE;IACzB9E,MAAM,CAACiB,QAAQ,CAAC,UAAUC,KAAK,EAAE;MAC/B,IAAIA,KAAK,YAAYvB,IAAI,IAAIuB,KAAK,CAACC,MAAM,EAAE;QACzC,MAAMC,IAAI,GAAGF,KAAK;QAClB,MAAMG,QAAQ,GAAGD,IAAI,CAACC,QAAQ;QAE9B,IAAI,CAACA,QAAQ,CAACC,gBAAgB,EAAE;UAC9B,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;QACrF;QAEA,IAAIF,QAAQ,CAAC0D,YAAY,CAAC,UAAU,CAAC,EAAE;UACrCD,EAAE,CAAC1D,IAAI,EAAEC,QAAQ,CAAC;QACpB;MACF;IACF,CAAC,CAAC;EACJ;AAEF;AAEA,SAASvB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}