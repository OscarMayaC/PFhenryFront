{"ast":null,"code":"import { Vector4, Vector3 } from 'three';\n\n/**\n * NURBS utils\n *\n * See NURBSCurve and NURBSSurface.\n **/\n\n/**************************************************************\n *\tNURBS Utils\n **************************************************************/\n\n/*\n\tFinds knot vector span.\n\n\tp : degree\n\tu : parametric value\n\tU : knot vector\n\n\treturns the span\n\t*/\n\nfunction findSpan(p, u, U) {\n  const n = U.length - p - 1;\n  if (u >= U[n]) {\n    return n - 1;\n  }\n  if (u <= U[p]) {\n    return p;\n  }\n  let low = p;\n  let high = n;\n  let mid = Math.floor((low + high) / 2);\n  while (u < U[mid] || u >= U[mid + 1]) {\n    if (u < U[mid]) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n    mid = Math.floor((low + high) / 2);\n  }\n  return mid;\n}\n/*\n\tCalculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tU    : knot vector\n\n\treturns array[p+1] with basis functions values.\n\t*/\n\nfunction calcBasisFunctions(span, u, p, U) {\n  const N = [];\n  const left = [];\n  const right = [];\n  N[0] = 1.0;\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0.0;\n    for (let r = 0; r < j; ++r) {\n      const rv = right[r + 1];\n      const lv = left[j - r];\n      const temp = N[r] / (rv + lv);\n      N[r] = saved + rv * temp;\n      saved = lv * temp;\n    }\n    N[j] = saved;\n  }\n  return N;\n}\n/*\n\tCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n\n\tp : degree of B-Spline\n\tU : knot vector\n\tP : control points (x, y, z, w)\n\tu : parametric point\n\n\treturns point for given u\n\t*/\n\nfunction calcBSplinePoint(p, U, P, u) {\n  const span = findSpan(p, u, U);\n  const N = calcBasisFunctions(span, u, p, U);\n  const C = new Vector4(0, 0, 0, 0);\n  for (let j = 0; j <= p; ++j) {\n    const point = P[span - p + j];\n    const Nj = N[j];\n    const wNj = point.w * Nj;\n    C.x += point.x * wNj;\n    C.y += point.y * wNj;\n    C.z += point.z * wNj;\n    C.w += point.w * Nj;\n  }\n  return C;\n}\n/*\n\tCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tn    : number of derivatives to calculate\n\tU    : knot vector\n\n\treturns array[n+1][p+1] with basis functions derivatives\n\t*/\n\nfunction calcBasisFunctionDerivatives(span, u, p, n, U) {\n  const zeroArr = [];\n  for (let i = 0; i <= p; ++i) zeroArr[i] = 0.0;\n  const ders = [];\n  for (let i = 0; i <= n; ++i) ders[i] = zeroArr.slice(0);\n  const ndu = [];\n  for (let i = 0; i <= p; ++i) ndu[i] = zeroArr.slice(0);\n  ndu[0][0] = 1.0;\n  const left = zeroArr.slice(0);\n  const right = zeroArr.slice(0);\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0.0;\n    for (let r = 0; r < j; ++r) {\n      const rv = right[r + 1];\n      const lv = left[j - r];\n      ndu[j][r] = rv + lv;\n      const temp = ndu[r][j - 1] / ndu[j][r];\n      ndu[r][j] = saved + rv * temp;\n      saved = lv * temp;\n    }\n    ndu[j][j] = saved;\n  }\n  for (let j = 0; j <= p; ++j) {\n    ders[0][j] = ndu[j][p];\n  }\n  for (let r = 0; r <= p; ++r) {\n    let s1 = 0;\n    let s2 = 1;\n    const a = [];\n    for (let i = 0; i <= p; ++i) {\n      a[i] = zeroArr.slice(0);\n    }\n    a[0][0] = 1.0;\n    for (let k = 1; k <= n; ++k) {\n      let d = 0.0;\n      const rk = r - k;\n      const pk = p - k;\n      if (r >= k) {\n        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n        d = a[s2][0] * ndu[rk][pk];\n      }\n      const j1 = rk >= -1 ? 1 : -rk;\n      const j2 = r - 1 <= pk ? k - 1 : p - r;\n      for (let j = j1; j <= j2; ++j) {\n        a[s2][j] = (a[s1][j] - a[s1][j - 1]) / ndu[pk + 1][rk + j];\n        d += a[s2][j] * ndu[rk + j][pk];\n      }\n      if (r <= pk) {\n        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r];\n        d += a[s2][k] * ndu[r][pk];\n      }\n      ders[k][r] = d;\n      var j = s1;\n      s1 = s2;\n      s2 = j;\n    }\n  }\n  var r = p;\n  for (let k = 1; k <= n; ++k) {\n    for (let j = 0; j <= p; ++j) {\n      ders[k][j] *= r;\n    }\n    r *= p - k;\n  }\n  return ders;\n}\n/*\n\t\tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n\n\t\tp  : degree\n\t\tU  : knot vector\n\t\tP  : control points\n\t\tu  : Parametric points\n\t\tnd : number of derivatives\n\n\t\treturns array[d+1] with derivatives\n\t\t*/\n\nfunction calcBSplineDerivatives(p, U, P, u, nd) {\n  const du = nd < p ? nd : p;\n  const CK = [];\n  const span = findSpan(p, u, U);\n  const nders = calcBasisFunctionDerivatives(span, u, p, du, U);\n  const Pw = [];\n  for (let i = 0; i < P.length; ++i) {\n    var point = P[i].clone();\n    const w = point.w;\n    point.x *= w;\n    point.y *= w;\n    point.z *= w;\n    Pw[i] = point;\n  }\n  for (let k = 0; k <= du; ++k) {\n    var point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n    for (let j = 1; j <= p; ++j) {\n      point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n    }\n    CK[k] = point;\n  }\n  for (let k = du + 1; k <= nd + 1; ++k) {\n    CK[k] = new Vector4(0, 0, 0);\n  }\n  return CK;\n}\n/*\n\tCalculate \"K over I\"\n\n\treturns k!/(i!(k-i)!)\n\t*/\n\nfunction calcKoverI(k, i) {\n  let nom = 1;\n  for (let j = 2; j <= k; ++j) {\n    nom *= j;\n  }\n  let denom = 1;\n  for (let j = 2; j <= i; ++j) {\n    denom *= j;\n  }\n  for (let j = 2; j <= k - i; ++j) {\n    denom *= j;\n  }\n  return nom / denom;\n}\n/*\n\tCalculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n\n\tPders : result of function calcBSplineDerivatives\n\n\treturns array with derivatives for rational curve.\n\t*/\n\nfunction calcRationalCurveDerivatives(Pders) {\n  const nd = Pders.length;\n  const Aders = [];\n  const wders = [];\n  for (let i = 0; i < nd; ++i) {\n    const point = Pders[i];\n    Aders[i] = new Vector3(point.x, point.y, point.z);\n    wders[i] = point.w;\n  }\n  const CK = [];\n  for (let k = 0; k < nd; ++k) {\n    const v = Aders[k].clone();\n    for (let i = 1; i <= k; ++i) {\n      v.sub(CK[k - i].clone().multiplyScalar(calcKoverI(k, i) * wders[i]));\n    }\n    CK[k] = v.divideScalar(wders[0]);\n  }\n  return CK;\n}\n/*\n\tCalculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n\n\tp  : degree\n\tU  : knot vector\n\tP  : control points in homogeneous space\n\tu  : parametric points\n\tnd : number of derivatives\n\n\treturns array with derivatives.\n\t*/\n\nfunction calcNURBSDerivatives(p, U, P, u, nd) {\n  const Pders = calcBSplineDerivatives(p, U, P, u, nd);\n  return calcRationalCurveDerivatives(Pders);\n}\n/*\n\tCalculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n\n\tp1, p2 : degrees of B-Spline surface\n\tU1, U2 : knot vectors\n\tP      : control points (x, y, z, w)\n\tu, v   : parametric values\n\n\treturns point for given (u, v)\n\t*/\n\nfunction calcSurfacePoint(p, q, U, V, P, u, v, target) {\n  const uspan = findSpan(p, u, U);\n  const vspan = findSpan(q, v, V);\n  const Nu = calcBasisFunctions(uspan, u, p, U);\n  const Nv = calcBasisFunctions(vspan, v, q, V);\n  const temp = [];\n  for (let l = 0; l <= q; ++l) {\n    temp[l] = new Vector4(0, 0, 0, 0);\n    for (let k = 0; k <= p; ++k) {\n      const point = P[uspan - p + k][vspan - q + l].clone();\n      const w = point.w;\n      point.x *= w;\n      point.y *= w;\n      point.z *= w;\n      temp[l].add(point.multiplyScalar(Nu[k]));\n    }\n  }\n  const Sw = new Vector4(0, 0, 0, 0);\n  for (let l = 0; l <= q; ++l) {\n    Sw.add(temp[l].multiplyScalar(Nv[l]));\n  }\n  Sw.divideScalar(Sw.w);\n  target.set(Sw.x, Sw.y, Sw.z);\n}\nexport { calcBSplineDerivatives, calcBSplinePoint, calcBasisFunctionDerivatives, calcBasisFunctions, calcKoverI, calcNURBSDerivatives, calcRationalCurveDerivatives, calcSurfacePoint, findSpan };","map":{"version":3,"names":["Vector4","Vector3","findSpan","p","u","U","n","length","low","high","mid","Math","floor","calcBasisFunctions","span","N","left","right","j","saved","r","rv","lv","temp","calcBSplinePoint","P","C","point","Nj","wNj","w","x","y","z","calcBasisFunctionDerivatives","zeroArr","i","ders","slice","ndu","s1","s2","a","k","d","rk","pk","j1","j2","calcBSplineDerivatives","nd","du","CK","nders","Pw","clone","multiplyScalar","add","calcKoverI","nom","denom","calcRationalCurveDerivatives","Pders","Aders","wders","v","sub","divideScalar","calcNURBSDerivatives","calcSurfacePoint","q","V","target","uspan","vspan","Nu","Nv","l","Sw","set"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/curves/NURBSUtils.js"],"sourcesContent":["import { Vector4, Vector3 } from 'three';\n\n/**\n * NURBS utils\n *\n * See NURBSCurve and NURBSSurface.\n **/\n\n/**************************************************************\n *\tNURBS Utils\n **************************************************************/\n\n/*\n\tFinds knot vector span.\n\n\tp : degree\n\tu : parametric value\n\tU : knot vector\n\n\treturns the span\n\t*/\n\nfunction findSpan(p, u, U) {\n  const n = U.length - p - 1;\n\n  if (u >= U[n]) {\n    return n - 1;\n  }\n\n  if (u <= U[p]) {\n    return p;\n  }\n\n  let low = p;\n  let high = n;\n  let mid = Math.floor((low + high) / 2);\n\n  while (u < U[mid] || u >= U[mid + 1]) {\n    if (u < U[mid]) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n\n    mid = Math.floor((low + high) / 2);\n  }\n\n  return mid;\n}\n/*\n\tCalculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tU    : knot vector\n\n\treturns array[p+1] with basis functions values.\n\t*/\n\nfunction calcBasisFunctions(span, u, p, U) {\n  const N = [];\n  const left = [];\n  const right = [];\n  N[0] = 1.0;\n\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0.0;\n\n    for (let r = 0; r < j; ++r) {\n      const rv = right[r + 1];\n      const lv = left[j - r];\n      const temp = N[r] / (rv + lv);\n      N[r] = saved + rv * temp;\n      saved = lv * temp;\n    }\n\n    N[j] = saved;\n  }\n\n  return N;\n}\n/*\n\tCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n\n\tp : degree of B-Spline\n\tU : knot vector\n\tP : control points (x, y, z, w)\n\tu : parametric point\n\n\treturns point for given u\n\t*/\n\nfunction calcBSplinePoint(p, U, P, u) {\n  const span = findSpan(p, u, U);\n  const N = calcBasisFunctions(span, u, p, U);\n  const C = new Vector4(0, 0, 0, 0);\n\n  for (let j = 0; j <= p; ++j) {\n    const point = P[span - p + j];\n    const Nj = N[j];\n    const wNj = point.w * Nj;\n    C.x += point.x * wNj;\n    C.y += point.y * wNj;\n    C.z += point.z * wNj;\n    C.w += point.w * Nj;\n  }\n\n  return C;\n}\n/*\n\tCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tn    : number of derivatives to calculate\n\tU    : knot vector\n\n\treturns array[n+1][p+1] with basis functions derivatives\n\t*/\n\nfunction calcBasisFunctionDerivatives(span, u, p, n, U) {\n  const zeroArr = [];\n\n  for (let i = 0; i <= p; ++i) zeroArr[i] = 0.0;\n\n  const ders = [];\n\n  for (let i = 0; i <= n; ++i) ders[i] = zeroArr.slice(0);\n\n  const ndu = [];\n\n  for (let i = 0; i <= p; ++i) ndu[i] = zeroArr.slice(0);\n\n  ndu[0][0] = 1.0;\n  const left = zeroArr.slice(0);\n  const right = zeroArr.slice(0);\n\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0.0;\n\n    for (let r = 0; r < j; ++r) {\n      const rv = right[r + 1];\n      const lv = left[j - r];\n      ndu[j][r] = rv + lv;\n      const temp = ndu[r][j - 1] / ndu[j][r];\n      ndu[r][j] = saved + rv * temp;\n      saved = lv * temp;\n    }\n\n    ndu[j][j] = saved;\n  }\n\n  for (let j = 0; j <= p; ++j) {\n    ders[0][j] = ndu[j][p];\n  }\n\n  for (let r = 0; r <= p; ++r) {\n    let s1 = 0;\n    let s2 = 1;\n    const a = [];\n\n    for (let i = 0; i <= p; ++i) {\n      a[i] = zeroArr.slice(0);\n    }\n\n    a[0][0] = 1.0;\n\n    for (let k = 1; k <= n; ++k) {\n      let d = 0.0;\n      const rk = r - k;\n      const pk = p - k;\n\n      if (r >= k) {\n        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n        d = a[s2][0] * ndu[rk][pk];\n      }\n\n      const j1 = rk >= -1 ? 1 : -rk;\n      const j2 = r - 1 <= pk ? k - 1 : p - r;\n\n      for (let j = j1; j <= j2; ++j) {\n        a[s2][j] = (a[s1][j] - a[s1][j - 1]) / ndu[pk + 1][rk + j];\n        d += a[s2][j] * ndu[rk + j][pk];\n      }\n\n      if (r <= pk) {\n        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r];\n        d += a[s2][k] * ndu[r][pk];\n      }\n\n      ders[k][r] = d;\n      var j = s1;\n      s1 = s2;\n      s2 = j;\n    }\n  }\n\n  var r = p;\n\n  for (let k = 1; k <= n; ++k) {\n    for (let j = 0; j <= p; ++j) {\n      ders[k][j] *= r;\n    }\n\n    r *= p - k;\n  }\n\n  return ders;\n}\n/*\n\t\tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n\n\t\tp  : degree\n\t\tU  : knot vector\n\t\tP  : control points\n\t\tu  : Parametric points\n\t\tnd : number of derivatives\n\n\t\treturns array[d+1] with derivatives\n\t\t*/\n\nfunction calcBSplineDerivatives(p, U, P, u, nd) {\n  const du = nd < p ? nd : p;\n  const CK = [];\n  const span = findSpan(p, u, U);\n  const nders = calcBasisFunctionDerivatives(span, u, p, du, U);\n  const Pw = [];\n\n  for (let i = 0; i < P.length; ++i) {\n    var point = P[i].clone();\n    const w = point.w;\n    point.x *= w;\n    point.y *= w;\n    point.z *= w;\n    Pw[i] = point;\n  }\n\n  for (let k = 0; k <= du; ++k) {\n    var point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n\n    for (let j = 1; j <= p; ++j) {\n      point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n    }\n\n    CK[k] = point;\n  }\n\n  for (let k = du + 1; k <= nd + 1; ++k) {\n    CK[k] = new Vector4(0, 0, 0);\n  }\n\n  return CK;\n}\n/*\n\tCalculate \"K over I\"\n\n\treturns k!/(i!(k-i)!)\n\t*/\n\nfunction calcKoverI(k, i) {\n  let nom = 1;\n\n  for (let j = 2; j <= k; ++j) {\n    nom *= j;\n  }\n\n  let denom = 1;\n\n  for (let j = 2; j <= i; ++j) {\n    denom *= j;\n  }\n\n  for (let j = 2; j <= k - i; ++j) {\n    denom *= j;\n  }\n\n  return nom / denom;\n}\n/*\n\tCalculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n\n\tPders : result of function calcBSplineDerivatives\n\n\treturns array with derivatives for rational curve.\n\t*/\n\nfunction calcRationalCurveDerivatives(Pders) {\n  const nd = Pders.length;\n  const Aders = [];\n  const wders = [];\n\n  for (let i = 0; i < nd; ++i) {\n    const point = Pders[i];\n    Aders[i] = new Vector3(point.x, point.y, point.z);\n    wders[i] = point.w;\n  }\n\n  const CK = [];\n\n  for (let k = 0; k < nd; ++k) {\n    const v = Aders[k].clone();\n\n    for (let i = 1; i <= k; ++i) {\n      v.sub(CK[k - i].clone().multiplyScalar(calcKoverI(k, i) * wders[i]));\n    }\n\n    CK[k] = v.divideScalar(wders[0]);\n  }\n\n  return CK;\n}\n/*\n\tCalculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n\n\tp  : degree\n\tU  : knot vector\n\tP  : control points in homogeneous space\n\tu  : parametric points\n\tnd : number of derivatives\n\n\treturns array with derivatives.\n\t*/\n\nfunction calcNURBSDerivatives(p, U, P, u, nd) {\n  const Pders = calcBSplineDerivatives(p, U, P, u, nd);\n  return calcRationalCurveDerivatives(Pders);\n}\n/*\n\tCalculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n\n\tp1, p2 : degrees of B-Spline surface\n\tU1, U2 : knot vectors\n\tP      : control points (x, y, z, w)\n\tu, v   : parametric values\n\n\treturns point for given (u, v)\n\t*/\n\nfunction calcSurfacePoint(p, q, U, V, P, u, v, target) {\n  const uspan = findSpan(p, u, U);\n  const vspan = findSpan(q, v, V);\n  const Nu = calcBasisFunctions(uspan, u, p, U);\n  const Nv = calcBasisFunctions(vspan, v, q, V);\n  const temp = [];\n\n  for (let l = 0; l <= q; ++l) {\n    temp[l] = new Vector4(0, 0, 0, 0);\n\n    for (let k = 0; k <= p; ++k) {\n      const point = P[uspan - p + k][vspan - q + l].clone();\n      const w = point.w;\n      point.x *= w;\n      point.y *= w;\n      point.z *= w;\n      temp[l].add(point.multiplyScalar(Nu[k]));\n    }\n  }\n\n  const Sw = new Vector4(0, 0, 0, 0);\n\n  for (let l = 0; l <= q; ++l) {\n    Sw.add(temp[l].multiplyScalar(Nv[l]));\n  }\n\n  Sw.divideScalar(Sw.w);\n  target.set(Sw.x, Sw.y, Sw.z);\n}\n\nexport { calcBSplineDerivatives, calcBSplinePoint, calcBasisFunctionDerivatives, calcBasisFunctions, calcKoverI, calcNURBSDerivatives, calcRationalCurveDerivatives, calcSurfacePoint, findSpan };\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,OAAO,QAAQ,OAAO;;AAExC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAQA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACzB,MAAMC,CAAC,GAAGD,CAAC,CAACE,MAAM,GAAGJ,CAAC,GAAG,CAAC;EAE1B,IAAIC,CAAC,IAAIC,CAAC,CAACC,CAAC,CAAC,EAAE;IACb,OAAOA,CAAC,GAAG,CAAC;EACd;EAEA,IAAIF,CAAC,IAAIC,CAAC,CAACF,CAAC,CAAC,EAAE;IACb,OAAOA,CAAC;EACV;EAEA,IAAIK,GAAG,GAAGL,CAAC;EACX,IAAIM,IAAI,GAAGH,CAAC;EACZ,IAAII,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACJ,GAAG,GAAGC,IAAI,IAAI,CAAC,CAAC;EAEtC,OAAOL,CAAC,GAAGC,CAAC,CAACK,GAAG,CAAC,IAAIN,CAAC,IAAIC,CAAC,CAACK,GAAG,GAAG,CAAC,CAAC,EAAE;IACpC,IAAIN,CAAC,GAAGC,CAAC,CAACK,GAAG,CAAC,EAAE;MACdD,IAAI,GAAGC,GAAG;IACZ,CAAC,MAAM;MACLF,GAAG,GAAGE,GAAG;IACX;IAEAA,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACJ,GAAG,GAAGC,IAAI,IAAI,CAAC,CAAC;EACpC;EAEA,OAAOC,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,kBAAkBA,CAACC,IAAI,EAAEV,CAAC,EAAED,CAAC,EAAEE,CAAC,EAAE;EACzC,MAAMU,CAAC,GAAG,EAAE;EACZ,MAAMC,IAAI,GAAG,EAAE;EACf,MAAMC,KAAK,GAAG,EAAE;EAChBF,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;EAEV,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIf,CAAC,EAAE,EAAEe,CAAC,EAAE;IAC3BF,IAAI,CAACE,CAAC,CAAC,GAAGd,CAAC,GAAGC,CAAC,CAACS,IAAI,GAAG,CAAC,GAAGI,CAAC,CAAC;IAC7BD,KAAK,CAACC,CAAC,CAAC,GAAGb,CAAC,CAACS,IAAI,GAAGI,CAAC,CAAC,GAAGd,CAAC;IAC1B,IAAIe,KAAK,GAAG,GAAG;IAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAE,EAAEE,CAAC,EAAE;MAC1B,MAAMC,EAAE,GAAGJ,KAAK,CAACG,CAAC,GAAG,CAAC,CAAC;MACvB,MAAME,EAAE,GAAGN,IAAI,CAACE,CAAC,GAAGE,CAAC,CAAC;MACtB,MAAMG,IAAI,GAAGR,CAAC,CAACK,CAAC,CAAC,IAAIC,EAAE,GAAGC,EAAE,CAAC;MAC7BP,CAAC,CAACK,CAAC,CAAC,GAAGD,KAAK,GAAGE,EAAE,GAAGE,IAAI;MACxBJ,KAAK,GAAGG,EAAE,GAAGC,IAAI;IACnB;IAEAR,CAAC,CAACG,CAAC,CAAC,GAAGC,KAAK;EACd;EAEA,OAAOJ,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASS,gBAAgBA,CAACrB,CAAC,EAAEE,CAAC,EAAEoB,CAAC,EAAErB,CAAC,EAAE;EACpC,MAAMU,IAAI,GAAGZ,QAAQ,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EAC9B,MAAMU,CAAC,GAAGF,kBAAkB,CAACC,IAAI,EAAEV,CAAC,EAAED,CAAC,EAAEE,CAAC,CAAC;EAC3C,MAAMqB,CAAC,GAAG,IAAI1B,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAEjC,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIf,CAAC,EAAE,EAAEe,CAAC,EAAE;IAC3B,MAAMS,KAAK,GAAGF,CAAC,CAACX,IAAI,GAAGX,CAAC,GAAGe,CAAC,CAAC;IAC7B,MAAMU,EAAE,GAAGb,CAAC,CAACG,CAAC,CAAC;IACf,MAAMW,GAAG,GAAGF,KAAK,CAACG,CAAC,GAAGF,EAAE;IACxBF,CAAC,CAACK,CAAC,IAAIJ,KAAK,CAACI,CAAC,GAAGF,GAAG;IACpBH,CAAC,CAACM,CAAC,IAAIL,KAAK,CAACK,CAAC,GAAGH,GAAG;IACpBH,CAAC,CAACO,CAAC,IAAIN,KAAK,CAACM,CAAC,GAAGJ,GAAG;IACpBH,CAAC,CAACI,CAAC,IAAIH,KAAK,CAACG,CAAC,GAAGF,EAAE;EACrB;EAEA,OAAOF,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASQ,4BAA4BA,CAACpB,IAAI,EAAEV,CAAC,EAAED,CAAC,EAAEG,CAAC,EAAED,CAAC,EAAE;EACtD,MAAM8B,OAAO,GAAG,EAAE;EAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIjC,CAAC,EAAE,EAAEiC,CAAC,EAAED,OAAO,CAACC,CAAC,CAAC,GAAG,GAAG;EAE7C,MAAMC,IAAI,GAAG,EAAE;EAEf,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI9B,CAAC,EAAE,EAAE8B,CAAC,EAAEC,IAAI,CAACD,CAAC,CAAC,GAAGD,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC;EAEvD,MAAMC,GAAG,GAAG,EAAE;EAEd,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIjC,CAAC,EAAE,EAAEiC,CAAC,EAAEG,GAAG,CAACH,CAAC,CAAC,GAAGD,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC;EAEtDC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;EACf,MAAMvB,IAAI,GAAGmB,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC;EAC7B,MAAMrB,KAAK,GAAGkB,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC;EAE9B,KAAK,IAAIpB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIf,CAAC,EAAE,EAAEe,CAAC,EAAE;IAC3BF,IAAI,CAACE,CAAC,CAAC,GAAGd,CAAC,GAAGC,CAAC,CAACS,IAAI,GAAG,CAAC,GAAGI,CAAC,CAAC;IAC7BD,KAAK,CAACC,CAAC,CAAC,GAAGb,CAAC,CAACS,IAAI,GAAGI,CAAC,CAAC,GAAGd,CAAC;IAC1B,IAAIe,KAAK,GAAG,GAAG;IAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAE,EAAEE,CAAC,EAAE;MAC1B,MAAMC,EAAE,GAAGJ,KAAK,CAACG,CAAC,GAAG,CAAC,CAAC;MACvB,MAAME,EAAE,GAAGN,IAAI,CAACE,CAAC,GAAGE,CAAC,CAAC;MACtBmB,GAAG,CAACrB,CAAC,CAAC,CAACE,CAAC,CAAC,GAAGC,EAAE,GAAGC,EAAE;MACnB,MAAMC,IAAI,GAAGgB,GAAG,CAACnB,CAAC,CAAC,CAACF,CAAC,GAAG,CAAC,CAAC,GAAGqB,GAAG,CAACrB,CAAC,CAAC,CAACE,CAAC,CAAC;MACtCmB,GAAG,CAACnB,CAAC,CAAC,CAACF,CAAC,CAAC,GAAGC,KAAK,GAAGE,EAAE,GAAGE,IAAI;MAC7BJ,KAAK,GAAGG,EAAE,GAAGC,IAAI;IACnB;IAEAgB,GAAG,CAACrB,CAAC,CAAC,CAACA,CAAC,CAAC,GAAGC,KAAK;EACnB;EAEA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIf,CAAC,EAAE,EAAEe,CAAC,EAAE;IAC3BmB,IAAI,CAAC,CAAC,CAAC,CAACnB,CAAC,CAAC,GAAGqB,GAAG,CAACrB,CAAC,CAAC,CAACf,CAAC,CAAC;EACxB;EAEA,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIjB,CAAC,EAAE,EAAEiB,CAAC,EAAE;IAC3B,IAAIoB,EAAE,GAAG,CAAC;IACV,IAAIC,EAAE,GAAG,CAAC;IACV,MAAMC,CAAC,GAAG,EAAE;IAEZ,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIjC,CAAC,EAAE,EAAEiC,CAAC,EAAE;MAC3BM,CAAC,CAACN,CAAC,CAAC,GAAGD,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC;IACzB;IAEAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;IAEb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIrC,CAAC,EAAE,EAAEqC,CAAC,EAAE;MAC3B,IAAIC,CAAC,GAAG,GAAG;MACX,MAAMC,EAAE,GAAGzB,CAAC,GAAGuB,CAAC;MAChB,MAAMG,EAAE,GAAG3C,CAAC,GAAGwC,CAAC;MAEhB,IAAIvB,CAAC,IAAIuB,CAAC,EAAE;QACVD,CAAC,CAACD,EAAE,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAACF,EAAE,CAAC,CAAC,CAAC,CAAC,GAAGD,GAAG,CAACO,EAAE,GAAG,CAAC,CAAC,CAACD,EAAE,CAAC;QACrCD,CAAC,GAAGF,CAAC,CAACD,EAAE,CAAC,CAAC,CAAC,CAAC,GAAGF,GAAG,CAACM,EAAE,CAAC,CAACC,EAAE,CAAC;MAC5B;MAEA,MAAMC,EAAE,GAAGF,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAACA,EAAE;MAC7B,MAAMG,EAAE,GAAG5B,CAAC,GAAG,CAAC,IAAI0B,EAAE,GAAGH,CAAC,GAAG,CAAC,GAAGxC,CAAC,GAAGiB,CAAC;MAEtC,KAAK,IAAIF,CAAC,GAAG6B,EAAE,EAAE7B,CAAC,IAAI8B,EAAE,EAAE,EAAE9B,CAAC,EAAE;QAC7BwB,CAAC,CAACD,EAAE,CAAC,CAACvB,CAAC,CAAC,GAAG,CAACwB,CAAC,CAACF,EAAE,CAAC,CAACtB,CAAC,CAAC,GAAGwB,CAAC,CAACF,EAAE,CAAC,CAACtB,CAAC,GAAG,CAAC,CAAC,IAAIqB,GAAG,CAACO,EAAE,GAAG,CAAC,CAAC,CAACD,EAAE,GAAG3B,CAAC,CAAC;QAC1D0B,CAAC,IAAIF,CAAC,CAACD,EAAE,CAAC,CAACvB,CAAC,CAAC,GAAGqB,GAAG,CAACM,EAAE,GAAG3B,CAAC,CAAC,CAAC4B,EAAE,CAAC;MACjC;MAEA,IAAI1B,CAAC,IAAI0B,EAAE,EAAE;QACXJ,CAAC,CAACD,EAAE,CAAC,CAACE,CAAC,CAAC,GAAG,CAACD,CAAC,CAACF,EAAE,CAAC,CAACG,CAAC,GAAG,CAAC,CAAC,GAAGJ,GAAG,CAACO,EAAE,GAAG,CAAC,CAAC,CAAC1B,CAAC,CAAC;QACzCwB,CAAC,IAAIF,CAAC,CAACD,EAAE,CAAC,CAACE,CAAC,CAAC,GAAGJ,GAAG,CAACnB,CAAC,CAAC,CAAC0B,EAAE,CAAC;MAC5B;MAEAT,IAAI,CAACM,CAAC,CAAC,CAACvB,CAAC,CAAC,GAAGwB,CAAC;MACd,IAAI1B,CAAC,GAAGsB,EAAE;MACVA,EAAE,GAAGC,EAAE;MACPA,EAAE,GAAGvB,CAAC;IACR;EACF;EAEA,IAAIE,CAAC,GAAGjB,CAAC;EAET,KAAK,IAAIwC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIrC,CAAC,EAAE,EAAEqC,CAAC,EAAE;IAC3B,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIf,CAAC,EAAE,EAAEe,CAAC,EAAE;MAC3BmB,IAAI,CAACM,CAAC,CAAC,CAACzB,CAAC,CAAC,IAAIE,CAAC;IACjB;IAEAA,CAAC,IAAIjB,CAAC,GAAGwC,CAAC;EACZ;EAEA,OAAON,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASY,sBAAsBA,CAAC9C,CAAC,EAAEE,CAAC,EAAEoB,CAAC,EAAErB,CAAC,EAAE8C,EAAE,EAAE;EAC9C,MAAMC,EAAE,GAAGD,EAAE,GAAG/C,CAAC,GAAG+C,EAAE,GAAG/C,CAAC;EAC1B,MAAMiD,EAAE,GAAG,EAAE;EACb,MAAMtC,IAAI,GAAGZ,QAAQ,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EAC9B,MAAMgD,KAAK,GAAGnB,4BAA4B,CAACpB,IAAI,EAAEV,CAAC,EAAED,CAAC,EAAEgD,EAAE,EAAE9C,CAAC,CAAC;EAC7D,MAAMiD,EAAE,GAAG,EAAE;EAEb,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,CAAC,CAAClB,MAAM,EAAE,EAAE6B,CAAC,EAAE;IACjC,IAAIT,KAAK,GAAGF,CAAC,CAACW,CAAC,CAAC,CAACmB,KAAK,EAAE;IACxB,MAAMzB,CAAC,GAAGH,KAAK,CAACG,CAAC;IACjBH,KAAK,CAACI,CAAC,IAAID,CAAC;IACZH,KAAK,CAACK,CAAC,IAAIF,CAAC;IACZH,KAAK,CAACM,CAAC,IAAIH,CAAC;IACZwB,EAAE,CAAClB,CAAC,CAAC,GAAGT,KAAK;EACf;EAEA,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIQ,EAAE,EAAE,EAAER,CAAC,EAAE;IAC5B,IAAIhB,KAAK,GAAG2B,EAAE,CAACxC,IAAI,GAAGX,CAAC,CAAC,CAACoD,KAAK,EAAE,CAACC,cAAc,CAACH,KAAK,CAACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE5D,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIf,CAAC,EAAE,EAAEe,CAAC,EAAE;MAC3BS,KAAK,CAAC8B,GAAG,CAACH,EAAE,CAACxC,IAAI,GAAGX,CAAC,GAAGe,CAAC,CAAC,CAACqC,KAAK,EAAE,CAACC,cAAc,CAACH,KAAK,CAACV,CAAC,CAAC,CAACzB,CAAC,CAAC,CAAC,CAAC;IACjE;IAEAkC,EAAE,CAACT,CAAC,CAAC,GAAGhB,KAAK;EACf;EAEA,KAAK,IAAIgB,CAAC,GAAGQ,EAAE,GAAG,CAAC,EAAER,CAAC,IAAIO,EAAE,GAAG,CAAC,EAAE,EAAEP,CAAC,EAAE;IACrCS,EAAE,CAACT,CAAC,CAAC,GAAG,IAAI3C,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9B;EAEA,OAAOoD,EAAE;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASM,UAAUA,CAACf,CAAC,EAAEP,CAAC,EAAE;EACxB,IAAIuB,GAAG,GAAG,CAAC;EAEX,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIyB,CAAC,EAAE,EAAEzB,CAAC,EAAE;IAC3ByC,GAAG,IAAIzC,CAAC;EACV;EAEA,IAAI0C,KAAK,GAAG,CAAC;EAEb,KAAK,IAAI1C,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIkB,CAAC,EAAE,EAAElB,CAAC,EAAE;IAC3B0C,KAAK,IAAI1C,CAAC;EACZ;EAEA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIyB,CAAC,GAAGP,CAAC,EAAE,EAAElB,CAAC,EAAE;IAC/B0C,KAAK,IAAI1C,CAAC;EACZ;EAEA,OAAOyC,GAAG,GAAGC,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,4BAA4BA,CAACC,KAAK,EAAE;EAC3C,MAAMZ,EAAE,GAAGY,KAAK,CAACvD,MAAM;EACvB,MAAMwD,KAAK,GAAG,EAAE;EAChB,MAAMC,KAAK,GAAG,EAAE;EAEhB,KAAK,IAAI5B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,EAAE,EAAE,EAAEd,CAAC,EAAE;IAC3B,MAAMT,KAAK,GAAGmC,KAAK,CAAC1B,CAAC,CAAC;IACtB2B,KAAK,CAAC3B,CAAC,CAAC,GAAG,IAAInC,OAAO,CAAC0B,KAAK,CAACI,CAAC,EAAEJ,KAAK,CAACK,CAAC,EAAEL,KAAK,CAACM,CAAC,CAAC;IACjD+B,KAAK,CAAC5B,CAAC,CAAC,GAAGT,KAAK,CAACG,CAAC;EACpB;EAEA,MAAMsB,EAAE,GAAG,EAAE;EAEb,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,EAAE,EAAE,EAAEP,CAAC,EAAE;IAC3B,MAAMsB,CAAC,GAAGF,KAAK,CAACpB,CAAC,CAAC,CAACY,KAAK,EAAE;IAE1B,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIO,CAAC,EAAE,EAAEP,CAAC,EAAE;MAC3B6B,CAAC,CAACC,GAAG,CAACd,EAAE,CAACT,CAAC,GAAGP,CAAC,CAAC,CAACmB,KAAK,EAAE,CAACC,cAAc,CAACE,UAAU,CAACf,CAAC,EAAEP,CAAC,CAAC,GAAG4B,KAAK,CAAC5B,CAAC,CAAC,CAAC,CAAC;IACtE;IAEAgB,EAAE,CAACT,CAAC,CAAC,GAAGsB,CAAC,CAACE,YAAY,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;EAClC;EAEA,OAAOZ,EAAE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASgB,oBAAoBA,CAACjE,CAAC,EAAEE,CAAC,EAAEoB,CAAC,EAAErB,CAAC,EAAE8C,EAAE,EAAE;EAC5C,MAAMY,KAAK,GAAGb,sBAAsB,CAAC9C,CAAC,EAAEE,CAAC,EAAEoB,CAAC,EAAErB,CAAC,EAAE8C,EAAE,CAAC;EACpD,OAAOW,4BAA4B,CAACC,KAAK,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASO,gBAAgBA,CAAClE,CAAC,EAAEmE,CAAC,EAAEjE,CAAC,EAAEkE,CAAC,EAAE9C,CAAC,EAAErB,CAAC,EAAE6D,CAAC,EAAEO,MAAM,EAAE;EACrD,MAAMC,KAAK,GAAGvE,QAAQ,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EAC/B,MAAMqE,KAAK,GAAGxE,QAAQ,CAACoE,CAAC,EAAEL,CAAC,EAAEM,CAAC,CAAC;EAC/B,MAAMI,EAAE,GAAG9D,kBAAkB,CAAC4D,KAAK,EAAErE,CAAC,EAAED,CAAC,EAAEE,CAAC,CAAC;EAC7C,MAAMuE,EAAE,GAAG/D,kBAAkB,CAAC6D,KAAK,EAAET,CAAC,EAAEK,CAAC,EAAEC,CAAC,CAAC;EAC7C,MAAMhD,IAAI,GAAG,EAAE;EAEf,KAAK,IAAIsD,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIP,CAAC,EAAE,EAAEO,CAAC,EAAE;IAC3BtD,IAAI,CAACsD,CAAC,CAAC,GAAG,IAAI7E,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAEjC,KAAK,IAAI2C,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIxC,CAAC,EAAE,EAAEwC,CAAC,EAAE;MAC3B,MAAMhB,KAAK,GAAGF,CAAC,CAACgD,KAAK,GAAGtE,CAAC,GAAGwC,CAAC,CAAC,CAAC+B,KAAK,GAAGJ,CAAC,GAAGO,CAAC,CAAC,CAACtB,KAAK,EAAE;MACrD,MAAMzB,CAAC,GAAGH,KAAK,CAACG,CAAC;MACjBH,KAAK,CAACI,CAAC,IAAID,CAAC;MACZH,KAAK,CAACK,CAAC,IAAIF,CAAC;MACZH,KAAK,CAACM,CAAC,IAAIH,CAAC;MACZP,IAAI,CAACsD,CAAC,CAAC,CAACpB,GAAG,CAAC9B,KAAK,CAAC6B,cAAc,CAACmB,EAAE,CAAChC,CAAC,CAAC,CAAC,CAAC;IAC1C;EACF;EAEA,MAAMmC,EAAE,GAAG,IAAI9E,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAElC,KAAK,IAAI6E,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIP,CAAC,EAAE,EAAEO,CAAC,EAAE;IAC3BC,EAAE,CAACrB,GAAG,CAAClC,IAAI,CAACsD,CAAC,CAAC,CAACrB,cAAc,CAACoB,EAAE,CAACC,CAAC,CAAC,CAAC,CAAC;EACvC;EAEAC,EAAE,CAACX,YAAY,CAACW,EAAE,CAAChD,CAAC,CAAC;EACrB0C,MAAM,CAACO,GAAG,CAACD,EAAE,CAAC/C,CAAC,EAAE+C,EAAE,CAAC9C,CAAC,EAAE8C,EAAE,CAAC7C,CAAC,CAAC;AAC9B;AAEA,SAASgB,sBAAsB,EAAEzB,gBAAgB,EAAEU,4BAA4B,EAAErB,kBAAkB,EAAE6C,UAAU,EAAEU,oBAAoB,EAAEP,4BAA4B,EAAEQ,gBAAgB,EAAEnE,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}