{"ast":null,"code":"\"use strict\";\n\n// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getKeyForAutomaticLookahead = exports.AT_LEAST_ONE_SEP_IDX = exports.MANY_SEP_IDX = exports.AT_LEAST_ONE_IDX = exports.MANY_IDX = exports.OPTION_IDX = exports.OR_IDX = exports.BITS_FOR_ALT_IDX = exports.BITS_FOR_RULE_IDX = exports.BITS_FOR_OCCURRENCE_IDX = exports.BITS_FOR_METHOD_TYPE = void 0;\nexports.BITS_FOR_METHOD_TYPE = 4;\nexports.BITS_FOR_OCCURRENCE_IDX = 8;\nexports.BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexports.BITS_FOR_ALT_IDX = 8;\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nexports.OR_IDX = 1 << exports.BITS_FOR_OCCURRENCE_IDX;\nexports.OPTION_IDX = 2 << exports.BITS_FOR_OCCURRENCE_IDX;\nexports.MANY_IDX = 3 << exports.BITS_FOR_OCCURRENCE_IDX;\nexports.AT_LEAST_ONE_IDX = 4 << exports.BITS_FOR_OCCURRENCE_IDX;\nexports.MANY_SEP_IDX = 5 << exports.BITS_FOR_OCCURRENCE_IDX;\nexports.AT_LEAST_ONE_SEP_IDX = 6 << exports.BITS_FOR_OCCURRENCE_IDX;\n// this actually returns a number, but it is always used as a string (object prop key)\nfunction getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n  return occurrence | dslMethodIdx | ruleIdx;\n}\nexports.getKeyForAutomaticLookahead = getKeyForAutomaticLookahead;\nvar BITS_START_FOR_ALT_IDX = 32 - exports.BITS_FOR_ALT_IDX;","map":{"version":3,"names":["exports","BITS_FOR_METHOD_TYPE","BITS_FOR_OCCURRENCE_IDX","BITS_FOR_RULE_IDX","BITS_FOR_ALT_IDX","OR_IDX","OPTION_IDX","MANY_IDX","AT_LEAST_ONE_IDX","MANY_SEP_IDX","AT_LEAST_ONE_SEP_IDX","getKeyForAutomaticLookahead","ruleIdx","dslMethodIdx","occurrence","BITS_START_FOR_ALT_IDX"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/chevrotain/src/parse/grammar/keys.ts"],"sourcesContent":["// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\n\nexport const BITS_FOR_METHOD_TYPE = 4\nexport const BITS_FOR_OCCURRENCE_IDX = 8\nexport const BITS_FOR_RULE_IDX = 12\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexport const BITS_FOR_ALT_IDX = 8\n\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nexport const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX\nexport const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX\nexport const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX\nexport const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX\nexport const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX\nexport const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX\n\n// this actually returns a number, but it is always used as a string (object prop key)\nexport function getKeyForAutomaticLookahead(\n  ruleIdx: number,\n  dslMethodIdx: number,\n  occurrence: number\n): number {\n  return occurrence | dslMethodIdx | ruleIdx\n}\n\nconst BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;AAEaA,OAAA,CAAAC,oBAAoB,GAAG,CAAC;AACxBD,OAAA,CAAAE,uBAAuB,GAAG,CAAC;AAC3BF,OAAA,CAAAG,iBAAiB,GAAG,EAAE;AACnC;AACaH,OAAA,CAAAI,gBAAgB,GAAG,CAAC;AAEjC;AACA;AACA;AACaJ,OAAA,CAAAK,MAAM,GAAG,CAAC,IAAIL,OAAA,CAAAE,uBAAuB;AACrCF,OAAA,CAAAM,UAAU,GAAG,CAAC,IAAIN,OAAA,CAAAE,uBAAuB;AACzCF,OAAA,CAAAO,QAAQ,GAAG,CAAC,IAAIP,OAAA,CAAAE,uBAAuB;AACvCF,OAAA,CAAAQ,gBAAgB,GAAG,CAAC,IAAIR,OAAA,CAAAE,uBAAuB;AAC/CF,OAAA,CAAAS,YAAY,GAAG,CAAC,IAAIT,OAAA,CAAAE,uBAAuB;AAC3CF,OAAA,CAAAU,oBAAoB,GAAG,CAAC,IAAIV,OAAA,CAAAE,uBAAuB;AAEhE;AACA,SAAgBS,2BAA2BA,CACzCC,OAAe,EACfC,YAAoB,EACpBC,UAAkB;EAElB,OAAOA,UAAU,GAAGD,YAAY,GAAGD,OAAO;AAC5C;AANAZ,OAAA,CAAAW,2BAAA,GAAAA,2BAAA;AAQA,IAAMI,sBAAsB,GAAG,EAAE,GAAGf,OAAA,CAAAI,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}