import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
var _excluded = ["value", "defaultValue", "format", "onChange", "readOnly", "onError", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear", "minDate", "maxDate", "disableFuture", "disablePast", "minTime", "maxTime", "minDateTime", "maxDateTime", "minutesStep", "disableIgnoringDatePartForTimeValidation", "shouldDisableClock", "shouldDisableTime", "selectedSections", "onSelectedSectionsChange", "ampm", "unstableFieldRef"];
import { singleItemFieldValueManager, singleItemValueManager } from '../internals/utils/valueManagers';
import { useField } from '../internals/hooks/useField';
import { validateDateTime } from '../internals/hooks/validation/useDateTimeValidation';
import { applyDefaultDate } from '../internals/utils/date-utils';
import { useUtils, useDefaultDates } from '../internals/hooks/useUtils';
var useDefaultizedDateTimeField = function useDefaultizedDateTimeField(props) {
  var _props$ampm, _props$disablePast, _props$disableFuture, _props$format, _props$minDateTime, _props$maxDateTime, _props$minDateTime2, _props$maxDateTime2;
  var utils = useUtils();
  var defaultDates = useDefaultDates();
  var ampm = (_props$ampm = props.ampm) != null ? _props$ampm : utils.is12HourCycleInCurrentLocale();
  var defaultFormat = ampm ? utils.formats.keyboardDateTime12h : utils.formats.keyboardDateTime24h;
  return _extends({}, props, {
    disablePast: (_props$disablePast = props.disablePast) != null ? _props$disablePast : false,
    disableFuture: (_props$disableFuture = props.disableFuture) != null ? _props$disableFuture : false,
    format: (_props$format = props.format) != null ? _props$format : defaultFormat,
    disableIgnoringDatePartForTimeValidation: Boolean(props.minDateTime || props.maxDateTime),
    minDate: applyDefaultDate(utils, (_props$minDateTime = props.minDateTime) != null ? _props$minDateTime : props.minDate, defaultDates.minDate),
    maxDate: applyDefaultDate(utils, (_props$maxDateTime = props.maxDateTime) != null ? _props$maxDateTime : props.maxDate, defaultDates.maxDate),
    minTime: (_props$minDateTime2 = props.minDateTime) != null ? _props$minDateTime2 : props.minTime,
    maxTime: (_props$maxDateTime2 = props.maxDateTime) != null ? _props$maxDateTime2 : props.maxTime
  });
};
export var useDateTimeField = function useDateTimeField(_ref) {
  var props = _ref.props,
    inputRef = _ref.inputRef;
  var _useDefaultizedDateTi = useDefaultizedDateTimeField(props),
    value = _useDefaultizedDateTi.value,
    defaultValue = _useDefaultizedDateTi.defaultValue,
    format = _useDefaultizedDateTi.format,
    onChange = _useDefaultizedDateTi.onChange,
    readOnly = _useDefaultizedDateTi.readOnly,
    onError = _useDefaultizedDateTi.onError,
    shouldDisableDate = _useDefaultizedDateTi.shouldDisableDate,
    shouldDisableMonth = _useDefaultizedDateTi.shouldDisableMonth,
    shouldDisableYear = _useDefaultizedDateTi.shouldDisableYear,
    minDate = _useDefaultizedDateTi.minDate,
    maxDate = _useDefaultizedDateTi.maxDate,
    disableFuture = _useDefaultizedDateTi.disableFuture,
    disablePast = _useDefaultizedDateTi.disablePast,
    minTime = _useDefaultizedDateTi.minTime,
    maxTime = _useDefaultizedDateTi.maxTime,
    minDateTime = _useDefaultizedDateTi.minDateTime,
    maxDateTime = _useDefaultizedDateTi.maxDateTime,
    minutesStep = _useDefaultizedDateTi.minutesStep,
    disableIgnoringDatePartForTimeValidation = _useDefaultizedDateTi.disableIgnoringDatePartForTimeValidation,
    shouldDisableClock = _useDefaultizedDateTi.shouldDisableClock,
    shouldDisableTime = _useDefaultizedDateTi.shouldDisableTime,
    selectedSections = _useDefaultizedDateTi.selectedSections,
    onSelectedSectionsChange = _useDefaultizedDateTi.onSelectedSectionsChange,
    ampm = _useDefaultizedDateTi.ampm,
    unstableFieldRef = _useDefaultizedDateTi.unstableFieldRef,
    other = _objectWithoutProperties(_useDefaultizedDateTi, _excluded);
  return useField({
    inputRef: inputRef,
    forwardedProps: other,
    internalProps: {
      value: value,
      defaultValue: defaultValue,
      format: format,
      onChange: onChange,
      readOnly: readOnly,
      onError: onError,
      shouldDisableDate: shouldDisableDate,
      shouldDisableMonth: shouldDisableMonth,
      shouldDisableYear: shouldDisableYear,
      minDate: minDate,
      maxDate: maxDate,
      disableFuture: disableFuture,
      disablePast: disablePast,
      minTime: minTime,
      maxTime: maxTime,
      minutesStep: minutesStep,
      shouldDisableClock: shouldDisableClock,
      shouldDisableTime: shouldDisableTime,
      disableIgnoringDatePartForTimeValidation: disableIgnoringDatePartForTimeValidation,
      selectedSections: selectedSections,
      onSelectedSectionsChange: onSelectedSectionsChange,
      ampm: ampm,
      unstableFieldRef: unstableFieldRef
    },
    valueManager: singleItemValueManager,
    fieldValueManager: singleItemFieldValueManager,
    validator: validateDateTime,
    valueType: 'date-time'
  });
};