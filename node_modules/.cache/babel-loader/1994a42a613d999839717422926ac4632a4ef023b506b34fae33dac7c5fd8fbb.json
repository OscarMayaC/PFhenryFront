{"ast":null,"code":"import { Color } from 'three';\n\n/**\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nconst LuminosityHighPassShader = {\n  shaderID: 'luminosityHighPass',\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    luminosityThreshold: {\n      value: 1.0\n    },\n    smoothWidth: {\n      value: 1.0\n    },\n    defaultColor: {\n      value: new Color(0x000000)\n    },\n    defaultOpacity: {\n      value: 0.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform vec3 defaultColor;', 'uniform float defaultOpacity;', 'uniform float luminosityThreshold;', 'uniform float smoothWidth;', 'varying vec2 vUv;', 'void main() {', '\tvec4 texel = texture2D( tDiffuse, vUv );', '\tvec3 luma = vec3( 0.299, 0.587, 0.114 );', '\tfloat v = dot( texel.xyz, luma );', '\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );', '\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );', '\tgl_FragColor = mix( outputColor, texel, alpha );', '}'].join('\\n')\n};\nexport { LuminosityHighPassShader };","map":{"version":3,"names":["Color","LuminosityHighPassShader","shaderID","uniforms","tDiffuse","value","luminosityThreshold","smoothWidth","defaultColor","defaultOpacity","vertexShader","join","fragmentShader"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/shaders/LuminosityHighPassShader.js"],"sourcesContent":["import { Color } from 'three';\n\n/**\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nconst LuminosityHighPassShader = {\n  shaderID: 'luminosityHighPass',\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    luminosityThreshold: {\n      value: 1.0\n    },\n    smoothWidth: {\n      value: 1.0\n    },\n    defaultColor: {\n      value: new Color(0x000000)\n    },\n    defaultOpacity: {\n      value: 0.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform vec3 defaultColor;', 'uniform float defaultOpacity;', 'uniform float luminosityThreshold;', 'uniform float smoothWidth;', 'varying vec2 vUv;', 'void main() {', '\tvec4 texel = texture2D( tDiffuse, vUv );', '\tvec3 luma = vec3( 0.299, 0.587, 0.114 );', '\tfloat v = dot( texel.xyz, luma );', '\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );', '\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );', '\tgl_FragColor = mix( outputColor, texel, alpha );', '}'].join('\\n')\n};\n\nexport { LuminosityHighPassShader };\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,OAAO;;AAE7B;AACA;AACA;AACA;;AAEA,MAAMC,wBAAwB,GAAG;EAC/BC,QAAQ,EAAE,oBAAoB;EAC9BC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MACRC,KAAK,EAAE;IACT,CAAC;IACDC,mBAAmB,EAAE;MACnBD,KAAK,EAAE;IACT,CAAC;IACDE,WAAW,EAAE;MACXF,KAAK,EAAE;IACT,CAAC;IACDG,YAAY,EAAE;MACZH,KAAK,EAAE,IAAIL,KAAK,CAAC,QAAQ;IAC3B,CAAC;IACDS,cAAc,EAAE;MACdJ,KAAK,EAAE;IACT;EACF,CAAC;EACDK,YAAY,EAAE,CAAC,mBAAmB,EAAE,eAAe,EAAE,YAAY,EAAE,4EAA4E,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAChKC,cAAc,EAAE,CAAC,6BAA6B,EAAE,4BAA4B,EAAE,+BAA+B,EAAE,oCAAoC,EAAE,4BAA4B,EAAE,mBAAmB,EAAE,eAAe,EAAE,2CAA2C,EAAE,2CAA2C,EAAE,oCAAoC,EAAE,+DAA+D,EAAE,yFAAyF,EAAE,mDAAmD,EAAE,GAAG,CAAC,CAACD,IAAI,CAAC,IAAI;AAC1jB,CAAC;AAED,SAASV,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}