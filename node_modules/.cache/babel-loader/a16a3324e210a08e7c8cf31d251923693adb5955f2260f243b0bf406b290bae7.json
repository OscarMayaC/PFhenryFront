{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nclass VRButton {\n  static createButton(renderer) {\n    let sessionInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const button = document.createElement('button');\n    function /*device*/\n    showEnterVR() {\n      let currentSession = null;\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n      function /*event*/\n      onSessionEnded() {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      } //\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n      button.onmouseenter = () => {\n        button.style.opacity = '1.0';\n      };\n      button.onmouseleave = () => {\n        button.style.opacity = '0.5';\n      };\n      button.onclick = () => {\n        if (currentSession === null) {\n          var _xr;\n\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n          const optionalFeatures = [sessionInit.optionalFeatures, 'local-floor', 'bounded-floor', 'hand-tracking'].flat().filter(Boolean);\n          (_xr = navigator.xr) === null || _xr === void 0 ? void 0 : _xr.requestSession('immersive-vr', {\n            ...sessionInit,\n            optionalFeatures\n          }).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n    if ('xr' in navigator) {\n      stylizeElement(button);\n      button.id = 'VRButton';\n      button.style.display = 'none' // Query for session mode\n      ;\n\n      navigator.xr.isSessionSupported('immersive-vr').then(supported => {\n        supported ? showEnterVR() : showWebXRNotFound();\n        if (supported && VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      });\n      return button;\n    } else {\n      const message = document.createElement('a');\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n  static registerSessionGrantedListener() {\n    if ('xr' in navigator) {\n      navigator.xr.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n}\n_defineProperty(VRButton, \"xrSessionIsGranted\", false);\nexport { VRButton };","map":{"version":3,"names":["_defineProperty","VRButton","createButton","renderer","sessionInit","arguments","length","undefined","button","document","createElement","showEnterVR","currentSession","onSessionStarted","session","addEventListener","onSessionEnded","xr","setSession","textContent","removeEventListener","style","display","cursor","left","width","onmouseenter","opacity","onmouseleave","onclick","_xr","optionalFeatures","flat","filter","Boolean","navigator","requestSession","then","end","disableButton","showWebXRNotFound","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","outline","zIndex","id","isSessionSupported","supported","xrSessionIsGranted","click","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","registerSessionGrantedListener"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/webxr/VRButton.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nclass VRButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n\n    function\n      /*device*/\n    showEnterVR() {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n\n      function\n        /*event*/\n      onSessionEnded() {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      } //\n\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n\n      button.onmouseenter = () => {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = () => {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = () => {\n        if (currentSession === null) {\n          var _xr;\n\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n          const optionalFeatures = [sessionInit.optionalFeatures, 'local-floor', 'bounded-floor', 'hand-tracking'].flat().filter(Boolean);\n          (_xr = navigator.xr) === null || _xr === void 0 ? void 0 : _xr.requestSession('immersive-vr', { ...sessionInit,\n            optionalFeatures\n          }).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      stylizeElement(button);\n      button.id = 'VRButton';\n      button.style.display = 'none' // Query for session mode\n      ;\n      navigator.xr.isSessionSupported('immersive-vr').then(supported => {\n        supported ? showEnterVR() : showWebXRNotFound();\n\n        if (supported && VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      });\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n  static registerSessionGrantedListener() {\n    if ('xr' in navigator) {\n      navigator.xr.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n\n}\n\n_defineProperty(VRButton, \"xrSessionIsGranted\", false);\n\nexport { VRButton };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}