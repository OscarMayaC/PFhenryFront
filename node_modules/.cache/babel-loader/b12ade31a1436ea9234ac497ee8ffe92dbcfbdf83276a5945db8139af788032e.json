{"ast":null,"code":"import { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from 'three';\nconst _taskCache = new WeakMap();\nclass Rhino3dmLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.libraryPath = '';\n    this.libraryPending = null;\n    this.libraryBinary = null;\n    this.libraryConfig = {};\n    this.url = '';\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.workerConfig = {};\n    this.materials = [];\n  }\n  setLibraryPath(path) {\n    this.libraryPath = path;\n    return this;\n  }\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    this.url = url;\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n      this.decodeObjects(buffer, url).then(onLoad).catch(onError);\n    }, onProgress, onError);\n  }\n  debug() {\n    console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));\n  }\n  decodeObjects(buffer, url) {\n    let worker;\n    let taskID;\n    const taskCost = buffer.byteLength;\n    const objectPending = this._getWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++; //hmmm\n\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'decode',\n          id: taskID,\n          buffer\n        }, [buffer]); //this.debug();\n      });\n    }).then(message => this._createGeometry(message.data)); // Remove task from the task list.\n    // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n    objectPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID); //this.debug();\n      }\n    }); // Cache the task result.\n\n    _taskCache.set(buffer, {\n      url: url,\n      promise: objectPending\n    });\n    return objectPending;\n  }\n  parse(data, onLoad, onError) {\n    this.decodeObjects(data, '').then(onLoad).catch(onError);\n  }\n  _compareMaterials(material) {\n    const mat = {};\n    mat.name = material.name;\n    mat.color = {};\n    mat.color.r = material.color.r;\n    mat.color.g = material.color.g;\n    mat.color.b = material.color.b;\n    mat.type = material.type;\n    for (let i = 0; i < this.materials.length; i++) {\n      const m = this.materials[i];\n      const _mat = {};\n      _mat.name = m.name;\n      _mat.color = {};\n      _mat.color.r = m.color.r;\n      _mat.color.g = m.color.g;\n      _mat.color.b = m.color.b;\n      _mat.type = m.type;\n      if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n        return m;\n      }\n    }\n    this.materials.push(material);\n    return material;\n  }\n  _createMaterial(material) {\n    if (material === undefined) {\n      return new MeshStandardMaterial({\n        color: new Color(1, 1, 1),\n        metalness: 0.8,\n        name: 'default',\n        side: 2\n      });\n    }\n    const _diffuseColor = material.diffuseColor;\n    const diffusecolor = new Color(_diffuseColor.r / 255.0, _diffuseColor.g / 255.0, _diffuseColor.b / 255.0);\n    if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n      diffusecolor.r = 1;\n      diffusecolor.g = 1;\n      diffusecolor.b = 1;\n    } // console.log( material );\n\n    const mat = new MeshStandardMaterial({\n      color: diffusecolor,\n      name: material.name,\n      side: 2,\n      transparent: material.transparency > 0 ? true : false,\n      opacity: 1.0 - material.transparency\n    });\n    const textureLoader = new TextureLoader();\n    for (let i = 0; i < material.textures.length; i++) {\n      const texture = material.textures[i];\n      if (texture.image !== null) {\n        const map = textureLoader.load(texture.image);\n        switch (texture.type) {\n          case 'Diffuse':\n            mat.map = map;\n            break;\n          case 'Bump':\n            mat.bumpMap = map;\n            break;\n          case 'Transparency':\n            mat.alphaMap = map;\n            mat.transparent = true;\n            break;\n          case 'Emap':\n            mat.envMap = map;\n            break;\n        }\n      }\n    }\n    return mat;\n  }\n  _createGeometry(data) {\n    // console.log(data);\n    const object = new Object3D();\n    const instanceDefinitionObjects = [];\n    const instanceDefinitions = [];\n    const instanceReferences = [];\n    object.userData['layers'] = data.layers;\n    object.userData['groups'] = data.groups;\n    object.userData['settings'] = data.settings;\n    object.userData['objectType'] = 'File3dm';\n    object.userData['materials'] = null;\n    object.name = this.url;\n    let objects = data.objects;\n    const materials = data.materials;\n    for (let i = 0; i < objects.length; i++) {\n      const obj = objects[i];\n      const attributes = obj.attributes;\n      switch (obj.objectType) {\n        case 'InstanceDefinition':\n          instanceDefinitions.push(obj);\n          break;\n        case 'InstanceReference':\n          instanceReferences.push(obj);\n          break;\n        default:\n          let _object;\n          if (attributes.materialIndex >= 0) {\n            const rMaterial = materials[attributes.materialIndex];\n            let material = this._createMaterial(rMaterial);\n            material = this._compareMaterials(material);\n            _object = this._createObject(obj, material);\n          } else {\n            const material = this._createMaterial();\n            _object = this._createObject(obj, material);\n          }\n          if (_object === undefined) {\n            continue;\n          }\n          const layer = data.layers[attributes.layerIndex];\n          _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n          if (attributes.isInstanceDefinitionObject) {\n            instanceDefinitionObjects.push(_object);\n          } else {\n            object.add(_object);\n          }\n          break;\n      }\n    }\n    for (let i = 0; i < instanceDefinitions.length; i++) {\n      const iDef = instanceDefinitions[i];\n      objects = [];\n      for (let j = 0; j < iDef.attributes.objectIds.length; j++) {\n        const objId = iDef.attributes.objectIds[j];\n        for (let p = 0; p < instanceDefinitionObjects.length; p++) {\n          const idoId = instanceDefinitionObjects[p].userData.attributes.id;\n          if (objId === idoId) {\n            objects.push(instanceDefinitionObjects[p]);\n          }\n        }\n      } // Currently clones geometry and does not take advantage of instancing\n\n      for (let j = 0; j < instanceReferences.length; j++) {\n        const iRef = instanceReferences[j];\n        if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n          const iRefObject = new Object3D();\n          const xf = iRef.geometry.xform.array;\n          const matrix = new Matrix4();\n          matrix.set(xf[0], xf[1], xf[2], xf[3], xf[4], xf[5], xf[6], xf[7], xf[8], xf[9], xf[10], xf[11], xf[12], xf[13], xf[14], xf[15]);\n          iRefObject.applyMatrix4(matrix);\n          for (let p = 0; p < objects.length; p++) {\n            iRefObject.add(objects[p].clone(true));\n          }\n          object.add(iRefObject);\n        }\n      }\n    }\n    object.userData['materials'] = this.materials;\n    return object;\n  }\n  _createObject(obj, mat) {\n    const loader = new BufferGeometryLoader();\n    const attributes = obj.attributes;\n    let geometry, material, _color, color;\n    switch (obj.objectType) {\n      case 'Point':\n      case 'PointSet':\n        geometry = loader.parse(obj.geometry);\n        if (geometry.attributes.hasOwnProperty('color')) {\n          material = new PointsMaterial({\n            vertexColors: true,\n            sizeAttenuation: false,\n            size: 2\n          });\n        } else {\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n          material = new PointsMaterial({\n            color: color,\n            sizeAttenuation: false,\n            size: 2\n          });\n        }\n        material = this._compareMaterials(material);\n        const points = new Points(geometry, material);\n        points.userData['attributes'] = attributes;\n        points.userData['objectType'] = obj.objectType;\n        if (attributes.name) {\n          points.name = attributes.name;\n        }\n        return points;\n      case 'Mesh':\n      case 'Extrusion':\n      case 'SubD':\n      case 'Brep':\n        if (obj.geometry === null) return;\n        geometry = loader.parse(obj.geometry);\n        if (geometry.attributes.hasOwnProperty('color')) {\n          mat.vertexColors = true;\n        }\n        if (mat === null) {\n          mat = this._createMaterial();\n          mat = this._compareMaterials(mat);\n        }\n        const mesh = new Mesh(geometry, mat);\n        mesh.castShadow = attributes.castsShadows;\n        mesh.receiveShadow = attributes.receivesShadows;\n        mesh.userData['attributes'] = attributes;\n        mesh.userData['objectType'] = obj.objectType;\n        if (attributes.name) {\n          mesh.name = attributes.name;\n        }\n        return mesh;\n      case 'Curve':\n        geometry = loader.parse(obj.geometry);\n        _color = attributes.drawColor;\n        color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n        material = new LineBasicMaterial({\n          color: color\n        });\n        material = this._compareMaterials(material);\n        const lines = new Line(geometry, material);\n        lines.userData['attributes'] = attributes;\n        lines.userData['objectType'] = obj.objectType;\n        if (attributes.name) {\n          lines.name = attributes.name;\n        }\n        return lines;\n      case 'TextDot':\n        geometry = obj.geometry;\n        const ctx = document.createElement('canvas').getContext('2d');\n        const font = `${geometry.fontHeight}px ${geometry.fontFace}`;\n        ctx.font = font;\n        const width = ctx.measureText(geometry.text).width + 10;\n        const height = geometry.fontHeight + 10;\n        const r = window.devicePixelRatio;\n        ctx.canvas.width = width * r;\n        ctx.canvas.height = height * r;\n        ctx.canvas.style.width = width + 'px';\n        ctx.canvas.style.height = height + 'px';\n        ctx.setTransform(r, 0, 0, r, 0, 0);\n        ctx.font = font;\n        ctx.textBaseline = 'middle';\n        ctx.textAlign = 'center';\n        color = attributes.drawColor;\n        ctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\n        ctx.fillRect(0, 0, width, height);\n        ctx.fillStyle = 'white';\n        ctx.fillText(geometry.text, width / 2, height / 2);\n        const texture = new CanvasTexture(ctx.canvas);\n        texture.minFilter = LinearFilter;\n        texture.wrapS = ClampToEdgeWrapping;\n        texture.wrapT = ClampToEdgeWrapping;\n        material = new SpriteMaterial({\n          map: texture,\n          depthTest: false\n        });\n        const sprite = new Sprite(material);\n        sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n        sprite.scale.set(width / 10, height / 10, 1.0);\n        sprite.userData['attributes'] = attributes;\n        sprite.userData['objectType'] = obj.objectType;\n        if (attributes.name) {\n          sprite.name = attributes.name;\n        }\n        return sprite;\n      case 'Light':\n        geometry = obj.geometry;\n        let light;\n        if (geometry.isDirectionalLight) {\n          light = new DirectionalLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isPointLight) {\n          light = new PointLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isRectangularLight) {\n          light = new RectAreaLight();\n          const width = Math.abs(geometry.width[2]);\n          const height = Math.abs(geometry.length[0]);\n          light.position.set(geometry.location[0] - height / 2, geometry.location[1], geometry.location[2] - width / 2);\n          light.height = height;\n          light.width = width;\n          light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n        } else if (geometry.isSpotLight) {\n          light = new SpotLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.angle = geometry.spotAngleRadians;\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isLinearLight) {\n          console.warn('THREE.3DMLoader:  No conversion exists for linear lights.');\n          return;\n        }\n        if (light) {\n          light.intensity = geometry.intensity;\n          _color = geometry.diffuse;\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n          light.color = color;\n          light.userData['attributes'] = attributes;\n          light.userData['objectType'] = obj.objectType;\n        }\n        return light;\n    }\n  }\n  _initLibrary() {\n    if (!this.libraryPending) {\n      // Load rhino3dm wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.libraryPath);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('rhino3dm.js', resolve, undefined, reject);\n      }); // Load rhino3dm WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.libraryPath);\n      binaryLoader.setResponseType('arraybuffer');\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('rhino3dm.wasm', resolve, undefined, reject);\n      });\n      this.libraryPending = Promise.all([jsContent, binaryContent]).then(_ref => {\n        let [jsContent, binaryContent] = _ref;\n        //this.libraryBinary = binaryContent;\n        this.libraryConfig.wasmBinary = binaryContent;\n        const fn = Rhino3dmWorker.toString();\n        const body = ['/* rhino3dm.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n      });\n    }\n    return this.libraryPending;\n  }\n  _getWorker(taskCost) {\n    return this._initLibrary().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskCosts = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          libraryConfig: this.libraryConfig\n        });\n        worker.onmessage = function (e) {\n          const message = e.data;\n          switch (message.type) {\n            case 'decode':\n              worker._callbacks[message.id].resolve(message);\n              break;\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n}\n/* WEB WORKER */\n\nfunction Rhino3dmWorker() {\n  let libraryPending;\n  let libraryConfig;\n  let rhino;\n  onmessage = function (e) {\n    const message = e.data;\n    switch (message.type) {\n      case 'init':\n        libraryConfig = message.libraryConfig;\n        const wasmBinary = libraryConfig.wasmBinary;\n        let RhinoModule;\n        libraryPending = new Promise(function (resolve) {\n          /* Like Basis Loader */\n          RhinoModule = {\n            wasmBinary,\n            onRuntimeInitialized: resolve\n          };\n          rhino3dm(RhinoModule); // eslint-disable-line no-undef\n        }).then(() => {\n          rhino = RhinoModule;\n        });\n        break;\n      case 'decode':\n        const buffer = message.buffer;\n        libraryPending.then(() => {\n          const data = decodeObjects(rhino, buffer);\n          self.postMessage({\n            type: 'decode',\n            id: message.id,\n            data\n          });\n        });\n        break;\n    }\n  };\n  function decodeObjects(rhino, buffer) {\n    const arr = new Uint8Array(buffer);\n    const doc = rhino.File3dm.fromByteArray(arr);\n    const objects = [];\n    const materials = [];\n    const layers = [];\n    const views = [];\n    const namedViews = [];\n    const groups = []; //Handle objects\n\n    const objs = doc.objects();\n    const cnt = objs.count;\n    for (let i = 0; i < cnt; i++) {\n      const _object = objs.get(i);\n      const object = extractObjectData(_object, doc);\n      _object.delete();\n      if (object) {\n        objects.push(object);\n      }\n    } // Handle instance definitions\n    // console.log( `Instance Definitions Count: ${doc.instanceDefinitions().count()}` );\n\n    for (let i = 0; i < doc.instanceDefinitions().count(); i++) {\n      const idef = doc.instanceDefinitions().get(i);\n      const idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({\n        geometry: null,\n        attributes: idefAttributes,\n        objectType: 'InstanceDefinition'\n      });\n    } // Handle materials\n\n    const textureTypes = [\n    // rhino.TextureType.Bitmap,\n    rhino.TextureType.Diffuse, rhino.TextureType.Bump, rhino.TextureType.Transparency, rhino.TextureType.Opacity, rhino.TextureType.Emap];\n    const pbrTextureTypes = [rhino.TextureType.PBR_BaseColor, rhino.TextureType.PBR_Subsurface, rhino.TextureType.PBR_SubsurfaceScattering, rhino.TextureType.PBR_SubsurfaceScatteringRadius, rhino.TextureType.PBR_Metallic, rhino.TextureType.PBR_Specular, rhino.TextureType.PBR_SpecularTint, rhino.TextureType.PBR_Roughness, rhino.TextureType.PBR_Anisotropic, rhino.TextureType.PBR_Anisotropic_Rotation, rhino.TextureType.PBR_Sheen, rhino.TextureType.PBR_SheenTint, rhino.TextureType.PBR_Clearcoat, rhino.TextureType.PBR_ClearcoatBump, rhino.TextureType.PBR_ClearcoatRoughness, rhino.TextureType.PBR_OpacityIor, rhino.TextureType.PBR_OpacityRoughness, rhino.TextureType.PBR_Emission, rhino.TextureType.PBR_AmbientOcclusion, rhino.TextureType.PBR_Displacement];\n    for (let i = 0; i < doc.materials().count(); i++) {\n      const _material = doc.materials().get(i);\n      const _pbrMaterial = _material.physicallyBased();\n      let material = extractProperties(_material);\n      const textures = [];\n      for (let j = 0; j < textureTypes.length; j++) {\n        const _texture = _material.getTexture(textureTypes[j]);\n        if (_texture) {\n          let textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          const texture = {\n            type: textureType\n          };\n          const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n          if (image) {\n            texture.image = 'data:image/png;base64,' + image;\n          } else {\n            console.warn(`THREE.3DMLoader: Image for ${textureType} texture not embedded in file.`);\n            texture.image = null;\n          }\n          textures.push(texture);\n          _texture.delete();\n        }\n      }\n      material.textures = textures;\n      if (_pbrMaterial.supported) {\n        console.log('pbr true');\n        for (let j = 0; j < pbrTextureTypes.length; j++) {\n          const _texture = _material.getTexture(textureTypes[j]);\n          if (_texture) {\n            const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n            let textureType = textureTypes[j].constructor.name;\n            textureType = textureType.substring(12, textureType.length);\n            const texture = {\n              type: textureType,\n              image: 'data:image/png;base64,' + image\n            };\n            textures.push(texture);\n            _texture.delete();\n          }\n        }\n        const pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n      materials.push(material);\n      _material.delete();\n      _pbrMaterial.delete();\n    } // Handle layers\n\n    for (let i = 0; i < doc.layers().count(); i++) {\n      const _layer = doc.layers().get(i);\n      const layer = extractProperties(_layer);\n      layers.push(layer);\n      _layer.delete();\n    } // Handle views\n\n    for (let i = 0; i < doc.views().count(); i++) {\n      const _view = doc.views().get(i);\n      const view = extractProperties(_view);\n      views.push(view);\n      _view.delete();\n    } // Handle named views\n\n    for (let i = 0; i < doc.namedViews().count(); i++) {\n      const _namedView = doc.namedViews().get(i);\n      const namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n      _namedView.delete();\n    } // Handle groups\n\n    for (let i = 0; i < doc.groups().count(); i++) {\n      const _group = doc.groups().get(i);\n      const group = extractProperties(_group);\n      groups.push(group);\n      _group.delete();\n    } // Handle settings\n\n    const settings = extractProperties(doc.settings()); //TODO: Handle other document stuff like dimstyles, instance definitions, bitmaps etc.\n    // Handle dimstyles\n    // console.log( `Dimstyle Count: ${doc.dimstyles().count()}` );\n    // Handle bitmaps\n    // console.log( `Bitmap Count: ${doc.bitmaps().count()}` );\n    // Handle strings -- this seems to be broken at the moment in rhino3dm\n    // console.log( `Document Strings Count: ${doc.strings().count()}` );\n\n    /*\n    for( var i = 0; i < doc.strings().count(); i++ ){\n    var _string= doc.strings().get( i );\n    console.log(_string);\n    var string = extractProperties( _group );\n    strings.push( string );\n    _string.delete();\n    }\n    */\n\n    doc.delete();\n    return {\n      objects,\n      materials,\n      layers,\n      views,\n      namedViews,\n      groups,\n      settings\n    };\n  }\n  function extractObjectData(object, doc) {\n    const _geometry = object.geometry();\n    const _attributes = object.attributes();\n    let objectType = _geometry.objectType;\n    let geometry, attributes, position, data, mesh; // skip instance definition objects\n    //if( _attributes.isInstanceDefinitionObject ) { continue; }\n    // TODO: handle other geometry types\n\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        const pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = 'Float32Array';\n        position.array = [];\n        for (let j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n      case rhino.ObjectType.Point:\n        const pt = _geometry.location;\n        position = {};\n        const color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = 'Float32Array';\n        position.array = [pt[0], pt[1], pt[2]];\n        const _color = _attributes.drawColor(doc);\n        color.itemSize = 3;\n        color.type = 'Float32Array';\n        color.array = [_color.r / 255.0, _color.g / 255.0, _color.b / 255.0];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n      case rhino.ObjectType.Brep:\n        const faces = _geometry.faces();\n        mesh = new rhino.Mesh();\n        for (let faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          const face = faces.get(faceIndex);\n          const _mesh = face.getMesh(rhino.MeshType.Any);\n          if (_mesh) {\n            mesh.append(_mesh);\n            _mesh.delete();\n          }\n          face.delete();\n        }\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n        mesh.delete();\n        break;\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n      case rhino.ObjectType.SubD:\n        // TODO: precalculate resulting vertices and faces and warn on excessive results\n        _geometry.subdivide(3);\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n\n      /*\n      case rhino.ObjectType.Annotation:\n      case rhino.ObjectType.Hatch:\n      case rhino.ObjectType.ClipPlane:\n      */\n\n      default:\n        console.warn(`THREE.3DMLoader: TODO: Implement ${objectType.constructor.name}`);\n        break;\n    }\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return {\n        geometry,\n        attributes,\n        objectType\n      };\n    } else {\n      console.warn(`THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`);\n    }\n  }\n  function extractProperties(object) {\n    const result = {};\n    for (const property in object) {\n      const value = object[property];\n      if (typeof value !== 'function') {\n        if (typeof value === 'object' && value !== null && value.hasOwnProperty('constructor')) {\n          result[property] = {\n            name: value.constructor.name,\n            value: value.value\n          };\n        } else {\n          result[property] = value;\n        }\n      }\n    }\n    return result;\n  }\n  function curveToPoints(curve, pointLimit) {\n    let pointCount = pointLimit;\n    let rc = [];\n    const ts = [];\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n      for (let i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.PolyCurve) {\n      const segmentCount = curve.segmentCount;\n      for (let i = 0; i < segmentCount; i++) {\n        const segment = curve.segmentCurve(i);\n        const segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount; // alternative to this hardcoded version: https://stackoverflow.com/a/18499923/2179399\n    }\n\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      const pLine = curve.tryGetPolyline();\n      for (let i = 0; i < pLine.count; i++) {\n        rc.push(pLine.get(i));\n      }\n      pLine.delete();\n      return rc;\n    }\n    const domain = curve.domain;\n    const divisions = pointCount - 1.0;\n    for (let j = 0; j < pointCount; j++) {\n      const t = domain[0] + j / divisions * (domain[1] - domain[0]);\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n      const tan = curve.tangentAt(t);\n      const prevTan = curve.tangentAt(ts.slice(-1)[0]); // Duplicated from THREE.Vector3\n      // How to pass imports to worker?\n\n      const tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      const ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      const denominator = Math.sqrt(tS * ptS);\n      let angle;\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        const theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n      if (angle < 0.1) continue;\n      ts.push(t);\n    }\n    rc = ts.map(t => curve.pointAt(t));\n    return rc;\n  }\n}\nexport { Rhino3dmLoader };","map":{"version":3,"names":["Loader","FileLoader","MeshStandardMaterial","Color","TextureLoader","Object3D","Matrix4","BufferGeometryLoader","DirectionalLight","PointLight","RectAreaLight","Vector3","SpotLight","CanvasTexture","LinearFilter","ClampToEdgeWrapping","SpriteMaterial","Sprite","LineBasicMaterial","Line","Mesh","PointsMaterial","Points","_taskCache","WeakMap","Rhino3dmLoader","constructor","manager","libraryPath","libraryPending","libraryBinary","libraryConfig","url","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","materials","setLibraryPath","path","setWorkerLimit","load","onLoad","onProgress","onError","loader","setPath","setResponseType","setRequestHeader","requestHeader","buffer","has","cachedTask","get","promise","then","catch","decodeObjects","debug","console","log","map","worker","_taskLoad","taskID","taskCost","byteLength","objectPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","_createGeometry","data","_releaseTask","set","parse","_compareMaterials","material","mat","name","color","r","g","b","i","length","m","_mat","JSON","stringify","push","_createMaterial","undefined","metalness","side","_diffuseColor","diffuseColor","diffusecolor","transparent","transparency","opacity","textureLoader","textures","texture","image","bumpMap","alphaMap","envMap","object","instanceDefinitionObjects","instanceDefinitions","instanceReferences","userData","layers","groups","settings","objects","obj","attributes","objectType","_object","materialIndex","rMaterial","_createObject","layer","layerIndex","visible","isInstanceDefinitionObject","add","iDef","j","objectIds","objId","p","idoId","iRef","geometry","parentIdefId","iRefObject","xf","xform","array","matrix","applyMatrix4","clone","_color","hasOwnProperty","vertexColors","sizeAttenuation","size","drawColor","points","mesh","castShadow","castsShadows","receiveShadow","receivesShadows","lines","ctx","document","createElement","getContext","font","fontHeight","fontFace","width","measureText","text","height","window","devicePixelRatio","canvas","style","setTransform","textBaseline","textAlign","fillStyle","a","fillRect","fillText","minFilter","wrapS","wrapT","depthTest","sprite","position","point","scale","light","isDirectionalLight","location","target","direction","shadow","normalBias","isPointLight","isRectangularLight","Math","abs","lookAt","isSpotLight","angle","spotAngleRadians","isLinearLight","warn","intensity","diffuse","_initLibrary","jsLoader","jsContent","binaryLoader","binaryContent","all","_ref","wasmBinary","fn","Rhino3dmWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","_taskCosts","onmessage","e","error","sort","dispose","terminate","rhino","RhinoModule","onRuntimeInitialized","rhino3dm","self","arr","Uint8Array","doc","File3dm","fromByteArray","views","namedViews","objs","cnt","count","extractObjectData","delete","idef","idefAttributes","extractProperties","getObjectIds","textureTypes","TextureType","Diffuse","Bump","Transparency","Opacity","Emap","pbrTextureTypes","PBR_BaseColor","PBR_Subsurface","PBR_SubsurfaceScattering","PBR_SubsurfaceScatteringRadius","PBR_Metallic","PBR_Specular","PBR_SpecularTint","PBR_Roughness","PBR_Anisotropic","PBR_Anisotropic_Rotation","PBR_Sheen","PBR_SheenTint","PBR_Clearcoat","PBR_ClearcoatBump","PBR_ClearcoatRoughness","PBR_OpacityIor","PBR_OpacityRoughness","PBR_Emission","PBR_AmbientOcclusion","PBR_Displacement","_material","_pbrMaterial","physicallyBased","_texture","getTexture","textureType","getEmbeddedFileAsBase64","fileName","supported","pbMaterialProperties","Object","assign","_layer","_view","view","_namedView","namedView","_group","group","_geometry","_attributes","ObjectType","Curve","pts","curveToPoints","itemSize","Point","pt","PointSet","toThreejsJSON","Brep","faces","faceIndex","face","_mesh","getMesh","MeshType","Any","append","compact","Extrusion","TextDot","Light","InstanceReference","toFloatArray","SubD","subdivide","createFromSubDControlNet","groupCount","groupIds","getGroupList","userStringCount","userStrings","getUserStrings","result","property","value","curve","pointLimit","pointCount","rc","ts","LineCurve","pointAtStart","pointAtEnd","PolylineCurve","PolyCurve","segmentCount","segment","segmentCurve","segmentArray","concat","ArcCurve","floor","angleDegrees","NurbsCurve","degree","pLine","tryGetPolyline","domain","divisions","t","tan","tangentAt","prevTan","slice","tS","ptS","denominator","sqrt","PI","theta","x","y","z","acos","max","min","pointAt"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/loaders/3DMLoader.js"],"sourcesContent":["import { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from 'three';\n\nconst _taskCache = new WeakMap();\n\nclass Rhino3dmLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.libraryPath = '';\n    this.libraryPending = null;\n    this.libraryBinary = null;\n    this.libraryConfig = {};\n    this.url = '';\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.workerConfig = {};\n    this.materials = [];\n  }\n\n  setLibraryPath(path) {\n    this.libraryPath = path;\n    return this;\n  }\n\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    this.url = url;\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this.decodeObjects(buffer, url).then(onLoad).catch(onError);\n    }, onProgress, onError);\n  }\n\n  debug() {\n    console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));\n  }\n\n  decodeObjects(buffer, url) {\n    let worker;\n    let taskID;\n    const taskCost = buffer.byteLength;\n\n    const objectPending = this._getWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++; //hmmm\n\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'decode',\n          id: taskID,\n          buffer\n        }, [buffer]); //this.debug();\n      });\n    }).then(message => this._createGeometry(message.data)); // Remove task from the task list.\n    // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    objectPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID); //this.debug();\n\n      }\n    }); // Cache the task result.\n\n    _taskCache.set(buffer, {\n      url: url,\n      promise: objectPending\n    });\n\n    return objectPending;\n  }\n\n  parse(data, onLoad, onError) {\n    this.decodeObjects(data, '').then(onLoad).catch(onError);\n  }\n\n  _compareMaterials(material) {\n    const mat = {};\n    mat.name = material.name;\n    mat.color = {};\n    mat.color.r = material.color.r;\n    mat.color.g = material.color.g;\n    mat.color.b = material.color.b;\n    mat.type = material.type;\n\n    for (let i = 0; i < this.materials.length; i++) {\n      const m = this.materials[i];\n      const _mat = {};\n      _mat.name = m.name;\n      _mat.color = {};\n      _mat.color.r = m.color.r;\n      _mat.color.g = m.color.g;\n      _mat.color.b = m.color.b;\n      _mat.type = m.type;\n\n      if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n        return m;\n      }\n    }\n\n    this.materials.push(material);\n    return material;\n  }\n\n  _createMaterial(material) {\n    if (material === undefined) {\n      return new MeshStandardMaterial({\n        color: new Color(1, 1, 1),\n        metalness: 0.8,\n        name: 'default',\n        side: 2\n      });\n    }\n\n    const _diffuseColor = material.diffuseColor;\n    const diffusecolor = new Color(_diffuseColor.r / 255.0, _diffuseColor.g / 255.0, _diffuseColor.b / 255.0);\n\n    if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n      diffusecolor.r = 1;\n      diffusecolor.g = 1;\n      diffusecolor.b = 1;\n    } // console.log( material );\n\n\n    const mat = new MeshStandardMaterial({\n      color: diffusecolor,\n      name: material.name,\n      side: 2,\n      transparent: material.transparency > 0 ? true : false,\n      opacity: 1.0 - material.transparency\n    });\n    const textureLoader = new TextureLoader();\n\n    for (let i = 0; i < material.textures.length; i++) {\n      const texture = material.textures[i];\n\n      if (texture.image !== null) {\n        const map = textureLoader.load(texture.image);\n\n        switch (texture.type) {\n          case 'Diffuse':\n            mat.map = map;\n            break;\n\n          case 'Bump':\n            mat.bumpMap = map;\n            break;\n\n          case 'Transparency':\n            mat.alphaMap = map;\n            mat.transparent = true;\n            break;\n\n          case 'Emap':\n            mat.envMap = map;\n            break;\n        }\n      }\n    }\n\n    return mat;\n  }\n\n  _createGeometry(data) {\n    // console.log(data);\n    const object = new Object3D();\n    const instanceDefinitionObjects = [];\n    const instanceDefinitions = [];\n    const instanceReferences = [];\n    object.userData['layers'] = data.layers;\n    object.userData['groups'] = data.groups;\n    object.userData['settings'] = data.settings;\n    object.userData['objectType'] = 'File3dm';\n    object.userData['materials'] = null;\n    object.name = this.url;\n    let objects = data.objects;\n    const materials = data.materials;\n\n    for (let i = 0; i < objects.length; i++) {\n      const obj = objects[i];\n      const attributes = obj.attributes;\n\n      switch (obj.objectType) {\n        case 'InstanceDefinition':\n          instanceDefinitions.push(obj);\n          break;\n\n        case 'InstanceReference':\n          instanceReferences.push(obj);\n          break;\n\n        default:\n          let _object;\n\n          if (attributes.materialIndex >= 0) {\n            const rMaterial = materials[attributes.materialIndex];\n\n            let material = this._createMaterial(rMaterial);\n\n            material = this._compareMaterials(material);\n            _object = this._createObject(obj, material);\n          } else {\n            const material = this._createMaterial();\n\n            _object = this._createObject(obj, material);\n          }\n\n          if (_object === undefined) {\n            continue;\n          }\n\n          const layer = data.layers[attributes.layerIndex];\n          _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n\n          if (attributes.isInstanceDefinitionObject) {\n            instanceDefinitionObjects.push(_object);\n          } else {\n            object.add(_object);\n          }\n\n          break;\n      }\n    }\n\n    for (let i = 0; i < instanceDefinitions.length; i++) {\n      const iDef = instanceDefinitions[i];\n      objects = [];\n\n      for (let j = 0; j < iDef.attributes.objectIds.length; j++) {\n        const objId = iDef.attributes.objectIds[j];\n\n        for (let p = 0; p < instanceDefinitionObjects.length; p++) {\n          const idoId = instanceDefinitionObjects[p].userData.attributes.id;\n\n          if (objId === idoId) {\n            objects.push(instanceDefinitionObjects[p]);\n          }\n        }\n      } // Currently clones geometry and does not take advantage of instancing\n\n\n      for (let j = 0; j < instanceReferences.length; j++) {\n        const iRef = instanceReferences[j];\n\n        if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n          const iRefObject = new Object3D();\n          const xf = iRef.geometry.xform.array;\n          const matrix = new Matrix4();\n          matrix.set(xf[0], xf[1], xf[2], xf[3], xf[4], xf[5], xf[6], xf[7], xf[8], xf[9], xf[10], xf[11], xf[12], xf[13], xf[14], xf[15]);\n          iRefObject.applyMatrix4(matrix);\n\n          for (let p = 0; p < objects.length; p++) {\n            iRefObject.add(objects[p].clone(true));\n          }\n\n          object.add(iRefObject);\n        }\n      }\n    }\n\n    object.userData['materials'] = this.materials;\n    return object;\n  }\n\n  _createObject(obj, mat) {\n    const loader = new BufferGeometryLoader();\n    const attributes = obj.attributes;\n\n    let geometry, material, _color, color;\n\n    switch (obj.objectType) {\n      case 'Point':\n      case 'PointSet':\n        geometry = loader.parse(obj.geometry);\n\n        if (geometry.attributes.hasOwnProperty('color')) {\n          material = new PointsMaterial({\n            vertexColors: true,\n            sizeAttenuation: false,\n            size: 2\n          });\n        } else {\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n          material = new PointsMaterial({\n            color: color,\n            sizeAttenuation: false,\n            size: 2\n          });\n        }\n\n        material = this._compareMaterials(material);\n        const points = new Points(geometry, material);\n        points.userData['attributes'] = attributes;\n        points.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          points.name = attributes.name;\n        }\n\n        return points;\n\n      case 'Mesh':\n      case 'Extrusion':\n      case 'SubD':\n      case 'Brep':\n        if (obj.geometry === null) return;\n        geometry = loader.parse(obj.geometry);\n\n        if (geometry.attributes.hasOwnProperty('color')) {\n          mat.vertexColors = true;\n        }\n\n        if (mat === null) {\n          mat = this._createMaterial();\n          mat = this._compareMaterials(mat);\n        }\n\n        const mesh = new Mesh(geometry, mat);\n        mesh.castShadow = attributes.castsShadows;\n        mesh.receiveShadow = attributes.receivesShadows;\n        mesh.userData['attributes'] = attributes;\n        mesh.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          mesh.name = attributes.name;\n        }\n\n        return mesh;\n\n      case 'Curve':\n        geometry = loader.parse(obj.geometry);\n        _color = attributes.drawColor;\n        color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n        material = new LineBasicMaterial({\n          color: color\n        });\n        material = this._compareMaterials(material);\n        const lines = new Line(geometry, material);\n        lines.userData['attributes'] = attributes;\n        lines.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          lines.name = attributes.name;\n        }\n\n        return lines;\n\n      case 'TextDot':\n        geometry = obj.geometry;\n        const ctx = document.createElement('canvas').getContext('2d');\n        const font = `${geometry.fontHeight}px ${geometry.fontFace}`;\n        ctx.font = font;\n        const width = ctx.measureText(geometry.text).width + 10;\n        const height = geometry.fontHeight + 10;\n        const r = window.devicePixelRatio;\n        ctx.canvas.width = width * r;\n        ctx.canvas.height = height * r;\n        ctx.canvas.style.width = width + 'px';\n        ctx.canvas.style.height = height + 'px';\n        ctx.setTransform(r, 0, 0, r, 0, 0);\n        ctx.font = font;\n        ctx.textBaseline = 'middle';\n        ctx.textAlign = 'center';\n        color = attributes.drawColor;\n        ctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\n        ctx.fillRect(0, 0, width, height);\n        ctx.fillStyle = 'white';\n        ctx.fillText(geometry.text, width / 2, height / 2);\n        const texture = new CanvasTexture(ctx.canvas);\n        texture.minFilter = LinearFilter;\n        texture.wrapS = ClampToEdgeWrapping;\n        texture.wrapT = ClampToEdgeWrapping;\n        material = new SpriteMaterial({\n          map: texture,\n          depthTest: false\n        });\n        const sprite = new Sprite(material);\n        sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n        sprite.scale.set(width / 10, height / 10, 1.0);\n        sprite.userData['attributes'] = attributes;\n        sprite.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          sprite.name = attributes.name;\n        }\n\n        return sprite;\n\n      case 'Light':\n        geometry = obj.geometry;\n        let light;\n\n        if (geometry.isDirectionalLight) {\n          light = new DirectionalLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isPointLight) {\n          light = new PointLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isRectangularLight) {\n          light = new RectAreaLight();\n          const width = Math.abs(geometry.width[2]);\n          const height = Math.abs(geometry.length[0]);\n          light.position.set(geometry.location[0] - height / 2, geometry.location[1], geometry.location[2] - width / 2);\n          light.height = height;\n          light.width = width;\n          light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n        } else if (geometry.isSpotLight) {\n          light = new SpotLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.angle = geometry.spotAngleRadians;\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isLinearLight) {\n          console.warn('THREE.3DMLoader:  No conversion exists for linear lights.');\n          return;\n        }\n\n        if (light) {\n          light.intensity = geometry.intensity;\n          _color = geometry.diffuse;\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n          light.color = color;\n          light.userData['attributes'] = attributes;\n          light.userData['objectType'] = obj.objectType;\n        }\n\n        return light;\n    }\n  }\n\n  _initLibrary() {\n    if (!this.libraryPending) {\n      // Load rhino3dm wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.libraryPath);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('rhino3dm.js', resolve, undefined, reject);\n      }); // Load rhino3dm WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.libraryPath);\n      binaryLoader.setResponseType('arraybuffer');\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('rhino3dm.wasm', resolve, undefined, reject);\n      });\n      this.libraryPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        //this.libraryBinary = binaryContent;\n        this.libraryConfig.wasmBinary = binaryContent;\n        const fn = Rhino3dmWorker.toString();\n        const body = ['/* rhino3dm.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n      });\n    }\n\n    return this.libraryPending;\n  }\n\n  _getWorker(taskCost) {\n    return this._initLibrary().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskCosts = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          libraryConfig: this.libraryConfig\n        });\n\n        worker.onmessage = function (e) {\n          const message = e.data;\n\n          switch (message.type) {\n            case 'decode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n\n}\n/* WEB WORKER */\n\n\nfunction Rhino3dmWorker() {\n  let libraryPending;\n  let libraryConfig;\n  let rhino;\n\n  onmessage = function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        libraryConfig = message.libraryConfig;\n        const wasmBinary = libraryConfig.wasmBinary;\n        let RhinoModule;\n        libraryPending = new Promise(function (resolve) {\n          /* Like Basis Loader */\n          RhinoModule = {\n            wasmBinary,\n            onRuntimeInitialized: resolve\n          };\n          rhino3dm(RhinoModule); // eslint-disable-line no-undef\n        }).then(() => {\n          rhino = RhinoModule;\n        });\n        break;\n\n      case 'decode':\n        const buffer = message.buffer;\n        libraryPending.then(() => {\n          const data = decodeObjects(rhino, buffer);\n          self.postMessage({\n            type: 'decode',\n            id: message.id,\n            data\n          });\n        });\n        break;\n    }\n  };\n\n  function decodeObjects(rhino, buffer) {\n    const arr = new Uint8Array(buffer);\n    const doc = rhino.File3dm.fromByteArray(arr);\n    const objects = [];\n    const materials = [];\n    const layers = [];\n    const views = [];\n    const namedViews = [];\n    const groups = []; //Handle objects\n\n    const objs = doc.objects();\n    const cnt = objs.count;\n\n    for (let i = 0; i < cnt; i++) {\n      const _object = objs.get(i);\n\n      const object = extractObjectData(_object, doc);\n\n      _object.delete();\n\n      if (object) {\n        objects.push(object);\n      }\n    } // Handle instance definitions\n    // console.log( `Instance Definitions Count: ${doc.instanceDefinitions().count()}` );\n\n\n    for (let i = 0; i < doc.instanceDefinitions().count(); i++) {\n      const idef = doc.instanceDefinitions().get(i);\n      const idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({\n        geometry: null,\n        attributes: idefAttributes,\n        objectType: 'InstanceDefinition'\n      });\n    } // Handle materials\n\n\n    const textureTypes = [// rhino.TextureType.Bitmap,\n    rhino.TextureType.Diffuse, rhino.TextureType.Bump, rhino.TextureType.Transparency, rhino.TextureType.Opacity, rhino.TextureType.Emap];\n    const pbrTextureTypes = [rhino.TextureType.PBR_BaseColor, rhino.TextureType.PBR_Subsurface, rhino.TextureType.PBR_SubsurfaceScattering, rhino.TextureType.PBR_SubsurfaceScatteringRadius, rhino.TextureType.PBR_Metallic, rhino.TextureType.PBR_Specular, rhino.TextureType.PBR_SpecularTint, rhino.TextureType.PBR_Roughness, rhino.TextureType.PBR_Anisotropic, rhino.TextureType.PBR_Anisotropic_Rotation, rhino.TextureType.PBR_Sheen, rhino.TextureType.PBR_SheenTint, rhino.TextureType.PBR_Clearcoat, rhino.TextureType.PBR_ClearcoatBump, rhino.TextureType.PBR_ClearcoatRoughness, rhino.TextureType.PBR_OpacityIor, rhino.TextureType.PBR_OpacityRoughness, rhino.TextureType.PBR_Emission, rhino.TextureType.PBR_AmbientOcclusion, rhino.TextureType.PBR_Displacement];\n\n    for (let i = 0; i < doc.materials().count(); i++) {\n      const _material = doc.materials().get(i);\n\n      const _pbrMaterial = _material.physicallyBased();\n\n      let material = extractProperties(_material);\n      const textures = [];\n\n      for (let j = 0; j < textureTypes.length; j++) {\n        const _texture = _material.getTexture(textureTypes[j]);\n\n        if (_texture) {\n          let textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          const texture = {\n            type: textureType\n          };\n          const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n\n          if (image) {\n            texture.image = 'data:image/png;base64,' + image;\n          } else {\n            console.warn(`THREE.3DMLoader: Image for ${textureType} texture not embedded in file.`);\n            texture.image = null;\n          }\n\n          textures.push(texture);\n\n          _texture.delete();\n        }\n      }\n\n      material.textures = textures;\n\n      if (_pbrMaterial.supported) {\n        console.log('pbr true');\n\n        for (let j = 0; j < pbrTextureTypes.length; j++) {\n          const _texture = _material.getTexture(textureTypes[j]);\n\n          if (_texture) {\n            const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n            let textureType = textureTypes[j].constructor.name;\n            textureType = textureType.substring(12, textureType.length);\n            const texture = {\n              type: textureType,\n              image: 'data:image/png;base64,' + image\n            };\n            textures.push(texture);\n\n            _texture.delete();\n          }\n        }\n\n        const pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n\n      materials.push(material);\n\n      _material.delete();\n\n      _pbrMaterial.delete();\n    } // Handle layers\n\n\n    for (let i = 0; i < doc.layers().count(); i++) {\n      const _layer = doc.layers().get(i);\n\n      const layer = extractProperties(_layer);\n      layers.push(layer);\n\n      _layer.delete();\n    } // Handle views\n\n\n    for (let i = 0; i < doc.views().count(); i++) {\n      const _view = doc.views().get(i);\n\n      const view = extractProperties(_view);\n      views.push(view);\n\n      _view.delete();\n    } // Handle named views\n\n\n    for (let i = 0; i < doc.namedViews().count(); i++) {\n      const _namedView = doc.namedViews().get(i);\n\n      const namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n\n      _namedView.delete();\n    } // Handle groups\n\n\n    for (let i = 0; i < doc.groups().count(); i++) {\n      const _group = doc.groups().get(i);\n\n      const group = extractProperties(_group);\n      groups.push(group);\n\n      _group.delete();\n    } // Handle settings\n\n\n    const settings = extractProperties(doc.settings()); //TODO: Handle other document stuff like dimstyles, instance definitions, bitmaps etc.\n    // Handle dimstyles\n    // console.log( `Dimstyle Count: ${doc.dimstyles().count()}` );\n    // Handle bitmaps\n    // console.log( `Bitmap Count: ${doc.bitmaps().count()}` );\n    // Handle strings -- this seems to be broken at the moment in rhino3dm\n    // console.log( `Document Strings Count: ${doc.strings().count()}` );\n\n    /*\n    for( var i = 0; i < doc.strings().count(); i++ ){\n    var _string= doc.strings().get( i );\n    console.log(_string);\n    var string = extractProperties( _group );\n    strings.push( string );\n    _string.delete();\n    }\n    */\n\n    doc.delete();\n    return {\n      objects,\n      materials,\n      layers,\n      views,\n      namedViews,\n      groups,\n      settings\n    };\n  }\n\n  function extractObjectData(object, doc) {\n    const _geometry = object.geometry();\n\n    const _attributes = object.attributes();\n\n    let objectType = _geometry.objectType;\n    let geometry, attributes, position, data, mesh; // skip instance definition objects\n    //if( _attributes.isInstanceDefinitionObject ) { continue; }\n    // TODO: handle other geometry types\n\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        const pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = 'Float32Array';\n        position.array = [];\n\n        for (let j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n\n      case rhino.ObjectType.Point:\n        const pt = _geometry.location;\n        position = {};\n        const color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = 'Float32Array';\n        position.array = [pt[0], pt[1], pt[2]];\n\n        const _color = _attributes.drawColor(doc);\n\n        color.itemSize = 3;\n        color.type = 'Float32Array';\n        color.array = [_color.r / 255.0, _color.g / 255.0, _color.b / 255.0];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n\n      case rhino.ObjectType.Brep:\n        const faces = _geometry.faces();\n\n        mesh = new rhino.Mesh();\n\n        for (let faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          const face = faces.get(faceIndex);\n\n          const _mesh = face.getMesh(rhino.MeshType.Any);\n\n          if (_mesh) {\n            mesh.append(_mesh);\n\n            _mesh.delete();\n          }\n\n          face.delete();\n        }\n\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n\n        mesh.delete();\n        break;\n\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n\n        break;\n\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n\n      case rhino.ObjectType.SubD:\n        // TODO: precalculate resulting vertices and faces and warn on excessive results\n        _geometry.subdivide(3);\n\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n\n        break;\n\n      /*\n      case rhino.ObjectType.Annotation:\n      case rhino.ObjectType.Hatch:\n      case rhino.ObjectType.ClipPlane:\n      */\n\n      default:\n        console.warn(`THREE.3DMLoader: TODO: Implement ${objectType.constructor.name}`);\n        break;\n    }\n\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return {\n        geometry,\n        attributes,\n        objectType\n      };\n    } else {\n      console.warn(`THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`);\n    }\n  }\n\n  function extractProperties(object) {\n    const result = {};\n\n    for (const property in object) {\n      const value = object[property];\n\n      if (typeof value !== 'function') {\n        if (typeof value === 'object' && value !== null && value.hasOwnProperty('constructor')) {\n          result[property] = {\n            name: value.constructor.name,\n            value: value.value\n          };\n        } else {\n          result[property] = value;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  function curveToPoints(curve, pointLimit) {\n    let pointCount = pointLimit;\n    let rc = [];\n    const ts = [];\n\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n\n      for (let i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n\n      return rc;\n    }\n\n    if (curve instanceof rhino.PolyCurve) {\n      const segmentCount = curve.segmentCount;\n\n      for (let i = 0; i < segmentCount; i++) {\n        const segment = curve.segmentCurve(i);\n        const segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n\n      return rc;\n    }\n\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount; // alternative to this hardcoded version: https://stackoverflow.com/a/18499923/2179399\n    }\n\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      const pLine = curve.tryGetPolyline();\n\n      for (let i = 0; i < pLine.count; i++) {\n        rc.push(pLine.get(i));\n      }\n\n      pLine.delete();\n      return rc;\n    }\n\n    const domain = curve.domain;\n    const divisions = pointCount - 1.0;\n\n    for (let j = 0; j < pointCount; j++) {\n      const t = domain[0] + j / divisions * (domain[1] - domain[0]);\n\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n\n      const tan = curve.tangentAt(t);\n      const prevTan = curve.tangentAt(ts.slice(-1)[0]); // Duplicated from THREE.Vector3\n      // How to pass imports to worker?\n\n      const tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      const ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      const denominator = Math.sqrt(tS * ptS);\n      let angle;\n\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        const theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n\n      if (angle < 0.1) continue;\n      ts.push(t);\n    }\n\n    rc = ts.map(t => curve.pointAt(t));\n    return rc;\n  }\n}\n\nexport { Rhino3dmLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}