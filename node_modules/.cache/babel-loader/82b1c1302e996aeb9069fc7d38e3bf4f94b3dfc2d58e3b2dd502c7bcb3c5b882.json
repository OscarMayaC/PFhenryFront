{"ast":null,"code":"import { Mesh, ShaderMaterial, SphereGeometry } from 'three';\nclass LightProbeHelper extends Mesh {\n  constructor(lightProbe, size) {\n    const material = new ShaderMaterial({\n      type: 'LightProbeHelperMaterial',\n      uniforms: {\n        sh: {\n          value: lightProbe.sh.coefficients\n        },\n        // by reference\n        intensity: {\n          value: lightProbe.intensity\n        }\n      },\n      vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tvNormal = normalize( normalMatrix * normal );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n      fragmentShader: ['#define RECIPROCAL_PI 0.318309886', 'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {', '\t// matrix is assumed to be orthogonal', '\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );', '}', '// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf', 'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {', '\t// normal is assumed to have unit length', '\tfloat x = normal.x, y = normal.y, z = normal.z;', '\t// band 0', '\tvec3 result = shCoefficients[ 0 ] * 0.886227;', '\t// band 1', '\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;', '\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;', '\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;', '\t// band 2', '\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;', '\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;', '\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );', '\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;', '\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );', '\treturn result;', '}', 'uniform vec3 sh[ 9 ]; // sh coefficients', 'uniform float intensity; // light probe intensity', 'varying vec3 vNormal;', 'void main() {', '\tvec3 normal = normalize( vNormal );', '\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );', '\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );', '\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;', '\tgl_FragColor = linearToOutputTexel( vec4( outgoingLight, 1.0 ) );', '}'].join('\\n')\n    });\n    const geometry = new SphereGeometry(1, 32, 16);\n    super(geometry, material);\n    this.lightProbe = lightProbe;\n    this.size = size;\n    this.type = 'LightProbeHelper';\n    this.onBeforeRender();\n  }\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n  onBeforeRender() {\n    this.position.copy(this.lightProbe.position);\n    this.scale.set(1, 1, 1).multiplyScalar(this.size);\n    this.material.uniforms.intensity.value = this.lightProbe.intensity;\n  }\n}\nexport { LightProbeHelper };","map":{"version":3,"names":["Mesh","ShaderMaterial","SphereGeometry","LightProbeHelper","constructor","lightProbe","size","material","type","uniforms","sh","value","coefficients","intensity","vertexShader","join","fragmentShader","geometry","onBeforeRender","dispose","position","copy","scale","set","multiplyScalar"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/helpers/LightProbeHelper.js"],"sourcesContent":["import { Mesh, ShaderMaterial, SphereGeometry } from 'three';\n\nclass LightProbeHelper extends Mesh {\n  constructor(lightProbe, size) {\n    const material = new ShaderMaterial({\n      type: 'LightProbeHelperMaterial',\n      uniforms: {\n        sh: {\n          value: lightProbe.sh.coefficients\n        },\n        // by reference\n        intensity: {\n          value: lightProbe.intensity\n        }\n      },\n      vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tvNormal = normalize( normalMatrix * normal );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n      fragmentShader: ['#define RECIPROCAL_PI 0.318309886', 'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {', '\t// matrix is assumed to be orthogonal', '\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );', '}', '// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf', 'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {', '\t// normal is assumed to have unit length', '\tfloat x = normal.x, y = normal.y, z = normal.z;', '\t// band 0', '\tvec3 result = shCoefficients[ 0 ] * 0.886227;', '\t// band 1', '\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;', '\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;', '\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;', '\t// band 2', '\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;', '\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;', '\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );', '\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;', '\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );', '\treturn result;', '}', 'uniform vec3 sh[ 9 ]; // sh coefficients', 'uniform float intensity; // light probe intensity', 'varying vec3 vNormal;', 'void main() {', '\tvec3 normal = normalize( vNormal );', '\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );', '\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );', '\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;', '\tgl_FragColor = linearToOutputTexel( vec4( outgoingLight, 1.0 ) );', '}'].join('\\n')\n    });\n    const geometry = new SphereGeometry(1, 32, 16);\n    super(geometry, material);\n    this.lightProbe = lightProbe;\n    this.size = size;\n    this.type = 'LightProbeHelper';\n    this.onBeforeRender();\n  }\n\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n\n  onBeforeRender() {\n    this.position.copy(this.lightProbe.position);\n    this.scale.set(1, 1, 1).multiplyScalar(this.size);\n    this.material.uniforms.intensity.value = this.lightProbe.intensity;\n  }\n\n}\n\nexport { LightProbeHelper };\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,cAAc,EAAEC,cAAc,QAAQ,OAAO;AAE5D,MAAMC,gBAAgB,SAASH,IAAI,CAAC;EAClCI,WAAWA,CAACC,UAAU,EAAEC,IAAI,EAAE;IAC5B,MAAMC,QAAQ,GAAG,IAAIN,cAAc,CAAC;MAClCO,IAAI,EAAE,0BAA0B;MAChCC,QAAQ,EAAE;QACRC,EAAE,EAAE;UACFC,KAAK,EAAEN,UAAU,CAACK,EAAE,CAACE;QACvB,CAAC;QACD;QACAC,SAAS,EAAE;UACTF,KAAK,EAAEN,UAAU,CAACQ;QACpB;MACF,CAAC;MACDC,YAAY,EAAE,CAAC,uBAAuB,EAAE,eAAe,EAAE,gDAAgD,EAAE,4EAA4E,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MACxMC,cAAc,EAAE,CAAC,mCAAmC,EAAE,oEAAoE,EAAE,wCAAwC,EAAE,4DAA4D,EAAE,GAAG,EAAE,mEAAmE,EAAE,yEAAyE,EAAE,2CAA2C,EAAE,kDAAkD,EAAE,YAAY,EAAE,gDAAgD,EAAE,YAAY,EAAE,sDAAsD,EAAE,sDAAsD,EAAE,sDAAsD,EAAE,YAAY,EAAE,0DAA0D,EAAE,0DAA0D,EAAE,mEAAmE,EAAE,0DAA0D,EAAE,gEAAgE,EAAE,iBAAiB,EAAE,GAAG,EAAE,0CAA0C,EAAE,mDAAmD,EAAE,uBAAuB,EAAE,eAAe,EAAE,sCAAsC,EAAE,sEAAsE,EAAE,0DAA0D,EAAE,+DAA+D,EAAE,oEAAoE,EAAE,GAAG,CAAC,CAACD,IAAI,CAAC,IAAI;IAC//C,CAAC,CAAC;IACF,MAAME,QAAQ,GAAG,IAAIf,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IAC9C,KAAK,CAACe,QAAQ,EAAEV,QAAQ,CAAC;IACzB,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,IAAI,GAAG,kBAAkB;IAC9B,IAAI,CAACU,cAAc,EAAE;EACvB;EAEAC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACF,QAAQ,CAACE,OAAO,EAAE;IACvB,IAAI,CAACZ,QAAQ,CAACY,OAAO,EAAE;EACzB;EAEAD,cAAcA,CAAA,EAAG;IACf,IAAI,CAACE,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAChB,UAAU,CAACe,QAAQ,CAAC;IAC5C,IAAI,CAACE,KAAK,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACC,cAAc,CAAC,IAAI,CAAClB,IAAI,CAAC;IACjD,IAAI,CAACC,QAAQ,CAACE,QAAQ,CAACI,SAAS,CAACF,KAAK,GAAG,IAAI,CAACN,UAAU,CAACQ,SAAS;EACpE;AAEF;AAEA,SAASV,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}