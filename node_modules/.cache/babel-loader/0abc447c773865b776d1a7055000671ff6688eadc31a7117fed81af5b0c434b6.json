{"ast":null,"code":"import { Object3D, Vector3, Quaternion, Matrix4, Mesh, Euler, Bone, MeshBasicMaterial, Color, BoxGeometry, SphereGeometry, CylinderGeometry } from 'three';\n\n/**\n * Dependencies\n *  - Ammo.js https://github.com/kripken/ammo.js\n *\n * MMDPhysics calculates physics with Ammo(Bullet based JavaScript Physics engine)\n * for MMD model loaded by MMDLoader.\n *\n * TODO\n *  - Physics in Worker\n */\n\n/* global Ammo */\n\nconst MMDPhysics = (() => {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  function MMDPhysics(mesh, rigidBodyParams, constraintParams, params) {\n    if (typeof Ammo === 'undefined') {\n      throw new Error('THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js');\n    }\n    constraintParams = constraintParams || [];\n    params = params || {};\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    /*\n     * I don't know why but 1/60 unitStep easily breaks models\n     * so I set it 1/65 so far.\n     * Don't set too small unitStep because\n     * the smaller unitStep can make the performance worse.\n     */\n\n    this.unitStep = params.unitStep !== undefined ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== undefined ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== undefined) this.gravity.copy(params.gravity);\n    this.world = params.world !== undefined ? params.world : null; // experimental\n\n    this.bodies = [];\n    this.constraints = [];\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n  MMDPhysics.prototype = {\n    constructor: MMDPhysics,\n    /**\n     * Advances Physics calculation and updates bones.\n     *\n     * @param {Number} delta - time in second\n     * @return {MMDPhysics}\n     */\n    update: function (delta) {\n      const manager = this.manager;\n      const mesh = this.mesh; // rigid bodies and constrains are for\n      // mesh's world scale (1, 1, 1).\n      // Convert to (1, 1, 1) if it isn't.\n\n      let isNonDefaultScale = false;\n      const position = manager.allocThreeVector3();\n      const quaternion = manager.allocThreeQuaternion();\n      const scale = manager.allocThreeVector3();\n      mesh.matrixWorld.decompose(position, quaternion, scale);\n      if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n        isNonDefaultScale = true;\n      }\n      let parent;\n      if (isNonDefaultScale) {\n        parent = mesh.parent;\n        if (parent !== null) mesh.parent = null;\n        scale.copy(this.mesh.scale);\n        mesh.scale.set(1, 1, 1);\n        mesh.updateMatrixWorld(true);\n      } // calculate physics and update bones\n\n      this._updateRigidBodies();\n      this._stepSimulation(delta);\n      this._updateBones(); // restore mesh if converted above\n\n      if (isNonDefaultScale) {\n        if (parent !== null) mesh.parent = parent;\n        mesh.scale.copy(scale);\n      }\n      manager.freeThreeVector3(scale);\n      manager.freeThreeQuaternion(quaternion);\n      manager.freeThreeVector3(position);\n      return this;\n    },\n    /**\n     * Resets rigid bodies transorm to current bone's.\n     *\n     * @return {MMDPhysics}\n     */\n    reset: function () {\n      for (let i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].reset();\n      }\n      return this;\n    },\n    /**\n     * Warm ups Rigid bodies. Calculates cycles steps.\n     *\n     * @param {Integer} cycles\n     * @return {MMDPhysics}\n     */\n    warmup: function (cycles) {\n      for (let i = 0; i < cycles; i++) {\n        this.update(1 / 60);\n      }\n      return this;\n    },\n    /**\n     * Sets gravity.\n     *\n     * @param {Vector3} gravity\n     * @return {MMDPhysicsHelper}\n     */\n    setGravity: function (gravity) {\n      this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n      this.gravity.copy(gravity);\n      return this;\n    },\n    /**\n     * Creates MMDPhysicsHelper\n     *\n     * @return {MMDPhysicsHelper}\n     */\n    createHelper: function () {\n      return new MMDPhysicsHelper(this.mesh, this);\n    },\n    // private methods\n    _init: function (mesh, rigidBodyParams, constraintParams) {\n      const manager = this.manager; // rigid body/constraint parameters are for\n      // mesh's default world transform as position(0, 0, 0),\n      // quaternion(0, 0, 0, 1) and scale(0, 0, 0)\n\n      let parent = mesh.parent;\n      if (parent !== null) parent = null;\n      const currentPosition = manager.allocThreeVector3();\n      const currentQuaternion = manager.allocThreeQuaternion();\n      const currentScale = manager.allocThreeVector3();\n      currentPosition.copy(mesh.position);\n      currentQuaternion.copy(mesh.quaternion);\n      currentScale.copy(mesh.scale);\n      mesh.position.set(0, 0, 0);\n      mesh.quaternion.set(0, 0, 0, 1);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n      if (this.world === null) {\n        this.world = this._createWorld();\n        this.setGravity(this.gravity);\n      }\n      this._initRigidBodies(rigidBodyParams);\n      this._initConstraints(constraintParams);\n      if (parent !== null) mesh.parent = parent;\n      mesh.position.copy(currentPosition);\n      mesh.quaternion.copy(currentQuaternion);\n      mesh.scale.copy(currentScale);\n      mesh.updateMatrixWorld(true);\n      this.reset();\n      manager.freeThreeVector3(currentPosition);\n      manager.freeThreeQuaternion(currentQuaternion);\n      manager.freeThreeVector3(currentScale);\n    },\n    _createWorld: function () {\n      const config = new Ammo.btDefaultCollisionConfiguration();\n      const dispatcher = new Ammo.btCollisionDispatcher(config);\n      const cache = new Ammo.btDbvtBroadphase();\n      const solver = new Ammo.btSequentialImpulseConstraintSolver();\n      const world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n      return world;\n    },\n    _initRigidBodies: function (rigidBodies) {\n      for (let i = 0, il = rigidBodies.length; i < il; i++) {\n        this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n      }\n    },\n    _initConstraints: function (constraints) {\n      for (let i = 0, il = constraints.length; i < il; i++) {\n        const params = constraints[i];\n        const bodyA = this.bodies[params.rigidBodyIndex1];\n        const bodyB = this.bodies[params.rigidBodyIndex2];\n        this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n      }\n    },\n    _stepSimulation: function (delta) {\n      const unitStep = this.unitStep;\n      let stepTime = delta;\n      let maxStepNum = (delta / unitStep | 0) + 1;\n      if (stepTime < unitStep) {\n        stepTime = unitStep;\n        maxStepNum = 1;\n      }\n      if (maxStepNum > this.maxStepNum) {\n        maxStepNum = this.maxStepNum;\n      }\n      this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n    },\n    _updateRigidBodies: function () {\n      for (let i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateFromBone();\n      }\n    },\n    _updateBones: function () {\n      for (let i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateBone();\n      }\n    }\n  };\n  /**\n   * This manager's responsibilies are\n   *\n   * 1. manage Ammo.js and Three.js object resources and\n   *    improve the performance and the memory consumption by\n   *    reusing objects.\n   *\n   * 2. provide simple Ammo object operations.\n   */\n\n  function ResourceManager() {\n    // for Three.js\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = []; // for Ammo.js\n\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n  ResourceManager.prototype = {\n    constructor: ResourceManager,\n    allocThreeVector3: function () {\n      return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n    },\n    freeThreeVector3: function (v) {\n      this.threeVector3s.push(v);\n    },\n    allocThreeMatrix4: function () {\n      return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n    },\n    freeThreeMatrix4: function (m) {\n      this.threeMatrix4s.push(m);\n    },\n    allocThreeQuaternion: function () {\n      return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n    },\n    freeThreeQuaternion: function (q) {\n      this.threeQuaternions.push(q);\n    },\n    allocThreeEuler: function () {\n      return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n    },\n    freeThreeEuler: function (e) {\n      this.threeEulers.push(e);\n    },\n    allocTransform: function () {\n      return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n    },\n    freeTransform: function (t) {\n      this.transforms.push(t);\n    },\n    allocQuaternion: function () {\n      return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n    },\n    freeQuaternion: function (q) {\n      this.quaternions.push(q);\n    },\n    allocVector3: function () {\n      return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n    },\n    freeVector3: function (v) {\n      this.vector3s.push(v);\n    },\n    setIdentity: function (t) {\n      t.setIdentity();\n    },\n    getBasis: function (t) {\n      const q = this.allocQuaternion();\n      t.getBasis().getRotation(q);\n      return q;\n    },\n    getBasisAsMatrix3: function (t) {\n      const q = this.getBasis(t);\n      const m = this.quaternionToMatrix3(q);\n      this.freeQuaternion(q);\n      return m;\n    },\n    getOrigin: function (t) {\n      return t.getOrigin();\n    },\n    setOrigin: function (t, v) {\n      t.getOrigin().setValue(v.x(), v.y(), v.z());\n    },\n    copyOrigin: function (t1, t2) {\n      const o = t2.getOrigin();\n      this.setOrigin(t1, o);\n    },\n    setBasis: function (t, q) {\n      t.setRotation(q);\n    },\n    setBasisFromMatrix3: function (t, m) {\n      const q = this.matrix3ToQuaternion(m);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    },\n    setOriginFromArray3: function (t, a) {\n      t.getOrigin().setValue(a[0], a[1], a[2]);\n    },\n    setOriginFromThreeVector3: function (t, v) {\n      t.getOrigin().setValue(v.x, v.y, v.z);\n    },\n    setBasisFromArray3: function (t, a) {\n      const thQ = this.allocThreeQuaternion();\n      const thE = this.allocThreeEuler();\n      thE.set(a[0], a[1], a[2]);\n      this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n      this.freeThreeEuler(thE);\n      this.freeThreeQuaternion(thQ);\n    },\n    setBasisFromThreeQuaternion: function (t, a) {\n      const q = this.allocQuaternion();\n      q.setX(a.x);\n      q.setY(a.y);\n      q.setZ(a.z);\n      q.setW(a.w);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    },\n    multiplyTransforms: function (t1, t2) {\n      const t = this.allocTransform();\n      this.setIdentity(t);\n      const m1 = this.getBasisAsMatrix3(t1);\n      const m2 = this.getBasisAsMatrix3(t2);\n      const o1 = this.getOrigin(t1);\n      const o2 = this.getOrigin(t2);\n      const v1 = this.multiplyMatrix3ByVector3(m1, o2);\n      const v2 = this.addVector3(v1, o1);\n      this.setOrigin(t, v2);\n      const m3 = this.multiplyMatrices3(m1, m2);\n      this.setBasisFromMatrix3(t, m3);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t;\n    },\n    inverseTransform: function (t) {\n      const t2 = this.allocTransform();\n      const m1 = this.getBasisAsMatrix3(t);\n      const o = this.getOrigin(t);\n      const m2 = this.transposeMatrix3(m1);\n      const v1 = this.negativeVector3(o);\n      const v2 = this.multiplyMatrix3ByVector3(m2, v1);\n      this.setOrigin(t2, v2);\n      this.setBasisFromMatrix3(t2, m2);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t2;\n    },\n    multiplyMatrices3: function (m1, m2) {\n      const m3 = [];\n      const v10 = this.rowOfMatrix3(m1, 0);\n      const v11 = this.rowOfMatrix3(m1, 1);\n      const v12 = this.rowOfMatrix3(m1, 2);\n      const v20 = this.columnOfMatrix3(m2, 0);\n      const v21 = this.columnOfMatrix3(m2, 1);\n      const v22 = this.columnOfMatrix3(m2, 2);\n      m3[0] = this.dotVectors3(v10, v20);\n      m3[1] = this.dotVectors3(v10, v21);\n      m3[2] = this.dotVectors3(v10, v22);\n      m3[3] = this.dotVectors3(v11, v20);\n      m3[4] = this.dotVectors3(v11, v21);\n      m3[5] = this.dotVectors3(v11, v22);\n      m3[6] = this.dotVectors3(v12, v20);\n      m3[7] = this.dotVectors3(v12, v21);\n      m3[8] = this.dotVectors3(v12, v22);\n      this.freeVector3(v10);\n      this.freeVector3(v11);\n      this.freeVector3(v12);\n      this.freeVector3(v20);\n      this.freeVector3(v21);\n      this.freeVector3(v22);\n      return m3;\n    },\n    addVector3: function (v1, v2) {\n      const v = this.allocVector3();\n      v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n      return v;\n    },\n    dotVectors3: function (v1, v2) {\n      return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n    },\n    rowOfMatrix3: function (m, i) {\n      const v = this.allocVector3();\n      v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n      return v;\n    },\n    columnOfMatrix3: function (m, i) {\n      const v = this.allocVector3();\n      v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n      return v;\n    },\n    negativeVector3: function (v) {\n      const v2 = this.allocVector3();\n      v2.setValue(-v.x(), -v.y(), -v.z());\n      return v2;\n    },\n    multiplyMatrix3ByVector3: function (m, v) {\n      const v4 = this.allocVector3();\n      const v0 = this.rowOfMatrix3(m, 0);\n      const v1 = this.rowOfMatrix3(m, 1);\n      const v2 = this.rowOfMatrix3(m, 2);\n      const x = this.dotVectors3(v0, v);\n      const y = this.dotVectors3(v1, v);\n      const z = this.dotVectors3(v2, v);\n      v4.setValue(x, y, z);\n      this.freeVector3(v0);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return v4;\n    },\n    transposeMatrix3: function (m) {\n      const m2 = [];\n      m2[0] = m[0];\n      m2[1] = m[3];\n      m2[2] = m[6];\n      m2[3] = m[1];\n      m2[4] = m[4];\n      m2[5] = m[7];\n      m2[6] = m[2];\n      m2[7] = m[5];\n      m2[8] = m[8];\n      return m2;\n    },\n    quaternionToMatrix3: function (q) {\n      const m = [];\n      const x = q.x();\n      const y = q.y();\n      const z = q.z();\n      const w = q.w();\n      const xx = x * x;\n      const yy = y * y;\n      const zz = z * z;\n      const xy = x * y;\n      const yz = y * z;\n      const zx = z * x;\n      const xw = x * w;\n      const yw = y * w;\n      const zw = z * w;\n      m[0] = 1 - 2 * (yy + zz);\n      m[1] = 2 * (xy - zw);\n      m[2] = 2 * (zx + yw);\n      m[3] = 2 * (xy + zw);\n      m[4] = 1 - 2 * (zz + xx);\n      m[5] = 2 * (yz - xw);\n      m[6] = 2 * (zx - yw);\n      m[7] = 2 * (yz + xw);\n      m[8] = 1 - 2 * (xx + yy);\n      return m;\n    },\n    matrix3ToQuaternion: function (m) {\n      const t = m[0] + m[4] + m[8];\n      let s, x, y, z, w;\n      if (t > 0) {\n        s = Math.sqrt(t + 1.0) * 2;\n        w = 0.25 * s;\n        x = (m[7] - m[5]) / s;\n        y = (m[2] - m[6]) / s;\n        z = (m[3] - m[1]) / s;\n      } else if (m[0] > m[4] && m[0] > m[8]) {\n        s = Math.sqrt(1.0 + m[0] - m[4] - m[8]) * 2;\n        w = (m[7] - m[5]) / s;\n        x = 0.25 * s;\n        y = (m[1] + m[3]) / s;\n        z = (m[2] + m[6]) / s;\n      } else if (m[4] > m[8]) {\n        s = Math.sqrt(1.0 + m[4] - m[0] - m[8]) * 2;\n        w = (m[2] - m[6]) / s;\n        x = (m[1] + m[3]) / s;\n        y = 0.25 * s;\n        z = (m[5] + m[7]) / s;\n      } else {\n        s = Math.sqrt(1.0 + m[8] - m[0] - m[4]) * 2;\n        w = (m[3] - m[1]) / s;\n        x = (m[2] + m[6]) / s;\n        y = (m[5] + m[7]) / s;\n        z = 0.25 * s;\n      }\n      const q = this.allocQuaternion();\n      q.setX(x);\n      q.setY(y);\n      q.setZ(z);\n      q.setW(w);\n      return q;\n    }\n  };\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n\n  function RigidBody(mesh, world, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n    this._init();\n  }\n  RigidBody.prototype = {\n    constructor: MMDPhysics.RigidBody,\n    /**\n     * Resets rigid body transform to the current bone's.\n     *\n     * @return {RigidBody}\n     */\n    reset: function () {\n      this._setTransformFromBone();\n      return this;\n    },\n    /**\n     * Updates rigid body's transform from the current bone.\n     *\n     * @return {RidigBody}\n     */\n    updateFromBone: function () {\n      if (this.params.boneIndex !== -1 && this.params.type === 0) {\n        this._setTransformFromBone();\n      }\n      return this;\n    },\n    /**\n     * Updates bone from the current ridid body's transform.\n     *\n     * @return {RidigBody}\n     */\n    updateBone: function () {\n      if (this.params.type === 0 || this.params.boneIndex === -1) {\n        return this;\n      }\n      this._updateBoneRotation();\n      if (this.params.type === 1) {\n        this._updateBonePosition();\n      }\n      this.bone.updateMatrixWorld(true);\n      if (this.params.type === 2) {\n        this._setPositionFromBone();\n      }\n      return this;\n    },\n    // private methods\n    _init: function () {\n      function generateShape(p) {\n        switch (p.shapeType) {\n          case 0:\n            return new Ammo.btSphereShape(p.width);\n          case 1:\n            return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n          case 2:\n            return new Ammo.btCapsuleShape(p.width, p.height);\n          default:\n            throw `unknown shape type ${p.shapeType}`;\n        }\n      }\n      const manager = this.manager;\n      const params = this.params;\n      const bones = this.mesh.skeleton.bones;\n      const bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n      const shape = generateShape(params);\n      const weight = params.type === 0 ? 0 : params.weight;\n      const localInertia = manager.allocVector3();\n      localInertia.setValue(0, 0, 0);\n      if (weight !== 0) {\n        shape.calculateLocalInertia(weight, localInertia);\n      }\n      const boneOffsetForm = manager.allocTransform();\n      manager.setIdentity(boneOffsetForm);\n      manager.setOriginFromArray3(boneOffsetForm, params.position);\n      manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n      const vector = manager.allocThreeVector3();\n      const boneForm = manager.allocTransform();\n      manager.setIdentity(boneForm);\n      manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n      const form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n      const state = new Ammo.btDefaultMotionState(form);\n      const info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n      info.set_m_friction(params.friction);\n      info.set_m_restitution(params.restitution);\n      const body = new Ammo.btRigidBody(info);\n      if (params.type === 0) {\n        body.setCollisionFlags(body.getCollisionFlags() | 2);\n        /*\n         * It'd be better to comment out this line though in general I should call this method\n         * because I'm not sure why but physics will be more like MMD's\n         * if I comment out.\n         */\n\n        body.setActivationState(4);\n      }\n      body.setDamping(params.positionDamping, params.rotationDamping);\n      body.setSleepingThresholds(0, 0);\n      this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n      this.body = body;\n      this.bone = bone;\n      this.boneOffsetForm = boneOffsetForm;\n      this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n      manager.freeVector3(localInertia);\n      manager.freeTransform(form);\n      manager.freeTransform(boneForm);\n      manager.freeThreeVector3(vector);\n    },\n    _getBoneTransform: function () {\n      const manager = this.manager;\n      const p = manager.allocThreeVector3();\n      const q = manager.allocThreeQuaternion();\n      const s = manager.allocThreeVector3();\n      this.bone.matrixWorld.decompose(p, q, s);\n      const tr = manager.allocTransform();\n      manager.setOriginFromThreeVector3(tr, p);\n      manager.setBasisFromThreeQuaternion(tr, q);\n      const form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n      manager.freeTransform(tr);\n      manager.freeThreeVector3(s);\n      manager.freeThreeQuaternion(q);\n      manager.freeThreeVector3(p);\n      return form;\n    },\n    _getWorldTransformForBone: function () {\n      const manager = this.manager;\n      const tr = this.body.getCenterOfMassTransform();\n      return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n    },\n    _setTransformFromBone: function () {\n      const manager = this.manager;\n      const form = this._getBoneTransform(); // TODO: check the most appropriate way to set\n      //this.body.setWorldTransform( form );\n\n      this.body.setCenterOfMassTransform(form);\n      this.body.getMotionState().setWorldTransform(form);\n      manager.freeTransform(form);\n    },\n    _setPositionFromBone: function () {\n      const manager = this.manager;\n      const form = this._getBoneTransform();\n      const tr = manager.allocTransform();\n      this.body.getMotionState().getWorldTransform(tr);\n      manager.copyOrigin(tr, form); // TODO: check the most appropriate way to set\n      //this.body.setWorldTransform( tr );\n\n      this.body.setCenterOfMassTransform(tr);\n      this.body.getMotionState().setWorldTransform(tr);\n      manager.freeTransform(tr);\n      manager.freeTransform(form);\n    },\n    _updateBoneRotation: function () {\n      const manager = this.manager;\n      const tr = this._getWorldTransformForBone();\n      const q = manager.getBasis(tr);\n      const thQ = manager.allocThreeQuaternion();\n      const thQ2 = manager.allocThreeQuaternion();\n      const thQ3 = manager.allocThreeQuaternion();\n      thQ.set(q.x(), q.y(), q.z(), q.w());\n      thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n      thQ2.conjugate();\n      thQ2.multiply(thQ); //this.bone.quaternion.multiply( thQ2 );\n\n      thQ3.setFromRotationMatrix(this.bone.matrix); // Renormalizing quaternion here because repeatedly transforming\n      // quaternion continuously accumulates floating point error and\n      // can end up being overflow. See #15335\n\n      this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n      manager.freeThreeQuaternion(thQ);\n      manager.freeThreeQuaternion(thQ2);\n      manager.freeThreeQuaternion(thQ3);\n      manager.freeQuaternion(q);\n      manager.freeTransform(tr);\n    },\n    _updateBonePosition: function () {\n      const manager = this.manager;\n      const tr = this._getWorldTransformForBone();\n      const thV = manager.allocThreeVector3();\n      const o = manager.getOrigin(tr);\n      thV.set(o.x(), o.y(), o.z());\n      if (this.bone.parent) {\n        this.bone.parent.worldToLocal(thV);\n      }\n      this.bone.position.copy(thV);\n      manager.freeThreeVector3(thV);\n      manager.freeTransform(tr);\n    }\n  };\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n\n  function Constraint(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n    this._init();\n  }\n  Constraint.prototype = {\n    constructor: Constraint,\n    // private method\n    _init: function () {\n      const manager = this.manager;\n      const params = this.params;\n      const bodyA = this.bodyA;\n      const bodyB = this.bodyB;\n      const form = manager.allocTransform();\n      manager.setIdentity(form);\n      manager.setOriginFromArray3(form, params.position);\n      manager.setBasisFromArray3(form, params.rotation);\n      const formA = manager.allocTransform();\n      const formB = manager.allocTransform();\n      bodyA.body.getMotionState().getWorldTransform(formA);\n      bodyB.body.getMotionState().getWorldTransform(formB);\n      const formInverseA = manager.inverseTransform(formA);\n      const formInverseB = manager.inverseTransform(formB);\n      const formA2 = manager.multiplyTransforms(formInverseA, form);\n      const formB2 = manager.multiplyTransforms(formInverseB, form);\n      const constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n      const lll = manager.allocVector3();\n      const lul = manager.allocVector3();\n      const all = manager.allocVector3();\n      const aul = manager.allocVector3();\n      lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n      lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n      all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n      aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n      constraint.setLinearLowerLimit(lll);\n      constraint.setLinearUpperLimit(lul);\n      constraint.setAngularLowerLimit(all);\n      constraint.setAngularUpperLimit(aul);\n      for (let i = 0; i < 3; i++) {\n        if (params.springPosition[i] !== 0) {\n          constraint.enableSpring(i, true);\n          constraint.setStiffness(i, params.springPosition[i]);\n        }\n      }\n      for (let i = 0; i < 3; i++) {\n        if (params.springRotation[i] !== 0) {\n          constraint.enableSpring(i + 3, true);\n          constraint.setStiffness(i + 3, params.springRotation[i]);\n        }\n      }\n      /*\n       * Currently(10/31/2016) official ammo.js doesn't support\n       * btGeneric6DofSpringConstraint.setParam method.\n       * You need custom ammo.js (add the method into idl) if you wanna use.\n       * By setting this parameter, physics will be more like MMD's\n       */\n\n      if (constraint.setParam !== undefined) {\n        for (let i = 0; i < 6; i++) {\n          // this parameter is from http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n          constraint.setParam(2, 0.475, i);\n        }\n      }\n      this.world.addConstraint(constraint, true);\n      this.constraint = constraint;\n      manager.freeTransform(form);\n      manager.freeTransform(formA);\n      manager.freeTransform(formB);\n      manager.freeTransform(formInverseA);\n      manager.freeTransform(formInverseB);\n      manager.freeTransform(formA2);\n      manager.freeTransform(formB2);\n      manager.freeVector3(lll);\n      manager.freeVector3(lul);\n      manager.freeVector3(all);\n      manager.freeVector3(aul);\n    }\n  };\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n\n  function MMDPhysicsHelper(mesh, physics) {\n    Object3D.call(this);\n    this.root = mesh;\n    this.physics = physics;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.materials = [];\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0xff8888),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0x88ff88),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0x8888ff),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this._init();\n  }\n  MMDPhysicsHelper.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: MMDPhysicsHelper,\n    /**\n     * Updates Rigid Bodies visualization.\n     */\n    updateMatrixWorld: (() => {\n      const position = new Vector3();\n      const quaternion = new Quaternion();\n      const scale = new Vector3();\n      const matrixWorldInv = new Matrix4();\n      return function updateMatrixWorld(force) {\n        const mesh = this.root;\n        if (this.visible) {\n          const bodies = this.physics.bodies;\n          matrixWorldInv.copy(mesh.matrixWorld).decompose(position, quaternion, scale).compose(position, quaternion, scale.set(1, 1, 1)).invert();\n          for (let i = 0, il = bodies.length; i < il; i++) {\n            const body = bodies[i].body;\n            const child = this.children[i];\n            const tr = body.getCenterOfMassTransform();\n            const origin = tr.getOrigin();\n            const rotation = tr.getRotation();\n            child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(matrixWorldInv);\n            child.quaternion.setFromRotationMatrix(matrixWorldInv).multiply(quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n          }\n        }\n        this.matrix.copy(mesh.matrixWorld).decompose(position, quaternion, scale).compose(position, quaternion, scale.set(1, 1, 1));\n        Object3D.prototype.updateMatrixWorld.call(this, force);\n      };\n    })(),\n    // private method\n    _init: function () {\n      const bodies = this.physics.bodies;\n      function createGeometry(param) {\n        switch (param.shapeType) {\n          case 0:\n            return new SphereGeometry(param.width, 16, 8);\n          case 1:\n            return new BoxGeometry(param.width * 2, param.height * 2, param.depth * 2, 8, 8, 8);\n          case 2:\n            return new createCapsuleGeometry(param.width, param.height, 16, 8);\n          default:\n            return null;\n        }\n      } // copy from http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mytest37.js?ver=20160815\n\n      function createCapsuleGeometry(radius, cylinderHeight, segmentsRadius, segmentsHeight) {\n        const geometry = new CylinderGeometry(radius, radius, cylinderHeight, segmentsRadius, segmentsHeight, true);\n        const upperSphere = new Mesh(new SphereGeometry(radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, 0, Math.PI / 2));\n        const lowerSphere = new Mesh(new SphereGeometry(radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2));\n        upperSphere.position.set(0, cylinderHeight / 2, 0);\n        lowerSphere.position.set(0, -cylinderHeight / 2, 0);\n        upperSphere.updateMatrix();\n        lowerSphere.updateMatrix();\n        geometry.merge(upperSphere.geometry, upperSphere.matrix);\n        geometry.merge(lowerSphere.geometry, lowerSphere.matrix);\n        return geometry;\n      }\n      for (let i = 0, il = bodies.length; i < il; i++) {\n        const param = bodies[i].params;\n        this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n      }\n    }\n  });\n  return MMDPhysics;\n})();\nexport { MMDPhysics };","map":{"version":3,"names":["Object3D","Vector3","Quaternion","Matrix4","Mesh","Euler","Bone","MeshBasicMaterial","Color","BoxGeometry","SphereGeometry","CylinderGeometry","MMDPhysics","mesh","rigidBodyParams","constraintParams","params","Ammo","Error","manager","ResourceManager","unitStep","undefined","maxStepNum","gravity","copy","world","bodies","constraints","_init","prototype","constructor","update","delta","isNonDefaultScale","position","allocThreeVector3","quaternion","allocThreeQuaternion","scale","matrixWorld","decompose","x","y","z","parent","set","updateMatrixWorld","_updateRigidBodies","_stepSimulation","_updateBones","freeThreeVector3","freeThreeQuaternion","reset","i","il","length","warmup","cycles","setGravity","btVector3","createHelper","MMDPhysicsHelper","currentPosition","currentQuaternion","currentScale","_createWorld","_initRigidBodies","_initConstraints","config","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","cache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","rigidBodies","push","RigidBody","bodyA","rigidBodyIndex1","bodyB","rigidBodyIndex2","Constraint","stepTime","stepSimulation","updateFromBone","updateBone","threeVector3s","threeMatrix4s","threeQuaternions","threeEulers","transforms","quaternions","vector3s","pop","v","allocThreeMatrix4","freeThreeMatrix4","m","q","allocThreeEuler","freeThreeEuler","e","allocTransform","btTransform","freeTransform","t","allocQuaternion","btQuaternion","freeQuaternion","allocVector3","freeVector3","setIdentity","getBasis","getRotation","getBasisAsMatrix3","quaternionToMatrix3","getOrigin","setOrigin","setValue","copyOrigin","t1","t2","o","setBasis","setRotation","setBasisFromMatrix3","matrix3ToQuaternion","setOriginFromArray3","a","setOriginFromThreeVector3","setBasisFromArray3","thQ","thE","setBasisFromThreeQuaternion","setFromEuler","setX","setY","setZ","setW","w","multiplyTransforms","m1","m2","o1","o2","v1","multiplyMatrix3ByVector3","v2","addVector3","m3","multiplyMatrices3","inverseTransform","transposeMatrix3","negativeVector3","v10","rowOfMatrix3","v11","v12","v20","columnOfMatrix3","v21","v22","dotVectors3","v4","v0","xx","yy","zz","xy","yz","zx","xw","yw","zw","s","Math","sqrt","body","bone","boneOffsetForm","boneOffsetFormInverse","_setTransformFromBone","boneIndex","type","_updateBoneRotation","_updateBonePosition","_setPositionFromBone","generateShape","p","shapeType","btSphereShape","width","btBoxShape","height","depth","btCapsuleShape","bones","skeleton","shape","weight","localInertia","calculateLocalInertia","rotation","vector","boneForm","getWorldPosition","form","state","btDefaultMotionState","info","btRigidBodyConstructionInfo","set_m_friction","friction","set_m_restitution","restitution","btRigidBody","setCollisionFlags","getCollisionFlags","setActivationState","setDamping","positionDamping","rotationDamping","setSleepingThresholds","addRigidBody","groupIndex","groupTarget","_getBoneTransform","tr","_getWorldTransformForBone","getCenterOfMassTransform","setCenterOfMassTransform","getMotionState","setWorldTransform","getWorldTransform","thQ2","thQ3","setFromRotationMatrix","conjugate","multiply","matrix","normalize","thV","worldToLocal","constraint","formA","formB","formInverseA","formInverseB","formA2","formB2","btGeneric6DofSpringConstraint","lll","lul","all","aul","translationLimitation1","translationLimitation2","rotationLimitation1","rotationLimitation2","setLinearLowerLimit","setLinearUpperLimit","setAngularLowerLimit","setAngularUpperLimit","springPosition","enableSpring","setStiffness","springRotation","setParam","addConstraint","physics","call","root","matrixAutoUpdate","materials","color","wireframe","depthTest","depthWrite","opacity","transparent","Object","assign","create","matrixWorldInv","force","visible","compose","invert","child","children","origin","applyMatrix4","createGeometry","param","createCapsuleGeometry","radius","cylinderHeight","segmentsRadius","segmentsHeight","geometry","upperSphere","PI","lowerSphere","updateMatrix","merge","add"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/animation/MMDPhysics.js"],"sourcesContent":["import { Object3D, Vector3, Quaternion, Matrix4, Mesh, Euler, Bone, MeshBasicMaterial, Color, BoxGeometry, SphereGeometry, CylinderGeometry } from 'three';\n\n/**\n * Dependencies\n *  - Ammo.js https://github.com/kripken/ammo.js\n *\n * MMDPhysics calculates physics with Ammo(Bullet based JavaScript Physics engine)\n * for MMD model loaded by MMDLoader.\n *\n * TODO\n *  - Physics in Worker\n */\n\n/* global Ammo */\n\nconst MMDPhysics = (() => {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  function MMDPhysics(mesh, rigidBodyParams, constraintParams, params) {\n    if (typeof Ammo === 'undefined') {\n      throw new Error('THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js');\n    }\n\n    constraintParams = constraintParams || [];\n    params = params || {};\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    /*\n     * I don't know why but 1/60 unitStep easily breaks models\n     * so I set it 1/65 so far.\n     * Don't set too small unitStep because\n     * the smaller unitStep can make the performance worse.\n     */\n\n    this.unitStep = params.unitStep !== undefined ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== undefined ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== undefined) this.gravity.copy(params.gravity);\n    this.world = params.world !== undefined ? params.world : null; // experimental\n\n    this.bodies = [];\n    this.constraints = [];\n\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n\n  MMDPhysics.prototype = {\n    constructor: MMDPhysics,\n\n    /**\n     * Advances Physics calculation and updates bones.\n     *\n     * @param {Number} delta - time in second\n     * @return {MMDPhysics}\n     */\n    update: function (delta) {\n      const manager = this.manager;\n      const mesh = this.mesh; // rigid bodies and constrains are for\n      // mesh's world scale (1, 1, 1).\n      // Convert to (1, 1, 1) if it isn't.\n\n      let isNonDefaultScale = false;\n      const position = manager.allocThreeVector3();\n      const quaternion = manager.allocThreeQuaternion();\n      const scale = manager.allocThreeVector3();\n      mesh.matrixWorld.decompose(position, quaternion, scale);\n\n      if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n        isNonDefaultScale = true;\n      }\n\n      let parent;\n\n      if (isNonDefaultScale) {\n        parent = mesh.parent;\n        if (parent !== null) mesh.parent = null;\n        scale.copy(this.mesh.scale);\n        mesh.scale.set(1, 1, 1);\n        mesh.updateMatrixWorld(true);\n      } // calculate physics and update bones\n\n\n      this._updateRigidBodies();\n\n      this._stepSimulation(delta);\n\n      this._updateBones(); // restore mesh if converted above\n\n\n      if (isNonDefaultScale) {\n        if (parent !== null) mesh.parent = parent;\n        mesh.scale.copy(scale);\n      }\n\n      manager.freeThreeVector3(scale);\n      manager.freeThreeQuaternion(quaternion);\n      manager.freeThreeVector3(position);\n      return this;\n    },\n\n    /**\n     * Resets rigid bodies transorm to current bone's.\n     *\n     * @return {MMDPhysics}\n     */\n    reset: function () {\n      for (let i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].reset();\n      }\n\n      return this;\n    },\n\n    /**\n     * Warm ups Rigid bodies. Calculates cycles steps.\n     *\n     * @param {Integer} cycles\n     * @return {MMDPhysics}\n     */\n    warmup: function (cycles) {\n      for (let i = 0; i < cycles; i++) {\n        this.update(1 / 60);\n      }\n\n      return this;\n    },\n\n    /**\n     * Sets gravity.\n     *\n     * @param {Vector3} gravity\n     * @return {MMDPhysicsHelper}\n     */\n    setGravity: function (gravity) {\n      this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n      this.gravity.copy(gravity);\n      return this;\n    },\n\n    /**\n     * Creates MMDPhysicsHelper\n     *\n     * @return {MMDPhysicsHelper}\n     */\n    createHelper: function () {\n      return new MMDPhysicsHelper(this.mesh, this);\n    },\n    // private methods\n    _init: function (mesh, rigidBodyParams, constraintParams) {\n      const manager = this.manager; // rigid body/constraint parameters are for\n      // mesh's default world transform as position(0, 0, 0),\n      // quaternion(0, 0, 0, 1) and scale(0, 0, 0)\n\n      let parent = mesh.parent;\n      if (parent !== null) parent = null;\n      const currentPosition = manager.allocThreeVector3();\n      const currentQuaternion = manager.allocThreeQuaternion();\n      const currentScale = manager.allocThreeVector3();\n      currentPosition.copy(mesh.position);\n      currentQuaternion.copy(mesh.quaternion);\n      currentScale.copy(mesh.scale);\n      mesh.position.set(0, 0, 0);\n      mesh.quaternion.set(0, 0, 0, 1);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n\n      if (this.world === null) {\n        this.world = this._createWorld();\n        this.setGravity(this.gravity);\n      }\n\n      this._initRigidBodies(rigidBodyParams);\n\n      this._initConstraints(constraintParams);\n\n      if (parent !== null) mesh.parent = parent;\n      mesh.position.copy(currentPosition);\n      mesh.quaternion.copy(currentQuaternion);\n      mesh.scale.copy(currentScale);\n      mesh.updateMatrixWorld(true);\n      this.reset();\n      manager.freeThreeVector3(currentPosition);\n      manager.freeThreeQuaternion(currentQuaternion);\n      manager.freeThreeVector3(currentScale);\n    },\n    _createWorld: function () {\n      const config = new Ammo.btDefaultCollisionConfiguration();\n      const dispatcher = new Ammo.btCollisionDispatcher(config);\n      const cache = new Ammo.btDbvtBroadphase();\n      const solver = new Ammo.btSequentialImpulseConstraintSolver();\n      const world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n      return world;\n    },\n    _initRigidBodies: function (rigidBodies) {\n      for (let i = 0, il = rigidBodies.length; i < il; i++) {\n        this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n      }\n    },\n    _initConstraints: function (constraints) {\n      for (let i = 0, il = constraints.length; i < il; i++) {\n        const params = constraints[i];\n        const bodyA = this.bodies[params.rigidBodyIndex1];\n        const bodyB = this.bodies[params.rigidBodyIndex2];\n        this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n      }\n    },\n    _stepSimulation: function (delta) {\n      const unitStep = this.unitStep;\n      let stepTime = delta;\n      let maxStepNum = (delta / unitStep | 0) + 1;\n\n      if (stepTime < unitStep) {\n        stepTime = unitStep;\n        maxStepNum = 1;\n      }\n\n      if (maxStepNum > this.maxStepNum) {\n        maxStepNum = this.maxStepNum;\n      }\n\n      this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n    },\n    _updateRigidBodies: function () {\n      for (let i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateFromBone();\n      }\n    },\n    _updateBones: function () {\n      for (let i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateBone();\n      }\n    }\n  };\n  /**\n   * This manager's responsibilies are\n   *\n   * 1. manage Ammo.js and Three.js object resources and\n   *    improve the performance and the memory consumption by\n   *    reusing objects.\n   *\n   * 2. provide simple Ammo object operations.\n   */\n\n  function ResourceManager() {\n    // for Three.js\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = []; // for Ammo.js\n\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n\n  ResourceManager.prototype = {\n    constructor: ResourceManager,\n    allocThreeVector3: function () {\n      return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n    },\n    freeThreeVector3: function (v) {\n      this.threeVector3s.push(v);\n    },\n    allocThreeMatrix4: function () {\n      return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n    },\n    freeThreeMatrix4: function (m) {\n      this.threeMatrix4s.push(m);\n    },\n    allocThreeQuaternion: function () {\n      return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n    },\n    freeThreeQuaternion: function (q) {\n      this.threeQuaternions.push(q);\n    },\n    allocThreeEuler: function () {\n      return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n    },\n    freeThreeEuler: function (e) {\n      this.threeEulers.push(e);\n    },\n    allocTransform: function () {\n      return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n    },\n    freeTransform: function (t) {\n      this.transforms.push(t);\n    },\n    allocQuaternion: function () {\n      return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n    },\n    freeQuaternion: function (q) {\n      this.quaternions.push(q);\n    },\n    allocVector3: function () {\n      return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n    },\n    freeVector3: function (v) {\n      this.vector3s.push(v);\n    },\n    setIdentity: function (t) {\n      t.setIdentity();\n    },\n    getBasis: function (t) {\n      const q = this.allocQuaternion();\n      t.getBasis().getRotation(q);\n      return q;\n    },\n    getBasisAsMatrix3: function (t) {\n      const q = this.getBasis(t);\n      const m = this.quaternionToMatrix3(q);\n      this.freeQuaternion(q);\n      return m;\n    },\n    getOrigin: function (t) {\n      return t.getOrigin();\n    },\n    setOrigin: function (t, v) {\n      t.getOrigin().setValue(v.x(), v.y(), v.z());\n    },\n    copyOrigin: function (t1, t2) {\n      const o = t2.getOrigin();\n      this.setOrigin(t1, o);\n    },\n    setBasis: function (t, q) {\n      t.setRotation(q);\n    },\n    setBasisFromMatrix3: function (t, m) {\n      const q = this.matrix3ToQuaternion(m);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    },\n    setOriginFromArray3: function (t, a) {\n      t.getOrigin().setValue(a[0], a[1], a[2]);\n    },\n    setOriginFromThreeVector3: function (t, v) {\n      t.getOrigin().setValue(v.x, v.y, v.z);\n    },\n    setBasisFromArray3: function (t, a) {\n      const thQ = this.allocThreeQuaternion();\n      const thE = this.allocThreeEuler();\n      thE.set(a[0], a[1], a[2]);\n      this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n      this.freeThreeEuler(thE);\n      this.freeThreeQuaternion(thQ);\n    },\n    setBasisFromThreeQuaternion: function (t, a) {\n      const q = this.allocQuaternion();\n      q.setX(a.x);\n      q.setY(a.y);\n      q.setZ(a.z);\n      q.setW(a.w);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    },\n    multiplyTransforms: function (t1, t2) {\n      const t = this.allocTransform();\n      this.setIdentity(t);\n      const m1 = this.getBasisAsMatrix3(t1);\n      const m2 = this.getBasisAsMatrix3(t2);\n      const o1 = this.getOrigin(t1);\n      const o2 = this.getOrigin(t2);\n      const v1 = this.multiplyMatrix3ByVector3(m1, o2);\n      const v2 = this.addVector3(v1, o1);\n      this.setOrigin(t, v2);\n      const m3 = this.multiplyMatrices3(m1, m2);\n      this.setBasisFromMatrix3(t, m3);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t;\n    },\n    inverseTransform: function (t) {\n      const t2 = this.allocTransform();\n      const m1 = this.getBasisAsMatrix3(t);\n      const o = this.getOrigin(t);\n      const m2 = this.transposeMatrix3(m1);\n      const v1 = this.negativeVector3(o);\n      const v2 = this.multiplyMatrix3ByVector3(m2, v1);\n      this.setOrigin(t2, v2);\n      this.setBasisFromMatrix3(t2, m2);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t2;\n    },\n    multiplyMatrices3: function (m1, m2) {\n      const m3 = [];\n      const v10 = this.rowOfMatrix3(m1, 0);\n      const v11 = this.rowOfMatrix3(m1, 1);\n      const v12 = this.rowOfMatrix3(m1, 2);\n      const v20 = this.columnOfMatrix3(m2, 0);\n      const v21 = this.columnOfMatrix3(m2, 1);\n      const v22 = this.columnOfMatrix3(m2, 2);\n      m3[0] = this.dotVectors3(v10, v20);\n      m3[1] = this.dotVectors3(v10, v21);\n      m3[2] = this.dotVectors3(v10, v22);\n      m3[3] = this.dotVectors3(v11, v20);\n      m3[4] = this.dotVectors3(v11, v21);\n      m3[5] = this.dotVectors3(v11, v22);\n      m3[6] = this.dotVectors3(v12, v20);\n      m3[7] = this.dotVectors3(v12, v21);\n      m3[8] = this.dotVectors3(v12, v22);\n      this.freeVector3(v10);\n      this.freeVector3(v11);\n      this.freeVector3(v12);\n      this.freeVector3(v20);\n      this.freeVector3(v21);\n      this.freeVector3(v22);\n      return m3;\n    },\n    addVector3: function (v1, v2) {\n      const v = this.allocVector3();\n      v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n      return v;\n    },\n    dotVectors3: function (v1, v2) {\n      return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n    },\n    rowOfMatrix3: function (m, i) {\n      const v = this.allocVector3();\n      v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n      return v;\n    },\n    columnOfMatrix3: function (m, i) {\n      const v = this.allocVector3();\n      v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n      return v;\n    },\n    negativeVector3: function (v) {\n      const v2 = this.allocVector3();\n      v2.setValue(-v.x(), -v.y(), -v.z());\n      return v2;\n    },\n    multiplyMatrix3ByVector3: function (m, v) {\n      const v4 = this.allocVector3();\n      const v0 = this.rowOfMatrix3(m, 0);\n      const v1 = this.rowOfMatrix3(m, 1);\n      const v2 = this.rowOfMatrix3(m, 2);\n      const x = this.dotVectors3(v0, v);\n      const y = this.dotVectors3(v1, v);\n      const z = this.dotVectors3(v2, v);\n      v4.setValue(x, y, z);\n      this.freeVector3(v0);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return v4;\n    },\n    transposeMatrix3: function (m) {\n      const m2 = [];\n      m2[0] = m[0];\n      m2[1] = m[3];\n      m2[2] = m[6];\n      m2[3] = m[1];\n      m2[4] = m[4];\n      m2[5] = m[7];\n      m2[6] = m[2];\n      m2[7] = m[5];\n      m2[8] = m[8];\n      return m2;\n    },\n    quaternionToMatrix3: function (q) {\n      const m = [];\n      const x = q.x();\n      const y = q.y();\n      const z = q.z();\n      const w = q.w();\n      const xx = x * x;\n      const yy = y * y;\n      const zz = z * z;\n      const xy = x * y;\n      const yz = y * z;\n      const zx = z * x;\n      const xw = x * w;\n      const yw = y * w;\n      const zw = z * w;\n      m[0] = 1 - 2 * (yy + zz);\n      m[1] = 2 * (xy - zw);\n      m[2] = 2 * (zx + yw);\n      m[3] = 2 * (xy + zw);\n      m[4] = 1 - 2 * (zz + xx);\n      m[5] = 2 * (yz - xw);\n      m[6] = 2 * (zx - yw);\n      m[7] = 2 * (yz + xw);\n      m[8] = 1 - 2 * (xx + yy);\n      return m;\n    },\n    matrix3ToQuaternion: function (m) {\n      const t = m[0] + m[4] + m[8];\n      let s, x, y, z, w;\n\n      if (t > 0) {\n        s = Math.sqrt(t + 1.0) * 2;\n        w = 0.25 * s;\n        x = (m[7] - m[5]) / s;\n        y = (m[2] - m[6]) / s;\n        z = (m[3] - m[1]) / s;\n      } else if (m[0] > m[4] && m[0] > m[8]) {\n        s = Math.sqrt(1.0 + m[0] - m[4] - m[8]) * 2;\n        w = (m[7] - m[5]) / s;\n        x = 0.25 * s;\n        y = (m[1] + m[3]) / s;\n        z = (m[2] + m[6]) / s;\n      } else if (m[4] > m[8]) {\n        s = Math.sqrt(1.0 + m[4] - m[0] - m[8]) * 2;\n        w = (m[2] - m[6]) / s;\n        x = (m[1] + m[3]) / s;\n        y = 0.25 * s;\n        z = (m[5] + m[7]) / s;\n      } else {\n        s = Math.sqrt(1.0 + m[8] - m[0] - m[4]) * 2;\n        w = (m[3] - m[1]) / s;\n        x = (m[2] + m[6]) / s;\n        y = (m[5] + m[7]) / s;\n        z = 0.25 * s;\n      }\n\n      const q = this.allocQuaternion();\n      q.setX(x);\n      q.setY(y);\n      q.setZ(z);\n      q.setW(w);\n      return q;\n    }\n  };\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n\n  function RigidBody(mesh, world, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n\n    this._init();\n  }\n\n  RigidBody.prototype = {\n    constructor: MMDPhysics.RigidBody,\n\n    /**\n     * Resets rigid body transform to the current bone's.\n     *\n     * @return {RigidBody}\n     */\n    reset: function () {\n      this._setTransformFromBone();\n\n      return this;\n    },\n\n    /**\n     * Updates rigid body's transform from the current bone.\n     *\n     * @return {RidigBody}\n     */\n    updateFromBone: function () {\n      if (this.params.boneIndex !== -1 && this.params.type === 0) {\n        this._setTransformFromBone();\n      }\n\n      return this;\n    },\n\n    /**\n     * Updates bone from the current ridid body's transform.\n     *\n     * @return {RidigBody}\n     */\n    updateBone: function () {\n      if (this.params.type === 0 || this.params.boneIndex === -1) {\n        return this;\n      }\n\n      this._updateBoneRotation();\n\n      if (this.params.type === 1) {\n        this._updateBonePosition();\n      }\n\n      this.bone.updateMatrixWorld(true);\n\n      if (this.params.type === 2) {\n        this._setPositionFromBone();\n      }\n\n      return this;\n    },\n    // private methods\n    _init: function () {\n      function generateShape(p) {\n        switch (p.shapeType) {\n          case 0:\n            return new Ammo.btSphereShape(p.width);\n\n          case 1:\n            return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n\n          case 2:\n            return new Ammo.btCapsuleShape(p.width, p.height);\n\n          default:\n            throw `unknown shape type ${p.shapeType}`;\n        }\n      }\n\n      const manager = this.manager;\n      const params = this.params;\n      const bones = this.mesh.skeleton.bones;\n      const bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n      const shape = generateShape(params);\n      const weight = params.type === 0 ? 0 : params.weight;\n      const localInertia = manager.allocVector3();\n      localInertia.setValue(0, 0, 0);\n\n      if (weight !== 0) {\n        shape.calculateLocalInertia(weight, localInertia);\n      }\n\n      const boneOffsetForm = manager.allocTransform();\n      manager.setIdentity(boneOffsetForm);\n      manager.setOriginFromArray3(boneOffsetForm, params.position);\n      manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n      const vector = manager.allocThreeVector3();\n      const boneForm = manager.allocTransform();\n      manager.setIdentity(boneForm);\n      manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n      const form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n      const state = new Ammo.btDefaultMotionState(form);\n      const info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n      info.set_m_friction(params.friction);\n      info.set_m_restitution(params.restitution);\n      const body = new Ammo.btRigidBody(info);\n\n      if (params.type === 0) {\n        body.setCollisionFlags(body.getCollisionFlags() | 2);\n        /*\n         * It'd be better to comment out this line though in general I should call this method\n         * because I'm not sure why but physics will be more like MMD's\n         * if I comment out.\n         */\n\n        body.setActivationState(4);\n      }\n\n      body.setDamping(params.positionDamping, params.rotationDamping);\n      body.setSleepingThresholds(0, 0);\n      this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n      this.body = body;\n      this.bone = bone;\n      this.boneOffsetForm = boneOffsetForm;\n      this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n      manager.freeVector3(localInertia);\n      manager.freeTransform(form);\n      manager.freeTransform(boneForm);\n      manager.freeThreeVector3(vector);\n    },\n    _getBoneTransform: function () {\n      const manager = this.manager;\n      const p = manager.allocThreeVector3();\n      const q = manager.allocThreeQuaternion();\n      const s = manager.allocThreeVector3();\n      this.bone.matrixWorld.decompose(p, q, s);\n      const tr = manager.allocTransform();\n      manager.setOriginFromThreeVector3(tr, p);\n      manager.setBasisFromThreeQuaternion(tr, q);\n      const form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n      manager.freeTransform(tr);\n      manager.freeThreeVector3(s);\n      manager.freeThreeQuaternion(q);\n      manager.freeThreeVector3(p);\n      return form;\n    },\n    _getWorldTransformForBone: function () {\n      const manager = this.manager;\n      const tr = this.body.getCenterOfMassTransform();\n      return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n    },\n    _setTransformFromBone: function () {\n      const manager = this.manager;\n\n      const form = this._getBoneTransform(); // TODO: check the most appropriate way to set\n      //this.body.setWorldTransform( form );\n\n\n      this.body.setCenterOfMassTransform(form);\n      this.body.getMotionState().setWorldTransform(form);\n      manager.freeTransform(form);\n    },\n    _setPositionFromBone: function () {\n      const manager = this.manager;\n\n      const form = this._getBoneTransform();\n\n      const tr = manager.allocTransform();\n      this.body.getMotionState().getWorldTransform(tr);\n      manager.copyOrigin(tr, form); // TODO: check the most appropriate way to set\n      //this.body.setWorldTransform( tr );\n\n      this.body.setCenterOfMassTransform(tr);\n      this.body.getMotionState().setWorldTransform(tr);\n      manager.freeTransform(tr);\n      manager.freeTransform(form);\n    },\n    _updateBoneRotation: function () {\n      const manager = this.manager;\n\n      const tr = this._getWorldTransformForBone();\n\n      const q = manager.getBasis(tr);\n      const thQ = manager.allocThreeQuaternion();\n      const thQ2 = manager.allocThreeQuaternion();\n      const thQ3 = manager.allocThreeQuaternion();\n      thQ.set(q.x(), q.y(), q.z(), q.w());\n      thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n      thQ2.conjugate();\n      thQ2.multiply(thQ); //this.bone.quaternion.multiply( thQ2 );\n\n      thQ3.setFromRotationMatrix(this.bone.matrix); // Renormalizing quaternion here because repeatedly transforming\n      // quaternion continuously accumulates floating point error and\n      // can end up being overflow. See #15335\n\n      this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n      manager.freeThreeQuaternion(thQ);\n      manager.freeThreeQuaternion(thQ2);\n      manager.freeThreeQuaternion(thQ3);\n      manager.freeQuaternion(q);\n      manager.freeTransform(tr);\n    },\n    _updateBonePosition: function () {\n      const manager = this.manager;\n\n      const tr = this._getWorldTransformForBone();\n\n      const thV = manager.allocThreeVector3();\n      const o = manager.getOrigin(tr);\n      thV.set(o.x(), o.y(), o.z());\n\n      if (this.bone.parent) {\n        this.bone.parent.worldToLocal(thV);\n      }\n\n      this.bone.position.copy(thV);\n      manager.freeThreeVector3(thV);\n      manager.freeTransform(tr);\n    }\n  };\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n\n  function Constraint(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n\n    this._init();\n  }\n\n  Constraint.prototype = {\n    constructor: Constraint,\n    // private method\n    _init: function () {\n      const manager = this.manager;\n      const params = this.params;\n      const bodyA = this.bodyA;\n      const bodyB = this.bodyB;\n      const form = manager.allocTransform();\n      manager.setIdentity(form);\n      manager.setOriginFromArray3(form, params.position);\n      manager.setBasisFromArray3(form, params.rotation);\n      const formA = manager.allocTransform();\n      const formB = manager.allocTransform();\n      bodyA.body.getMotionState().getWorldTransform(formA);\n      bodyB.body.getMotionState().getWorldTransform(formB);\n      const formInverseA = manager.inverseTransform(formA);\n      const formInverseB = manager.inverseTransform(formB);\n      const formA2 = manager.multiplyTransforms(formInverseA, form);\n      const formB2 = manager.multiplyTransforms(formInverseB, form);\n      const constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n      const lll = manager.allocVector3();\n      const lul = manager.allocVector3();\n      const all = manager.allocVector3();\n      const aul = manager.allocVector3();\n      lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n      lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n      all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n      aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n      constraint.setLinearLowerLimit(lll);\n      constraint.setLinearUpperLimit(lul);\n      constraint.setAngularLowerLimit(all);\n      constraint.setAngularUpperLimit(aul);\n\n      for (let i = 0; i < 3; i++) {\n        if (params.springPosition[i] !== 0) {\n          constraint.enableSpring(i, true);\n          constraint.setStiffness(i, params.springPosition[i]);\n        }\n      }\n\n      for (let i = 0; i < 3; i++) {\n        if (params.springRotation[i] !== 0) {\n          constraint.enableSpring(i + 3, true);\n          constraint.setStiffness(i + 3, params.springRotation[i]);\n        }\n      }\n      /*\n       * Currently(10/31/2016) official ammo.js doesn't support\n       * btGeneric6DofSpringConstraint.setParam method.\n       * You need custom ammo.js (add the method into idl) if you wanna use.\n       * By setting this parameter, physics will be more like MMD's\n       */\n\n\n      if (constraint.setParam !== undefined) {\n        for (let i = 0; i < 6; i++) {\n          // this parameter is from http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n          constraint.setParam(2, 0.475, i);\n        }\n      }\n\n      this.world.addConstraint(constraint, true);\n      this.constraint = constraint;\n      manager.freeTransform(form);\n      manager.freeTransform(formA);\n      manager.freeTransform(formB);\n      manager.freeTransform(formInverseA);\n      manager.freeTransform(formInverseB);\n      manager.freeTransform(formA2);\n      manager.freeTransform(formB2);\n      manager.freeVector3(lll);\n      manager.freeVector3(lul);\n      manager.freeVector3(all);\n      manager.freeVector3(aul);\n    }\n  };\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n\n  function MMDPhysicsHelper(mesh, physics) {\n    Object3D.call(this);\n    this.root = mesh;\n    this.physics = physics;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.materials = [];\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0xff8888),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0x88ff88),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0x8888ff),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n\n    this._init();\n  }\n\n  MMDPhysicsHelper.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: MMDPhysicsHelper,\n\n    /**\n     * Updates Rigid Bodies visualization.\n     */\n    updateMatrixWorld: (() => {\n      const position = new Vector3();\n      const quaternion = new Quaternion();\n      const scale = new Vector3();\n      const matrixWorldInv = new Matrix4();\n      return function updateMatrixWorld(force) {\n        const mesh = this.root;\n\n        if (this.visible) {\n          const bodies = this.physics.bodies;\n          matrixWorldInv.copy(mesh.matrixWorld).decompose(position, quaternion, scale).compose(position, quaternion, scale.set(1, 1, 1)).invert();\n\n          for (let i = 0, il = bodies.length; i < il; i++) {\n            const body = bodies[i].body;\n            const child = this.children[i];\n            const tr = body.getCenterOfMassTransform();\n            const origin = tr.getOrigin();\n            const rotation = tr.getRotation();\n            child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(matrixWorldInv);\n            child.quaternion.setFromRotationMatrix(matrixWorldInv).multiply(quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n          }\n        }\n\n        this.matrix.copy(mesh.matrixWorld).decompose(position, quaternion, scale).compose(position, quaternion, scale.set(1, 1, 1));\n        Object3D.prototype.updateMatrixWorld.call(this, force);\n      };\n    })(),\n    // private method\n    _init: function () {\n      const bodies = this.physics.bodies;\n\n      function createGeometry(param) {\n        switch (param.shapeType) {\n          case 0:\n            return new SphereGeometry(param.width, 16, 8);\n\n          case 1:\n            return new BoxGeometry(param.width * 2, param.height * 2, param.depth * 2, 8, 8, 8);\n\n          case 2:\n            return new createCapsuleGeometry(param.width, param.height, 16, 8);\n\n          default:\n            return null;\n        }\n      } // copy from http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mytest37.js?ver=20160815\n\n\n      function createCapsuleGeometry(radius, cylinderHeight, segmentsRadius, segmentsHeight) {\n        const geometry = new CylinderGeometry(radius, radius, cylinderHeight, segmentsRadius, segmentsHeight, true);\n        const upperSphere = new Mesh(new SphereGeometry(radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, 0, Math.PI / 2));\n        const lowerSphere = new Mesh(new SphereGeometry(radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2));\n        upperSphere.position.set(0, cylinderHeight / 2, 0);\n        lowerSphere.position.set(0, -cylinderHeight / 2, 0);\n        upperSphere.updateMatrix();\n        lowerSphere.updateMatrix();\n        geometry.merge(upperSphere.geometry, upperSphere.matrix);\n        geometry.merge(lowerSphere.geometry, lowerSphere.matrix);\n        return geometry;\n      }\n\n      for (let i = 0, il = bodies.length; i < il; i++) {\n        const param = bodies[i].params;\n        this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n      }\n    }\n  });\n  return MMDPhysics;\n})();\n\nexport { MMDPhysics };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}