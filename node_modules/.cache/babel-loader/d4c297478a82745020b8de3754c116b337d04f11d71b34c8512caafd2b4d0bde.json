{"ast":null,"code":"import { DataTextureLoader, HalfFloatType, FloatType, DataUtils, LinearEncoding, LinearFilter } from 'three';\n\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  } // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n  parse(buffer) {\n    const /* return codes for rgbe routines */\n      //RGBE_RETURN_SUCCESS = 0,\n      RGBE_RETURN_FAILURE = -1,\n      /* default error routine.  change this to change error handling */\n      rgbe_read_error = 1,\n      rgbe_write_error = 2,\n      rgbe_format_error = 3,\n      rgbe_memory_error = 4,\n      rgbe_error = function (rgbe_error_code, msg) {\n        switch (rgbe_error_code) {\n          case rgbe_read_error:\n            console.error('THREE.RGBELoader Read Error: ' + (msg || ''));\n            break;\n          case rgbe_write_error:\n            console.error('THREE.RGBELoader Write Error: ' + (msg || ''));\n            break;\n          case rgbe_format_error:\n            console.error('THREE.RGBELoader Bad File Format: ' + (msg || ''));\n            break;\n          default:\n          case rgbe_memory_error:\n            console.error('THREE.RGBELoader: Error: ' + (msg || ''));\n        }\n        return RGBE_RETURN_FAILURE;\n      },\n      /* offsets to red, green, and blue components in a data (float) pixel */\n      //RGBE_DATA_RED = 0,\n      //RGBE_DATA_GREEN = 1,\n      //RGBE_DATA_BLUE = 2,\n\n      /* number of floats per pixel, use 4 since stored in rgba image format */\n      //RGBE_DATA_SIZE = 4,\n\n      /* flags indicating which fields in an rgbe_header_info are valid */\n      RGBE_VALID_PROGRAMTYPE = 1,\n      RGBE_VALID_FORMAT = 2,\n      RGBE_VALID_DIMENSIONS = 4,\n      NEWLINE = '\\n',\n      fgets = function (buffer, lineLimit, consume) {\n        const chunkSize = 128;\n        lineLimit = !lineLimit ? 1024 : lineLimit;\n        let p = buffer.pos,\n          i = -1,\n          len = 0,\n          s = '',\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n        while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n          s += chunk;\n          len += chunk.length;\n          p += chunkSize;\n          chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n        }\n        if (-1 < i) {\n          /*for (i=l-1; i>=0; i--) {\n          byteCode = m.charCodeAt(i);\n          if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n          else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n          if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n          }*/\n          if (false !== consume) buffer.pos += len + i + 1;\n          return s + chunk.slice(0, i);\n        }\n        return false;\n      },\n      /* minimal header reading.  modify if you want to parse more information */\n      RGBE_ReadHeader = function (buffer) {\n        // regexes to parse header info fields\n        const magic_token_re = /^#\\?(\\S+)/,\n          gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n          dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n          // RGBE format header struct\n          header = {\n            valid: 0\n            /* indicate which fields are valid */,\n\n            string: ''\n            /* the actual header string */,\n\n            comments: ''\n            /* comments found in header */,\n\n            programtype: 'RGBE'\n            /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */,\n\n            format: ''\n            /* RGBE format, default 32-bit_rle_rgbe */,\n\n            gamma: 1.0\n            /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */,\n\n            exposure: 1.0\n            /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */,\n\n            width: 0,\n            height: 0\n            /* image dimensions, width/height */\n          };\n\n        let line, match;\n        if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n          return rgbe_error(rgbe_read_error, 'no header found');\n        }\n        /* if you want to require the magic token then uncomment the next line */\n\n        if (!(match = line.match(magic_token_re))) {\n          return rgbe_error(rgbe_format_error, 'bad initial token');\n        }\n        header.valid |= RGBE_VALID_PROGRAMTYPE;\n        header.programtype = match[1];\n        header.string += line + '\\n';\n        while (true) {\n          line = fgets(buffer);\n          if (false === line) break;\n          header.string += line + '\\n';\n          if ('#' === line.charAt(0)) {\n            header.comments += line + '\\n';\n            continue; // comment line\n          }\n\n          if (match = line.match(gamma_re)) {\n            header.gamma = parseFloat(match[1]);\n          }\n          if (match = line.match(exposure_re)) {\n            header.exposure = parseFloat(match[1]);\n          }\n          if (match = line.match(format_re)) {\n            header.valid |= RGBE_VALID_FORMAT;\n            header.format = match[1]; //'32-bit_rle_rgbe';\n          }\n\n          if (match = line.match(dimensions_re)) {\n            header.valid |= RGBE_VALID_DIMENSIONS;\n            header.height = parseInt(match[1], 10);\n            header.width = parseInt(match[2], 10);\n          }\n          if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n        }\n        if (!(header.valid & RGBE_VALID_FORMAT)) {\n          return rgbe_error(rgbe_format_error, 'missing format specifier');\n        }\n        if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n          return rgbe_error(rgbe_format_error, 'missing image size specifier');\n        }\n        return header;\n      },\n      RGBE_ReadPixels_RLE = function (buffer, w, h) {\n        const scanline_width = w;\n        if (\n        // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 0x7fff ||\n        // this file is not run length encoded\n        2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n          // return the flat buffer\n          return new Uint8Array(buffer);\n        }\n        if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n          return rgbe_error(rgbe_format_error, 'wrong scanline width');\n        }\n        const data_rgba = new Uint8Array(4 * w * h);\n        if (!data_rgba.length) {\n          return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n        }\n        let offset = 0,\n          pos = 0;\n        const ptr_end = 4 * scanline_width;\n        const rgbeStart = new Uint8Array(4);\n        const scanline_buffer = new Uint8Array(ptr_end);\n        let num_scanlines = h; // read in each successive scanline\n\n        while (num_scanlines > 0 && pos < buffer.byteLength) {\n          if (pos + 4 > buffer.byteLength) {\n            return rgbe_error(rgbe_read_error);\n          }\n          rgbeStart[0] = buffer[pos++];\n          rgbeStart[1] = buffer[pos++];\n          rgbeStart[2] = buffer[pos++];\n          rgbeStart[3] = buffer[pos++];\n          if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n            return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n          } // read each of the four channels for the scanline into the buffer\n          // first red, then green, then blue, then exponent\n\n          let ptr = 0,\n            count;\n          while (ptr < ptr_end && pos < buffer.byteLength) {\n            count = buffer[pos++];\n            const isEncodedRun = count > 128;\n            if (isEncodedRun) count -= 128;\n            if (0 === count || ptr + count > ptr_end) {\n              return rgbe_error(rgbe_format_error, 'bad scanline data');\n            }\n            if (isEncodedRun) {\n              // a (encoded) run of the same value\n              const byteValue = buffer[pos++];\n              for (let i = 0; i < count; i++) {\n                scanline_buffer[ptr++] = byteValue;\n              } //ptr += count;\n            } else {\n              // a literal-run\n              scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n              ptr += count;\n              pos += count;\n            }\n          } // now convert data from buffer into rgba\n          // first red, then green, then blue, then exponent (alpha)\n\n          const l = scanline_width; //scanline_buffer.byteLength;\n\n          for (let i = 0; i < l; i++) {\n            let off = 0;\n            data_rgba[offset] = scanline_buffer[i + off];\n            off += scanline_width; //1;\n\n            data_rgba[offset + 1] = scanline_buffer[i + off];\n            off += scanline_width; //1;\n\n            data_rgba[offset + 2] = scanline_buffer[i + off];\n            off += scanline_width; //1;\n\n            data_rgba[offset + 3] = scanline_buffer[i + off];\n            offset += 4;\n          }\n          num_scanlines--;\n        }\n        return data_rgba;\n      };\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0; // clamping to 65504, the maximum representable value in float16\n\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      const w = rgbe_header_info.width,\n        h = rgbe_header_info.height,\n        image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        let data, type;\n        let numElements;\n        switch (this.type) {\n          case FloatType:\n            numElements = image_rgba_data.length / 4;\n            const floatArray = new Float32Array(numElements * 4);\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n            }\n            data = floatArray;\n            type = FloatType;\n            break;\n          case HalfFloatType:\n            numElements = image_rgba_data.length / 4;\n            const halfArray = new Uint16Array(numElements * 4);\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n            }\n            data = halfArray;\n            type = HalfFloatType;\n            break;\n          default:\n            console.error('THREE.RGBELoader: unsupported type: ', this.type);\n            break;\n        }\n        return {\n          width: w,\n          height: h,\n          data: data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          type: type\n        };\n      }\n    }\n    return null;\n  }\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n      if (onLoad) onLoad(texture, texData);\n    }\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n}\nexport { RGBELoader };","map":{"version":3,"names":["DataTextureLoader","HalfFloatType","FloatType","DataUtils","LinearEncoding","LinearFilter","RGBELoader","constructor","manager","type","parse","buffer","RGBE_RETURN_FAILURE","rgbe_read_error","rgbe_write_error","rgbe_format_error","rgbe_memory_error","rgbe_error","rgbe_error_code","msg","console","error","RGBE_VALID_PROGRAMTYPE","RGBE_VALID_FORMAT","RGBE_VALID_DIMENSIONS","NEWLINE","fgets","lineLimit","consume","chunkSize","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBE_ReadHeader","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","line","match","charAt","parseFloat","parseInt","RGBE_ReadPixels_RLE","w","h","scanline_width","Uint8Array","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","count","isEncodedRun","byteValue","set","l","off","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","toHalfFloat","min","byteArray","rgbe_header_info","image_rgba_data","data","numElements","floatArray","Float32Array","j","halfArray","setDataType","value","load","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","encoding","minFilter","magFilter","generateMipmaps","flipY"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/loaders/RGBELoader.js"],"sourcesContent":["import { DataTextureLoader, HalfFloatType, FloatType, DataUtils, LinearEncoding, LinearFilter } from 'three';\n\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  } // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\n  parse(buffer) {\n    const\n    /* return codes for rgbe routines */\n    //RGBE_RETURN_SUCCESS = 0,\n    RGBE_RETURN_FAILURE = -1,\n\n    /* default error routine.  change this to change error handling */\n    rgbe_read_error = 1,\n          rgbe_write_error = 2,\n          rgbe_format_error = 3,\n          rgbe_memory_error = 4,\n          rgbe_error = function (rgbe_error_code, msg) {\n      switch (rgbe_error_code) {\n        case rgbe_read_error:\n          console.error('THREE.RGBELoader Read Error: ' + (msg || ''));\n          break;\n\n        case rgbe_write_error:\n          console.error('THREE.RGBELoader Write Error: ' + (msg || ''));\n          break;\n\n        case rgbe_format_error:\n          console.error('THREE.RGBELoader Bad File Format: ' + (msg || ''));\n          break;\n\n        default:\n        case rgbe_memory_error:\n          console.error('THREE.RGBELoader: Error: ' + (msg || ''));\n      }\n\n      return RGBE_RETURN_FAILURE;\n    },\n\n    /* offsets to red, green, and blue components in a data (float) pixel */\n    //RGBE_DATA_RED = 0,\n    //RGBE_DATA_GREEN = 1,\n    //RGBE_DATA_BLUE = 2,\n\n    /* number of floats per pixel, use 4 since stored in rgba image format */\n    //RGBE_DATA_SIZE = 4,\n\n    /* flags indicating which fields in an rgbe_header_info are valid */\n    RGBE_VALID_PROGRAMTYPE = 1,\n          RGBE_VALID_FORMAT = 2,\n          RGBE_VALID_DIMENSIONS = 4,\n          NEWLINE = '\\n',\n          fgets = function (buffer, lineLimit, consume) {\n      const chunkSize = 128;\n      lineLimit = !lineLimit ? 1024 : lineLimit;\n      let p = buffer.pos,\n          i = -1,\n          len = 0,\n          s = '',\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n\n      while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n        s += chunk;\n        len += chunk.length;\n        p += chunkSize;\n        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n      }\n\n      if (-1 < i) {\n        /*for (i=l-1; i>=0; i--) {\n        byteCode = m.charCodeAt(i);\n        if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n        else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n        if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n        }*/\n        if (false !== consume) buffer.pos += len + i + 1;\n        return s + chunk.slice(0, i);\n      }\n\n      return false;\n    },\n\n    /* minimal header reading.  modify if you want to parse more information */\n    RGBE_ReadHeader = function (buffer) {\n      // regexes to parse header info fields\n      const magic_token_re = /^#\\?(\\S+)/,\n            gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n            dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n            // RGBE format header struct\n      header = {\n        valid: 0\n        /* indicate which fields are valid */\n        ,\n        string: ''\n        /* the actual header string */\n        ,\n        comments: ''\n        /* comments found in header */\n        ,\n        programtype: 'RGBE'\n        /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n        ,\n        format: ''\n        /* RGBE format, default 32-bit_rle_rgbe */\n        ,\n        gamma: 1.0\n        /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n        ,\n        exposure: 1.0\n        /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n        ,\n        width: 0,\n        height: 0\n        /* image dimensions, width/height */\n\n      };\n      let line, match;\n\n      if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n        return rgbe_error(rgbe_read_error, 'no header found');\n      }\n      /* if you want to require the magic token then uncomment the next line */\n\n\n      if (!(match = line.match(magic_token_re))) {\n        return rgbe_error(rgbe_format_error, 'bad initial token');\n      }\n\n      header.valid |= RGBE_VALID_PROGRAMTYPE;\n      header.programtype = match[1];\n      header.string += line + '\\n';\n\n      while (true) {\n        line = fgets(buffer);\n        if (false === line) break;\n        header.string += line + '\\n';\n\n        if ('#' === line.charAt(0)) {\n          header.comments += line + '\\n';\n          continue; // comment line\n        }\n\n        if (match = line.match(gamma_re)) {\n          header.gamma = parseFloat(match[1]);\n        }\n\n        if (match = line.match(exposure_re)) {\n          header.exposure = parseFloat(match[1]);\n        }\n\n        if (match = line.match(format_re)) {\n          header.valid |= RGBE_VALID_FORMAT;\n          header.format = match[1]; //'32-bit_rle_rgbe';\n        }\n\n        if (match = line.match(dimensions_re)) {\n          header.valid |= RGBE_VALID_DIMENSIONS;\n          header.height = parseInt(match[1], 10);\n          header.width = parseInt(match[2], 10);\n        }\n\n        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n      }\n\n      if (!(header.valid & RGBE_VALID_FORMAT)) {\n        return rgbe_error(rgbe_format_error, 'missing format specifier');\n      }\n\n      if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n        return rgbe_error(rgbe_format_error, 'missing image size specifier');\n      }\n\n      return header;\n    },\n          RGBE_ReadPixels_RLE = function (buffer, w, h) {\n      const scanline_width = w;\n\n      if ( // run length encoding is not allowed so read flat\n      scanline_width < 8 || scanline_width > 0x7fff || // this file is not run length encoded\n      2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n        // return the flat buffer\n        return new Uint8Array(buffer);\n      }\n\n      if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n        return rgbe_error(rgbe_format_error, 'wrong scanline width');\n      }\n\n      const data_rgba = new Uint8Array(4 * w * h);\n\n      if (!data_rgba.length) {\n        return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n      }\n\n      let offset = 0,\n          pos = 0;\n      const ptr_end = 4 * scanline_width;\n      const rgbeStart = new Uint8Array(4);\n      const scanline_buffer = new Uint8Array(ptr_end);\n      let num_scanlines = h; // read in each successive scanline\n\n      while (num_scanlines > 0 && pos < buffer.byteLength) {\n        if (pos + 4 > buffer.byteLength) {\n          return rgbe_error(rgbe_read_error);\n        }\n\n        rgbeStart[0] = buffer[pos++];\n        rgbeStart[1] = buffer[pos++];\n        rgbeStart[2] = buffer[pos++];\n        rgbeStart[3] = buffer[pos++];\n\n        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n          return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n        } // read each of the four channels for the scanline into the buffer\n        // first red, then green, then blue, then exponent\n\n\n        let ptr = 0,\n            count;\n\n        while (ptr < ptr_end && pos < buffer.byteLength) {\n          count = buffer[pos++];\n          const isEncodedRun = count > 128;\n          if (isEncodedRun) count -= 128;\n\n          if (0 === count || ptr + count > ptr_end) {\n            return rgbe_error(rgbe_format_error, 'bad scanline data');\n          }\n\n          if (isEncodedRun) {\n            // a (encoded) run of the same value\n            const byteValue = buffer[pos++];\n\n            for (let i = 0; i < count; i++) {\n              scanline_buffer[ptr++] = byteValue;\n            } //ptr += count;\n\n          } else {\n            // a literal-run\n            scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n            ptr += count;\n            pos += count;\n          }\n        } // now convert data from buffer into rgba\n        // first red, then green, then blue, then exponent (alpha)\n\n\n        const l = scanline_width; //scanline_buffer.byteLength;\n\n        for (let i = 0; i < l; i++) {\n          let off = 0;\n          data_rgba[offset] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 1] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 2] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 3] = scanline_buffer[i + off];\n          offset += 4;\n        }\n\n        num_scanlines--;\n      }\n\n      return data_rgba;\n    };\n\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0; // clamping to 65504, the maximum representable value in float16\n\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      const w = rgbe_header_info.width,\n            h = rgbe_header_info.height,\n            image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        let data, type;\n        let numElements;\n\n        switch (this.type) {\n          case FloatType:\n            numElements = image_rgba_data.length / 4;\n            const floatArray = new Float32Array(numElements * 4);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n            }\n\n            data = floatArray;\n            type = FloatType;\n            break;\n\n          case HalfFloatType:\n            numElements = image_rgba_data.length / 4;\n            const halfArray = new Uint16Array(numElements * 4);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n            }\n\n            data = halfArray;\n            type = HalfFloatType;\n            break;\n\n          default:\n            console.error('THREE.RGBELoader: unsupported type: ', this.type);\n            break;\n        }\n\n        return {\n          width: w,\n          height: h,\n          data: data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          type: type\n        };\n      }\n    }\n\n    return null;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n\n      if (onLoad) onLoad(texture, texData);\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n\n}\n\nexport { RGBELoader };\n"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,aAAa,EAAEC,SAAS,EAAEC,SAAS,EAAEC,cAAc,EAAEC,YAAY,QAAQ,OAAO;;AAE5G;;AAEA,MAAMC,UAAU,SAASN,iBAAiB,CAAC;EACzCO,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACC,IAAI,GAAGR,aAAa;EAC3B,CAAC,CAAC;;EAGFS,KAAKA,CAACC,MAAM,EAAE;IACZ,MACA;MACA;MACAC,mBAAmB,GAAG,CAAC,CAAC;MAExB;MACAC,eAAe,GAAG,CAAC;MACbC,gBAAgB,GAAG,CAAC;MACpBC,iBAAiB,GAAG,CAAC;MACrBC,iBAAiB,GAAG,CAAC;MACrBC,UAAU,GAAG,SAAAA,CAAUC,eAAe,EAAEC,GAAG,EAAE;QACjD,QAAQD,eAAe;UACrB,KAAKL,eAAe;YAClBO,OAAO,CAACC,KAAK,CAAC,+BAA+B,IAAIF,GAAG,IAAI,EAAE,CAAC,CAAC;YAC5D;UAEF,KAAKL,gBAAgB;YACnBM,OAAO,CAACC,KAAK,CAAC,gCAAgC,IAAIF,GAAG,IAAI,EAAE,CAAC,CAAC;YAC7D;UAEF,KAAKJ,iBAAiB;YACpBK,OAAO,CAACC,KAAK,CAAC,oCAAoC,IAAIF,GAAG,IAAI,EAAE,CAAC,CAAC;YACjE;UAEF;UACA,KAAKH,iBAAiB;YACpBI,OAAO,CAACC,KAAK,CAAC,2BAA2B,IAAIF,GAAG,IAAI,EAAE,CAAC,CAAC;QAAC;QAG7D,OAAOP,mBAAmB;MAC5B,CAAC;MAED;MACA;MACA;MACA;;MAEA;MACA;;MAEA;MACAU,sBAAsB,GAAG,CAAC;MACpBC,iBAAiB,GAAG,CAAC;MACrBC,qBAAqB,GAAG,CAAC;MACzBC,OAAO,GAAG,IAAI;MACdC,KAAK,GAAG,SAAAA,CAAUf,MAAM,EAAEgB,SAAS,EAAEC,OAAO,EAAE;QAClD,MAAMC,SAAS,GAAG,GAAG;QACrBF,SAAS,GAAG,CAACA,SAAS,GAAG,IAAI,GAAGA,SAAS;QACzC,IAAIG,CAAC,GAAGnB,MAAM,CAACoB,GAAG;UACdC,CAAC,GAAG,CAAC,CAAC;UACNC,GAAG,GAAG,CAAC;UACPC,CAAC,GAAG,EAAE;UACNC,KAAK,GAAGC,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAE,IAAIC,WAAW,CAAC5B,MAAM,CAAC6B,QAAQ,CAACV,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC;QAE/F,OAAO,CAAC,IAAIG,CAAC,GAAGG,KAAK,CAACM,OAAO,CAAChB,OAAO,CAAC,CAAC,IAAIQ,GAAG,GAAGN,SAAS,IAAIG,CAAC,GAAGnB,MAAM,CAAC+B,UAAU,EAAE;UACnFR,CAAC,IAAIC,KAAK;UACVF,GAAG,IAAIE,KAAK,CAACQ,MAAM;UACnBb,CAAC,IAAID,SAAS;UACdM,KAAK,IAAIC,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAE,IAAIC,WAAW,CAAC5B,MAAM,CAAC6B,QAAQ,CAACV,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC;QAC9F;QAEA,IAAI,CAAC,CAAC,GAAGG,CAAC,EAAE;UACV;AACR;AACA;AACA;AACA;AACA;UACQ,IAAI,KAAK,KAAKJ,OAAO,EAAEjB,MAAM,CAACoB,GAAG,IAAIE,GAAG,GAAGD,CAAC,GAAG,CAAC;UAChD,OAAOE,CAAC,GAAGC,KAAK,CAACS,KAAK,CAAC,CAAC,EAAEZ,CAAC,CAAC;QAC9B;QAEA,OAAO,KAAK;MACd,CAAC;MAED;MACAa,eAAe,GAAG,SAAAA,CAAUlC,MAAM,EAAE;QAClC;QACA,MAAMmC,cAAc,GAAG,WAAW;UAC5BC,QAAQ,GAAG,mCAAmC;UAC9CC,WAAW,GAAG,sCAAsC;UACpDC,SAAS,GAAG,sBAAsB;UAClCC,aAAa,GAAG,mCAAmC;UACnD;UACNC,MAAM,GAAG;YACPC,KAAK,EAAE;YACP;;YAEAC,MAAM,EAAE;YACR;;YAEAC,QAAQ,EAAE;YACV;;YAEAC,WAAW,EAAE;YACb;;YAEAC,MAAM,EAAE;YACR;;YAEAC,KAAK,EAAE;YACP;;YAEAC,QAAQ,EAAE;YACV;;YAEAC,KAAK,EAAE,CAAC;YACRC,MAAM,EAAE;YACR;UAEF,CAAC;;QACD,IAAIC,IAAI,EAAEC,KAAK;QAEf,IAAInD,MAAM,CAACoB,GAAG,IAAIpB,MAAM,CAAC+B,UAAU,IAAI,EAAEmB,IAAI,GAAGnC,KAAK,CAACf,MAAM,CAAC,CAAC,EAAE;UAC9D,OAAOM,UAAU,CAACJ,eAAe,EAAE,iBAAiB,CAAC;QACvD;QACA;;QAGA,IAAI,EAAEiD,KAAK,GAAGD,IAAI,CAACC,KAAK,CAAChB,cAAc,CAAC,CAAC,EAAE;UACzC,OAAO7B,UAAU,CAACF,iBAAiB,EAAE,mBAAmB,CAAC;QAC3D;QAEAoC,MAAM,CAACC,KAAK,IAAI9B,sBAAsB;QACtC6B,MAAM,CAACI,WAAW,GAAGO,KAAK,CAAC,CAAC,CAAC;QAC7BX,MAAM,CAACE,MAAM,IAAIQ,IAAI,GAAG,IAAI;QAE5B,OAAO,IAAI,EAAE;UACXA,IAAI,GAAGnC,KAAK,CAACf,MAAM,CAAC;UACpB,IAAI,KAAK,KAAKkD,IAAI,EAAE;UACpBV,MAAM,CAACE,MAAM,IAAIQ,IAAI,GAAG,IAAI;UAE5B,IAAI,GAAG,KAAKA,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,EAAE;YAC1BZ,MAAM,CAACG,QAAQ,IAAIO,IAAI,GAAG,IAAI;YAC9B,SAAS,CAAC;UACZ;;UAEA,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACf,QAAQ,CAAC,EAAE;YAChCI,MAAM,CAACM,KAAK,GAAGO,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;UACrC;UAEA,IAAIA,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACd,WAAW,CAAC,EAAE;YACnCG,MAAM,CAACO,QAAQ,GAAGM,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;UACxC;UAEA,IAAIA,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACb,SAAS,CAAC,EAAE;YACjCE,MAAM,CAACC,KAAK,IAAI7B,iBAAiB;YACjC4B,MAAM,CAACK,MAAM,GAAGM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;UAC5B;;UAEA,IAAIA,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACZ,aAAa,CAAC,EAAE;YACrCC,MAAM,CAACC,KAAK,IAAI5B,qBAAqB;YACrC2B,MAAM,CAACS,MAAM,GAAGK,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YACtCX,MAAM,CAACQ,KAAK,GAAGM,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;UACvC;UAEA,IAAIX,MAAM,CAACC,KAAK,GAAG7B,iBAAiB,IAAI4B,MAAM,CAACC,KAAK,GAAG5B,qBAAqB,EAAE;QAChF;QAEA,IAAI,EAAE2B,MAAM,CAACC,KAAK,GAAG7B,iBAAiB,CAAC,EAAE;UACvC,OAAON,UAAU,CAACF,iBAAiB,EAAE,0BAA0B,CAAC;QAClE;QAEA,IAAI,EAAEoC,MAAM,CAACC,KAAK,GAAG5B,qBAAqB,CAAC,EAAE;UAC3C,OAAOP,UAAU,CAACF,iBAAiB,EAAE,8BAA8B,CAAC;QACtE;QAEA,OAAOoC,MAAM;MACf,CAAC;MACKe,mBAAmB,GAAG,SAAAA,CAAUvD,MAAM,EAAEwD,CAAC,EAAEC,CAAC,EAAE;QAClD,MAAMC,cAAc,GAAGF,CAAC;QAExB;QAAK;QACLE,cAAc,GAAG,CAAC,IAAIA,cAAc,GAAG,MAAM;QAAI;QACjD,CAAC,KAAK1D,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAKA,MAAM,CAAC,CAAC,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE;UACtD;UACA,OAAO,IAAI2D,UAAU,CAAC3D,MAAM,CAAC;QAC/B;QAEA,IAAI0D,cAAc,MAAM1D,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;UACnD,OAAOM,UAAU,CAACF,iBAAiB,EAAE,sBAAsB,CAAC;QAC9D;QAEA,MAAMwD,SAAS,GAAG,IAAID,UAAU,CAAC,CAAC,GAAGH,CAAC,GAAGC,CAAC,CAAC;QAE3C,IAAI,CAACG,SAAS,CAAC5B,MAAM,EAAE;UACrB,OAAO1B,UAAU,CAACD,iBAAiB,EAAE,iCAAiC,CAAC;QACzE;QAEA,IAAIwD,MAAM,GAAG,CAAC;UACVzC,GAAG,GAAG,CAAC;QACX,MAAM0C,OAAO,GAAG,CAAC,GAAGJ,cAAc;QAClC,MAAMK,SAAS,GAAG,IAAIJ,UAAU,CAAC,CAAC,CAAC;QACnC,MAAMK,eAAe,GAAG,IAAIL,UAAU,CAACG,OAAO,CAAC;QAC/C,IAAIG,aAAa,GAAGR,CAAC,CAAC,CAAC;;QAEvB,OAAOQ,aAAa,GAAG,CAAC,IAAI7C,GAAG,GAAGpB,MAAM,CAAC+B,UAAU,EAAE;UACnD,IAAIX,GAAG,GAAG,CAAC,GAAGpB,MAAM,CAAC+B,UAAU,EAAE;YAC/B,OAAOzB,UAAU,CAACJ,eAAe,CAAC;UACpC;UAEA6D,SAAS,CAAC,CAAC,CAAC,GAAG/D,MAAM,CAACoB,GAAG,EAAE,CAAC;UAC5B2C,SAAS,CAAC,CAAC,CAAC,GAAG/D,MAAM,CAACoB,GAAG,EAAE,CAAC;UAC5B2C,SAAS,CAAC,CAAC,CAAC,GAAG/D,MAAM,CAACoB,GAAG,EAAE,CAAC;UAC5B2C,SAAS,CAAC,CAAC,CAAC,GAAG/D,MAAM,CAACoB,GAAG,EAAE,CAAC;UAE5B,IAAI,CAAC,IAAI2C,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAIA,SAAS,CAAC,CAAC,CAAC,IAAI,CAACA,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,KAAKL,cAAc,EAAE;YAClG,OAAOpD,UAAU,CAACF,iBAAiB,EAAE,0BAA0B,CAAC;UAClE,CAAC,CAAC;UACF;;UAGA,IAAI8D,GAAG,GAAG,CAAC;YACPC,KAAK;UAET,OAAOD,GAAG,GAAGJ,OAAO,IAAI1C,GAAG,GAAGpB,MAAM,CAAC+B,UAAU,EAAE;YAC/CoC,KAAK,GAAGnE,MAAM,CAACoB,GAAG,EAAE,CAAC;YACrB,MAAMgD,YAAY,GAAGD,KAAK,GAAG,GAAG;YAChC,IAAIC,YAAY,EAAED,KAAK,IAAI,GAAG;YAE9B,IAAI,CAAC,KAAKA,KAAK,IAAID,GAAG,GAAGC,KAAK,GAAGL,OAAO,EAAE;cACxC,OAAOxD,UAAU,CAACF,iBAAiB,EAAE,mBAAmB,CAAC;YAC3D;YAEA,IAAIgE,YAAY,EAAE;cAChB;cACA,MAAMC,SAAS,GAAGrE,MAAM,CAACoB,GAAG,EAAE,CAAC;cAE/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8C,KAAK,EAAE9C,CAAC,EAAE,EAAE;gBAC9B2C,eAAe,CAACE,GAAG,EAAE,CAAC,GAAGG,SAAS;cACpC,CAAC,CAAC;YAEJ,CAAC,MAAM;cACL;cACAL,eAAe,CAACM,GAAG,CAACtE,MAAM,CAAC6B,QAAQ,CAACT,GAAG,EAAEA,GAAG,GAAG+C,KAAK,CAAC,EAAED,GAAG,CAAC;cAC3DA,GAAG,IAAIC,KAAK;cACZ/C,GAAG,IAAI+C,KAAK;YACd;UACF,CAAC,CAAC;UACF;;UAGA,MAAMI,CAAC,GAAGb,cAAc,CAAC,CAAC;;UAE1B,KAAK,IAAIrC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkD,CAAC,EAAElD,CAAC,EAAE,EAAE;YAC1B,IAAImD,GAAG,GAAG,CAAC;YACXZ,SAAS,CAACC,MAAM,CAAC,GAAGG,eAAe,CAAC3C,CAAC,GAAGmD,GAAG,CAAC;YAC5CA,GAAG,IAAId,cAAc,CAAC,CAAC;;YAEvBE,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC,GAAGG,eAAe,CAAC3C,CAAC,GAAGmD,GAAG,CAAC;YAChDA,GAAG,IAAId,cAAc,CAAC,CAAC;;YAEvBE,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC,GAAGG,eAAe,CAAC3C,CAAC,GAAGmD,GAAG,CAAC;YAChDA,GAAG,IAAId,cAAc,CAAC,CAAC;;YAEvBE,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC,GAAGG,eAAe,CAAC3C,CAAC,GAAGmD,GAAG,CAAC;YAChDX,MAAM,IAAI,CAAC;UACb;UAEAI,aAAa,EAAE;QACjB;QAEA,OAAOL,SAAS;MAClB,CAAC;IAED,MAAMa,kBAAkB,GAAG,SAAAA,CAAUC,WAAW,EAAEC,YAAY,EAAEC,SAAS,EAAEC,UAAU,EAAE;MACrF,MAAMC,CAAC,GAAGJ,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC;MACvC,MAAMI,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEH,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK;MAC9CF,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAGH,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC,GAAGI,KAAK;MACjEH,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAGH,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC,GAAGI,KAAK;MACjEH,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAGH,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC,GAAGI,KAAK;MACjEH,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC;IAC/B,CAAC;IAED,MAAMK,iBAAiB,GAAG,SAAAA,CAAUR,WAAW,EAAEC,YAAY,EAAEC,SAAS,EAAEC,UAAU,EAAE;MACpF,MAAMC,CAAC,GAAGJ,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC;MACvC,MAAMI,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEH,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;;MAEhDF,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAGrF,SAAS,CAAC2F,WAAW,CAACH,IAAI,CAACI,GAAG,CAACV,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC,GAAGI,KAAK,EAAE,KAAK,CAAC,CAAC;MACzGH,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAGrF,SAAS,CAAC2F,WAAW,CAACH,IAAI,CAACI,GAAG,CAACV,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC,GAAGI,KAAK,EAAE,KAAK,CAAC,CAAC;MACzGH,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAGrF,SAAS,CAAC2F,WAAW,CAACH,IAAI,CAACI,GAAG,CAACV,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC,GAAGI,KAAK,EAAE,KAAK,CAAC,CAAC;MACzGH,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAGrF,SAAS,CAAC2F,WAAW,CAAC,CAAC,CAAC;IACtD,CAAC;IAED,MAAME,SAAS,GAAG,IAAI1B,UAAU,CAAC3D,MAAM,CAAC;IACxCqF,SAAS,CAACjE,GAAG,GAAG,CAAC;IACjB,MAAMkE,gBAAgB,GAAGpD,eAAe,CAACmD,SAAS,CAAC;IAEnD,IAAIpF,mBAAmB,KAAKqF,gBAAgB,EAAE;MAC5C,MAAM9B,CAAC,GAAG8B,gBAAgB,CAACtC,KAAK;QAC1BS,CAAC,GAAG6B,gBAAgB,CAACrC,MAAM;QAC3BsC,eAAe,GAAGhC,mBAAmB,CAAC8B,SAAS,CAACxD,QAAQ,CAACwD,SAAS,CAACjE,GAAG,CAAC,EAAEoC,CAAC,EAAEC,CAAC,CAAC;MAEpF,IAAIxD,mBAAmB,KAAKsF,eAAe,EAAE;QAC3C,IAAIC,IAAI,EAAE1F,IAAI;QACd,IAAI2F,WAAW;QAEf,QAAQ,IAAI,CAAC3F,IAAI;UACf,KAAKP,SAAS;YACZkG,WAAW,GAAGF,eAAe,CAACvD,MAAM,GAAG,CAAC;YACxC,MAAM0D,UAAU,GAAG,IAAIC,YAAY,CAACF,WAAW,GAAG,CAAC,CAAC;YAEpD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,EAAEG,CAAC,EAAE,EAAE;cACpCnB,kBAAkB,CAACc,eAAe,EAAEK,CAAC,GAAG,CAAC,EAAEF,UAAU,EAAEE,CAAC,GAAG,CAAC,CAAC;YAC/D;YAEAJ,IAAI,GAAGE,UAAU;YACjB5F,IAAI,GAAGP,SAAS;YAChB;UAEF,KAAKD,aAAa;YAChBmG,WAAW,GAAGF,eAAe,CAACvD,MAAM,GAAG,CAAC;YACxC,MAAM6D,SAAS,GAAG,IAAIjE,WAAW,CAAC6D,WAAW,GAAG,CAAC,CAAC;YAElD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,EAAEG,CAAC,EAAE,EAAE;cACpCV,iBAAiB,CAACK,eAAe,EAAEK,CAAC,GAAG,CAAC,EAAEC,SAAS,EAAED,CAAC,GAAG,CAAC,CAAC;YAC7D;YAEAJ,IAAI,GAAGK,SAAS;YAChB/F,IAAI,GAAGR,aAAa;YACpB;UAEF;YACEmB,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAE,IAAI,CAACZ,IAAI,CAAC;YAChE;QAAM;QAGV,OAAO;UACLkD,KAAK,EAAEQ,CAAC;UACRP,MAAM,EAAEQ,CAAC;UACT+B,IAAI,EAAEA,IAAI;UACVhD,MAAM,EAAE8C,gBAAgB,CAAC5C,MAAM;UAC/BI,KAAK,EAAEwC,gBAAgB,CAACxC,KAAK;UAC7BC,QAAQ,EAAEuC,gBAAgB,CAACvC,QAAQ;UACnCjD,IAAI,EAAEA;QACR,CAAC;MACH;IACF;IAEA,OAAO,IAAI;EACb;EAEAgG,WAAWA,CAACC,KAAK,EAAE;IACjB,IAAI,CAACjG,IAAI,GAAGiG,KAAK;IACjB,OAAO,IAAI;EACb;EAEAC,IAAIA,CAACC,GAAG,EAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAE;IACrC,SAASC,cAAcA,CAACC,OAAO,EAAEC,OAAO,EAAE;MACxC,QAAQD,OAAO,CAACxG,IAAI;QAClB,KAAKP,SAAS;QACd,KAAKD,aAAa;UAChBgH,OAAO,CAACE,QAAQ,GAAG/G,cAAc;UACjC6G,OAAO,CAACG,SAAS,GAAG/G,YAAY;UAChC4G,OAAO,CAACI,SAAS,GAAGhH,YAAY;UAChC4G,OAAO,CAACK,eAAe,GAAG,KAAK;UAC/BL,OAAO,CAACM,KAAK,GAAG,IAAI;UACpB;MAAM;MAGV,IAAIV,MAAM,EAAEA,MAAM,CAACI,OAAO,EAAEC,OAAO,CAAC;IACtC;IAEA,OAAO,KAAK,CAACP,IAAI,CAACC,GAAG,EAAEI,cAAc,EAAEF,UAAU,EAAEC,OAAO,CAAC;EAC7D;AAEF;AAEA,SAASzG,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}