{"ast":null,"code":"import { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nclass SSAOPass extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== undefined ? width : 512;\n    this.height = height !== undefined ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 0.005;\n    this.maxDistance = 0.1;\n    this._visibilityCache = new Map(); //\n\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations(); // beauty render target\n\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height); // normal render target with depth buffer\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture\n    }); // ssao render target\n\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n    if (SSAOShader === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n    }\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n    this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending; // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat; // render beauty\n\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  }\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n  generateRandomKernelRotations() {\n    const width = 4,\n      height = 4;\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  }\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n}\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\nexport { SSAOPass };","map":{"version":3,"names":["DepthTexture","DepthStencilFormat","UnsignedInt248Type","WebGLRenderTarget","NearestFilter","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Color","LuminanceFormat","CustomBlending","Vector3","MathUtils","DataTexture","RedFormat","FloatType","RepeatWrapping","Pass","FullScreenQuad","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","SSAOPass","constructor","scene","camera","width","height","undefined","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","format","type","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","value","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","dispose","render","renderer","writeBuffer","capabilities","isWebGL2","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","noise3d","wrapS","wrapT","needsUpdate","cache","traverse","object","visible","isPoints","isLine","get"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/postprocessing/SSAOPass.js"],"sourcesContent":["import { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass SSAOPass extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== undefined ? width : 512;\n    this.height = height !== undefined ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 0.005;\n    this.maxDistance = 0.1;\n    this._visibilityCache = new Map(); //\n\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations(); // beauty render target\n\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height); // normal render target with depth buffer\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture\n    }); // ssao render target\n\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n    if (SSAOShader === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n    }\n\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n    this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending; // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n\n  dispose() {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  }\n\n  render(renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat; // render beauty\n\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  }\n\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n\n  generateRandomKernelRotations() {\n    const width = 4,\n          height = 4;\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  }\n\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n\n}\n\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\n\nexport { SSAOPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}