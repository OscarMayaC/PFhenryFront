import * as React from 'react';
import { DateIOFormats } from '@date-io/core/IUtils';
import { MuiPickersAdapter } from '../internals/models';
import { PickersInputLocaleText } from '../locales';
export interface MuiPickersAdapterContextValue<TDate> {
    defaultDates: {
        minDate: TDate;
        maxDate: TDate;
    };
    utils: MuiPickersAdapter<TDate>;
    localeText: PickersInputLocaleText<TDate> | undefined;
}
export type MuiPickersAdapterContextNullableValue<TDate> = {
    [K in keyof MuiPickersAdapterContextValue<TDate>]: MuiPickersAdapterContextValue<TDate>[K] | null;
};
export declare const MuiPickersAdapterContext: React.Context<MuiPickersAdapterContextNullableValue<any> | null>;
export interface LocalizationProviderProps<TDate> {
    children?: React.ReactNode;
    /**
     * Date library adapter class function.
     * @see See the localization provider {@link https://mui.com/x/react-date-pickers/getting-started/#code-setup code setup section} for more details.
     */
    dateAdapter?: new (...args: any) => MuiPickersAdapter<TDate>;
    /** Formats that are used for any child pickers */
    dateFormats?: Partial<DateIOFormats>;
    /**
     * Date library instance you are using, if it has some global overrides
     * ```jsx
     * dateLibInstance={momentTimeZone}
     * ```
     */
    dateLibInstance?: any;
    /** Locale for the date library you are using
     */
    adapterLocale?: string | object;
    /**
     * Locale for components texts
     */
    localeText?: PickersInputLocaleText<TDate>;
}
/**
 * @ignore - do not document.
 */
export declare function LocalizationProvider<TDate>(inProps: LocalizationProviderProps<TDate>): JSX.Element;
export declare namespace LocalizationProvider {
    var propTypes: any;
}
