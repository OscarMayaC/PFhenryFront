{"ast":null,"code":"function LWO3Parser(IFFParser) {\n  this.IFF = IFFParser;\n}\nLWO3Parser.prototype = {\n  constructor: LWO3Parser,\n  parseBlock: function () {\n    this.IFF.debugger.offset = this.IFF.reader.offset;\n    this.IFF.debugger.closeForms();\n    var blockID = this.IFF.reader.getIDTag();\n    var length = this.IFF.reader.getUint32(); // size of data in bytes\n\n    this.IFF.debugger.dataOffset = this.IFF.reader.offset;\n    this.IFF.debugger.length = length; // Data types may be found in either LWO2 OR LWO3 spec\n\n    switch (blockID) {\n      case 'FORM':\n        // form blocks may consist of sub -chunks or sub-forms\n        this.IFF.parseForm(length);\n        break;\n      // SKIPPED CHUNKS\n      // MISC skipped\n\n      case 'ICON': // Thumbnail Icon Image\n\n      case 'VMPA': // Vertex Map Parameter\n\n      case 'BBOX': // bounding box\n      // case 'VMMD':\n      // case 'VTYP':\n      // normal maps can be specified, normally on models imported from other applications. Currently ignored\n\n      case 'NORM': // ENVL FORM skipped\n\n      case 'PRE ':\n      case 'POST':\n      case 'KEY ':\n      case 'SPAN': // CLIP FORM skipped\n\n      case 'TIME':\n      case 'CLRS':\n      case 'CLRA':\n      case 'FILT':\n      case 'DITH':\n      case 'CONT':\n      case 'BRIT':\n      case 'SATR':\n      case 'HUE ':\n      case 'GAMM':\n      case 'NEGA':\n      case 'IFLT':\n      case 'PFLT': // Image Map Layer skipped\n\n      case 'PROJ':\n      case 'AXIS':\n      case 'AAST':\n      case 'PIXB':\n      case 'STCK': // Procedural Textures skipped\n\n      case 'VALU': // Gradient Textures skipped\n\n      case 'PNAM':\n      case 'INAM':\n      case 'GRST':\n      case 'GREN':\n      case 'GRPT':\n      case 'FKEY':\n      case 'IKEY': // Texture Mapping Form skipped\n\n      case 'CSYS': // Surface CHUNKs skipped\n\n      case 'OPAQ': // top level 'opacity' checkbox\n\n      case 'CMAP': // clip map\n      // Surface node CHUNKS skipped\n      // These mainly specify the node editor setup in LW\n\n      case 'NLOC':\n      case 'NZOM':\n      case 'NVER':\n      case 'NSRV':\n      case 'NCRD':\n      case 'NMOD':\n      case 'NSEL':\n      case 'NPRW':\n      case 'NPLA':\n      case 'VERS':\n      case 'ENUM':\n      case 'TAG ': // Car Material CHUNKS\n\n      case 'CGMD':\n      case 'CGTY':\n      case 'CGST':\n      case 'CGEN':\n      case 'CGTS':\n      case 'CGTE':\n      case 'OSMP':\n      case 'OMDE':\n      case 'OUTR':\n      case 'FLAG':\n      case 'TRNL':\n      case 'SHRP':\n      case 'RFOP':\n      case 'RSAN':\n      case 'TROP':\n      case 'RBLR':\n      case 'TBLR':\n      case 'CLRH':\n      case 'CLRF':\n      case 'ADTR':\n      case 'GLOW':\n      case 'LINE':\n      case 'ALPH':\n      case 'VCOL':\n      case 'ENAB':\n        this.IFF.debugger.skipped = true;\n        this.IFF.reader.skip(length);\n        break;\n      // Texture node chunks (not in spec)\n\n      case 'IPIX': // usePixelBlending\n\n      case 'IMIP': // useMipMaps\n\n      case 'IMOD': // imageBlendingMode\n\n      case 'AMOD': // unknown\n\n      case 'IINV': // imageInvertAlpha\n\n      case 'INCR': // imageInvertColor\n\n      case 'IAXS': // imageAxis ( for non-UV maps)\n\n      case 'IFOT': // imageFallofType\n\n      case 'ITIM': // timing for animated textures\n\n      case 'IWRL':\n      case 'IUTI':\n      case 'IINX':\n      case 'IINY':\n      case 'IINZ':\n      case 'IREF':\n        // possibly a VX for reused texture nodes\n        if (length === 4) this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();else this.IFF.reader.skip(length);\n        break;\n      case 'OTAG':\n        this.IFF.parseObjectTag();\n        break;\n      case 'LAYR':\n        this.IFF.parseLayer(length);\n        break;\n      case 'PNTS':\n        this.IFF.parsePoints(length);\n        break;\n      case 'VMAP':\n        this.IFF.parseVertexMapping(length);\n        break;\n      case 'POLS':\n        this.IFF.parsePolygonList(length);\n        break;\n      case 'TAGS':\n        this.IFF.parseTagStrings(length);\n        break;\n      case 'PTAG':\n        this.IFF.parsePolygonTagMapping(length);\n        break;\n      case 'VMAD':\n        this.IFF.parseVertexMapping(length, true);\n        break;\n      // Misc CHUNKS\n\n      case 'DESC':\n        // Description Line\n        this.IFF.currentForm.description = this.IFF.reader.getString();\n        break;\n      case 'TEXT':\n      case 'CMNT':\n      case 'NCOM':\n        this.IFF.currentForm.comment = this.IFF.reader.getString();\n        break;\n      // Envelope Form\n\n      case 'NAME':\n        this.IFF.currentForm.channelName = this.IFF.reader.getString();\n        break;\n      // Image Map Layer\n\n      case 'WRAP':\n        this.IFF.currentForm.wrap = {\n          w: this.IFF.reader.getUint16(),\n          h: this.IFF.reader.getUint16()\n        };\n        break;\n      case 'IMAG':\n        var index = this.IFF.reader.getVariableLengthIndex();\n        this.IFF.currentForm.imageIndex = index;\n        break;\n      // Texture Mapping Form\n\n      case 'OREF':\n        this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n        break;\n      case 'ROID':\n        this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n        break;\n      // Surface Blocks\n\n      case 'SSHN':\n        this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n        break;\n      case 'AOVN':\n        this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n        break;\n      // Nodal Blocks\n\n      case 'NSTA':\n        this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n        break;\n      case 'NRNM':\n        this.IFF.currentForm.realName = this.IFF.reader.getString();\n        break;\n      case 'NNME':\n        this.IFF.currentForm.refName = this.IFF.reader.getString();\n        this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\n        break;\n      // Nodal Blocks : connections\n\n      case 'INME':\n        if (!this.IFF.currentForm.nodeName) this.IFF.currentForm.nodeName = [];\n        this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\n        break;\n      case 'IINN':\n        if (!this.IFF.currentForm.inputNodeName) this.IFF.currentForm.inputNodeName = [];\n        this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\n        break;\n      case 'IINM':\n        if (!this.IFF.currentForm.inputName) this.IFF.currentForm.inputName = [];\n        this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\n        break;\n      case 'IONM':\n        if (!this.IFF.currentForm.inputOutputName) this.IFF.currentForm.inputOutputName = [];\n        this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\n        break;\n      case 'FNAM':\n        this.IFF.currentForm.fileName = this.IFF.reader.getString();\n        break;\n      case 'CHAN':\n        // NOTE: ENVL Forms may also have CHAN chunk, however ENVL is currently ignored\n        if (length === 4) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();else this.IFF.reader.skip(length);\n        break;\n      // LWO2 Spec chunks: these are needed since the SURF FORMs are often in LWO2 format\n\n      case 'SMAN':\n        var maxSmoothingAngle = this.IFF.reader.getFloat32();\n        this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\n        break;\n      // LWO2: Basic Surface Parameters\n\n      case 'COLR':\n        this.IFF.currentSurface.attributes.Color = {\n          value: this.IFF.reader.getFloat32Array(3)\n        };\n        this.IFF.reader.skip(2); // VX: envelope\n\n        break;\n      case 'LUMI':\n        this.IFF.currentSurface.attributes.Luminosity = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case 'SPEC':\n        this.IFF.currentSurface.attributes.Specular = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case 'DIFF':\n        this.IFF.currentSurface.attributes.Diffuse = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case 'REFL':\n        this.IFF.currentSurface.attributes.Reflection = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case 'GLOS':\n        this.IFF.currentSurface.attributes.Glossiness = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case 'TRAN':\n        this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n      case 'BUMP':\n        this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n      case 'SIDE':\n        this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n        break;\n      case 'RIMG':\n        this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n      case 'RIND':\n        this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n      case 'TIMG':\n        this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n      case 'IMAP':\n        this.IFF.currentSurface.attributes.imageMapIndex = this.IFF.reader.getUint32();\n        break;\n      case 'IUVI':\n        // uv channel name\n        this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\n        break;\n      case 'IUTL':\n        // widthWrappingMode: 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n        this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n        break;\n      case 'IVTL':\n        // heightWrappingMode\n        this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n        break;\n      default:\n        this.IFF.parseUnknownCHUNK(blockID, length);\n    }\n    if (blockID != 'FORM') {\n      this.IFF.debugger.node = 1;\n      this.IFF.debugger.nodeID = blockID;\n      this.IFF.debugger.log();\n    }\n    if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n      this.IFF.currentForm = this.IFF.parentForm;\n    }\n  }\n};\nexport { LWO3Parser };","map":{"version":3,"names":["LWO3Parser","IFFParser","IFF","prototype","constructor","parseBlock","debugger","offset","reader","closeForms","blockID","getIDTag","length","getUint32","dataOffset","parseForm","skipped","skip","currentNode","getInt32","parseObjectTag","parseLayer","parsePoints","parseVertexMapping","parsePolygonList","parseTagStrings","parsePolygonTagMapping","currentForm","description","getString","comment","channelName","wrap","w","getUint16","h","index","getVariableLengthIndex","imageIndex","referenceObject","referenceObjectID","currentSurface","surfaceShaderName","surfaceCustomAOVName","disabled","realName","refName","nodes","nodeName","push","inputNodeName","inputName","inputOutputName","fileName","textureChannel","maxSmoothingAngle","getFloat32","attributes","smooth","Color","value","getFloat32Array","Luminosity","Specular","Diffuse","Reflection","Glossiness","opacity","bumpStrength","side","reflectionMap","refractiveIndex","refractionMap","imageMapIndex","UVChannel","widthWrappingMode","heightWrappingMode","parseUnknownCHUNK","node","nodeID","log","currentFormEnd","parentForm"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/loaders/lwo/LWO3Parser.js"],"sourcesContent":["function LWO3Parser(IFFParser) {\n  this.IFF = IFFParser;\n}\n\nLWO3Parser.prototype = {\n  constructor: LWO3Parser,\n  parseBlock: function () {\n    this.IFF.debugger.offset = this.IFF.reader.offset;\n    this.IFF.debugger.closeForms();\n    var blockID = this.IFF.reader.getIDTag();\n    var length = this.IFF.reader.getUint32(); // size of data in bytes\n\n    this.IFF.debugger.dataOffset = this.IFF.reader.offset;\n    this.IFF.debugger.length = length; // Data types may be found in either LWO2 OR LWO3 spec\n\n    switch (blockID) {\n      case 'FORM':\n        // form blocks may consist of sub -chunks or sub-forms\n        this.IFF.parseForm(length);\n        break;\n      // SKIPPED CHUNKS\n      // MISC skipped\n\n      case 'ICON': // Thumbnail Icon Image\n\n      case 'VMPA': // Vertex Map Parameter\n\n      case 'BBOX': // bounding box\n      // case 'VMMD':\n      // case 'VTYP':\n      // normal maps can be specified, normally on models imported from other applications. Currently ignored\n\n      case 'NORM': // ENVL FORM skipped\n\n      case 'PRE ':\n      case 'POST':\n      case 'KEY ':\n      case 'SPAN': // CLIP FORM skipped\n\n      case 'TIME':\n      case 'CLRS':\n      case 'CLRA':\n      case 'FILT':\n      case 'DITH':\n      case 'CONT':\n      case 'BRIT':\n      case 'SATR':\n      case 'HUE ':\n      case 'GAMM':\n      case 'NEGA':\n      case 'IFLT':\n      case 'PFLT': // Image Map Layer skipped\n\n      case 'PROJ':\n      case 'AXIS':\n      case 'AAST':\n      case 'PIXB':\n      case 'STCK': // Procedural Textures skipped\n\n      case 'VALU': // Gradient Textures skipped\n\n      case 'PNAM':\n      case 'INAM':\n      case 'GRST':\n      case 'GREN':\n      case 'GRPT':\n      case 'FKEY':\n      case 'IKEY': // Texture Mapping Form skipped\n\n      case 'CSYS': // Surface CHUNKs skipped\n\n      case 'OPAQ': // top level 'opacity' checkbox\n\n      case 'CMAP': // clip map\n      // Surface node CHUNKS skipped\n      // These mainly specify the node editor setup in LW\n\n      case 'NLOC':\n      case 'NZOM':\n      case 'NVER':\n      case 'NSRV':\n      case 'NCRD':\n      case 'NMOD':\n      case 'NSEL':\n      case 'NPRW':\n      case 'NPLA':\n      case 'VERS':\n      case 'ENUM':\n      case 'TAG ': // Car Material CHUNKS\n\n      case 'CGMD':\n      case 'CGTY':\n      case 'CGST':\n      case 'CGEN':\n      case 'CGTS':\n      case 'CGTE':\n      case 'OSMP':\n      case 'OMDE':\n      case 'OUTR':\n      case 'FLAG':\n      case 'TRNL':\n      case 'SHRP':\n      case 'RFOP':\n      case 'RSAN':\n      case 'TROP':\n      case 'RBLR':\n      case 'TBLR':\n      case 'CLRH':\n      case 'CLRF':\n      case 'ADTR':\n      case 'GLOW':\n      case 'LINE':\n      case 'ALPH':\n      case 'VCOL':\n      case 'ENAB':\n        this.IFF.debugger.skipped = true;\n        this.IFF.reader.skip(length);\n        break;\n      // Texture node chunks (not in spec)\n\n      case 'IPIX': // usePixelBlending\n\n      case 'IMIP': // useMipMaps\n\n      case 'IMOD': // imageBlendingMode\n\n      case 'AMOD': // unknown\n\n      case 'IINV': // imageInvertAlpha\n\n      case 'INCR': // imageInvertColor\n\n      case 'IAXS': // imageAxis ( for non-UV maps)\n\n      case 'IFOT': // imageFallofType\n\n      case 'ITIM': // timing for animated textures\n\n      case 'IWRL':\n      case 'IUTI':\n      case 'IINX':\n      case 'IINY':\n      case 'IINZ':\n      case 'IREF':\n        // possibly a VX for reused texture nodes\n        if (length === 4) this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();else this.IFF.reader.skip(length);\n        break;\n\n      case 'OTAG':\n        this.IFF.parseObjectTag();\n        break;\n\n      case 'LAYR':\n        this.IFF.parseLayer(length);\n        break;\n\n      case 'PNTS':\n        this.IFF.parsePoints(length);\n        break;\n\n      case 'VMAP':\n        this.IFF.parseVertexMapping(length);\n        break;\n\n      case 'POLS':\n        this.IFF.parsePolygonList(length);\n        break;\n\n      case 'TAGS':\n        this.IFF.parseTagStrings(length);\n        break;\n\n      case 'PTAG':\n        this.IFF.parsePolygonTagMapping(length);\n        break;\n\n      case 'VMAD':\n        this.IFF.parseVertexMapping(length, true);\n        break;\n      // Misc CHUNKS\n\n      case 'DESC':\n        // Description Line\n        this.IFF.currentForm.description = this.IFF.reader.getString();\n        break;\n\n      case 'TEXT':\n      case 'CMNT':\n      case 'NCOM':\n        this.IFF.currentForm.comment = this.IFF.reader.getString();\n        break;\n      // Envelope Form\n\n      case 'NAME':\n        this.IFF.currentForm.channelName = this.IFF.reader.getString();\n        break;\n      // Image Map Layer\n\n      case 'WRAP':\n        this.IFF.currentForm.wrap = {\n          w: this.IFF.reader.getUint16(),\n          h: this.IFF.reader.getUint16()\n        };\n        break;\n\n      case 'IMAG':\n        var index = this.IFF.reader.getVariableLengthIndex();\n        this.IFF.currentForm.imageIndex = index;\n        break;\n      // Texture Mapping Form\n\n      case 'OREF':\n        this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n        break;\n\n      case 'ROID':\n        this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n        break;\n      // Surface Blocks\n\n      case 'SSHN':\n        this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n        break;\n\n      case 'AOVN':\n        this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n        break;\n      // Nodal Blocks\n\n      case 'NSTA':\n        this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n        break;\n\n      case 'NRNM':\n        this.IFF.currentForm.realName = this.IFF.reader.getString();\n        break;\n\n      case 'NNME':\n        this.IFF.currentForm.refName = this.IFF.reader.getString();\n        this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\n        break;\n      // Nodal Blocks : connections\n\n      case 'INME':\n        if (!this.IFF.currentForm.nodeName) this.IFF.currentForm.nodeName = [];\n        this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IINN':\n        if (!this.IFF.currentForm.inputNodeName) this.IFF.currentForm.inputNodeName = [];\n        this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IINM':\n        if (!this.IFF.currentForm.inputName) this.IFF.currentForm.inputName = [];\n        this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IONM':\n        if (!this.IFF.currentForm.inputOutputName) this.IFF.currentForm.inputOutputName = [];\n        this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\n        break;\n\n      case 'FNAM':\n        this.IFF.currentForm.fileName = this.IFF.reader.getString();\n        break;\n\n      case 'CHAN':\n        // NOTE: ENVL Forms may also have CHAN chunk, however ENVL is currently ignored\n        if (length === 4) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();else this.IFF.reader.skip(length);\n        break;\n      // LWO2 Spec chunks: these are needed since the SURF FORMs are often in LWO2 format\n\n      case 'SMAN':\n        var maxSmoothingAngle = this.IFF.reader.getFloat32();\n        this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\n        break;\n      // LWO2: Basic Surface Parameters\n\n      case 'COLR':\n        this.IFF.currentSurface.attributes.Color = {\n          value: this.IFF.reader.getFloat32Array(3)\n        };\n        this.IFF.reader.skip(2); // VX: envelope\n\n        break;\n\n      case 'LUMI':\n        this.IFF.currentSurface.attributes.Luminosity = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'SPEC':\n        this.IFF.currentSurface.attributes.Specular = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'DIFF':\n        this.IFF.currentSurface.attributes.Diffuse = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'REFL':\n        this.IFF.currentSurface.attributes.Reflection = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'GLOS':\n        this.IFF.currentSurface.attributes.Glossiness = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'TRAN':\n        this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'BUMP':\n        this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'SIDE':\n        this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n        break;\n\n      case 'RIMG':\n        this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n\n      case 'RIND':\n        this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'TIMG':\n        this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n\n      case 'IMAP':\n        this.IFF.currentSurface.attributes.imageMapIndex = this.IFF.reader.getUint32();\n        break;\n\n      case 'IUVI':\n        // uv channel name\n        this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\n        break;\n\n      case 'IUTL':\n        // widthWrappingMode: 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n        this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n        break;\n\n      case 'IVTL':\n        // heightWrappingMode\n        this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n        break;\n\n      default:\n        this.IFF.parseUnknownCHUNK(blockID, length);\n    }\n\n    if (blockID != 'FORM') {\n      this.IFF.debugger.node = 1;\n      this.IFF.debugger.nodeID = blockID;\n      this.IFF.debugger.log();\n    }\n\n    if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n      this.IFF.currentForm = this.IFF.parentForm;\n    }\n  }\n};\n\nexport { LWO3Parser };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}