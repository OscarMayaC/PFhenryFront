{"ast":null,"code":"import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, sRGBEncoding, LinearEncoding, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FloatType, HalfFloatType, DataTexture, Data3DTexture, RGFormat, RedFormat } from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM } from 'ktx-parse';\nimport { ZSTDDecoder } from 'zstddec';\n\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nconst _taskCache = new WeakMap();\nlet _activeLoaders = 0;\nlet _zstd;\nclass KTX2Loader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n    if (renderer.capabilities.isWebGL2) {\n      // https://github.com/mrdoob/three.js/pull/22928\n      this.workerConfig.etc1Supported = false;\n    }\n    return this;\n  }\n  init() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync('basis_transcoder.js'); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(_ref => {\n        let [jsContent, binaryContent] = _ref;\n        const fn = KTX2Loader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({\n            type: 'init',\n            config: this.workerConfig,\n            transcoderBinary\n          }, [transcoderBinary]);\n          return worker;\n        });\n      });\n      if (_activeLoaders > 0) {\n        // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n        console.warn('THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' + ' Use a single KTX2Loader instance, or call .dispose() on old instances.');\n      }\n      _activeLoaders++;\n    }\n    return this.transcoderPending;\n  }\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n    }\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n      this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n    }, onProgress, onError);\n  }\n  _createTextureFrom(transcodeResult) {\n    const {\n      mipmaps,\n      width,\n      height,\n      format,\n      type,\n      error,\n      dfdTransferFn,\n      dfdFlags\n    } = transcodeResult;\n    if (type === 'error') return Promise.reject(error);\n    const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? sRGBEncoding : LinearEncoding;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|DataTexture|Data3DTexture>}\n   */\n\n  _createTexture(buffer) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const container = read(new Uint8Array(buffer));\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createDataTexture(container);\n    } //\n\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({\n        type: 'transcode',\n        buffer,\n        taskConfig: taskConfig\n      }, [buffer]);\n    }).then(e => this._createTextureFrom(e.data)); // Cache the task result.\n\n    _taskCache.set(buffer, {\n      promise: texturePending\n    });\n    return texturePending;\n  }\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n}\n/* CONSTANTS */\n\nKTX2Loader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nKTX2Loader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nKTX2Loader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  self.addEventListener('message', function (e) {\n    const message = e.data;\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            } = transcode(message.buffer);\n            const buffers = [];\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === undefined) {\n        console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');\n      }\n    });\n  }\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file');\n    }\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const levels = ktx2File.getLevels();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid texture');\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader: .startTranscoding failed');\n    }\n    const mipmaps = [];\n    for (let mip = 0; mip < levels; mip++) {\n      const levelInfo = ktx2File.getImageLevelInfo(mip, 0, 0);\n      const mipWidth = levelInfo.origWidth;\n      const mipHeight = levelInfo.origHeight;\n      const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, 0, 0, transcoderFormat));\n      const status = ktx2File.transcodeImage(dst, mip, 0, 0, transcoderFormat, 0, -1, -1);\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.KTX2Loader: .transcodeImage failed.');\n      }\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat,\n      dfdTransferFn,\n      dfdFlags\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n    console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n}; //\n// DataTexture and Data3DTexture parsing.\n\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst ENCODING_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8G8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8_SRGB]: sRGBEncoding\n};\nasync function createDataTexture(container) {\n  const {\n    vkFormat,\n    pixelWidth,\n    pixelHeight,\n    pixelDepth\n  } = container;\n  if (FORMAT_MAP[vkFormat] === undefined) {\n    throw new Error('THREE.KTX2Loader: Unsupported vkFormat.');\n  } //\n\n  const level = container.levels[0];\n  let levelData;\n  let view;\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelData = level.levelData;\n  } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async resolve => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n    levelData = (await _zstd).decode(level.levelData, level.uncompressedByteLength);\n  } else {\n    throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.');\n  }\n  if (TYPE_MAP[vkFormat] === FloatType) {\n    view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n  } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n    view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n  } else {\n    view = levelData;\n  } //\n\n  const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.encoding = ENCODING_MAP[vkFormat] || LinearEncoding;\n  texture.needsUpdate = true; //\n\n  return Promise.resolve(texture);\n}\nexport { KTX2Loader };","map":{"version":3,"names":["Loader","FileLoader","CompressedTexture","UnsignedByteType","LinearFilter","LinearMipmapLinearFilter","sRGBEncoding","LinearEncoding","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","FloatType","HalfFloatType","DataTexture","Data3DTexture","RGFormat","RedFormat","WorkerPool","KHR_DF_TRANSFER_SRGB","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","read","VK_FORMAT_UNDEFINED","KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_ZSTD","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","ZSTDDecoder","_taskCache","WeakMap","_activeLoaders","_zstd","KTX2Loader","constructor","manager","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","setTranscoderPath","path","setWorkerLimit","num","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","capabilities","isWebGL2","init","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","_ref","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","load","url","onLoad","onProgress","onError","Error","loader","buffer","cachedTask","get","promise","catch","_createTexture","texture","_createTextureFrom","transcodeResult","mipmaps","width","height","format","error","dfdTransferFn","dfdFlags","reject","minFilter","length","magFilter","generateMipmaps","needsUpdate","encoding","premultiplyAlpha","arguments","undefined","container","Uint8Array","vkFormat","createDataTexture","taskConfig","texturePending","e","data","set","dispose","revokeObjectURL","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","message","hasAlpha","transcode","buffers","i","push","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","levels","getLevels","getHasAlpha","getDFDTransferFunc","getDFDFlags","transcoderFormat","engineFormat","getTranscoderFormat","startTranscoding","mip","levelInfo","getImageLevelInfo","mipWidth","origWidth","mipHeight","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","opt","includes","isPowerOfTwo","value","FORMAT_MAP","TYPE_MAP","ENCODING_MAP","pixelWidth","pixelHeight","pixelDepth","level","levelData","view","supercompressionScheme","zstd","decode","uncompressedByteLength","Float32Array","byteOffset","byteLength","BYTES_PER_ELEMENT","Uint16Array"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/loaders/KTX2Loader.js"],"sourcesContent":["import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, sRGBEncoding, LinearEncoding, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FloatType, HalfFloatType, DataTexture, Data3DTexture, RGFormat, RedFormat } from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM } from 'ktx-parse';\nimport { ZSTDDecoder } from 'zstddec';\n\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nconst _taskCache = new WeakMap();\n\nlet _activeLoaders = 0;\n\nlet _zstd;\n\nclass KTX2Loader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n\n    if (renderer.capabilities.isWebGL2) {\n      // https://github.com/mrdoob/three.js/pull/22928\n      this.workerConfig.etc1Supported = false;\n    }\n\n    return this;\n  }\n\n  init() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync('basis_transcoder.js'); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = KTX2Loader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({\n            type: 'init',\n            config: this.workerConfig,\n            transcoderBinary\n          }, [transcoderBinary]);\n          return worker;\n        });\n      });\n\n      if (_activeLoaders > 0) {\n        // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n        console.warn('THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' + ' Use a single KTX2Loader instance, or call .dispose() on old instances.');\n      }\n\n      _activeLoaders++;\n    }\n\n    return this.transcoderPending;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n    }\n\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n    }, onProgress, onError);\n  }\n\n  _createTextureFrom(transcodeResult) {\n    const {\n      mipmaps,\n      width,\n      height,\n      format,\n      type,\n      error,\n      dfdTransferFn,\n      dfdFlags\n    } = transcodeResult;\n    if (type === 'error') return Promise.reject(error);\n    const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? sRGBEncoding : LinearEncoding;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|DataTexture|Data3DTexture>}\n   */\n\n\n  _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createDataTexture(container);\n    } //\n\n\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({\n        type: 'transcode',\n        buffer,\n        taskConfig: taskConfig\n      }, [buffer]);\n    }).then(e => this._createTextureFrom(e.data)); // Cache the task result.\n\n    _taskCache.set(buffer, {\n      promise: texturePending\n    });\n\n    return texturePending;\n  }\n\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n\n}\n/* CONSTANTS */\n\n\nKTX2Loader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nKTX2Loader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nKTX2Loader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  self.addEventListener('message', function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            } = transcode(message.buffer);\n            const buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n\n      if (BasisModule.KTX2File === undefined) {\n        console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');\n      }\n    });\n  }\n\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file');\n    }\n\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const levels = ktx2File.getLevels();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid texture');\n    }\n\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader: .startTranscoding failed');\n    }\n\n    const mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      const levelInfo = ktx2File.getImageLevelInfo(mip, 0, 0);\n      const mipWidth = levelInfo.origWidth;\n      const mipHeight = levelInfo.origHeight;\n      const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, 0, 0, transcoderFormat));\n      const status = ktx2File.transcodeImage(dst, mip, 0, 0, transcoderFormat, 0, -1, -1);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.KTX2Loader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat,\n      dfdTransferFn,\n      dfdFlags\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n}; //\n// DataTexture and Data3DTexture parsing.\n\n\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst ENCODING_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8G8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8_SRGB]: sRGBEncoding\n};\n\nasync function createDataTexture(container) {\n  const {\n    vkFormat,\n    pixelWidth,\n    pixelHeight,\n    pixelDepth\n  } = container;\n\n  if (FORMAT_MAP[vkFormat] === undefined) {\n    throw new Error('THREE.KTX2Loader: Unsupported vkFormat.');\n  } //\n\n\n  const level = container.levels[0];\n  let levelData;\n  let view;\n\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelData = level.levelData;\n  } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async resolve => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n\n    levelData = (await _zstd).decode(level.levelData, level.uncompressedByteLength);\n  } else {\n    throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.');\n  }\n\n  if (TYPE_MAP[vkFormat] === FloatType) {\n    view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n  } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n    view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n  } else {\n    view = levelData;\n  } //\n\n\n  const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.encoding = ENCODING_MAP[vkFormat] || LinearEncoding;\n  texture.needsUpdate = true; //\n\n  return Promise.resolve(texture);\n}\n\nexport { KTX2Loader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}