{"ast":null,"code":"import Node from '../core/Node.js';\nimport { ShaderNode, element, mul, positionLocal, add, transformDirection, normalLocal, assign, attribute, uniform, mat4, buffer } from '../ShaderNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nconst Skinning = new ShaderNode((inputs, builder) => {\n  const {\n    index,\n    weight,\n    bindMatrix,\n    bindMatrixInverse,\n    boneMatrices\n  } = inputs;\n  const boneMatX = element(boneMatrices, index.x);\n  const boneMatY = element(boneMatrices, index.y);\n  const boneMatZ = element(boneMatrices, index.z);\n  const boneMatW = element(boneMatrices, index.w); // POSITION\n\n  const skinVertex = mul(bindMatrix, positionLocal);\n  const skinned = add(mul(mul(boneMatX, skinVertex), weight.x), mul(mul(boneMatY, skinVertex), weight.y), mul(mul(boneMatZ, skinVertex), weight.z), mul(mul(boneMatW, skinVertex), weight.w));\n  const skinPosition = mul(bindMatrixInverse, skinned).xyz; // NORMAL\n\n  let skinMatrix = add(mul(weight.x, boneMatX), mul(weight.y, boneMatY), mul(weight.z, boneMatZ), mul(weight.w, boneMatW));\n  skinMatrix = mul(mul(bindMatrixInverse, skinMatrix), bindMatrix);\n  const skinNormal = transformDirection(skinMatrix, normalLocal).xyz; // ASSIGNS\n\n  assign(positionLocal, skinPosition).build(builder);\n  assign(normalLocal, skinNormal).build(builder);\n});\nclass SkinningNode extends Node {\n  constructor(skinnedMesh) {\n    super('void');\n    this.skinnedMesh = skinnedMesh;\n    this.updateType = NodeUpdateType.Object; //\n\n    this.skinIndexNode = attribute('skinIndex', 'uvec4');\n    this.skinWeightNode = attribute('skinWeight', 'vec4');\n    this.bindMatrixNode = uniform(mat4(skinnedMesh.bindMatrix));\n    this.bindMatrixInverseNode = uniform(mat4(skinnedMesh.bindMatrixInverse));\n    this.boneMatricesNode = buffer(skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length);\n  }\n  generate(builder) {\n    Skinning({\n      index: this.skinIndexNode,\n      weight: this.skinWeightNode,\n      bindMatrix: this.bindMatrixNode,\n      bindMatrixInverse: this.bindMatrixInverseNode,\n      boneMatrices: this.boneMatricesNode\n    }, builder);\n  }\n  update() {\n    this.skinnedMesh.skeleton.update();\n  }\n}\nexport default SkinningNode;","map":{"version":3,"names":["Node","ShaderNode","element","mul","positionLocal","add","transformDirection","normalLocal","assign","attribute","uniform","mat4","buffer","NodeUpdateType","Skinning","inputs","builder","index","weight","bindMatrix","bindMatrixInverse","boneMatrices","boneMatX","x","boneMatY","y","boneMatZ","z","boneMatW","w","skinVertex","skinned","skinPosition","xyz","skinMatrix","skinNormal","build","SkinningNode","constructor","skinnedMesh","updateType","Object","skinIndexNode","skinWeightNode","bindMatrixNode","bindMatrixInverseNode","boneMatricesNode","skeleton","bones","length","generate","update"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/nodes/accessors/SkinningNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { ShaderNode, element, mul, positionLocal, add, transformDirection, normalLocal, assign, attribute, uniform, mat4, buffer } from '../ShaderNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\n\nconst Skinning = new ShaderNode((inputs, builder) => {\n  const {\n    index,\n    weight,\n    bindMatrix,\n    bindMatrixInverse,\n    boneMatrices\n  } = inputs;\n  const boneMatX = element(boneMatrices, index.x);\n  const boneMatY = element(boneMatrices, index.y);\n  const boneMatZ = element(boneMatrices, index.z);\n  const boneMatW = element(boneMatrices, index.w); // POSITION\n\n  const skinVertex = mul(bindMatrix, positionLocal);\n  const skinned = add(mul(mul(boneMatX, skinVertex), weight.x), mul(mul(boneMatY, skinVertex), weight.y), mul(mul(boneMatZ, skinVertex), weight.z), mul(mul(boneMatW, skinVertex), weight.w));\n  const skinPosition = mul(bindMatrixInverse, skinned).xyz; // NORMAL\n\n  let skinMatrix = add(mul(weight.x, boneMatX), mul(weight.y, boneMatY), mul(weight.z, boneMatZ), mul(weight.w, boneMatW));\n  skinMatrix = mul(mul(bindMatrixInverse, skinMatrix), bindMatrix);\n  const skinNormal = transformDirection(skinMatrix, normalLocal).xyz; // ASSIGNS\n\n  assign(positionLocal, skinPosition).build(builder);\n  assign(normalLocal, skinNormal).build(builder);\n});\n\nclass SkinningNode extends Node {\n  constructor(skinnedMesh) {\n    super('void');\n    this.skinnedMesh = skinnedMesh;\n    this.updateType = NodeUpdateType.Object; //\n\n    this.skinIndexNode = attribute('skinIndex', 'uvec4');\n    this.skinWeightNode = attribute('skinWeight', 'vec4');\n    this.bindMatrixNode = uniform(mat4(skinnedMesh.bindMatrix));\n    this.bindMatrixInverseNode = uniform(mat4(skinnedMesh.bindMatrixInverse));\n    this.boneMatricesNode = buffer(skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length);\n  }\n\n  generate(builder) {\n    Skinning({\n      index: this.skinIndexNode,\n      weight: this.skinWeightNode,\n      bindMatrix: this.bindMatrixNode,\n      bindMatrixInverse: this.bindMatrixInverseNode,\n      boneMatrices: this.boneMatricesNode\n    }, builder);\n  }\n\n  update() {\n    this.skinnedMesh.skeleton.update();\n  }\n\n}\n\nexport default SkinningNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}