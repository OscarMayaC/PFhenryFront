{"ast":null,"code":"import { Vector3, Plane, Line3, Sphere, Box3, Triangle } from 'three';\nimport { Capsule } from './Capsule.js';\nvar Octree = function () {\n  var _v1 = new Vector3();\n  var _v2 = new Vector3();\n  var _plane = new Plane();\n  var _line1 = new Line3();\n  var _line2 = new Line3();\n  var _sphere = new Sphere();\n  var _capsule = new Capsule();\n  function Octree(box) {\n    this.triangles = [];\n    this.box = box;\n    this.subTrees = [];\n  }\n  Object.assign(Octree.prototype, {\n    addTriangle: function (triangle) {\n      if (!this.bounds) this.bounds = new Box3();\n      this.bounds.min.x = Math.min(this.bounds.min.x, triangle.a.x, triangle.b.x, triangle.c.x);\n      this.bounds.min.y = Math.min(this.bounds.min.y, triangle.a.y, triangle.b.y, triangle.c.y);\n      this.bounds.min.z = Math.min(this.bounds.min.z, triangle.a.z, triangle.b.z, triangle.c.z);\n      this.bounds.max.x = Math.max(this.bounds.max.x, triangle.a.x, triangle.b.x, triangle.c.x);\n      this.bounds.max.y = Math.max(this.bounds.max.y, triangle.a.y, triangle.b.y, triangle.c.y);\n      this.bounds.max.z = Math.max(this.bounds.max.z, triangle.a.z, triangle.b.z, triangle.c.z);\n      this.triangles.push(triangle);\n      return this;\n    },\n    calcBox: function () {\n      this.box = this.bounds.clone(); // offset small ammount to account for regular grid\n\n      this.box.min.x -= 0.01;\n      this.box.min.y -= 0.01;\n      this.box.min.z -= 0.01;\n      return this;\n    },\n    split: function (level) {\n      if (!this.box) return;\n      var subTrees = [],\n        halfsize = _v2.copy(this.box.max).sub(this.box.min).multiplyScalar(0.5),\n        box,\n        v,\n        triangle;\n      for (let x = 0; x < 2; x++) {\n        for (let y = 0; y < 2; y++) {\n          for (let z = 0; z < 2; z++) {\n            box = new Box3();\n            v = _v1.set(x, y, z);\n            box.min.copy(this.box.min).add(v.multiply(halfsize));\n            box.max.copy(box.min).add(halfsize);\n            subTrees.push(new Octree(box));\n          }\n        }\n      }\n      while (triangle = this.triangles.pop()) {\n        for (let i = 0; i < subTrees.length; i++) {\n          if (subTrees[i].box.intersectsTriangle(triangle)) {\n            subTrees[i].triangles.push(triangle);\n          }\n        }\n      }\n      for (let i = 0; i < subTrees.length; i++) {\n        var len = subTrees[i].triangles.length;\n        if (len > 8 && level < 16) {\n          subTrees[i].split(level + 1);\n        }\n        if (len != 0) {\n          this.subTrees.push(subTrees[i]);\n        }\n      }\n      return this;\n    },\n    build: function () {\n      this.calcBox();\n      this.split(0);\n      return this;\n    },\n    getRayTriangles: function (ray, triangles) {\n      for (let i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!ray.intersectsBox(subTree.box)) continue;\n        if (subTree.triangles.length > 0) {\n          for (let j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getRayTriangles(ray, triangles);\n        }\n      }\n      return triangles;\n    },\n    triangleCapsuleIntersect: function (capsule, triangle) {\n      var point1, point2, line1, line2;\n      triangle.getPlane(_plane);\n      var d1 = _plane.distanceToPoint(capsule.start) - capsule.radius;\n      var d2 = _plane.distanceToPoint(capsule.end) - capsule.radius;\n      if (d1 > 0 && d2 > 0 || d1 < -capsule.radius && d2 < -capsule.radius) {\n        return false;\n      }\n      var delta = Math.abs(d1 / (Math.abs(d1) + Math.abs(d2)));\n      var intersectPoint = _v1.copy(capsule.start).lerp(capsule.end, delta);\n      if (triangle.containsPoint(intersectPoint)) {\n        return {\n          normal: _plane.normal.clone(),\n          point: intersectPoint.clone(),\n          depth: Math.abs(Math.min(d1, d2))\n        };\n      }\n      var r2 = capsule.radius * capsule.radius;\n      line1 = _line1.set(capsule.start, capsule.end);\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\n      for (let i = 0; i < lines.length; i++) {\n        line2 = _line2.set(lines[i][0], lines[i][1]);\n        [point1, point2] = capsule.lineLineMinimumPoints(line1, line2);\n        if (point1.distanceToSquared(point2) < r2) {\n          return {\n            normal: point1.clone().sub(point2).normalize(),\n            point: point2.clone(),\n            depth: capsule.radius - point1.distanceTo(point2)\n          };\n        }\n      }\n      return false;\n    },\n    triangleSphereIntersect: function (sphere, triangle) {\n      triangle.getPlane(_plane);\n      if (!sphere.intersectsPlane(_plane)) return false;\n      var depth = Math.abs(_plane.distanceToSphere(sphere));\n      var r2 = sphere.radius * sphere.radius - depth * depth;\n      var plainPoint = _plane.projectPoint(sphere.center, _v1);\n      if (triangle.containsPoint(sphere.center)) {\n        return {\n          normal: _plane.normal.clone(),\n          point: plainPoint.clone(),\n          depth: Math.abs(_plane.distanceToSphere(sphere))\n        };\n      }\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\n      for (let i = 0; i < lines.length; i++) {\n        _line1.set(lines[i][0], lines[i][1]);\n        _line1.closestPointToPoint(plainPoint, true, _v2);\n        var d = _v2.distanceToSquared(sphere.center);\n        if (d < r2) {\n          return {\n            normal: sphere.center.clone().sub(_v2).normalize(),\n            point: _v2.clone(),\n            depth: sphere.radius - Math.sqrt(d)\n          };\n        }\n      }\n      return false;\n    },\n    getSphereTriangles: function (sphere, triangles) {\n      for (let i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!sphere.intersectsBox(subTree.box)) continue;\n        if (subTree.triangles.length > 0) {\n          for (let j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getSphereTriangles(sphere, triangles);\n        }\n      }\n    },\n    getCapsuleTriangles: function (capsule, triangles) {\n      for (let i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!capsule.intersectsBox(subTree.box)) continue;\n        if (subTree.triangles.length > 0) {\n          for (let j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getCapsuleTriangles(capsule, triangles);\n        }\n      }\n    },\n    sphereIntersect(sphere) {\n      _sphere.copy(sphere);\n      var triangles = [],\n        result,\n        hit = false;\n      this.getSphereTriangles(sphere, triangles);\n      for (let i = 0; i < triangles.length; i++) {\n        if (result = this.triangleSphereIntersect(_sphere, triangles[i])) {\n          hit = true;\n          _sphere.center.add(result.normal.multiplyScalar(result.depth));\n        }\n      }\n      if (hit) {\n        var collisionVector = _sphere.center.clone().sub(sphere.center);\n        var depth = collisionVector.length();\n        return {\n          normal: collisionVector.normalize(),\n          depth: depth\n        };\n      }\n      return false;\n    },\n    capsuleIntersect: function (capsule) {\n      _capsule.copy(capsule);\n      var triangles = [],\n        result,\n        hit = false;\n      this.getCapsuleTriangles(_capsule, triangles);\n      for (let i = 0; i < triangles.length; i++) {\n        if (result = this.triangleCapsuleIntersect(_capsule, triangles[i])) {\n          hit = true;\n          _capsule.translate(result.normal.multiplyScalar(result.depth));\n        }\n      }\n      if (hit) {\n        var collisionVector = _capsule.getCenter(new Vector3()).sub(capsule.getCenter(_v1));\n        var depth = collisionVector.length();\n        return {\n          normal: collisionVector.normalize(),\n          depth: depth\n        };\n      }\n      return false;\n    },\n    rayIntersect: function (ray) {\n      if (ray.direction.length() === 0) return;\n      var triangles = [],\n        triangle,\n        position,\n        distance = 1e100,\n        result;\n      this.getRayTriangles(ray, triangles);\n      for (let i = 0; i < triangles.length; i++) {\n        result = ray.intersectTriangle(triangles[i].a, triangles[i].b, triangles[i].c, true, _v1);\n        if (result) {\n          var newdistance = result.sub(ray.origin).length();\n          if (distance > newdistance) {\n            position = result.clone().add(ray.origin);\n            distance = newdistance;\n            triangle = triangles[i];\n          }\n        }\n      }\n      return distance < 1e100 ? {\n        distance: distance,\n        triangle: triangle,\n        position: position\n      } : false;\n    },\n    fromGraphNode: function (group) {\n      group.traverse(obj => {\n        if (obj.type === 'Mesh') {\n          obj.updateMatrix();\n          obj.updateWorldMatrix();\n          var geometry,\n            isTemp = false;\n          if (obj.geometry.index) {\n            isTemp = true;\n            geometry = obj.geometry.clone().toNonIndexed();\n          } else {\n            geometry = obj.geometry;\n          }\n          var positions = geometry.attributes.position.array;\n          var transform = obj.matrixWorld;\n          for (let i = 0; i < positions.length; i += 9) {\n            var v1 = new Vector3(positions[i], positions[i + 1], positions[i + 2]);\n            var v2 = new Vector3(positions[i + 3], positions[i + 4], positions[i + 5]);\n            var v3 = new Vector3(positions[i + 6], positions[i + 7], positions[i + 8]);\n            v1.applyMatrix4(transform);\n            v2.applyMatrix4(transform);\n            v3.applyMatrix4(transform);\n            this.addTriangle(new Triangle(v1, v2, v3));\n          }\n          if (isTemp) {\n            geometry.dispose();\n          }\n        }\n      });\n      this.build();\n      return this;\n    }\n  });\n  return Octree;\n}();\nexport { Octree };","map":{"version":3,"names":["Vector3","Plane","Line3","Sphere","Box3","Triangle","Capsule","Octree","_v1","_v2","_plane","_line1","_line2","_sphere","_capsule","box","triangles","subTrees","Object","assign","prototype","addTriangle","triangle","bounds","min","x","Math","a","b","c","y","z","max","push","calcBox","clone","split","level","halfsize","copy","sub","multiplyScalar","v","set","add","multiply","pop","i","length","intersectsTriangle","len","build","getRayTriangles","ray","subTree","intersectsBox","j","indexOf","triangleCapsuleIntersect","capsule","point1","point2","line1","line2","getPlane","d1","distanceToPoint","start","radius","d2","end","delta","abs","intersectPoint","lerp","containsPoint","normal","point","depth","r2","lines","lineLineMinimumPoints","distanceToSquared","normalize","distanceTo","triangleSphereIntersect","sphere","intersectsPlane","distanceToSphere","plainPoint","projectPoint","center","closestPointToPoint","d","sqrt","getSphereTriangles","getCapsuleTriangles","sphereIntersect","result","hit","collisionVector","capsuleIntersect","translate","getCenter","rayIntersect","direction","position","distance","intersectTriangle","newdistance","origin","fromGraphNode","group","traverse","obj","type","updateMatrix","updateWorldMatrix","geometry","isTemp","index","toNonIndexed","positions","attributes","array","transform","matrixWorld","v1","v2","v3","applyMatrix4","dispose"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/math/Octree.js"],"sourcesContent":["import { Vector3, Plane, Line3, Sphere, Box3, Triangle } from 'three';\nimport { Capsule } from './Capsule.js';\n\nvar Octree = function () {\n  var _v1 = new Vector3();\n\n  var _v2 = new Vector3();\n\n  var _plane = new Plane();\n\n  var _line1 = new Line3();\n\n  var _line2 = new Line3();\n\n  var _sphere = new Sphere();\n\n  var _capsule = new Capsule();\n\n  function Octree(box) {\n    this.triangles = [];\n    this.box = box;\n    this.subTrees = [];\n  }\n\n  Object.assign(Octree.prototype, {\n    addTriangle: function (triangle) {\n      if (!this.bounds) this.bounds = new Box3();\n      this.bounds.min.x = Math.min(this.bounds.min.x, triangle.a.x, triangle.b.x, triangle.c.x);\n      this.bounds.min.y = Math.min(this.bounds.min.y, triangle.a.y, triangle.b.y, triangle.c.y);\n      this.bounds.min.z = Math.min(this.bounds.min.z, triangle.a.z, triangle.b.z, triangle.c.z);\n      this.bounds.max.x = Math.max(this.bounds.max.x, triangle.a.x, triangle.b.x, triangle.c.x);\n      this.bounds.max.y = Math.max(this.bounds.max.y, triangle.a.y, triangle.b.y, triangle.c.y);\n      this.bounds.max.z = Math.max(this.bounds.max.z, triangle.a.z, triangle.b.z, triangle.c.z);\n      this.triangles.push(triangle);\n      return this;\n    },\n    calcBox: function () {\n      this.box = this.bounds.clone(); // offset small ammount to account for regular grid\n\n      this.box.min.x -= 0.01;\n      this.box.min.y -= 0.01;\n      this.box.min.z -= 0.01;\n      return this;\n    },\n    split: function (level) {\n      if (!this.box) return;\n\n      var subTrees = [],\n          halfsize = _v2.copy(this.box.max).sub(this.box.min).multiplyScalar(0.5),\n          box,\n          v,\n          triangle;\n\n      for (let x = 0; x < 2; x++) {\n        for (let y = 0; y < 2; y++) {\n          for (let z = 0; z < 2; z++) {\n            box = new Box3();\n            v = _v1.set(x, y, z);\n            box.min.copy(this.box.min).add(v.multiply(halfsize));\n            box.max.copy(box.min).add(halfsize);\n            subTrees.push(new Octree(box));\n          }\n        }\n      }\n\n      while (triangle = this.triangles.pop()) {\n        for (let i = 0; i < subTrees.length; i++) {\n          if (subTrees[i].box.intersectsTriangle(triangle)) {\n            subTrees[i].triangles.push(triangle);\n          }\n        }\n      }\n\n      for (let i = 0; i < subTrees.length; i++) {\n        var len = subTrees[i].triangles.length;\n\n        if (len > 8 && level < 16) {\n          subTrees[i].split(level + 1);\n        }\n\n        if (len != 0) {\n          this.subTrees.push(subTrees[i]);\n        }\n      }\n\n      return this;\n    },\n    build: function () {\n      this.calcBox();\n      this.split(0);\n      return this;\n    },\n    getRayTriangles: function (ray, triangles) {\n      for (let i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!ray.intersectsBox(subTree.box)) continue;\n\n        if (subTree.triangles.length > 0) {\n          for (let j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getRayTriangles(ray, triangles);\n        }\n      }\n\n      return triangles;\n    },\n    triangleCapsuleIntersect: function (capsule, triangle) {\n      var point1, point2, line1, line2;\n      triangle.getPlane(_plane);\n      var d1 = _plane.distanceToPoint(capsule.start) - capsule.radius;\n      var d2 = _plane.distanceToPoint(capsule.end) - capsule.radius;\n\n      if (d1 > 0 && d2 > 0 || d1 < -capsule.radius && d2 < -capsule.radius) {\n        return false;\n      }\n\n      var delta = Math.abs(d1 / (Math.abs(d1) + Math.abs(d2)));\n\n      var intersectPoint = _v1.copy(capsule.start).lerp(capsule.end, delta);\n\n      if (triangle.containsPoint(intersectPoint)) {\n        return {\n          normal: _plane.normal.clone(),\n          point: intersectPoint.clone(),\n          depth: Math.abs(Math.min(d1, d2))\n        };\n      }\n\n      var r2 = capsule.radius * capsule.radius;\n      line1 = _line1.set(capsule.start, capsule.end);\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\n\n      for (let i = 0; i < lines.length; i++) {\n        line2 = _line2.set(lines[i][0], lines[i][1]);\n        [point1, point2] = capsule.lineLineMinimumPoints(line1, line2);\n\n        if (point1.distanceToSquared(point2) < r2) {\n          return {\n            normal: point1.clone().sub(point2).normalize(),\n            point: point2.clone(),\n            depth: capsule.radius - point1.distanceTo(point2)\n          };\n        }\n      }\n\n      return false;\n    },\n    triangleSphereIntersect: function (sphere, triangle) {\n      triangle.getPlane(_plane);\n      if (!sphere.intersectsPlane(_plane)) return false;\n      var depth = Math.abs(_plane.distanceToSphere(sphere));\n      var r2 = sphere.radius * sphere.radius - depth * depth;\n\n      var plainPoint = _plane.projectPoint(sphere.center, _v1);\n\n      if (triangle.containsPoint(sphere.center)) {\n        return {\n          normal: _plane.normal.clone(),\n          point: plainPoint.clone(),\n          depth: Math.abs(_plane.distanceToSphere(sphere))\n        };\n      }\n\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\n\n      for (let i = 0; i < lines.length; i++) {\n        _line1.set(lines[i][0], lines[i][1]);\n\n        _line1.closestPointToPoint(plainPoint, true, _v2);\n\n        var d = _v2.distanceToSquared(sphere.center);\n\n        if (d < r2) {\n          return {\n            normal: sphere.center.clone().sub(_v2).normalize(),\n            point: _v2.clone(),\n            depth: sphere.radius - Math.sqrt(d)\n          };\n        }\n      }\n\n      return false;\n    },\n    getSphereTriangles: function (sphere, triangles) {\n      for (let i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!sphere.intersectsBox(subTree.box)) continue;\n\n        if (subTree.triangles.length > 0) {\n          for (let j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getSphereTriangles(sphere, triangles);\n        }\n      }\n    },\n    getCapsuleTriangles: function (capsule, triangles) {\n      for (let i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!capsule.intersectsBox(subTree.box)) continue;\n\n        if (subTree.triangles.length > 0) {\n          for (let j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getCapsuleTriangles(capsule, triangles);\n        }\n      }\n    },\n\n    sphereIntersect(sphere) {\n      _sphere.copy(sphere);\n\n      var triangles = [],\n          result,\n          hit = false;\n      this.getSphereTriangles(sphere, triangles);\n\n      for (let i = 0; i < triangles.length; i++) {\n        if (result = this.triangleSphereIntersect(_sphere, triangles[i])) {\n          hit = true;\n\n          _sphere.center.add(result.normal.multiplyScalar(result.depth));\n        }\n      }\n\n      if (hit) {\n        var collisionVector = _sphere.center.clone().sub(sphere.center);\n\n        var depth = collisionVector.length();\n        return {\n          normal: collisionVector.normalize(),\n          depth: depth\n        };\n      }\n\n      return false;\n    },\n\n    capsuleIntersect: function (capsule) {\n      _capsule.copy(capsule);\n\n      var triangles = [],\n          result,\n          hit = false;\n      this.getCapsuleTriangles(_capsule, triangles);\n\n      for (let i = 0; i < triangles.length; i++) {\n        if (result = this.triangleCapsuleIntersect(_capsule, triangles[i])) {\n          hit = true;\n\n          _capsule.translate(result.normal.multiplyScalar(result.depth));\n        }\n      }\n\n      if (hit) {\n        var collisionVector = _capsule.getCenter(new Vector3()).sub(capsule.getCenter(_v1));\n\n        var depth = collisionVector.length();\n        return {\n          normal: collisionVector.normalize(),\n          depth: depth\n        };\n      }\n\n      return false;\n    },\n    rayIntersect: function (ray) {\n      if (ray.direction.length() === 0) return;\n      var triangles = [],\n          triangle,\n          position,\n          distance = 1e100,\n          result;\n      this.getRayTriangles(ray, triangles);\n\n      for (let i = 0; i < triangles.length; i++) {\n        result = ray.intersectTriangle(triangles[i].a, triangles[i].b, triangles[i].c, true, _v1);\n\n        if (result) {\n          var newdistance = result.sub(ray.origin).length();\n\n          if (distance > newdistance) {\n            position = result.clone().add(ray.origin);\n            distance = newdistance;\n            triangle = triangles[i];\n          }\n        }\n      }\n\n      return distance < 1e100 ? {\n        distance: distance,\n        triangle: triangle,\n        position: position\n      } : false;\n    },\n    fromGraphNode: function (group) {\n      group.traverse(obj => {\n        if (obj.type === 'Mesh') {\n          obj.updateMatrix();\n          obj.updateWorldMatrix();\n          var geometry,\n              isTemp = false;\n\n          if (obj.geometry.index) {\n            isTemp = true;\n            geometry = obj.geometry.clone().toNonIndexed();\n          } else {\n            geometry = obj.geometry;\n          }\n\n          var positions = geometry.attributes.position.array;\n          var transform = obj.matrixWorld;\n\n          for (let i = 0; i < positions.length; i += 9) {\n            var v1 = new Vector3(positions[i], positions[i + 1], positions[i + 2]);\n            var v2 = new Vector3(positions[i + 3], positions[i + 4], positions[i + 5]);\n            var v3 = new Vector3(positions[i + 6], positions[i + 7], positions[i + 8]);\n            v1.applyMatrix4(transform);\n            v2.applyMatrix4(transform);\n            v3.applyMatrix4(transform);\n            this.addTriangle(new Triangle(v1, v2, v3));\n          }\n\n          if (isTemp) {\n            geometry.dispose();\n          }\n        }\n      });\n      this.build();\n      return this;\n    }\n  });\n  return Octree;\n}();\n\nexport { Octree };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}