{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { BufferGeometry, Mesh, Points } from 'three';\n\n/**\n * Export draco compressed files from threejs geometry objects.\n *\n * Draco files are compressed and usually are smaller than conventional 3D file formats.\n *\n * The exporter receives a options object containing\n *  - decodeSpeed, indicates how to tune the encoder regarding decode speed (0 gives better speed but worst quality)\n *  - encodeSpeed, indicates how to tune the encoder parameters (0 gives better speed but worst quality)\n *  - encoderMethod\n *  - quantization, indicates the presision of each type of data stored in the draco file in the order (POSITION, NORMAL, COLOR, TEX_COORD, GENERIC)\n *  - exportUvs\n *  - exportNormals\n */\n\nclass DRACOExporter {\n  // Encoder methods\n  // Geometry type\n  // Attribute type\n  parse(object) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      decodeSpeed: 5,\n      encodeSpeed: 5,\n      encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n      quantization: [16, 8, 8, 8, 8],\n      exportUvs: true,\n      exportNormals: true,\n      exportColor: false\n    };\n    if (object instanceof BufferGeometry && object.isBufferGeometry) {\n      throw new Error('DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.');\n    }\n    if (DracoEncoderModule === undefined) {\n      throw new Error('THREE.DRACOExporter: required the draco_encoder to work.');\n    }\n    const geometry = object.geometry;\n    const dracoEncoder = DracoEncoderModule();\n    const encoder = new dracoEncoder.Encoder();\n    let builder;\n    let dracoObject;\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.');\n    }\n    if (object instanceof Mesh && object.isMesh) {\n      builder = new dracoEncoder.MeshBuilder();\n      dracoObject = new dracoEncoder.Mesh();\n      const vertices = geometry.getAttribute('position'); // @ts-expect-error\n\n      builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n      const faces = geometry.getIndex();\n      if (faces !== null) {\n        // @ts-expect-error\n        builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n      } else {\n        const faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n        for (let i = 0; i < faces.length; i++) {\n          faces[i] = i;\n        }\n        builder.AddFacesToMesh(dracoObject, vertices.count, faces);\n      }\n      if (options.exportNormals) {\n        const normals = geometry.getAttribute('normal');\n        if (normals !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n        }\n      }\n      if (options.exportUvs) {\n        const uvs = geometry.getAttribute('uv');\n        if (uvs !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n        }\n      }\n      if (options.exportColor) {\n        const colors = geometry.getAttribute('color');\n        if (colors !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else if (object instanceof Points && object.isPoints) {\n      // @ts-expect-error\n      builder = new dracoEncoder.PointCloudBuilder(); // @ts-expect-error\n\n      dracoObject = new dracoEncoder.PointCloud();\n      const vertices = geometry.getAttribute('position');\n      builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n      if (options.exportColor) {\n        const colors = geometry.getAttribute('color');\n        if (colors !== undefined) {\n          builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else {\n      throw new Error('DRACOExporter: Unsupported object type.');\n    } //Compress using draco encoder\n\n    const encodedData = new dracoEncoder.DracoInt8Array(); //Sets the desired encoding and decoding speed for the given options from 0 (slowest speed, but the best compression) to 10 (fastest, but the worst compression).\n\n    const encodeSpeed = options.encodeSpeed !== undefined ? options.encodeSpeed : 5;\n    const decodeSpeed = options.decodeSpeed !== undefined ? options.decodeSpeed : 5;\n    encoder.SetSpeedOptions(encodeSpeed, decodeSpeed); // Sets the desired encoding method for a given geometry.\n\n    if (options.encoderMethod !== undefined) {\n      encoder.SetEncodingMethod(options.encoderMethod);\n    } // Sets the quantization (number of bits used to represent) compression options for a named attribute.\n    // The attribute values will be quantized in a box defined by the maximum extent of the attribute values.\n\n    if (options.quantization !== undefined) {\n      for (let i = 0; i < 5; i++) {\n        if (options.quantization[i] !== undefined) {\n          encoder.SetAttributeQuantization(i, options.quantization[i]);\n        }\n      }\n    }\n    let length;\n    if (object instanceof Mesh && object.isMesh) {\n      length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n    } else {\n      // @ts-expect-error\n      length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n    }\n    dracoEncoder.destroy(dracoObject);\n    if (length === 0) {\n      throw new Error('THREE.DRACOExporter: Draco encoding failed.');\n    } //Copy encoded data to buffer.\n\n    const outputData = new Int8Array(new ArrayBuffer(length));\n    for (let i = 0; i < length; i++) {\n      outputData[i] = encodedData.GetValue(i);\n    }\n    dracoEncoder.destroy(encodedData);\n    dracoEncoder.destroy(encoder);\n    dracoEncoder.destroy(builder);\n    return outputData;\n  }\n}\n_defineProperty(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n_defineProperty(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0);\n_defineProperty(DRACOExporter, \"POINT_CLOUD\", 0);\n_defineProperty(DRACOExporter, \"TRIANGULAR_MESH\", 1);\n_defineProperty(DRACOExporter, \"INVALID\", -1);\n_defineProperty(DRACOExporter, \"POSITION\", 0);\n_defineProperty(DRACOExporter, \"NORMAL\", 1);\n_defineProperty(DRACOExporter, \"COLOR\", 2);\n_defineProperty(DRACOExporter, \"TEX_COORD\", 3);\n_defineProperty(DRACOExporter, \"GENERIC\", 4);\nexport { DRACOExporter };","map":{"version":3,"names":["_defineProperty","BufferGeometry","Mesh","Points","DRACOExporter","parse","object","options","arguments","length","undefined","decodeSpeed","encodeSpeed","encoderMethod","MESH_EDGEBREAKER_ENCODING","quantization","exportUvs","exportNormals","exportColor","isBufferGeometry","Error","DracoEncoderModule","geometry","dracoEncoder","encoder","Encoder","builder","dracoObject","isMesh","MeshBuilder","vertices","getAttribute","AddFloatAttributeToMesh","POSITION","count","itemSize","array","faces","getIndex","AddFacesToMesh","Uint32Array","Uint16Array","i","normals","NORMAL","uvs","TEX_COORD","colors","COLOR","isPoints","PointCloudBuilder","PointCloud","AddFloatAttribute","encodedData","DracoInt8Array","SetSpeedOptions","SetEncodingMethod","SetAttributeQuantization","EncodeMeshToDracoBuffer","EncodePointCloudToDracoBuffer","destroy","outputData","Int8Array","ArrayBuffer","GetValue"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/exporters/DRACOExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { BufferGeometry, Mesh, Points } from 'three';\n\n/**\n * Export draco compressed files from threejs geometry objects.\n *\n * Draco files are compressed and usually are smaller than conventional 3D file formats.\n *\n * The exporter receives a options object containing\n *  - decodeSpeed, indicates how to tune the encoder regarding decode speed (0 gives better speed but worst quality)\n *  - encodeSpeed, indicates how to tune the encoder parameters (0 gives better speed but worst quality)\n *  - encoderMethod\n *  - quantization, indicates the presision of each type of data stored in the draco file in the order (POSITION, NORMAL, COLOR, TEX_COORD, GENERIC)\n *  - exportUvs\n *  - exportNormals\n */\n\nclass DRACOExporter {\n  // Encoder methods\n  // Geometry type\n  // Attribute type\n  parse(object, options = {\n    decodeSpeed: 5,\n    encodeSpeed: 5,\n    encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n    quantization: [16, 8, 8, 8, 8],\n    exportUvs: true,\n    exportNormals: true,\n    exportColor: false\n  }) {\n    if (object instanceof BufferGeometry && object.isBufferGeometry) {\n      throw new Error('DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.');\n    }\n\n    if (DracoEncoderModule === undefined) {\n      throw new Error('THREE.DRACOExporter: required the draco_encoder to work.');\n    }\n\n    const geometry = object.geometry;\n    const dracoEncoder = DracoEncoderModule();\n    const encoder = new dracoEncoder.Encoder();\n    let builder;\n    let dracoObject;\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.');\n    }\n\n    if (object instanceof Mesh && object.isMesh) {\n      builder = new dracoEncoder.MeshBuilder();\n      dracoObject = new dracoEncoder.Mesh();\n      const vertices = geometry.getAttribute('position'); // @ts-expect-error\n\n      builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n      const faces = geometry.getIndex();\n\n      if (faces !== null) {\n        // @ts-expect-error\n        builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n      } else {\n        const faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n\n        for (let i = 0; i < faces.length; i++) {\n          faces[i] = i;\n        }\n\n        builder.AddFacesToMesh(dracoObject, vertices.count, faces);\n      }\n\n      if (options.exportNormals) {\n        const normals = geometry.getAttribute('normal');\n\n        if (normals !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n        }\n      }\n\n      if (options.exportUvs) {\n        const uvs = geometry.getAttribute('uv');\n\n        if (uvs !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n        }\n      }\n\n      if (options.exportColor) {\n        const colors = geometry.getAttribute('color');\n\n        if (colors !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else if (object instanceof Points && object.isPoints) {\n      // @ts-expect-error\n      builder = new dracoEncoder.PointCloudBuilder(); // @ts-expect-error\n\n      dracoObject = new dracoEncoder.PointCloud();\n      const vertices = geometry.getAttribute('position');\n      builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n\n      if (options.exportColor) {\n        const colors = geometry.getAttribute('color');\n\n        if (colors !== undefined) {\n          builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else {\n      throw new Error('DRACOExporter: Unsupported object type.');\n    } //Compress using draco encoder\n\n\n    const encodedData = new dracoEncoder.DracoInt8Array(); //Sets the desired encoding and decoding speed for the given options from 0 (slowest speed, but the best compression) to 10 (fastest, but the worst compression).\n\n    const encodeSpeed = options.encodeSpeed !== undefined ? options.encodeSpeed : 5;\n    const decodeSpeed = options.decodeSpeed !== undefined ? options.decodeSpeed : 5;\n    encoder.SetSpeedOptions(encodeSpeed, decodeSpeed); // Sets the desired encoding method for a given geometry.\n\n    if (options.encoderMethod !== undefined) {\n      encoder.SetEncodingMethod(options.encoderMethod);\n    } // Sets the quantization (number of bits used to represent) compression options for a named attribute.\n    // The attribute values will be quantized in a box defined by the maximum extent of the attribute values.\n\n\n    if (options.quantization !== undefined) {\n      for (let i = 0; i < 5; i++) {\n        if (options.quantization[i] !== undefined) {\n          encoder.SetAttributeQuantization(i, options.quantization[i]);\n        }\n      }\n    }\n\n    let length;\n\n    if (object instanceof Mesh && object.isMesh) {\n      length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n    } else {\n      // @ts-expect-error\n      length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n    }\n\n    dracoEncoder.destroy(dracoObject);\n\n    if (length === 0) {\n      throw new Error('THREE.DRACOExporter: Draco encoding failed.');\n    } //Copy encoded data to buffer.\n\n\n    const outputData = new Int8Array(new ArrayBuffer(length));\n\n    for (let i = 0; i < length; i++) {\n      outputData[i] = encodedData.GetValue(i);\n    }\n\n    dracoEncoder.destroy(encodedData);\n    dracoEncoder.destroy(encoder);\n    dracoEncoder.destroy(builder);\n    return outputData;\n  }\n\n}\n\n_defineProperty(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n\n_defineProperty(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0);\n\n_defineProperty(DRACOExporter, \"POINT_CLOUD\", 0);\n\n_defineProperty(DRACOExporter, \"TRIANGULAR_MESH\", 1);\n\n_defineProperty(DRACOExporter, \"INVALID\", -1);\n\n_defineProperty(DRACOExporter, \"POSITION\", 0);\n\n_defineProperty(DRACOExporter, \"NORMAL\", 1);\n\n_defineProperty(DRACOExporter, \"COLOR\", 2);\n\n_defineProperty(DRACOExporter, \"TEX_COORD\", 3);\n\n_defineProperty(DRACOExporter, \"GENERIC\", 4);\n\nexport { DRACOExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}