{"ast":null,"code":"import { Loader, FileLoader, BufferGeometry, BufferAttribute, Vector3, Float32BufferAttribute, LoaderUtils } from 'three';\n\n/**\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * The loader returns a non-indexed buffer geometry.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *  const loader = new STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\n *  } else { .... }\n *  const mesh = new THREE.Mesh( geometry, material );\n *\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\n * Groups can be used to assign a different color by defining an array of materials with the same length of\n * geometry.groups and passing it to the Mesh constructor:\n *\n * const mesh = new THREE.Mesh( geometry, material );\n *\n * For example:\n *\n *  const materials = [];\n *  const nGeometryGroups = geometry.groups.length;\n *\n *  const colorMap = ...; // Some logic to index colors.\n *\n *  for (let i = 0; i < nGeometryGroups; i++) {\n *\n *\t\tconst material = new THREE.MeshPhongMaterial({\n *\t\t\tcolor: colorMap[i],\n *\t\t\twireframe: false\n *\t\t});\n *\n *  }\n *\n *  materials.push(material);\n *  const mesh = new THREE.Mesh(geometry, materials);\n */\n\nclass STLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(data) {\n    function isBinary(data) {\n      const reader = new DataView(data);\n      const face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n      const n_faces = reader.getUint32(80, true);\n      const expect = 80 + 32 / 8 + n_faces * face_size;\n      if (expect === reader.byteLength) {\n        return true;\n      } // An ASCII STL data must begin with 'solid ' as the first six bytes.\n      // However, ASCII STLs lacking the SPACE after the 'd' are known to be\n      // plentiful.  So, check the first 5 bytes for 'solid'.\n      // Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n      // https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n      // Search for \"solid\" to start anywhere after those prefixes.\n      // US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n      const solid = [115, 111, 108, 105, 100];\n      for (let off = 0; off < 5; off++) {\n        // If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n        if (matchDataViewAt(solid, reader, off)) return false;\n      } // Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n      return true;\n    }\n    function matchDataViewAt(query, reader, offset) {\n      // Check if each byte in query matches the corresponding byte from the current offset\n      for (let i = 0, il = query.length; i < il; i++) {\n        if (query[i] !== reader.getUint8(offset + i, false)) return false;\n      }\n      return true;\n    }\n    function parseBinary(data) {\n      const reader = new DataView(data);\n      const faces = reader.getUint32(80, true);\n      let r,\n        g,\n        b,\n        hasColors = false,\n        colors;\n      let defaultR, defaultG, defaultB, alpha; // process STL header\n      // check for default color in header (\"COLOR=rgba\" sequence).\n\n      for (let index = 0; index < 80 - 10; index++) {\n        if (reader.getUint32(index, false) == 0x434f4c4f\n        /*COLO*/ && reader.getUint8(index + 4) == 0x52\n        /*'R'*/ && reader.getUint8(index + 5) == 0x3d\n        /*'='*/) {\n          hasColors = true;\n          colors = new Float32Array(faces * 3 * 3);\n          defaultR = reader.getUint8(index + 6) / 255;\n          defaultG = reader.getUint8(index + 7) / 255;\n          defaultB = reader.getUint8(index + 8) / 255;\n          alpha = reader.getUint8(index + 9) / 255;\n        }\n      }\n      const dataOffset = 84;\n      const faceLength = 12 * 4 + 2;\n      const geometry = new BufferGeometry();\n      const vertices = new Float32Array(faces * 3 * 3);\n      const normals = new Float32Array(faces * 3 * 3);\n      for (let face = 0; face < faces; face++) {\n        const start = dataOffset + face * faceLength;\n        const normalX = reader.getFloat32(start, true);\n        const normalY = reader.getFloat32(start + 4, true);\n        const normalZ = reader.getFloat32(start + 8, true);\n        if (hasColors) {\n          const packedColor = reader.getUint16(start + 48, true);\n          if ((packedColor & 0x8000) === 0) {\n            // facet has its own unique color\n            r = (packedColor & 0x1f) / 31;\n            g = (packedColor >> 5 & 0x1f) / 31;\n            b = (packedColor >> 10 & 0x1f) / 31;\n          } else {\n            r = defaultR;\n            g = defaultG;\n            b = defaultB;\n          }\n        }\n        for (let i = 1; i <= 3; i++) {\n          const vertexstart = start + i * 12;\n          const componentIdx = face * 3 * 3 + (i - 1) * 3;\n          vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n          vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n          vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n          normals[componentIdx] = normalX;\n          normals[componentIdx + 1] = normalY;\n          normals[componentIdx + 2] = normalZ;\n          if (hasColors) {\n            colors[componentIdx] = r;\n            colors[componentIdx + 1] = g;\n            colors[componentIdx + 2] = b;\n          }\n        }\n      }\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new BufferAttribute(normals, 3));\n      if (hasColors) {\n        geometry.setAttribute('color', new BufferAttribute(colors, 3));\n        geometry.hasColors = true;\n        geometry.alpha = alpha;\n      }\n      return geometry;\n    }\n    function parseASCII(data) {\n      const geometry = new BufferGeometry();\n      const patternSolid = /solid([\\s\\S]*?)endsolid/g;\n      const patternFace = /facet([\\s\\S]*?)endfacet/g;\n      let faceCounter = 0;\n      const patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n      const patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');\n      const patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');\n      const vertices = [];\n      const normals = [];\n      const normal = new Vector3();\n      let result;\n      let groupCount = 0;\n      let startVertex = 0;\n      let endVertex = 0;\n      while ((result = patternSolid.exec(data)) !== null) {\n        startVertex = endVertex;\n        const solid = result[0];\n        while ((result = patternFace.exec(solid)) !== null) {\n          let vertexCountPerFace = 0;\n          let normalCountPerFace = 0;\n          const text = result[0];\n          while ((result = patternNormal.exec(text)) !== null) {\n            normal.x = parseFloat(result[1]);\n            normal.y = parseFloat(result[2]);\n            normal.z = parseFloat(result[3]);\n            normalCountPerFace++;\n          }\n          while ((result = patternVertex.exec(text)) !== null) {\n            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n            normals.push(normal.x, normal.y, normal.z);\n            vertexCountPerFace++;\n            endVertex++;\n          } // every face have to own ONE valid normal\n\n          if (normalCountPerFace !== 1) {\n            console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\n          } // each face have to own THREE valid vertices\n\n          if (vertexCountPerFace !== 3) {\n            console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\n          }\n          faceCounter++;\n        }\n        const start = startVertex;\n        const count = endVertex - startVertex;\n        geometry.addGroup(start, count, groupCount);\n        groupCount++;\n      }\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      return geometry;\n    }\n    function ensureString(buffer) {\n      if (typeof buffer !== 'string') {\n        return LoaderUtils.decodeText(new Uint8Array(buffer));\n      }\n      return buffer;\n    }\n    function ensureBinary(buffer) {\n      if (typeof buffer === 'string') {\n        const array_buffer = new Uint8Array(buffer.length);\n        for (let i = 0; i < buffer.length; i++) {\n          array_buffer[i] = buffer.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n        }\n\n        return array_buffer.buffer || array_buffer;\n      } else {\n        return buffer;\n      }\n    } // start\n\n    const binData = ensureBinary(data);\n    return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n  }\n}\nexport { STLLoader };","map":{"version":3,"names":["Loader","FileLoader","BufferGeometry","BufferAttribute","Vector3","Float32BufferAttribute","LoaderUtils","STLLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","isBinary","reader","DataView","face_size","n_faces","getUint32","expect","byteLength","solid","off","matchDataViewAt","query","offset","i","il","length","getUint8","parseBinary","faces","r","g","b","hasColors","colors","defaultR","defaultG","defaultB","alpha","index","Float32Array","dataOffset","faceLength","geometry","vertices","normals","face","start","normalX","getFloat32","normalY","normalZ","packedColor","getUint16","vertexstart","componentIdx","setAttribute","parseASCII","patternSolid","patternFace","faceCounter","patternFloat","source","patternVertex","RegExp","patternNormal","normal","result","groupCount","startVertex","endVertex","exec","vertexCountPerFace","normalCountPerFace","x","parseFloat","y","z","push","count","addGroup","ensureString","buffer","decodeText","Uint8Array","ensureBinary","array_buffer","charCodeAt","binData"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/loaders/STLLoader.js"],"sourcesContent":["import { Loader, FileLoader, BufferGeometry, BufferAttribute, Vector3, Float32BufferAttribute, LoaderUtils } from 'three';\n\n/**\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * The loader returns a non-indexed buffer geometry.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *  const loader = new STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\n *  } else { .... }\n *  const mesh = new THREE.Mesh( geometry, material );\n *\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\n * Groups can be used to assign a different color by defining an array of materials with the same length of\n * geometry.groups and passing it to the Mesh constructor:\n *\n * const mesh = new THREE.Mesh( geometry, material );\n *\n * For example:\n *\n *  const materials = [];\n *  const nGeometryGroups = geometry.groups.length;\n *\n *  const colorMap = ...; // Some logic to index colors.\n *\n *  for (let i = 0; i < nGeometryGroups; i++) {\n *\n *\t\tconst material = new THREE.MeshPhongMaterial({\n *\t\t\tcolor: colorMap[i],\n *\t\t\twireframe: false\n *\t\t});\n *\n *  }\n *\n *  materials.push(material);\n *  const mesh = new THREE.Mesh(geometry, materials);\n */\n\nclass STLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    function isBinary(data) {\n      const reader = new DataView(data);\n      const face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n      const n_faces = reader.getUint32(80, true);\n      const expect = 80 + 32 / 8 + n_faces * face_size;\n\n      if (expect === reader.byteLength) {\n        return true;\n      } // An ASCII STL data must begin with 'solid ' as the first six bytes.\n      // However, ASCII STLs lacking the SPACE after the 'd' are known to be\n      // plentiful.  So, check the first 5 bytes for 'solid'.\n      // Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n      // https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n      // Search for \"solid\" to start anywhere after those prefixes.\n      // US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n\n      const solid = [115, 111, 108, 105, 100];\n\n      for (let off = 0; off < 5; off++) {\n        // If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n        if (matchDataViewAt(solid, reader, off)) return false;\n      } // Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n\n      return true;\n    }\n\n    function matchDataViewAt(query, reader, offset) {\n      // Check if each byte in query matches the corresponding byte from the current offset\n      for (let i = 0, il = query.length; i < il; i++) {\n        if (query[i] !== reader.getUint8(offset + i, false)) return false;\n      }\n\n      return true;\n    }\n\n    function parseBinary(data) {\n      const reader = new DataView(data);\n      const faces = reader.getUint32(80, true);\n      let r,\n          g,\n          b,\n          hasColors = false,\n          colors;\n      let defaultR, defaultG, defaultB, alpha; // process STL header\n      // check for default color in header (\"COLOR=rgba\" sequence).\n\n      for (let index = 0; index < 80 - 10; index++) {\n        if (reader.getUint32(index, false) == 0x434f4c4f\n        /*COLO*/\n        && reader.getUint8(index + 4) == 0x52\n        /*'R'*/\n        && reader.getUint8(index + 5) == 0x3d\n        /*'='*/\n        ) {\n          hasColors = true;\n          colors = new Float32Array(faces * 3 * 3);\n          defaultR = reader.getUint8(index + 6) / 255;\n          defaultG = reader.getUint8(index + 7) / 255;\n          defaultB = reader.getUint8(index + 8) / 255;\n          alpha = reader.getUint8(index + 9) / 255;\n        }\n      }\n\n      const dataOffset = 84;\n      const faceLength = 12 * 4 + 2;\n      const geometry = new BufferGeometry();\n      const vertices = new Float32Array(faces * 3 * 3);\n      const normals = new Float32Array(faces * 3 * 3);\n\n      for (let face = 0; face < faces; face++) {\n        const start = dataOffset + face * faceLength;\n        const normalX = reader.getFloat32(start, true);\n        const normalY = reader.getFloat32(start + 4, true);\n        const normalZ = reader.getFloat32(start + 8, true);\n\n        if (hasColors) {\n          const packedColor = reader.getUint16(start + 48, true);\n\n          if ((packedColor & 0x8000) === 0) {\n            // facet has its own unique color\n            r = (packedColor & 0x1f) / 31;\n            g = (packedColor >> 5 & 0x1f) / 31;\n            b = (packedColor >> 10 & 0x1f) / 31;\n          } else {\n            r = defaultR;\n            g = defaultG;\n            b = defaultB;\n          }\n        }\n\n        for (let i = 1; i <= 3; i++) {\n          const vertexstart = start + i * 12;\n          const componentIdx = face * 3 * 3 + (i - 1) * 3;\n          vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n          vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n          vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n          normals[componentIdx] = normalX;\n          normals[componentIdx + 1] = normalY;\n          normals[componentIdx + 2] = normalZ;\n\n          if (hasColors) {\n            colors[componentIdx] = r;\n            colors[componentIdx + 1] = g;\n            colors[componentIdx + 2] = b;\n          }\n        }\n      }\n\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new BufferAttribute(normals, 3));\n\n      if (hasColors) {\n        geometry.setAttribute('color', new BufferAttribute(colors, 3));\n        geometry.hasColors = true;\n        geometry.alpha = alpha;\n      }\n\n      return geometry;\n    }\n\n    function parseASCII(data) {\n      const geometry = new BufferGeometry();\n      const patternSolid = /solid([\\s\\S]*?)endsolid/g;\n      const patternFace = /facet([\\s\\S]*?)endfacet/g;\n      let faceCounter = 0;\n      const patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n      const patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');\n      const patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');\n      const vertices = [];\n      const normals = [];\n      const normal = new Vector3();\n      let result;\n      let groupCount = 0;\n      let startVertex = 0;\n      let endVertex = 0;\n\n      while ((result = patternSolid.exec(data)) !== null) {\n        startVertex = endVertex;\n        const solid = result[0];\n\n        while ((result = patternFace.exec(solid)) !== null) {\n          let vertexCountPerFace = 0;\n          let normalCountPerFace = 0;\n          const text = result[0];\n\n          while ((result = patternNormal.exec(text)) !== null) {\n            normal.x = parseFloat(result[1]);\n            normal.y = parseFloat(result[2]);\n            normal.z = parseFloat(result[3]);\n            normalCountPerFace++;\n          }\n\n          while ((result = patternVertex.exec(text)) !== null) {\n            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n            normals.push(normal.x, normal.y, normal.z);\n            vertexCountPerFace++;\n            endVertex++;\n          } // every face have to own ONE valid normal\n\n\n          if (normalCountPerFace !== 1) {\n            console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\n          } // each face have to own THREE valid vertices\n\n\n          if (vertexCountPerFace !== 3) {\n            console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\n          }\n\n          faceCounter++;\n        }\n\n        const start = startVertex;\n        const count = endVertex - startVertex;\n        geometry.addGroup(start, count, groupCount);\n        groupCount++;\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      return geometry;\n    }\n\n    function ensureString(buffer) {\n      if (typeof buffer !== 'string') {\n        return LoaderUtils.decodeText(new Uint8Array(buffer));\n      }\n\n      return buffer;\n    }\n\n    function ensureBinary(buffer) {\n      if (typeof buffer === 'string') {\n        const array_buffer = new Uint8Array(buffer.length);\n\n        for (let i = 0; i < buffer.length; i++) {\n          array_buffer[i] = buffer.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n        }\n\n        return array_buffer.buffer || array_buffer;\n      } else {\n        return buffer;\n      }\n    } // start\n\n\n    const binData = ensureBinary(data);\n    return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n  }\n\n}\n\nexport { STLLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}