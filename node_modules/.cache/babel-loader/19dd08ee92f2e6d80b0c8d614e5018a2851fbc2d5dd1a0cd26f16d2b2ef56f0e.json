{"ast":null,"code":"import { Vector2, MeshNormalMaterial, ShaderMaterial, Vector4, WebGLRenderTarget, DepthTexture, NearestFilter, RGBAFormat } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nclass RenderPixelatedPass extends Pass {\n  constructor(resolution, pixelSize, scene, camera) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    var _options$normalEdgeSt, _options$depthEdgeStr;\n    super();\n    this.pixelSize = pixelSize;\n    this.resolution = new Vector2();\n    this.renderResolution = new Vector2();\n    this.setSize(resolution.x, resolution.y);\n    this.fsQuad = new FullScreenQuad(this.material());\n    this.scene = scene;\n    this.camera = camera;\n    this.normalEdgeStrength = (_options$normalEdgeSt = options.normalEdgeStrength) != null ? _options$normalEdgeSt : 0.3;\n    this.depthEdgeStrength = (_options$depthEdgeStr = options.depthEdgeStrength) != null ? _options$depthEdgeStr : 0.4;\n    this.rgbRenderTarget = pixelRenderTarget(this.renderResolution, RGBAFormat, true);\n    this.normalRenderTarget = pixelRenderTarget(this.renderResolution, RGBAFormat, false);\n    this.normalMaterial = new MeshNormalMaterial();\n  }\n  dispose() {\n    this.rgbRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.fsQuad.dispose();\n  }\n  setSize(width, height) {\n    var _this$rgbRenderTarget, _this$normalRenderTar, _this$fsQuad;\n    this.resolution.set(width, height);\n    this.renderResolution.set(width / this.pixelSize | 0, height / this.pixelSize | 0);\n    const {\n      x,\n      y\n    } = this.renderResolution;\n    (_this$rgbRenderTarget = this.rgbRenderTarget) === null || _this$rgbRenderTarget === void 0 ? void 0 : _this$rgbRenderTarget.setSize(x, y);\n    (_this$normalRenderTar = this.normalRenderTarget) === null || _this$normalRenderTar === void 0 ? void 0 : _this$normalRenderTar.setSize(x, y);\n    (_this$fsQuad = this.fsQuad) === null || _this$fsQuad === void 0 ? void 0 : _this$fsQuad.material.uniforms.resolution.value.set(x, y, 1 / x, 1 / y);\n  }\n  setPixelSize(pixelSize) {\n    this.pixelSize = pixelSize;\n    this.setSize(this.resolution.x, this.resolution.y);\n  }\n  render(renderer, writeBuffer) {\n    const uniforms = this.fsQuad.material.uniforms;\n    uniforms.normalEdgeStrength.value = this.normalEdgeStrength;\n    uniforms.depthEdgeStrength.value = this.depthEdgeStrength;\n    renderer.setRenderTarget(this.rgbRenderTarget);\n    renderer.render(this.scene, this.camera);\n    const overrideMaterial_old = this.scene.overrideMaterial;\n    renderer.setRenderTarget(this.normalRenderTarget);\n    this.scene.overrideMaterial = this.normalMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = overrideMaterial_old;\n    uniforms.tDiffuse.value = this.rgbRenderTarget.texture;\n    uniforms.tDepth.value = this.rgbRenderTarget.depthTexture;\n    uniforms.tNormal.value = this.normalRenderTarget.texture;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n    }\n    this.fsQuad.render(renderer);\n  }\n  material() {\n    return new ShaderMaterial({\n      uniforms: {\n        tDiffuse: {\n          value: null\n        },\n        tDepth: {\n          value: null\n        },\n        tNormal: {\n          value: null\n        },\n        resolution: {\n          value: new Vector4(this.renderResolution.x, this.renderResolution.y, 1 / this.renderResolution.x, 1 / this.renderResolution.y)\n        },\n        normalEdgeStrength: {\n          value: 0\n        },\n        depthEdgeStrength: {\n          value: 0\n        }\n      },\n      vertexShader: `\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t\t`,\n      fragmentShader: `\n\t\t\t\tuniform sampler2D tDiffuse;\n\t\t\t\tuniform sampler2D tDepth;\n\t\t\t\tuniform sampler2D tNormal;\n\t\t\t\tuniform vec4 resolution;\n\t\t\t\tuniform float normalEdgeStrength;\n\t\t\t\tuniform float depthEdgeStrength;\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tfloat getDepth(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tDepth, vUv + vec2(x, y) * resolution.zw ).r;\n\n\t\t\t\t}\n\n\t\t\t\tvec3 getNormal(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tNormal, vUv + vec2(x, y) * resolution.zw ).rgb * 2.0 - 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tfloat depthEdgeIndicator(float depth, vec3 normal) {\n\n\t\t\t\t\tfloat diff = 0.0;\n\t\t\t\t\tdiff += clamp(getDepth(1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(-1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, 1) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, -1) - depth, 0.0, 1.0);\n\t\t\t\t\treturn floor(smoothstep(0.01, 0.02, diff) * 2.) / 2.;\n\n\t\t\t\t}\n\n\t\t\t\tfloat neighborNormalEdgeIndicator(int x, int y, float depth, vec3 normal) {\n\n\t\t\t\t\tfloat depthDiff = getDepth(x, y) - depth;\n\t\t\t\t\tvec3 neighborNormal = getNormal(x, y);\n\t\t\t\t\t\n\t\t\t\t\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\n\t\t\t\t\tvec3 normalEdgeBias = vec3(1., 1., 1.); // This should probably be a parameter.\n\t\t\t\t\tfloat normalDiff = dot(normal - neighborNormal, normalEdgeBias);\n\t\t\t\t\tfloat normalIndicator = clamp(smoothstep(-.01, .01, normalDiff), 0.0, 1.0);\n\t\t\t\t\t\n\t\t\t\t\t// Only the shallower pixel should detect the normal edge.\n\t\t\t\t\tfloat depthIndicator = clamp(sign(depthDiff * .25 + .0025), 0.0, 1.0);\n\n\t\t\t\t\treturn (1.0 - dot(normal, neighborNormal)) * depthIndicator * normalIndicator;\n\n\t\t\t\t}\n\n\t\t\t\tfloat normalEdgeIndicator(float depth, vec3 normal) {\n\t\t\t\t\t\n\t\t\t\t\tfloat indicator = 0.0;\n\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, -1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, 1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(-1, 0, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(1, 0, depth, normal);\n\n\t\t\t\t\treturn step(0.1, indicator);\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\t\t\tfloat depth = 0.0;\n\t\t\t\t\tvec3 normal = vec3(0.0);\n\n\t\t\t\t\tif (depthEdgeStrength > 0.0 || normalEdgeStrength > 0.0) {\n\n\t\t\t\t\t\tdepth = getDepth(0, 0);\n\t\t\t\t\t\tnormal = getNormal(0, 0);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat dei = 0.0;\n\t\t\t\t\tif (depthEdgeStrength > 0.0) \n\t\t\t\t\t\tdei = depthEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat nei = 0.0; \n\t\t\t\t\tif (normalEdgeStrength > 0.0) \n\t\t\t\t\t\tnei = normalEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat Strength = dei > 0.0 ? (1.0 - depthEdgeStrength * dei) : (1.0 + normalEdgeStrength * nei);\n\n\t\t\t\t\tgl_FragColor = texel * Strength;\n\n\t\t\t\t}\n\t\t\t\t`\n    });\n  }\n}\nfunction pixelRenderTarget(resolution, pixelFormat, useDepthTexture) {\n  const renderTarget = new WebGLRenderTarget(resolution.x, resolution.y, !useDepthTexture ? undefined : {\n    depthTexture: new DepthTexture(resolution.x, resolution.y),\n    depthBuffer: true\n  });\n  renderTarget.texture.format = pixelFormat;\n  renderTarget.texture.minFilter = NearestFilter;\n  renderTarget.texture.magFilter = NearestFilter;\n  renderTarget.texture.generateMipmaps = false;\n  renderTarget.stencilBuffer = false;\n  return renderTarget;\n}\nexport { RenderPixelatedPass };","map":{"version":3,"names":["Vector2","MeshNormalMaterial","ShaderMaterial","Vector4","WebGLRenderTarget","DepthTexture","NearestFilter","RGBAFormat","Pass","FullScreenQuad","RenderPixelatedPass","constructor","resolution","pixelSize","scene","camera","options","arguments","length","undefined","_options$normalEdgeSt","_options$depthEdgeStr","renderResolution","setSize","x","y","fsQuad","material","normalEdgeStrength","depthEdgeStrength","rgbRenderTarget","pixelRenderTarget","normalRenderTarget","normalMaterial","dispose","width","height","_this$rgbRenderTarget","_this$normalRenderTar","_this$fsQuad","set","uniforms","value","setPixelSize","render","renderer","writeBuffer","setRenderTarget","overrideMaterial_old","overrideMaterial","tDiffuse","texture","tDepth","depthTexture","tNormal","renderToScreen","clear","vertexShader","fragmentShader","pixelFormat","useDepthTexture","renderTarget","depthBuffer","format","minFilter","magFilter","generateMipmaps","stencilBuffer"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/postprocessing/RenderPixelatedPass.js"],"sourcesContent":["import { Vector2, MeshNormalMaterial, ShaderMaterial, Vector4, WebGLRenderTarget, DepthTexture, NearestFilter, RGBAFormat } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass RenderPixelatedPass extends Pass {\n  constructor(resolution, pixelSize, scene, camera, options = {}) {\n    var _options$normalEdgeSt, _options$depthEdgeStr;\n\n    super();\n    this.pixelSize = pixelSize;\n    this.resolution = new Vector2();\n    this.renderResolution = new Vector2();\n    this.setSize(resolution.x, resolution.y);\n    this.fsQuad = new FullScreenQuad(this.material());\n    this.scene = scene;\n    this.camera = camera;\n    this.normalEdgeStrength = (_options$normalEdgeSt = options.normalEdgeStrength) != null ? _options$normalEdgeSt : 0.3;\n    this.depthEdgeStrength = (_options$depthEdgeStr = options.depthEdgeStrength) != null ? _options$depthEdgeStr : 0.4;\n    this.rgbRenderTarget = pixelRenderTarget(this.renderResolution, RGBAFormat, true);\n    this.normalRenderTarget = pixelRenderTarget(this.renderResolution, RGBAFormat, false);\n    this.normalMaterial = new MeshNormalMaterial();\n  }\n\n  dispose() {\n    this.rgbRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.fsQuad.dispose();\n  }\n\n  setSize(width, height) {\n    var _this$rgbRenderTarget, _this$normalRenderTar, _this$fsQuad;\n\n    this.resolution.set(width, height);\n    this.renderResolution.set(width / this.pixelSize | 0, height / this.pixelSize | 0);\n    const {\n      x,\n      y\n    } = this.renderResolution;\n    (_this$rgbRenderTarget = this.rgbRenderTarget) === null || _this$rgbRenderTarget === void 0 ? void 0 : _this$rgbRenderTarget.setSize(x, y);\n    (_this$normalRenderTar = this.normalRenderTarget) === null || _this$normalRenderTar === void 0 ? void 0 : _this$normalRenderTar.setSize(x, y);\n    (_this$fsQuad = this.fsQuad) === null || _this$fsQuad === void 0 ? void 0 : _this$fsQuad.material.uniforms.resolution.value.set(x, y, 1 / x, 1 / y);\n  }\n\n  setPixelSize(pixelSize) {\n    this.pixelSize = pixelSize;\n    this.setSize(this.resolution.x, this.resolution.y);\n  }\n\n  render(renderer, writeBuffer) {\n    const uniforms = this.fsQuad.material.uniforms;\n    uniforms.normalEdgeStrength.value = this.normalEdgeStrength;\n    uniforms.depthEdgeStrength.value = this.depthEdgeStrength;\n    renderer.setRenderTarget(this.rgbRenderTarget);\n    renderer.render(this.scene, this.camera);\n    const overrideMaterial_old = this.scene.overrideMaterial;\n    renderer.setRenderTarget(this.normalRenderTarget);\n    this.scene.overrideMaterial = this.normalMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = overrideMaterial_old;\n    uniforms.tDiffuse.value = this.rgbRenderTarget.texture;\n    uniforms.tDepth.value = this.rgbRenderTarget.depthTexture;\n    uniforms.tNormal.value = this.normalRenderTarget.texture;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n    }\n\n    this.fsQuad.render(renderer);\n  }\n\n  material() {\n    return new ShaderMaterial({\n      uniforms: {\n        tDiffuse: {\n          value: null\n        },\n        tDepth: {\n          value: null\n        },\n        tNormal: {\n          value: null\n        },\n        resolution: {\n          value: new Vector4(this.renderResolution.x, this.renderResolution.y, 1 / this.renderResolution.x, 1 / this.renderResolution.y)\n        },\n        normalEdgeStrength: {\n          value: 0\n        },\n        depthEdgeStrength: {\n          value: 0\n        }\n      },\n      vertexShader: `\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t\t`,\n      fragmentShader: `\n\t\t\t\tuniform sampler2D tDiffuse;\n\t\t\t\tuniform sampler2D tDepth;\n\t\t\t\tuniform sampler2D tNormal;\n\t\t\t\tuniform vec4 resolution;\n\t\t\t\tuniform float normalEdgeStrength;\n\t\t\t\tuniform float depthEdgeStrength;\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tfloat getDepth(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tDepth, vUv + vec2(x, y) * resolution.zw ).r;\n\n\t\t\t\t}\n\n\t\t\t\tvec3 getNormal(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tNormal, vUv + vec2(x, y) * resolution.zw ).rgb * 2.0 - 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tfloat depthEdgeIndicator(float depth, vec3 normal) {\n\n\t\t\t\t\tfloat diff = 0.0;\n\t\t\t\t\tdiff += clamp(getDepth(1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(-1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, 1) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, -1) - depth, 0.0, 1.0);\n\t\t\t\t\treturn floor(smoothstep(0.01, 0.02, diff) * 2.) / 2.;\n\n\t\t\t\t}\n\n\t\t\t\tfloat neighborNormalEdgeIndicator(int x, int y, float depth, vec3 normal) {\n\n\t\t\t\t\tfloat depthDiff = getDepth(x, y) - depth;\n\t\t\t\t\tvec3 neighborNormal = getNormal(x, y);\n\t\t\t\t\t\n\t\t\t\t\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\n\t\t\t\t\tvec3 normalEdgeBias = vec3(1., 1., 1.); // This should probably be a parameter.\n\t\t\t\t\tfloat normalDiff = dot(normal - neighborNormal, normalEdgeBias);\n\t\t\t\t\tfloat normalIndicator = clamp(smoothstep(-.01, .01, normalDiff), 0.0, 1.0);\n\t\t\t\t\t\n\t\t\t\t\t// Only the shallower pixel should detect the normal edge.\n\t\t\t\t\tfloat depthIndicator = clamp(sign(depthDiff * .25 + .0025), 0.0, 1.0);\n\n\t\t\t\t\treturn (1.0 - dot(normal, neighborNormal)) * depthIndicator * normalIndicator;\n\n\t\t\t\t}\n\n\t\t\t\tfloat normalEdgeIndicator(float depth, vec3 normal) {\n\t\t\t\t\t\n\t\t\t\t\tfloat indicator = 0.0;\n\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, -1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, 1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(-1, 0, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(1, 0, depth, normal);\n\n\t\t\t\t\treturn step(0.1, indicator);\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\t\t\tfloat depth = 0.0;\n\t\t\t\t\tvec3 normal = vec3(0.0);\n\n\t\t\t\t\tif (depthEdgeStrength > 0.0 || normalEdgeStrength > 0.0) {\n\n\t\t\t\t\t\tdepth = getDepth(0, 0);\n\t\t\t\t\t\tnormal = getNormal(0, 0);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat dei = 0.0;\n\t\t\t\t\tif (depthEdgeStrength > 0.0) \n\t\t\t\t\t\tdei = depthEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat nei = 0.0; \n\t\t\t\t\tif (normalEdgeStrength > 0.0) \n\t\t\t\t\t\tnei = normalEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat Strength = dei > 0.0 ? (1.0 - depthEdgeStrength * dei) : (1.0 + normalEdgeStrength * nei);\n\n\t\t\t\t\tgl_FragColor = texel * Strength;\n\n\t\t\t\t}\n\t\t\t\t`\n    });\n  }\n\n}\n\nfunction pixelRenderTarget(resolution, pixelFormat, useDepthTexture) {\n  const renderTarget = new WebGLRenderTarget(resolution.x, resolution.y, !useDepthTexture ? undefined : {\n    depthTexture: new DepthTexture(resolution.x, resolution.y),\n    depthBuffer: true\n  });\n  renderTarget.texture.format = pixelFormat;\n  renderTarget.texture.minFilter = NearestFilter;\n  renderTarget.texture.magFilter = NearestFilter;\n  renderTarget.texture.generateMipmaps = false;\n  renderTarget.stencilBuffer = false;\n  return renderTarget;\n}\n\nexport { RenderPixelatedPass };\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,OAAO,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxI,SAASC,IAAI,EAAEC,cAAc,QAAQ,WAAW;AAEhD,MAAMC,mBAAmB,SAASF,IAAI,CAAC;EACrCG,WAAWA,CAACC,UAAU,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAgB;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAC5D,IAAIG,qBAAqB,EAAEC,qBAAqB;IAEhD,KAAK,EAAE;IACP,IAAI,CAACR,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACD,UAAU,GAAG,IAAIZ,OAAO,EAAE;IAC/B,IAAI,CAACsB,gBAAgB,GAAG,IAAItB,OAAO,EAAE;IACrC,IAAI,CAACuB,OAAO,CAACX,UAAU,CAACY,CAAC,EAAEZ,UAAU,CAACa,CAAC,CAAC;IACxC,IAAI,CAACC,MAAM,GAAG,IAAIjB,cAAc,CAAC,IAAI,CAACkB,QAAQ,EAAE,CAAC;IACjD,IAAI,CAACb,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACa,kBAAkB,GAAG,CAACR,qBAAqB,GAAGJ,OAAO,CAACY,kBAAkB,KAAK,IAAI,GAAGR,qBAAqB,GAAG,GAAG;IACpH,IAAI,CAACS,iBAAiB,GAAG,CAACR,qBAAqB,GAAGL,OAAO,CAACa,iBAAiB,KAAK,IAAI,GAAGR,qBAAqB,GAAG,GAAG;IAClH,IAAI,CAACS,eAAe,GAAGC,iBAAiB,CAAC,IAAI,CAACT,gBAAgB,EAAEf,UAAU,EAAE,IAAI,CAAC;IACjF,IAAI,CAACyB,kBAAkB,GAAGD,iBAAiB,CAAC,IAAI,CAACT,gBAAgB,EAAEf,UAAU,EAAE,KAAK,CAAC;IACrF,IAAI,CAAC0B,cAAc,GAAG,IAAIhC,kBAAkB,EAAE;EAChD;EAEAiC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACJ,eAAe,CAACI,OAAO,EAAE;IAC9B,IAAI,CAACF,kBAAkB,CAACE,OAAO,EAAE;IACjC,IAAI,CAACR,MAAM,CAACQ,OAAO,EAAE;EACvB;EAEAX,OAAOA,CAACY,KAAK,EAAEC,MAAM,EAAE;IACrB,IAAIC,qBAAqB,EAAEC,qBAAqB,EAAEC,YAAY;IAE9D,IAAI,CAAC3B,UAAU,CAAC4B,GAAG,CAACL,KAAK,EAAEC,MAAM,CAAC;IAClC,IAAI,CAACd,gBAAgB,CAACkB,GAAG,CAACL,KAAK,GAAG,IAAI,CAACtB,SAAS,GAAG,CAAC,EAAEuB,MAAM,GAAG,IAAI,CAACvB,SAAS,GAAG,CAAC,CAAC;IAClF,MAAM;MACJW,CAAC;MACDC;IACF,CAAC,GAAG,IAAI,CAACH,gBAAgB;IACzB,CAACe,qBAAqB,GAAG,IAAI,CAACP,eAAe,MAAM,IAAI,IAAIO,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACd,OAAO,CAACC,CAAC,EAAEC,CAAC,CAAC;IAC1I,CAACa,qBAAqB,GAAG,IAAI,CAACN,kBAAkB,MAAM,IAAI,IAAIM,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACf,OAAO,CAACC,CAAC,EAAEC,CAAC,CAAC;IAC7I,CAACc,YAAY,GAAG,IAAI,CAACb,MAAM,MAAM,IAAI,IAAIa,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACZ,QAAQ,CAACc,QAAQ,CAAC7B,UAAU,CAAC8B,KAAK,CAACF,GAAG,CAAChB,CAAC,EAAEC,CAAC,EAAE,CAAC,GAAGD,CAAC,EAAE,CAAC,GAAGC,CAAC,CAAC;EACrJ;EAEAkB,YAAYA,CAAC9B,SAAS,EAAE;IACtB,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACU,OAAO,CAAC,IAAI,CAACX,UAAU,CAACY,CAAC,EAAE,IAAI,CAACZ,UAAU,CAACa,CAAC,CAAC;EACpD;EAEAmB,MAAMA,CAACC,QAAQ,EAAEC,WAAW,EAAE;IAC5B,MAAML,QAAQ,GAAG,IAAI,CAACf,MAAM,CAACC,QAAQ,CAACc,QAAQ;IAC9CA,QAAQ,CAACb,kBAAkB,CAACc,KAAK,GAAG,IAAI,CAACd,kBAAkB;IAC3Da,QAAQ,CAACZ,iBAAiB,CAACa,KAAK,GAAG,IAAI,CAACb,iBAAiB;IACzDgB,QAAQ,CAACE,eAAe,CAAC,IAAI,CAACjB,eAAe,CAAC;IAC9Ce,QAAQ,CAACD,MAAM,CAAC,IAAI,CAAC9B,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IACxC,MAAMiC,oBAAoB,GAAG,IAAI,CAAClC,KAAK,CAACmC,gBAAgB;IACxDJ,QAAQ,CAACE,eAAe,CAAC,IAAI,CAACf,kBAAkB,CAAC;IACjD,IAAI,CAAClB,KAAK,CAACmC,gBAAgB,GAAG,IAAI,CAAChB,cAAc;IACjDY,QAAQ,CAACD,MAAM,CAAC,IAAI,CAAC9B,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IACxC,IAAI,CAACD,KAAK,CAACmC,gBAAgB,GAAGD,oBAAoB;IAClDP,QAAQ,CAACS,QAAQ,CAACR,KAAK,GAAG,IAAI,CAACZ,eAAe,CAACqB,OAAO;IACtDV,QAAQ,CAACW,MAAM,CAACV,KAAK,GAAG,IAAI,CAACZ,eAAe,CAACuB,YAAY;IACzDZ,QAAQ,CAACa,OAAO,CAACZ,KAAK,GAAG,IAAI,CAACV,kBAAkB,CAACmB,OAAO;IAExD,IAAI,IAAI,CAACI,cAAc,EAAE;MACvBV,QAAQ,CAACE,eAAe,CAAC,IAAI,CAAC;IAChC,CAAC,MAAM;MACLF,QAAQ,CAACE,eAAe,CAACD,WAAW,CAAC;MACrC,IAAI,IAAI,CAACU,KAAK,EAAEX,QAAQ,CAACW,KAAK,EAAE;IAClC;IAEA,IAAI,CAAC9B,MAAM,CAACkB,MAAM,CAACC,QAAQ,CAAC;EAC9B;EAEAlB,QAAQA,CAAA,EAAG;IACT,OAAO,IAAIzB,cAAc,CAAC;MACxBuC,QAAQ,EAAE;QACRS,QAAQ,EAAE;UACRR,KAAK,EAAE;QACT,CAAC;QACDU,MAAM,EAAE;UACNV,KAAK,EAAE;QACT,CAAC;QACDY,OAAO,EAAE;UACPZ,KAAK,EAAE;QACT,CAAC;QACD9B,UAAU,EAAE;UACV8B,KAAK,EAAE,IAAIvC,OAAO,CAAC,IAAI,CAACmB,gBAAgB,CAACE,CAAC,EAAE,IAAI,CAACF,gBAAgB,CAACG,CAAC,EAAE,CAAC,GAAG,IAAI,CAACH,gBAAgB,CAACE,CAAC,EAAE,CAAC,GAAG,IAAI,CAACF,gBAAgB,CAACG,CAAC;QAC/H,CAAC;QACDG,kBAAkB,EAAE;UAClBc,KAAK,EAAE;QACT,CAAC;QACDb,iBAAiB,EAAE;UACjBa,KAAK,EAAE;QACT;MACF,CAAC;MACDe,YAAY,EAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;MACCC,cAAc,EAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,CAAC,CAAC;EACJ;AAEF;AAEA,SAAS3B,iBAAiBA,CAACnB,UAAU,EAAE+C,WAAW,EAAEC,eAAe,EAAE;EACnE,MAAMC,YAAY,GAAG,IAAIzD,iBAAiB,CAACQ,UAAU,CAACY,CAAC,EAAEZ,UAAU,CAACa,CAAC,EAAE,CAACmC,eAAe,GAAGzC,SAAS,GAAG;IACpGkC,YAAY,EAAE,IAAIhD,YAAY,CAACO,UAAU,CAACY,CAAC,EAAEZ,UAAU,CAACa,CAAC,CAAC;IAC1DqC,WAAW,EAAE;EACf,CAAC,CAAC;EACFD,YAAY,CAACV,OAAO,CAACY,MAAM,GAAGJ,WAAW;EACzCE,YAAY,CAACV,OAAO,CAACa,SAAS,GAAG1D,aAAa;EAC9CuD,YAAY,CAACV,OAAO,CAACc,SAAS,GAAG3D,aAAa;EAC9CuD,YAAY,CAACV,OAAO,CAACe,eAAe,GAAG,KAAK;EAC5CL,YAAY,CAACM,aAAa,GAAG,KAAK;EAClC,OAAON,YAAY;AACrB;AAEA,SAASnD,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}