{"ast":null,"code":"import { BufferGeometry, Vector3, Quaternion, BufferAttribute, Raycaster } from 'three';\nvar RollerCoasterGeometry = function (curve, divisions) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var normals = [];\n  var colors = [];\n  var color1 = [1, 1, 1];\n  var color2 = [1, 1, 0];\n  var up = new Vector3(0, 1, 0);\n  var forward = new Vector3();\n  var right = new Vector3();\n  var quaternion = new Quaternion();\n  var prevQuaternion = new Quaternion();\n  prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n  var point = new Vector3();\n  var prevPoint = new Vector3();\n  prevPoint.copy(curve.getPointAt(0)); // shapes\n\n  var step = [new Vector3(-0.225, 0, 0), new Vector3(0, -0.05, 0), new Vector3(0, -0.175, 0), new Vector3(0, -0.05, 0), new Vector3(0.225, 0, 0), new Vector3(0, -0.175, 0)];\n  var PI2 = Math.PI * 2;\n  var sides = 5;\n  var tube1 = [];\n  for (let i = 0; i < sides; i++) {\n    var angle = i / sides * PI2;\n    tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\n  }\n  var sides = 6;\n  var tube2 = [];\n  for (let i = 0; i < sides; i++) {\n    var angle = i / sides * PI2;\n    tube2.push(new Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0));\n  }\n  var vector = new Vector3();\n  var normal = new Vector3();\n  function drawShape(shape, color) {\n    normal.set(0, 0, -1).applyQuaternion(quaternion);\n    for (let j = 0; j < shape.length; j++) {\n      vector.copy(shape[j]);\n      vector.applyQuaternion(quaternion);\n      vector.add(point);\n      vertices.push(vector.x, vector.y, vector.z);\n      normals.push(normal.x, normal.y, normal.z);\n      colors.push(color[0], color[1], color[2]);\n    }\n    normal.set(0, 0, 1).applyQuaternion(quaternion);\n    for (let j = shape.length - 1; j >= 0; j--) {\n      vector.copy(shape[j]);\n      vector.applyQuaternion(quaternion);\n      vector.add(point);\n      vertices.push(vector.x, vector.y, vector.z);\n      normals.push(normal.x, normal.y, normal.z);\n      colors.push(color[0], color[1], color[2]);\n    }\n  }\n  var vector1 = new Vector3();\n  var vector2 = new Vector3();\n  var vector3 = new Vector3();\n  var vector4 = new Vector3();\n  var normal1 = new Vector3();\n  var normal2 = new Vector3();\n  var normal3 = new Vector3();\n  var normal4 = new Vector3();\n  function extrudeShape(shape, offset, color) {\n    for (let j = 0, jl = shape.length; j < jl; j++) {\n      var point1 = shape[j];\n      var point2 = shape[(j + 1) % jl];\n      vector1.copy(point1).add(offset);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(point);\n      vector2.copy(point2).add(offset);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(point);\n      vector3.copy(point2).add(offset);\n      vector3.applyQuaternion(prevQuaternion);\n      vector3.add(prevPoint);\n      vector4.copy(point1).add(offset);\n      vector4.applyQuaternion(prevQuaternion);\n      vector4.add(prevPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z); //\n\n      normal1.copy(point1);\n      normal1.applyQuaternion(quaternion);\n      normal1.normalize();\n      normal2.copy(point2);\n      normal2.applyQuaternion(quaternion);\n      normal2.normalize();\n      normal3.copy(point2);\n      normal3.applyQuaternion(prevQuaternion);\n      normal3.normalize();\n      normal4.copy(point1);\n      normal4.applyQuaternion(prevQuaternion);\n      normal4.normalize();\n      normals.push(normal1.x, normal1.y, normal1.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal3.x, normal3.y, normal3.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n    }\n  }\n  var offset = new Vector3();\n  for (let i = 1; i <= divisions; i++) {\n    point.copy(curve.getPointAt(i / divisions));\n    up.set(0, 1, 0);\n    forward.subVectors(point, prevPoint).normalize();\n    right.crossVectors(up, forward).normalize();\n    up.crossVectors(forward, right);\n    var angle = Math.atan2(forward.x, forward.z);\n    quaternion.setFromAxisAngle(up, angle);\n    if (i % 2 === 0) {\n      drawShape(step, color2);\n    }\n    extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\n    extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\n    extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\n    prevPoint.copy(point);\n    prevQuaternion.copy(quaternion);\n  } // console.log( vertices.length );\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('normal', new BufferAttribute(new Float32Array(normals), 3));\n  this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 3));\n};\nRollerCoasterGeometry.prototype = Object.create(BufferGeometry.prototype);\nvar RollerCoasterLiftersGeometry = function (curve, divisions) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var normals = [];\n  var quaternion = new Quaternion();\n  var up = new Vector3(0, 1, 0);\n  var point = new Vector3();\n  var tangent = new Vector3(); // shapes\n\n  var tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)];\n  var tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)];\n  var tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)];\n  var vector1 = new Vector3();\n  var vector2 = new Vector3();\n  var vector3 = new Vector3();\n  var vector4 = new Vector3();\n  var normal1 = new Vector3();\n  var normal2 = new Vector3();\n  var normal3 = new Vector3();\n  var normal4 = new Vector3();\n  function extrudeShape(shape, fromPoint, toPoint) {\n    for (let j = 0, jl = shape.length; j < jl; j++) {\n      var point1 = shape[j];\n      var point2 = shape[(j + 1) % jl];\n      vector1.copy(point1);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(fromPoint);\n      vector2.copy(point2);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(fromPoint);\n      vector3.copy(point2);\n      vector3.applyQuaternion(quaternion);\n      vector3.add(toPoint);\n      vector4.copy(point1);\n      vector4.applyQuaternion(quaternion);\n      vector4.add(toPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z); //\n\n      normal1.copy(point1);\n      normal1.applyQuaternion(quaternion);\n      normal1.normalize();\n      normal2.copy(point2);\n      normal2.applyQuaternion(quaternion);\n      normal2.normalize();\n      normal3.copy(point2);\n      normal3.applyQuaternion(quaternion);\n      normal3.normalize();\n      normal4.copy(point1);\n      normal4.applyQuaternion(quaternion);\n      normal4.normalize();\n      normals.push(normal1.x, normal1.y, normal1.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal3.x, normal3.y, normal3.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n    }\n  }\n  var fromPoint = new Vector3();\n  var toPoint = new Vector3();\n  for (let i = 1; i <= divisions; i++) {\n    point.copy(curve.getPointAt(i / divisions));\n    tangent.copy(curve.getTangentAt(i / divisions));\n    var angle = Math.atan2(tangent.x, tangent.z);\n    quaternion.setFromAxisAngle(up, angle); //\n\n    if (point.y > 10) {\n      fromPoint.set(-0.75, -0.35, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0.75, -0.35, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube1, fromPoint, toPoint);\n      fromPoint.set(-0.7, -0.3, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(-0.7, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube2, fromPoint, toPoint);\n      fromPoint.set(0.7, -0.3, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0.7, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube3, fromPoint, toPoint);\n    } else {\n      fromPoint.set(0, -0.2, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube3, fromPoint, toPoint);\n    }\n  }\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('normal', new BufferAttribute(new Float32Array(normals), 3));\n};\nRollerCoasterLiftersGeometry.prototype = Object.create(BufferGeometry.prototype);\nvar RollerCoasterShadowGeometry = function (curve, divisions) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var up = new Vector3(0, 1, 0);\n  var forward = new Vector3();\n  var quaternion = new Quaternion();\n  var prevQuaternion = new Quaternion();\n  prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n  var point = new Vector3();\n  var prevPoint = new Vector3();\n  prevPoint.copy(curve.getPointAt(0));\n  prevPoint.y = 0;\n  var vector1 = new Vector3();\n  var vector2 = new Vector3();\n  var vector3 = new Vector3();\n  var vector4 = new Vector3();\n  for (let i = 1; i <= divisions; i++) {\n    point.copy(curve.getPointAt(i / divisions));\n    point.y = 0;\n    forward.subVectors(point, prevPoint);\n    var angle = Math.atan2(forward.x, forward.z);\n    quaternion.setFromAxisAngle(up, angle);\n    vector1.set(-0.3, 0, 0);\n    vector1.applyQuaternion(quaternion);\n    vector1.add(point);\n    vector2.set(0.3, 0, 0);\n    vector2.applyQuaternion(quaternion);\n    vector2.add(point);\n    vector3.set(0.3, 0, 0);\n    vector3.applyQuaternion(prevQuaternion);\n    vector3.add(prevPoint);\n    vector4.set(-0.3, 0, 0);\n    vector4.applyQuaternion(prevQuaternion);\n    vector4.add(prevPoint);\n    vertices.push(vector1.x, vector1.y, vector1.z);\n    vertices.push(vector2.x, vector2.y, vector2.z);\n    vertices.push(vector4.x, vector4.y, vector4.z);\n    vertices.push(vector2.x, vector2.y, vector2.z);\n    vertices.push(vector3.x, vector3.y, vector3.z);\n    vertices.push(vector4.x, vector4.y, vector4.z);\n    prevPoint.copy(point);\n    prevQuaternion.copy(quaternion);\n  }\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n};\nRollerCoasterShadowGeometry.prototype = Object.create(BufferGeometry.prototype);\nvar SkyGeometry = function () {\n  BufferGeometry.call(this);\n  var vertices = [];\n  for (let i = 0; i < 100; i++) {\n    var x = Math.random() * 800 - 400;\n    var y = Math.random() * 50 + 50;\n    var z = Math.random() * 800 - 400;\n    var size = Math.random() * 40 + 20;\n    vertices.push(x - size, y, z - size);\n    vertices.push(x + size, y, z - size);\n    vertices.push(x - size, y, z + size);\n    vertices.push(x + size, y, z - size);\n    vertices.push(x + size, y, z + size);\n    vertices.push(x - size, y, z + size);\n  }\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n};\nSkyGeometry.prototype = Object.create(BufferGeometry.prototype);\nvar TreesGeometry = function (landscape) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var colors = [];\n  var raycaster = new Raycaster();\n  raycaster.ray.direction.set(0, -1, 0);\n  for (let i = 0; i < 2000; i++) {\n    var x = Math.random() * 500 - 250;\n    var z = Math.random() * 500 - 250;\n    raycaster.ray.origin.set(x, 50, z);\n    var intersections = raycaster.intersectObject(landscape);\n    if (intersections.length === 0) continue;\n    var y = intersections[0].point.y;\n    var height = Math.random() * 5 + 0.5;\n    var angle = Math.random() * Math.PI * 2;\n    vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n    vertices.push(x, y + height, z);\n    vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n    angle += Math.PI / 2;\n    vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n    vertices.push(x, y + height, z);\n    vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n    var random = Math.random() * 0.1;\n    for (let j = 0; j < 6; j++) {\n      colors.push(0.2 + random, 0.4 + random, 0);\n    }\n  }\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 3));\n};\nTreesGeometry.prototype = Object.create(BufferGeometry.prototype);\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry };","map":{"version":3,"names":["BufferGeometry","Vector3","Quaternion","BufferAttribute","Raycaster","RollerCoasterGeometry","curve","divisions","call","vertices","normals","colors","color1","color2","up","forward","right","quaternion","prevQuaternion","setFromAxisAngle","Math","PI","point","prevPoint","copy","getPointAt","step","PI2","sides","tube1","i","angle","push","sin","cos","tube2","vector","normal","drawShape","shape","color","set","applyQuaternion","j","length","add","x","y","z","vector1","vector2","vector3","vector4","normal1","normal2","normal3","normal4","extrudeShape","offset","jl","point1","point2","normalize","subVectors","crossVectors","atan2","setAttribute","Float32Array","prototype","Object","create","RollerCoasterLiftersGeometry","tangent","tube3","fromPoint","toPoint","getTangentAt","RollerCoasterShadowGeometry","SkyGeometry","random","size","TreesGeometry","landscape","raycaster","ray","direction","origin","intersections","intersectObject","height"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/misc/RollerCoaster.js"],"sourcesContent":["import { BufferGeometry, Vector3, Quaternion, BufferAttribute, Raycaster } from 'three';\n\nvar RollerCoasterGeometry = function (curve, divisions) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var normals = [];\n  var colors = [];\n  var color1 = [1, 1, 1];\n  var color2 = [1, 1, 0];\n  var up = new Vector3(0, 1, 0);\n  var forward = new Vector3();\n  var right = new Vector3();\n  var quaternion = new Quaternion();\n  var prevQuaternion = new Quaternion();\n  prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n  var point = new Vector3();\n  var prevPoint = new Vector3();\n  prevPoint.copy(curve.getPointAt(0)); // shapes\n\n  var step = [new Vector3(-0.225, 0, 0), new Vector3(0, -0.05, 0), new Vector3(0, -0.175, 0), new Vector3(0, -0.05, 0), new Vector3(0.225, 0, 0), new Vector3(0, -0.175, 0)];\n  var PI2 = Math.PI * 2;\n  var sides = 5;\n  var tube1 = [];\n\n  for (let i = 0; i < sides; i++) {\n    var angle = i / sides * PI2;\n    tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\n  }\n\n  var sides = 6;\n  var tube2 = [];\n\n  for (let i = 0; i < sides; i++) {\n    var angle = i / sides * PI2;\n    tube2.push(new Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0));\n  }\n\n  var vector = new Vector3();\n  var normal = new Vector3();\n\n  function drawShape(shape, color) {\n    normal.set(0, 0, -1).applyQuaternion(quaternion);\n\n    for (let j = 0; j < shape.length; j++) {\n      vector.copy(shape[j]);\n      vector.applyQuaternion(quaternion);\n      vector.add(point);\n      vertices.push(vector.x, vector.y, vector.z);\n      normals.push(normal.x, normal.y, normal.z);\n      colors.push(color[0], color[1], color[2]);\n    }\n\n    normal.set(0, 0, 1).applyQuaternion(quaternion);\n\n    for (let j = shape.length - 1; j >= 0; j--) {\n      vector.copy(shape[j]);\n      vector.applyQuaternion(quaternion);\n      vector.add(point);\n      vertices.push(vector.x, vector.y, vector.z);\n      normals.push(normal.x, normal.y, normal.z);\n      colors.push(color[0], color[1], color[2]);\n    }\n  }\n\n  var vector1 = new Vector3();\n  var vector2 = new Vector3();\n  var vector3 = new Vector3();\n  var vector4 = new Vector3();\n  var normal1 = new Vector3();\n  var normal2 = new Vector3();\n  var normal3 = new Vector3();\n  var normal4 = new Vector3();\n\n  function extrudeShape(shape, offset, color) {\n    for (let j = 0, jl = shape.length; j < jl; j++) {\n      var point1 = shape[j];\n      var point2 = shape[(j + 1) % jl];\n      vector1.copy(point1).add(offset);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(point);\n      vector2.copy(point2).add(offset);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(point);\n      vector3.copy(point2).add(offset);\n      vector3.applyQuaternion(prevQuaternion);\n      vector3.add(prevPoint);\n      vector4.copy(point1).add(offset);\n      vector4.applyQuaternion(prevQuaternion);\n      vector4.add(prevPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z); //\n\n      normal1.copy(point1);\n      normal1.applyQuaternion(quaternion);\n      normal1.normalize();\n      normal2.copy(point2);\n      normal2.applyQuaternion(quaternion);\n      normal2.normalize();\n      normal3.copy(point2);\n      normal3.applyQuaternion(prevQuaternion);\n      normal3.normalize();\n      normal4.copy(point1);\n      normal4.applyQuaternion(prevQuaternion);\n      normal4.normalize();\n      normals.push(normal1.x, normal1.y, normal1.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal3.x, normal3.y, normal3.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n    }\n  }\n\n  var offset = new Vector3();\n\n  for (let i = 1; i <= divisions; i++) {\n    point.copy(curve.getPointAt(i / divisions));\n    up.set(0, 1, 0);\n    forward.subVectors(point, prevPoint).normalize();\n    right.crossVectors(up, forward).normalize();\n    up.crossVectors(forward, right);\n    var angle = Math.atan2(forward.x, forward.z);\n    quaternion.setFromAxisAngle(up, angle);\n\n    if (i % 2 === 0) {\n      drawShape(step, color2);\n    }\n\n    extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\n    extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\n    extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\n    prevPoint.copy(point);\n    prevQuaternion.copy(quaternion);\n  } // console.log( vertices.length );\n\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('normal', new BufferAttribute(new Float32Array(normals), 3));\n  this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 3));\n};\n\nRollerCoasterGeometry.prototype = Object.create(BufferGeometry.prototype);\n\nvar RollerCoasterLiftersGeometry = function (curve, divisions) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var normals = [];\n  var quaternion = new Quaternion();\n  var up = new Vector3(0, 1, 0);\n  var point = new Vector3();\n  var tangent = new Vector3(); // shapes\n\n  var tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)];\n  var tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)];\n  var tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)];\n  var vector1 = new Vector3();\n  var vector2 = new Vector3();\n  var vector3 = new Vector3();\n  var vector4 = new Vector3();\n  var normal1 = new Vector3();\n  var normal2 = new Vector3();\n  var normal3 = new Vector3();\n  var normal4 = new Vector3();\n\n  function extrudeShape(shape, fromPoint, toPoint) {\n    for (let j = 0, jl = shape.length; j < jl; j++) {\n      var point1 = shape[j];\n      var point2 = shape[(j + 1) % jl];\n      vector1.copy(point1);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(fromPoint);\n      vector2.copy(point2);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(fromPoint);\n      vector3.copy(point2);\n      vector3.applyQuaternion(quaternion);\n      vector3.add(toPoint);\n      vector4.copy(point1);\n      vector4.applyQuaternion(quaternion);\n      vector4.add(toPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z); //\n\n      normal1.copy(point1);\n      normal1.applyQuaternion(quaternion);\n      normal1.normalize();\n      normal2.copy(point2);\n      normal2.applyQuaternion(quaternion);\n      normal2.normalize();\n      normal3.copy(point2);\n      normal3.applyQuaternion(quaternion);\n      normal3.normalize();\n      normal4.copy(point1);\n      normal4.applyQuaternion(quaternion);\n      normal4.normalize();\n      normals.push(normal1.x, normal1.y, normal1.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal3.x, normal3.y, normal3.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n    }\n  }\n\n  var fromPoint = new Vector3();\n  var toPoint = new Vector3();\n\n  for (let i = 1; i <= divisions; i++) {\n    point.copy(curve.getPointAt(i / divisions));\n    tangent.copy(curve.getTangentAt(i / divisions));\n    var angle = Math.atan2(tangent.x, tangent.z);\n    quaternion.setFromAxisAngle(up, angle); //\n\n    if (point.y > 10) {\n      fromPoint.set(-0.75, -0.35, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0.75, -0.35, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube1, fromPoint, toPoint);\n      fromPoint.set(-0.7, -0.3, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(-0.7, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube2, fromPoint, toPoint);\n      fromPoint.set(0.7, -0.3, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0.7, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube3, fromPoint, toPoint);\n    } else {\n      fromPoint.set(0, -0.2, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube3, fromPoint, toPoint);\n    }\n  }\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('normal', new BufferAttribute(new Float32Array(normals), 3));\n};\n\nRollerCoasterLiftersGeometry.prototype = Object.create(BufferGeometry.prototype);\n\nvar RollerCoasterShadowGeometry = function (curve, divisions) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var up = new Vector3(0, 1, 0);\n  var forward = new Vector3();\n  var quaternion = new Quaternion();\n  var prevQuaternion = new Quaternion();\n  prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n  var point = new Vector3();\n  var prevPoint = new Vector3();\n  prevPoint.copy(curve.getPointAt(0));\n  prevPoint.y = 0;\n  var vector1 = new Vector3();\n  var vector2 = new Vector3();\n  var vector3 = new Vector3();\n  var vector4 = new Vector3();\n\n  for (let i = 1; i <= divisions; i++) {\n    point.copy(curve.getPointAt(i / divisions));\n    point.y = 0;\n    forward.subVectors(point, prevPoint);\n    var angle = Math.atan2(forward.x, forward.z);\n    quaternion.setFromAxisAngle(up, angle);\n    vector1.set(-0.3, 0, 0);\n    vector1.applyQuaternion(quaternion);\n    vector1.add(point);\n    vector2.set(0.3, 0, 0);\n    vector2.applyQuaternion(quaternion);\n    vector2.add(point);\n    vector3.set(0.3, 0, 0);\n    vector3.applyQuaternion(prevQuaternion);\n    vector3.add(prevPoint);\n    vector4.set(-0.3, 0, 0);\n    vector4.applyQuaternion(prevQuaternion);\n    vector4.add(prevPoint);\n    vertices.push(vector1.x, vector1.y, vector1.z);\n    vertices.push(vector2.x, vector2.y, vector2.z);\n    vertices.push(vector4.x, vector4.y, vector4.z);\n    vertices.push(vector2.x, vector2.y, vector2.z);\n    vertices.push(vector3.x, vector3.y, vector3.z);\n    vertices.push(vector4.x, vector4.y, vector4.z);\n    prevPoint.copy(point);\n    prevQuaternion.copy(quaternion);\n  }\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n};\n\nRollerCoasterShadowGeometry.prototype = Object.create(BufferGeometry.prototype);\n\nvar SkyGeometry = function () {\n  BufferGeometry.call(this);\n  var vertices = [];\n\n  for (let i = 0; i < 100; i++) {\n    var x = Math.random() * 800 - 400;\n    var y = Math.random() * 50 + 50;\n    var z = Math.random() * 800 - 400;\n    var size = Math.random() * 40 + 20;\n    vertices.push(x - size, y, z - size);\n    vertices.push(x + size, y, z - size);\n    vertices.push(x - size, y, z + size);\n    vertices.push(x + size, y, z - size);\n    vertices.push(x + size, y, z + size);\n    vertices.push(x - size, y, z + size);\n  }\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n};\n\nSkyGeometry.prototype = Object.create(BufferGeometry.prototype);\n\nvar TreesGeometry = function (landscape) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var colors = [];\n  var raycaster = new Raycaster();\n  raycaster.ray.direction.set(0, -1, 0);\n\n  for (let i = 0; i < 2000; i++) {\n    var x = Math.random() * 500 - 250;\n    var z = Math.random() * 500 - 250;\n    raycaster.ray.origin.set(x, 50, z);\n    var intersections = raycaster.intersectObject(landscape);\n    if (intersections.length === 0) continue;\n    var y = intersections[0].point.y;\n    var height = Math.random() * 5 + 0.5;\n    var angle = Math.random() * Math.PI * 2;\n    vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n    vertices.push(x, y + height, z);\n    vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n    angle += Math.PI / 2;\n    vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n    vertices.push(x, y + height, z);\n    vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n    var random = Math.random() * 0.1;\n\n    for (let j = 0; j < 6; j++) {\n      colors.push(0.2 + random, 0.4 + random, 0);\n    }\n  }\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 3));\n};\n\nTreesGeometry.prototype = Object.create(BufferGeometry.prototype);\n\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}