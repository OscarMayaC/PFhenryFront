{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute } from 'three';\nimport { ConvexHull } from '../math/ConvexHull.js';\nclass ConvexGeometry extends BufferGeometry {\n  constructor() {\n    let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    super(); // buffers\n\n    const vertices = [];\n    const normals = [];\n    if (ConvexHull === undefined) {\n      console.error('THREE.ConvexGeometry: ConvexGeometry relies on ConvexHull');\n    }\n    const convexHull = new ConvexHull().setFromPoints(points); // generate vertices and normals\n\n    const faces = convexHull.faces;\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      let edge = face.edge; // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n      do {\n        const point = edge.head().point;\n        vertices.push(point.x, point.y, point.z);\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\n        edge = edge.next;\n      } while (edge !== face.edge);\n    } // build geometry\n\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  }\n}\nexport { ConvexGeometry };","map":{"version":3,"names":["BufferGeometry","Float32BufferAttribute","ConvexHull","ConvexGeometry","constructor","points","arguments","length","undefined","vertices","normals","console","error","convexHull","setFromPoints","faces","i","face","edge","point","head","push","x","y","z","normal","next","setAttribute"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/geometries/ConvexGeometry.js"],"sourcesContent":["import { BufferGeometry, Float32BufferAttribute } from 'three';\nimport { ConvexHull } from '../math/ConvexHull.js';\n\nclass ConvexGeometry extends BufferGeometry {\n  constructor(points = []) {\n    super(); // buffers\n\n    const vertices = [];\n    const normals = [];\n\n    if (ConvexHull === undefined) {\n      console.error('THREE.ConvexGeometry: ConvexGeometry relies on ConvexHull');\n    }\n\n    const convexHull = new ConvexHull().setFromPoints(points); // generate vertices and normals\n\n    const faces = convexHull.faces;\n\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      let edge = face.edge; // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n      do {\n        const point = edge.head().point;\n        vertices.push(point.x, point.y, point.z);\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\n        edge = edge.next;\n      } while (edge !== face.edge);\n    } // build geometry\n\n\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  }\n\n}\n\nexport { ConvexGeometry };\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,sBAAsB,QAAQ,OAAO;AAC9D,SAASC,UAAU,QAAQ,uBAAuB;AAElD,MAAMC,cAAc,SAASH,cAAc,CAAC;EAC1CI,WAAWA,CAAA,EAAc;IAAA,IAAbC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IACrB,KAAK,EAAE,CAAC,CAAC;;IAET,MAAMG,QAAQ,GAAG,EAAE;IACnB,MAAMC,OAAO,GAAG,EAAE;IAElB,IAAIR,UAAU,KAAKM,SAAS,EAAE;MAC5BG,OAAO,CAACC,KAAK,CAAC,2DAA2D,CAAC;IAC5E;IAEA,MAAMC,UAAU,GAAG,IAAIX,UAAU,EAAE,CAACY,aAAa,CAACT,MAAM,CAAC,CAAC,CAAC;;IAE3D,MAAMU,KAAK,GAAGF,UAAU,CAACE,KAAK;IAE9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACR,MAAM,EAAES,CAAC,EAAE,EAAE;MACrC,MAAMC,IAAI,GAAGF,KAAK,CAACC,CAAC,CAAC;MACrB,IAAIE,IAAI,GAAGD,IAAI,CAACC,IAAI,CAAC,CAAC;;MAEtB,GAAG;QACD,MAAMC,KAAK,GAAGD,IAAI,CAACE,IAAI,EAAE,CAACD,KAAK;QAC/BV,QAAQ,CAACY,IAAI,CAACF,KAAK,CAACG,CAAC,EAAEH,KAAK,CAACI,CAAC,EAAEJ,KAAK,CAACK,CAAC,CAAC;QACxCd,OAAO,CAACW,IAAI,CAACJ,IAAI,CAACQ,MAAM,CAACH,CAAC,EAAEL,IAAI,CAACQ,MAAM,CAACF,CAAC,EAAEN,IAAI,CAACQ,MAAM,CAACD,CAAC,CAAC;QACzDN,IAAI,GAAGA,IAAI,CAACQ,IAAI;MAClB,CAAC,QAAQR,IAAI,KAAKD,IAAI,CAACC,IAAI;IAC7B,CAAC,CAAC;;IAGF,IAAI,CAACS,YAAY,CAAC,UAAU,EAAE,IAAI1B,sBAAsB,CAACQ,QAAQ,EAAE,CAAC,CAAC,CAAC;IACtE,IAAI,CAACkB,YAAY,CAAC,QAAQ,EAAE,IAAI1B,sBAAsB,CAACS,OAAO,EAAE,CAAC,CAAC,CAAC;EACrE;AAEF;AAEA,SAASP,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}