import _createClass from "@babel/runtime/helpers/esm/createClass";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import BaseAdapterDateFnsJalali from '@date-io/date-fns-jalali';
import defaultLocale from 'date-fns-jalali/locale/fa-IR';
import getWeek from 'date-fns-jalali/getWeek';
// @ts-ignore
import longFormatters from 'date-fns-jalali/_lib/format/longFormatters';
var formatTokenMap = {
  // Year
  y: 'year',
  yy: 'year',
  yyy: 'year',
  yyyy: 'year',
  // Month
  M: 'month',
  MM: 'month',
  MMMM: {
    sectionType: 'month',
    contentType: 'letter'
  },
  MMM: {
    sectionType: 'month',
    contentType: 'letter'
  },
  LLL: {
    sectionType: 'month',
    contentType: 'letter'
  },
  LLLL: {
    sectionType: 'month',
    contentType: 'letter'
  },
  // Day of the month
  d: 'day',
  dd: 'day',
  // Meridiem
  a: 'meridiem',
  aa: 'meridiem',
  aaa: 'meridiem',
  // Hours
  H: 'hours',
  HH: 'hours',
  h: 'hours',
  hh: 'hours',
  // Minutes
  mm: 'minutes',
  // Seconds
  ss: 'seconds'
};
export var AdapterDateFnsJalali = /*#__PURE__*/function (_BaseAdapterDateFnsJa) {
  _inherits(AdapterDateFnsJalali, _BaseAdapterDateFnsJa);
  var _super = _createSuper(AdapterDateFnsJalali);
  function AdapterDateFnsJalali() {
    var _this;
    _classCallCheck(this, AdapterDateFnsJalali);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.isMUIAdapter = true;
    _this.formatTokenMap = formatTokenMap;
    _this.escapedCharacters = {
      start: "'",
      end: "'"
    };
    _this.expandFormat = function (format) {
      var _this$locale;
      // @see https://github.com/date-fns/date-fns/blob/master/src/format/index.js#L31
      var longFormatRegexp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
      var locale = (_this$locale = _this.locale) != null ? _this$locale : defaultLocale;
      return format.match(longFormatRegexp).map(function (token) {
        var firstCharacter = token[0];
        if (firstCharacter === 'p' || firstCharacter === 'P') {
          var longFormatter = longFormatters[firstCharacter];
          return longFormatter(token, locale.formatLong, {});
        }
        return token;
      }).join('');
    };
    // Redefined here just to show how it can be written using expandFormat
    _this.getFormatHelperText = function (format) {
      return _this.expandFormat(format).replace(/(aaa|aa|a)/g, '(a|p)m').toLocaleLowerCase();
    };
    _this.getWeekNumber = function (date) {
      return getWeek(date, {
        locale: _this.locale
      });
    };
    return _this;
  }
  return _createClass(AdapterDateFnsJalali);
}(BaseAdapterDateFnsJalali);