{"ast":null,"code":"import { PerspectiveCamera, ShaderMaterial, Scene, OrthographicCamera, WebGLRenderTarget, UniformsUtils, Mesh, PlaneGeometry } from 'three';\nimport { BokehDepthShader, BokehShader2 } from '../shaders/BokehShader2.js';\nclass CinematicCamera extends PerspectiveCamera {\n  constructor(fov, aspect, near, far) {\n    super(fov, aspect, near, far);\n    this.type = 'CinematicCamera';\n    this.postprocessing = {\n      enabled: true\n    };\n    this.shaderSettings = {\n      rings: 3,\n      samples: 4\n    };\n    const depthShader = BokehDepthShader;\n    this.materialDepth = new ShaderMaterial({\n      uniforms: depthShader.uniforms,\n      vertexShader: depthShader.vertexShader,\n      fragmentShader: depthShader.fragmentShader\n    });\n    this.materialDepth.uniforms['mNear'].value = near;\n    this.materialDepth.uniforms['mFar'].value = far; // In case of cinematicCamera, having a default lens set is important\n\n    this.setLens();\n    this.initPostProcessing();\n  } // providing fnumber and coc(Circle of Confusion) as extra arguments\n\n  setLens(focalLength, filmGauge, fNumber, coc) {\n    // In case of cinematicCamera, having a default lens set is important\n    if (focalLength === undefined) focalLength = 35;\n    if (filmGauge !== undefined) this.filmGauge = filmGauge;\n    this.setFocalLength(focalLength); // if fnumber and coc are not provided, cinematicCamera tries to act as a basic PerspectiveCamera\n\n    if (fNumber === undefined) fNumber = 8;\n    if (coc === undefined) coc = 0.019;\n    this.fNumber = fNumber;\n    this.coc = coc; // fNumber is focalLength by aperture\n\n    this.aperture = focalLength / this.fNumber; // hyperFocal is required to calculate depthOfField when a lens tries to focus at a distance with given fNumber and focalLength\n\n    this.hyperFocal = focalLength * focalLength / (this.aperture * this.coc);\n  }\n  linearize(depth) {\n    const zfar = this.far;\n    const znear = this.near;\n    return -zfar * znear / (depth * (zfar - znear) - zfar);\n  }\n  smoothstep(near, far, depth) {\n    const x = this.saturate((depth - near) / (far - near));\n    return x * x * (3 - 2 * x);\n  }\n  saturate(x) {\n    return Math.max(0, Math.min(1, x));\n  } // function for focusing at a distance from the camera\n\n  focusAt(focusDistance) {\n    if (focusDistance === undefined) focusDistance = 20;\n    const focalLength = this.getFocalLength(); // distance from the camera (normal to frustrum) to focus on\n\n    this.focus = focusDistance; // the nearest point from the camera which is in focus (unused)\n\n    this.nearPoint = this.hyperFocal * this.focus / (this.hyperFocal + (this.focus - focalLength)); // the farthest point from the camera which is in focus (unused)\n\n    this.farPoint = this.hyperFocal * this.focus / (this.hyperFocal - (this.focus - focalLength)); // the gap or width of the space in which is everything is in focus (unused)\n\n    this.depthOfField = this.farPoint - this.nearPoint; // Considering minimum distance of focus for a standard lens (unused)\n\n    if (this.depthOfField < 0) this.depthOfField = 0;\n    this.sdistance = this.smoothstep(this.near, this.far, this.focus);\n    this.ldistance = this.linearize(1 - this.sdistance);\n    this.postprocessing.bokeh_uniforms['focalDepth'].value = this.ldistance;\n  }\n  initPostProcessing() {\n    if (this.postprocessing.enabled) {\n      this.postprocessing.scene = new Scene();\n      this.postprocessing.camera = new OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, -10000, 10000);\n      this.postprocessing.scene.add(this.postprocessing.camera);\n      this.postprocessing.rtTextureDepth = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      this.postprocessing.rtTextureColor = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      const bokeh_shader = BokehShader2;\n      this.postprocessing.bokeh_uniforms = UniformsUtils.clone(bokeh_shader.uniforms);\n      this.postprocessing.bokeh_uniforms['tColor'].value = this.postprocessing.rtTextureColor.texture;\n      this.postprocessing.bokeh_uniforms['tDepth'].value = this.postprocessing.rtTextureDepth.texture;\n      this.postprocessing.bokeh_uniforms['manualdof'].value = 0;\n      this.postprocessing.bokeh_uniforms['shaderFocus'].value = 0;\n      this.postprocessing.bokeh_uniforms['fstop'].value = 2.8;\n      this.postprocessing.bokeh_uniforms['showFocus'].value = 1;\n      this.postprocessing.bokeh_uniforms['focalDepth'].value = 0.1; //console.log( this.postprocessing.bokeh_uniforms[ \"focalDepth\" ].value );\n\n      this.postprocessing.bokeh_uniforms['znear'].value = this.near;\n      this.postprocessing.bokeh_uniforms['zfar'].value = this.near;\n      this.postprocessing.bokeh_uniforms['textureWidth'].value = window.innerWidth;\n      this.postprocessing.bokeh_uniforms['textureHeight'].value = window.innerHeight;\n      this.postprocessing.materialBokeh = new ShaderMaterial({\n        uniforms: this.postprocessing.bokeh_uniforms,\n        vertexShader: bokeh_shader.vertexShader,\n        fragmentShader: bokeh_shader.fragmentShader,\n        defines: {\n          RINGS: this.shaderSettings.rings,\n          SAMPLES: this.shaderSettings.samples,\n          DEPTH_PACKING: 1\n        }\n      });\n      this.postprocessing.quad = new Mesh(new PlaneGeometry(window.innerWidth, window.innerHeight), this.postprocessing.materialBokeh);\n      this.postprocessing.quad.position.z = -500;\n      this.postprocessing.scene.add(this.postprocessing.quad);\n    }\n  }\n  renderCinematic(scene, renderer) {\n    if (this.postprocessing.enabled) {\n      const currentRenderTarget = renderer.getRenderTarget();\n      renderer.clear(); // Render scene into texture\n\n      scene.overrideMaterial = null;\n      renderer.setRenderTarget(this.postprocessing.rtTextureColor);\n      renderer.clear();\n      renderer.render(scene, this); // Render depth into texture\n\n      scene.overrideMaterial = this.materialDepth;\n      renderer.setRenderTarget(this.postprocessing.rtTextureDepth);\n      renderer.clear();\n      renderer.render(scene, this); // Render bokeh composite\n\n      renderer.setRenderTarget(null);\n      renderer.render(this.postprocessing.scene, this.postprocessing.camera);\n      renderer.setRenderTarget(currentRenderTarget);\n    }\n  }\n}\nexport { CinematicCamera };","map":{"version":3,"names":["PerspectiveCamera","ShaderMaterial","Scene","OrthographicCamera","WebGLRenderTarget","UniformsUtils","Mesh","PlaneGeometry","BokehDepthShader","BokehShader2","CinematicCamera","constructor","fov","aspect","near","far","type","postprocessing","enabled","shaderSettings","rings","samples","depthShader","materialDepth","uniforms","vertexShader","fragmentShader","value","setLens","initPostProcessing","focalLength","filmGauge","fNumber","coc","undefined","setFocalLength","aperture","hyperFocal","linearize","depth","zfar","znear","smoothstep","x","saturate","Math","max","min","focusAt","focusDistance","getFocalLength","focus","nearPoint","farPoint","depthOfField","sdistance","ldistance","bokeh_uniforms","scene","camera","window","innerWidth","innerHeight","add","rtTextureDepth","rtTextureColor","bokeh_shader","clone","texture","materialBokeh","defines","RINGS","SAMPLES","DEPTH_PACKING","quad","position","z","renderCinematic","renderer","currentRenderTarget","getRenderTarget","clear","overrideMaterial","setRenderTarget","render"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/cameras/CinematicCamera.js"],"sourcesContent":["import { PerspectiveCamera, ShaderMaterial, Scene, OrthographicCamera, WebGLRenderTarget, UniformsUtils, Mesh, PlaneGeometry } from 'three';\nimport { BokehDepthShader, BokehShader2 } from '../shaders/BokehShader2.js';\n\nclass CinematicCamera extends PerspectiveCamera {\n  constructor(fov, aspect, near, far) {\n    super(fov, aspect, near, far);\n    this.type = 'CinematicCamera';\n    this.postprocessing = {\n      enabled: true\n    };\n    this.shaderSettings = {\n      rings: 3,\n      samples: 4\n    };\n    const depthShader = BokehDepthShader;\n    this.materialDepth = new ShaderMaterial({\n      uniforms: depthShader.uniforms,\n      vertexShader: depthShader.vertexShader,\n      fragmentShader: depthShader.fragmentShader\n    });\n    this.materialDepth.uniforms['mNear'].value = near;\n    this.materialDepth.uniforms['mFar'].value = far; // In case of cinematicCamera, having a default lens set is important\n\n    this.setLens();\n    this.initPostProcessing();\n  } // providing fnumber and coc(Circle of Confusion) as extra arguments\n\n\n  setLens(focalLength, filmGauge, fNumber, coc) {\n    // In case of cinematicCamera, having a default lens set is important\n    if (focalLength === undefined) focalLength = 35;\n    if (filmGauge !== undefined) this.filmGauge = filmGauge;\n    this.setFocalLength(focalLength); // if fnumber and coc are not provided, cinematicCamera tries to act as a basic PerspectiveCamera\n\n    if (fNumber === undefined) fNumber = 8;\n    if (coc === undefined) coc = 0.019;\n    this.fNumber = fNumber;\n    this.coc = coc; // fNumber is focalLength by aperture\n\n    this.aperture = focalLength / this.fNumber; // hyperFocal is required to calculate depthOfField when a lens tries to focus at a distance with given fNumber and focalLength\n\n    this.hyperFocal = focalLength * focalLength / (this.aperture * this.coc);\n  }\n\n  linearize(depth) {\n    const zfar = this.far;\n    const znear = this.near;\n    return -zfar * znear / (depth * (zfar - znear) - zfar);\n  }\n\n  smoothstep(near, far, depth) {\n    const x = this.saturate((depth - near) / (far - near));\n    return x * x * (3 - 2 * x);\n  }\n\n  saturate(x) {\n    return Math.max(0, Math.min(1, x));\n  } // function for focusing at a distance from the camera\n\n\n  focusAt(focusDistance) {\n    if (focusDistance === undefined) focusDistance = 20;\n    const focalLength = this.getFocalLength(); // distance from the camera (normal to frustrum) to focus on\n\n    this.focus = focusDistance; // the nearest point from the camera which is in focus (unused)\n\n    this.nearPoint = this.hyperFocal * this.focus / (this.hyperFocal + (this.focus - focalLength)); // the farthest point from the camera which is in focus (unused)\n\n    this.farPoint = this.hyperFocal * this.focus / (this.hyperFocal - (this.focus - focalLength)); // the gap or width of the space in which is everything is in focus (unused)\n\n    this.depthOfField = this.farPoint - this.nearPoint; // Considering minimum distance of focus for a standard lens (unused)\n\n    if (this.depthOfField < 0) this.depthOfField = 0;\n    this.sdistance = this.smoothstep(this.near, this.far, this.focus);\n    this.ldistance = this.linearize(1 - this.sdistance);\n    this.postprocessing.bokeh_uniforms['focalDepth'].value = this.ldistance;\n  }\n\n  initPostProcessing() {\n    if (this.postprocessing.enabled) {\n      this.postprocessing.scene = new Scene();\n      this.postprocessing.camera = new OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, -10000, 10000);\n      this.postprocessing.scene.add(this.postprocessing.camera);\n      this.postprocessing.rtTextureDepth = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      this.postprocessing.rtTextureColor = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      const bokeh_shader = BokehShader2;\n      this.postprocessing.bokeh_uniforms = UniformsUtils.clone(bokeh_shader.uniforms);\n      this.postprocessing.bokeh_uniforms['tColor'].value = this.postprocessing.rtTextureColor.texture;\n      this.postprocessing.bokeh_uniforms['tDepth'].value = this.postprocessing.rtTextureDepth.texture;\n      this.postprocessing.bokeh_uniforms['manualdof'].value = 0;\n      this.postprocessing.bokeh_uniforms['shaderFocus'].value = 0;\n      this.postprocessing.bokeh_uniforms['fstop'].value = 2.8;\n      this.postprocessing.bokeh_uniforms['showFocus'].value = 1;\n      this.postprocessing.bokeh_uniforms['focalDepth'].value = 0.1; //console.log( this.postprocessing.bokeh_uniforms[ \"focalDepth\" ].value );\n\n      this.postprocessing.bokeh_uniforms['znear'].value = this.near;\n      this.postprocessing.bokeh_uniforms['zfar'].value = this.near;\n      this.postprocessing.bokeh_uniforms['textureWidth'].value = window.innerWidth;\n      this.postprocessing.bokeh_uniforms['textureHeight'].value = window.innerHeight;\n      this.postprocessing.materialBokeh = new ShaderMaterial({\n        uniforms: this.postprocessing.bokeh_uniforms,\n        vertexShader: bokeh_shader.vertexShader,\n        fragmentShader: bokeh_shader.fragmentShader,\n        defines: {\n          RINGS: this.shaderSettings.rings,\n          SAMPLES: this.shaderSettings.samples,\n          DEPTH_PACKING: 1\n        }\n      });\n      this.postprocessing.quad = new Mesh(new PlaneGeometry(window.innerWidth, window.innerHeight), this.postprocessing.materialBokeh);\n      this.postprocessing.quad.position.z = -500;\n      this.postprocessing.scene.add(this.postprocessing.quad);\n    }\n  }\n\n  renderCinematic(scene, renderer) {\n    if (this.postprocessing.enabled) {\n      const currentRenderTarget = renderer.getRenderTarget();\n      renderer.clear(); // Render scene into texture\n\n      scene.overrideMaterial = null;\n      renderer.setRenderTarget(this.postprocessing.rtTextureColor);\n      renderer.clear();\n      renderer.render(scene, this); // Render depth into texture\n\n      scene.overrideMaterial = this.materialDepth;\n      renderer.setRenderTarget(this.postprocessing.rtTextureDepth);\n      renderer.clear();\n      renderer.render(scene, this); // Render bokeh composite\n\n      renderer.setRenderTarget(null);\n      renderer.render(this.postprocessing.scene, this.postprocessing.camera);\n      renderer.setRenderTarget(currentRenderTarget);\n    }\n  }\n\n}\n\nexport { CinematicCamera };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}