{"ast":null,"code":"import { Object3D } from 'three';\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\nclass XRHandModel extends Object3D {\n  constructor(controller) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n}\nclass XRHandModelFactory {\n  constructor() {\n    this.path = null;\n  }\n  setPath(path) {\n    this.path = path;\n    return this;\n  }\n  createHandModel(controller, profile) {\n    const handModel = new XRHandModel(controller);\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.hand && !handModel.motionController) {\n        handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\n\n        if (profile === undefined || profile === 'spheres') {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: 'sphere'\n          });\n        } else if (profile === 'boxes') {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: 'box'\n          });\n        } else if (profile === 'mesh') {\n          handModel.motionController = new XRHandMeshModel(handModel, controller, this.path, xrInputSource.handedness);\n        }\n      }\n    });\n    controller.addEventListener('disconnected', () => {// handModel.motionController = null;\n      // handModel.remove( scene );\n      // scene = null;\n    });\n    return handModel;\n  }\n}\nexport { XRHandModelFactory };","map":{"version":3,"names":["Object3D","XRHandPrimitiveModel","XRHandMeshModel","XRHandModel","constructor","controller","motionController","envMap","mesh","updateMatrixWorld","force","updateMesh","XRHandModelFactory","path","setPath","createHandModel","profile","handModel","addEventListener","event","xrInputSource","data","hand","undefined","handedness","primitive"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/webxr/XRHandModelFactory.js"],"sourcesContent":["import { Object3D } from 'three';\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\n\nclass XRHandModel extends Object3D {\n  constructor(controller) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n\n}\n\nclass XRHandModelFactory {\n  constructor() {\n    this.path = null;\n  }\n\n  setPath(path) {\n    this.path = path;\n    return this;\n  }\n\n  createHandModel(controller, profile) {\n    const handModel = new XRHandModel(controller);\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand && !handModel.motionController) {\n        handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\n\n        if (profile === undefined || profile === 'spheres') {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: 'sphere'\n          });\n        } else if (profile === 'boxes') {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: 'box'\n          });\n        } else if (profile === 'mesh') {\n          handModel.motionController = new XRHandMeshModel(handModel, controller, this.path, xrInputSource.handedness);\n        }\n      }\n    });\n    controller.addEventListener('disconnected', () => {// handModel.motionController = null;\n      // handModel.remove( scene );\n      // scene = null;\n    });\n    return handModel;\n  }\n\n}\n\nexport { XRHandModelFactory };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,SAASC,eAAe,QAAQ,sBAAsB;AAEtD,MAAMC,WAAW,SAASH,QAAQ,CAAC;EACjCI,WAAWA,CAACC,UAAU,EAAE;IACtB,KAAK,EAAE;IACP,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACC,IAAI,GAAG,IAAI;EAClB;EAEAC,iBAAiBA,CAACC,KAAK,EAAE;IACvB,KAAK,CAACD,iBAAiB,CAACC,KAAK,CAAC;IAE9B,IAAI,IAAI,CAACJ,gBAAgB,EAAE;MACzB,IAAI,CAACA,gBAAgB,CAACK,UAAU,EAAE;IACpC;EACF;AAEF;AAEA,MAAMC,kBAAkB,CAAC;EACvBR,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACS,IAAI,GAAG,IAAI;EAClB;EAEAC,OAAOA,CAACD,IAAI,EAAE;IACZ,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,OAAO,IAAI;EACb;EAEAE,eAAeA,CAACV,UAAU,EAAEW,OAAO,EAAE;IACnC,MAAMC,SAAS,GAAG,IAAId,WAAW,CAACE,UAAU,CAAC;IAC7CA,UAAU,CAACa,gBAAgB,CAAC,WAAW,EAAEC,KAAK,IAAI;MAChD,MAAMC,aAAa,GAAGD,KAAK,CAACE,IAAI;MAEhC,IAAID,aAAa,CAACE,IAAI,IAAI,CAACL,SAAS,CAACX,gBAAgB,EAAE;QACrDW,SAAS,CAACG,aAAa,GAAGA,aAAa,CAAC,CAAC;;QAEzC,IAAIJ,OAAO,KAAKO,SAAS,IAAIP,OAAO,KAAK,SAAS,EAAE;UAClDC,SAAS,CAACX,gBAAgB,GAAG,IAAIL,oBAAoB,CAACgB,SAAS,EAAEZ,UAAU,EAAE,IAAI,CAACQ,IAAI,EAAEO,aAAa,CAACI,UAAU,EAAE;YAChHC,SAAS,EAAE;UACb,CAAC,CAAC;QACJ,CAAC,MAAM,IAAIT,OAAO,KAAK,OAAO,EAAE;UAC9BC,SAAS,CAACX,gBAAgB,GAAG,IAAIL,oBAAoB,CAACgB,SAAS,EAAEZ,UAAU,EAAE,IAAI,CAACQ,IAAI,EAAEO,aAAa,CAACI,UAAU,EAAE;YAChHC,SAAS,EAAE;UACb,CAAC,CAAC;QACJ,CAAC,MAAM,IAAIT,OAAO,KAAK,MAAM,EAAE;UAC7BC,SAAS,CAACX,gBAAgB,GAAG,IAAIJ,eAAe,CAACe,SAAS,EAAEZ,UAAU,EAAE,IAAI,CAACQ,IAAI,EAAEO,aAAa,CAACI,UAAU,CAAC;QAC9G;MACF;IACF,CAAC,CAAC;IACFnB,UAAU,CAACa,gBAAgB,CAAC,cAAc,EAAE,MAAM,CAAC;MACjD;MACA;IAAA,CACD,CAAC;IACF,OAAOD,SAAS;EAClB;AAEF;AAEA,SAASL,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}