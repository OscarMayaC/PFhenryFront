{"ast":null,"code":"import { Vector3, Curve } from 'three';\nimport { ParametricGeometry } from './ParametricGeometry.js';\n\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, z;\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return function (u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    const a = 2;\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    const z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    // volumetric mobius strip\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n      a = 0.125,\n      b = 0.65;\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    const y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = class TubeGeometry extends ParametricGeometry {\n  constructor(path) {\n    let segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n    let radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let segmentsRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    let closed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    const numpoints = segments + 1;\n    const frames = path.computeFrenetFrames(segments, closed),\n      tangents = frames.tangents,\n      normals = frames.normals,\n      binormals = frames.binormals;\n    const position = new Vector3();\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      const i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      const normal = normals[i];\n      const binormal = binormals[i];\n      const cx = -radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n      const cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n    super(ParametricTube, segments, segmentsRadius); // proxy internals\n\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n    this.path = path;\n    this.segments = segments;\n    this.radius = radius;\n    this.segmentsRadius = segmentsRadius;\n    this.closed = closed;\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TorusKnotGeometry\n *\n *********************************************/\n\nParametricGeometries.TorusKnotGeometry = class TorusKnotGeometry extends ParametricGeometries.TubeGeometry {\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n    let tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 40;\n    let segmentsT = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 64;\n    let segmentsR = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    let p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n    let q = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;\n    class TorusKnotCurve extends Curve {\n      getPoint(t) {\n        let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n        const point = optionalTarget;\n        t *= Math.PI * 2;\n        const r = 0.5;\n        const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n        const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n        const z = r * Math.sin(q * t);\n        return point.set(x, y, z).multiplyScalar(radius);\n      }\n    }\n    const segments = segmentsT;\n    const radiusSegments = segmentsR;\n    const extrudePath = new TorusKnotCurve();\n    super(extrudePath, segments, tube, radiusSegments, true, false);\n    this.radius = radius;\n    this.tube = tube;\n    this.segmentsT = segmentsT;\n    this.segmentsR = segmentsR;\n    this.p = p;\n    this.q = q;\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for SphereGeometry\n *\n *********************************************/\n\nParametricGeometries.SphereGeometry = class SphereGeometry extends ParametricGeometry {\n  constructor(size, u, v) {\n    function sphere(u, v, target) {\n      u *= Math.PI;\n      v *= 2 * Math.PI;\n      const x = size * Math.sin(u) * Math.cos(v);\n      const y = size * Math.sin(u) * Math.sin(v);\n      const z = size * Math.cos(u);\n      target.set(x, y, z);\n    }\n    super(sphere, u, v);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for PlaneGeometry\n *\n *********************************************/\n\nParametricGeometries.PlaneGeometry = class PlaneGeometry extends ParametricGeometry {\n  constructor(width, depth, segmentsWidth, segmentsDepth) {\n    function plane(u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * depth;\n      target.set(x, y, z);\n    }\n    super(plane, segmentsWidth, segmentsDepth);\n  }\n};\nexport { ParametricGeometries };","map":{"version":3,"names":["Vector3","Curve","ParametricGeometry","ParametricGeometries","klein","v","u","target","Math","PI","x","z","cos","sin","y","set","plane","width","height","mobius","t","a","mobius3d","phi","major","b","TubeGeometry","constructor","path","segments","arguments","length","undefined","radius","segmentsRadius","closed","numpoints","frames","computeFrenetFrames","tangents","normals","binormals","position","ParametricTube","i","floor","getPointAt","normal","binormal","cx","cy","copy","TorusKnotGeometry","tube","segmentsT","segmentsR","p","q","TorusKnotCurve","getPoint","optionalTarget","point","r","multiplyScalar","radiusSegments","extrudePath","SphereGeometry","size","sphere","PlaneGeometry","depth","segmentsWidth","segmentsDepth"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/geometries/ParametricGeometries.js"],"sourcesContent":["import { Vector3, Curve } from 'three';\nimport { ParametricGeometry } from './ParametricGeometry.js';\n\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, z;\n\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return function (u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    const a = 2;\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    const z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    // volumetric mobius strip\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n          a = 0.125,\n          b = 0.65;\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    const y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = class TubeGeometry extends ParametricGeometry {\n  constructor(path, segments = 64, radius = 1, segmentsRadius = 8, closed = false) {\n    const numpoints = segments + 1;\n    const frames = path.computeFrenetFrames(segments, closed),\n          tangents = frames.tangents,\n          normals = frames.normals,\n          binormals = frames.binormals;\n    const position = new Vector3();\n\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      const i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      const normal = normals[i];\n      const binormal = binormals[i];\n      const cx = -radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n      const cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n\n    super(ParametricTube, segments, segmentsRadius); // proxy internals\n\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n    this.path = path;\n    this.segments = segments;\n    this.radius = radius;\n    this.segmentsRadius = segmentsRadius;\n    this.closed = closed;\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for TorusKnotGeometry\n *\n *********************************************/\n\nParametricGeometries.TorusKnotGeometry = class TorusKnotGeometry extends ParametricGeometries.TubeGeometry {\n  constructor(radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3) {\n    class TorusKnotCurve extends Curve {\n      getPoint(t, optionalTarget = new Vector3()) {\n        const point = optionalTarget;\n        t *= Math.PI * 2;\n        const r = 0.5;\n        const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n        const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n        const z = r * Math.sin(q * t);\n        return point.set(x, y, z).multiplyScalar(radius);\n      }\n\n    }\n\n    const segments = segmentsT;\n    const radiusSegments = segmentsR;\n    const extrudePath = new TorusKnotCurve();\n    super(extrudePath, segments, tube, radiusSegments, true, false);\n    this.radius = radius;\n    this.tube = tube;\n    this.segmentsT = segmentsT;\n    this.segmentsR = segmentsR;\n    this.p = p;\n    this.q = q;\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for SphereGeometry\n *\n *********************************************/\n\nParametricGeometries.SphereGeometry = class SphereGeometry extends ParametricGeometry {\n  constructor(size, u, v) {\n    function sphere(u, v, target) {\n      u *= Math.PI;\n      v *= 2 * Math.PI;\n      const x = size * Math.sin(u) * Math.cos(v);\n      const y = size * Math.sin(u) * Math.sin(v);\n      const z = size * Math.cos(u);\n      target.set(x, y, z);\n    }\n\n    super(sphere, u, v);\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for PlaneGeometry\n *\n *********************************************/\n\nParametricGeometries.PlaneGeometry = class PlaneGeometry extends ParametricGeometry {\n  constructor(width, depth, segmentsWidth, segmentsDepth) {\n    function plane(u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * depth;\n      target.set(x, y, z);\n    }\n\n    super(plane, segmentsWidth, segmentsDepth);\n  }\n\n};\n\nexport { ParametricGeometries };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}