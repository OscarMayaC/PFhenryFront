{"ast":null,"code":"import { Vector3, Line3, Plane, Triangle } from 'three';\n\n/**\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\n */\n\nconst Visible = 0;\nconst Deleted = 1;\nconst _v1 = new Vector3();\nconst _line3 = new Line3();\nconst _plane = new Plane();\nconst _closestPoint = new Vector3();\nconst _triangle = new Triangle();\nclass ConvexHull {\n  constructor() {\n    this.tolerance = -1;\n    this.faces = []; // the generated faces of the convex hull\n\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\n    // the vertex lists work as follows:\n    //\n    // let 'a' and 'b' be 'Face' instances\n    // let 'v' be points wrapped as instance of 'Vertex'\n    //\n    //     [v, v, ..., v, v, v, ...]\n    //      ^             ^\n    //      |             |\n    //  a.outside     b.outside\n    //\n\n    this.assigned = new VertexList();\n    this.unassigned = new VertexList();\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\n  }\n\n  setFromPoints(points) {\n    // The algorithm needs at least four points.\n    if (points.length >= 4) {\n      this.makeEmpty();\n      for (let i = 0, l = points.length; i < l; i++) {\n        this.vertices.push(new VertexNode(points[i]));\n      }\n      this.compute();\n    }\n    return this;\n  }\n  setFromObject(object) {\n    const points = [];\n    object.updateMatrixWorld(true);\n    object.traverse(function (node) {\n      const geometry = node.geometry;\n      if (geometry !== undefined) {\n        if (geometry.isGeometry) {\n          console.error('THREE.ConvexHull no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        } else if (geometry.isBufferGeometry) {\n          const attribute = geometry.attributes.position;\n          if (attribute !== undefined) {\n            for (let i = 0, l = attribute.count; i < l; i++) {\n              const point = new Vector3();\n              point.fromBufferAttribute(attribute, i).applyMatrix4(node.matrixWorld);\n              points.push(point);\n            }\n          }\n        }\n      }\n    });\n    return this.setFromPoints(points);\n  }\n  containsPoint(point) {\n    const faces = this.faces;\n    for (let i = 0, l = faces.length; i < l; i++) {\n      const face = faces[i]; // compute signed distance and check on what half space the point lies\n\n      if (face.distanceToPoint(point) > this.tolerance) return false;\n    }\n    return true;\n  }\n  intersectRay(ray, target) {\n    // based on \"Fast Ray-Convex Polyhedron Intersection\"  by Eric Haines, GRAPHICS GEMS II\n    const faces = this.faces;\n    let tNear = -Infinity;\n    let tFar = Infinity;\n    for (let i = 0, l = faces.length; i < l; i++) {\n      const face = faces[i]; // interpret faces as planes for the further computation\n\n      const vN = face.distanceToPoint(ray.origin);\n      const vD = face.normal.dot(ray.direction); // if the origin is on the positive side of a plane (so the plane can \"see\" the origin) and\n      // the ray is turned away or parallel to the plane, there is no intersection\n\n      if (vN > 0 && vD >= 0) return null; // compute the distance from the rayâ€™s origin to the intersection with the plane\n\n      const t = vD !== 0 ? -vN / vD : 0; // only proceed if the distance is positive. a negative distance means the intersection point\n      // lies \"behind\" the origin\n\n      if (t <= 0) continue; // now categorized plane as front-facing or back-facing\n\n      if (vD > 0) {\n        //  plane faces away from the ray, so this plane is a back-face\n        tFar = Math.min(t, tFar);\n      } else {\n        // front-face\n        tNear = Math.max(t, tNear);\n      }\n      if (tNear > tFar) {\n        // if tNear ever is greater than tFar, the ray must miss the convex hull\n        return null;\n      }\n    } // evaluate intersection point\n    // always try tNear first since its the closer intersection point\n\n    if (tNear !== -Infinity) {\n      ray.at(tNear, target);\n    } else {\n      ray.at(tFar, target);\n    }\n    return target;\n  }\n  intersectsRay(ray) {\n    return this.intersectRay(ray, _v1) !== null;\n  }\n  makeEmpty() {\n    this.faces = [];\n    this.vertices = [];\n    return this;\n  } // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\n\n  addVertexToFace(vertex, face) {\n    vertex.face = face;\n    if (face.outside === null) {\n      this.assigned.append(vertex);\n    } else {\n      this.assigned.insertBefore(face.outside, vertex);\n    }\n    face.outside = vertex;\n    return this;\n  } // Removes a vertex from the 'assigned' list of vertices and from the given face\n\n  removeVertexFromFace(vertex, face) {\n    if (vertex === face.outside) {\n      // fix face.outside link\n      if (vertex.next !== null && vertex.next.face === face) {\n        // face has at least 2 outside vertices, move the 'outside' reference\n        face.outside = vertex.next;\n      } else {\n        // vertex was the only outside vertex that face had\n        face.outside = null;\n      }\n    }\n    this.assigned.remove(vertex);\n    return this;\n  } // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\n\n  removeAllVerticesFromFace(face) {\n    if (face.outside !== null) {\n      // reference to the first and last vertex of this face\n      const start = face.outside;\n      let end = face.outside;\n      while (end.next !== null && end.next.face === face) {\n        end = end.next;\n      }\n      this.assigned.removeSubList(start, end); // fix references\n\n      start.prev = end.next = null;\n      face.outside = null;\n      return start;\n    }\n  } // Removes all the visible vertices that 'face' is able to see\n\n  deleteFaceVertices(face, absorbingFace) {\n    const faceVertices = this.removeAllVerticesFromFace(face);\n    if (faceVertices !== undefined) {\n      if (absorbingFace === undefined) {\n        // mark the vertices to be reassigned to some other face\n        this.unassigned.appendChain(faceVertices);\n      } else {\n        // if there's an absorbing face try to assign as many vertices as possible to it\n        let vertex = faceVertices;\n        do {\n          // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\n          // will be changed by upcoming method calls\n          const nextVertex = vertex.next;\n          const distance = absorbingFace.distanceToPoint(vertex.point); // check if 'vertex' is able to see 'absorbingFace'\n\n          if (distance > this.tolerance) {\n            this.addVertexToFace(vertex, absorbingFace);\n          } else {\n            this.unassigned.append(vertex);\n          } // now assign next vertex\n\n          vertex = nextVertex;\n        } while (vertex !== null);\n      }\n    }\n    return this;\n  } // Reassigns as many vertices as possible from the unassigned list to the new faces\n\n  resolveUnassignedPoints(newFaces) {\n    if (this.unassigned.isEmpty() === false) {\n      let vertex = this.unassigned.first();\n      do {\n        // buffer 'next' reference, see .deleteFaceVertices()\n        const nextVertex = vertex.next;\n        let maxDistance = this.tolerance;\n        let maxFace = null;\n        for (let i = 0; i < newFaces.length; i++) {\n          const face = newFaces[i];\n          if (face.mark === Visible) {\n            const distance = face.distanceToPoint(vertex.point);\n            if (distance > maxDistance) {\n              maxDistance = distance;\n              maxFace = face;\n            }\n            if (maxDistance > 1000 * this.tolerance) break;\n          }\n        } // 'maxFace' can be null e.g. if there are identical vertices\n\n        if (maxFace !== null) {\n          this.addVertexToFace(vertex, maxFace);\n        }\n        vertex = nextVertex;\n      } while (vertex !== null);\n    }\n    return this;\n  } // Computes the extremes of a simplex which will be the initial hull\n\n  computeExtremes() {\n    const min = new Vector3();\n    const max = new Vector3();\n    const minVertices = [];\n    const maxVertices = []; // initially assume that the first vertex is the min/max\n\n    for (let i = 0; i < 3; i++) {\n      minVertices[i] = maxVertices[i] = this.vertices[0];\n    }\n    min.copy(this.vertices[0].point);\n    max.copy(this.vertices[0].point); // compute the min/max vertex on all six directions\n\n    for (let i = 0, l = this.vertices.length; i < l; i++) {\n      const vertex = this.vertices[i];\n      const point = vertex.point; // update the min coordinates\n\n      for (let j = 0; j < 3; j++) {\n        if (point.getComponent(j) < min.getComponent(j)) {\n          min.setComponent(j, point.getComponent(j));\n          minVertices[j] = vertex;\n        }\n      } // update the max coordinates\n\n      for (let j = 0; j < 3; j++) {\n        if (point.getComponent(j) > max.getComponent(j)) {\n          max.setComponent(j, point.getComponent(j));\n          maxVertices[j] = vertex;\n        }\n      }\n    } // use min/max vectors to compute an optimal epsilon\n\n    this.tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(min.x), Math.abs(max.x)) + Math.max(Math.abs(min.y), Math.abs(max.y)) + Math.max(Math.abs(min.z), Math.abs(max.z)));\n    return {\n      min: minVertices,\n      max: maxVertices\n    };\n  } // Computes the initial simplex assigning to its faces all the points\n  // that are candidates to form part of the hull\n\n  computeInitialHull() {\n    const vertices = this.vertices;\n    const extremes = this.computeExtremes();\n    const min = extremes.min;\n    const max = extremes.max; // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\n    // (max.x - min.x)\n    // (max.y - min.y)\n    // (max.z - min.z)\n\n    let maxDistance = 0;\n    let index = 0;\n    for (let i = 0; i < 3; i++) {\n      const distance = max[i].point.getComponent(i) - min[i].point.getComponent(i);\n      if (distance > maxDistance) {\n        maxDistance = distance;\n        index = i;\n      }\n    }\n    const v0 = min[index];\n    const v1 = max[index];\n    let v2;\n    let v3; // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\n\n    maxDistance = 0;\n    _line3.set(v0.point, v1.point);\n    for (let i = 0, l = this.vertices.length; i < l; i++) {\n      const vertex = vertices[i];\n      if (vertex !== v0 && vertex !== v1) {\n        _line3.closestPointToPoint(vertex.point, true, _closestPoint);\n        const distance = _closestPoint.distanceToSquared(vertex.point);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          v2 = vertex;\n        }\n      }\n    } // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\n\n    maxDistance = -1;\n    _plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\n    for (let i = 0, l = this.vertices.length; i < l; i++) {\n      const vertex = vertices[i];\n      if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\n        const distance = Math.abs(_plane.distanceToPoint(vertex.point));\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          v3 = vertex;\n        }\n      }\n    }\n    const faces = [];\n    if (_plane.distanceToPoint(v3.point) < 0) {\n      // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\n      faces.push(Face.create(v0, v1, v2), Face.create(v3, v1, v0), Face.create(v3, v2, v1), Face.create(v3, v0, v2)); // set the twin edge\n\n      for (let i = 0; i < 3; i++) {\n        const j = (i + 1) % 3; // join face[ i ] i > 0, with the first face\n\n        faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j)); // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\n\n        faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\n      }\n    } else {\n      // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\n      faces.push(Face.create(v0, v2, v1), Face.create(v3, v0, v1), Face.create(v3, v1, v2), Face.create(v3, v2, v0)); // set the twin edge\n\n      for (let i = 0; i < 3; i++) {\n        const j = (i + 1) % 3; // join face[ i ] i > 0, with the first face\n\n        faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3)); // join face[ i ] with face[ i + 1 ]\n\n        faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\n      }\n    } // the initial hull is the tetrahedron\n\n    for (let i = 0; i < 4; i++) {\n      this.faces.push(faces[i]);\n    } // initial assignment of vertices to the faces of the tetrahedron\n\n    for (let i = 0, l = vertices.length; i < l; i++) {\n      const vertex = vertices[i];\n      if (vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3) {\n        maxDistance = this.tolerance;\n        let maxFace = null;\n        for (let j = 0; j < 4; j++) {\n          const distance = this.faces[j].distanceToPoint(vertex.point);\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            maxFace = this.faces[j];\n          }\n        }\n        if (maxFace !== null) {\n          this.addVertexToFace(vertex, maxFace);\n        }\n      }\n    }\n    return this;\n  } // Removes inactive faces\n\n  reindexFaces() {\n    const activeFaces = [];\n    for (let i = 0; i < this.faces.length; i++) {\n      const face = this.faces[i];\n      if (face.mark === Visible) {\n        activeFaces.push(face);\n      }\n    }\n    this.faces = activeFaces;\n    return this;\n  } // Finds the next vertex to create faces with the current hull\n\n  nextVertexToAdd() {\n    // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\n    if (this.assigned.isEmpty() === false) {\n      let eyeVertex,\n        maxDistance = 0; // grap the first available face and start with the first visible vertex of that face\n\n      const eyeFace = this.assigned.first().face;\n      let vertex = eyeFace.outside; // now calculate the farthest vertex that face can see\n\n      do {\n        const distance = eyeFace.distanceToPoint(vertex.point);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          eyeVertex = vertex;\n        }\n        vertex = vertex.next;\n      } while (vertex !== null && vertex.face === eyeFace);\n      return eyeVertex;\n    }\n  } // Computes a chain of half edges in CCW order called the 'horizon'.\n  // For an edge to be part of the horizon it must join a face that can see\n  // 'eyePoint' and a face that cannot see 'eyePoint'.\n\n  computeHorizon(eyePoint, crossEdge, face, horizon) {\n    // moves face's vertices to the 'unassigned' vertex list\n    this.deleteFaceVertices(face);\n    face.mark = Deleted;\n    let edge;\n    if (crossEdge === null) {\n      edge = crossEdge = face.getEdge(0);\n    } else {\n      // start from the next edge since 'crossEdge' was already analyzed\n      // (actually 'crossEdge.twin' was the edge who called this method recursively)\n      edge = crossEdge.next;\n    }\n    do {\n      const twinEdge = edge.twin;\n      const oppositeFace = twinEdge.face;\n      if (oppositeFace.mark === Visible) {\n        if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\n          // the opposite face can see the vertex, so proceed with next edge\n          this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\n        } else {\n          // the opposite face can't see the vertex, so this edge is part of the horizon\n          horizon.push(edge);\n        }\n      }\n      edge = edge.next;\n    } while (edge !== crossEdge);\n    return this;\n  } // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\n\n  addAdjoiningFace(eyeVertex, horizonEdge) {\n    // all the half edges are created in ccw order thus the face is always pointing outside the hull\n    const face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\n    this.faces.push(face); // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\n\n    face.getEdge(-1).setTwin(horizonEdge.twin);\n    return face.getEdge(0); // the half edge whose vertex is the eyeVertex\n  } //  Adds 'horizon.length' faces to the hull, each face will be linked with the\n  //  horizon opposite face and the face on the left/right\n\n  addNewFaces(eyeVertex, horizon) {\n    this.newFaces = [];\n    let firstSideEdge = null;\n    let previousSideEdge = null;\n    for (let i = 0; i < horizon.length; i++) {\n      const horizonEdge = horizon[i]; // returns the right side edge\n\n      const sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\n      if (firstSideEdge === null) {\n        firstSideEdge = sideEdge;\n      } else {\n        // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\n        sideEdge.next.setTwin(previousSideEdge);\n      }\n      this.newFaces.push(sideEdge.face);\n      previousSideEdge = sideEdge;\n    } // perform final join of new faces\n\n    firstSideEdge.next.setTwin(previousSideEdge);\n    return this;\n  } // Adds a vertex to the hull\n\n  addVertexToHull(eyeVertex) {\n    const horizon = [];\n    this.unassigned.clear(); // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\n\n    this.removeVertexFromFace(eyeVertex, eyeVertex.face);\n    this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\n    this.addNewFaces(eyeVertex, horizon); // reassign 'unassigned' vertices to the new faces\n\n    this.resolveUnassignedPoints(this.newFaces);\n    return this;\n  }\n  cleanup() {\n    this.assigned.clear();\n    this.unassigned.clear();\n    this.newFaces = [];\n    return this;\n  }\n  compute() {\n    let vertex;\n    this.computeInitialHull(); // add all available vertices gradually to the hull\n\n    while ((vertex = this.nextVertexToAdd()) !== undefined) {\n      this.addVertexToHull(vertex);\n    }\n    this.reindexFaces();\n    this.cleanup();\n    return this;\n  }\n} //\n\nclass Face {\n  constructor() {\n    this.normal = new Vector3();\n    this.midpoint = new Vector3();\n    this.area = 0;\n    this.constant = 0; // signed distance from face to the origin\n\n    this.outside = null; // reference to a vertex in a vertex list this face can see\n\n    this.mark = Visible;\n    this.edge = null;\n  }\n  static create(a, b, c) {\n    const face = new Face();\n    const e0 = new HalfEdge(a, face);\n    const e1 = new HalfEdge(b, face);\n    const e2 = new HalfEdge(c, face); // join edges\n\n    e0.next = e2.prev = e1;\n    e1.next = e0.prev = e2;\n    e2.next = e1.prev = e0; // main half edge reference\n\n    face.edge = e0;\n    return face.compute();\n  }\n  getEdge(i) {\n    let edge = this.edge;\n    while (i > 0) {\n      edge = edge.next;\n      i--;\n    }\n    while (i < 0) {\n      edge = edge.prev;\n      i++;\n    }\n    return edge;\n  }\n  compute() {\n    const a = this.edge.tail();\n    const b = this.edge.head();\n    const c = this.edge.next.head();\n    _triangle.set(a.point, b.point, c.point);\n    _triangle.getNormal(this.normal);\n    _triangle.getMidpoint(this.midpoint);\n    this.area = _triangle.getArea();\n    this.constant = this.normal.dot(this.midpoint);\n    return this;\n  }\n  distanceToPoint(point) {\n    return this.normal.dot(point) - this.constant;\n  }\n} // Entity for a Doubly-Connected Edge List (DCEL).\n\nclass HalfEdge {\n  constructor(vertex, face) {\n    this.vertex = vertex;\n    this.prev = null;\n    this.next = null;\n    this.twin = null;\n    this.face = face;\n  }\n  head() {\n    return this.vertex;\n  }\n  tail() {\n    return this.prev ? this.prev.vertex : null;\n  }\n  length() {\n    const head = this.head();\n    const tail = this.tail();\n    if (tail !== null) {\n      return tail.point.distanceTo(head.point);\n    }\n    return -1;\n  }\n  lengthSquared() {\n    const head = this.head();\n    const tail = this.tail();\n    if (tail !== null) {\n      return tail.point.distanceToSquared(head.point);\n    }\n    return -1;\n  }\n  setTwin(edge) {\n    this.twin = edge;\n    edge.twin = this;\n    return this;\n  }\n} // A vertex as a double linked list node.\n\nclass VertexNode {\n  constructor(point) {\n    this.point = point;\n    this.prev = null;\n    this.next = null;\n    this.face = null; // the face that is able to see this vertex\n  }\n} // A double linked list that contains vertex nodes.\n\nclass VertexList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n  }\n  first() {\n    return this.head;\n  }\n  last() {\n    return this.tail;\n  }\n  clear() {\n    this.head = this.tail = null;\n    return this;\n  } // Inserts a vertex before the target vertex\n\n  insertBefore(target, vertex) {\n    vertex.prev = target.prev;\n    vertex.next = target;\n    if (vertex.prev === null) {\n      this.head = vertex;\n    } else {\n      vertex.prev.next = vertex;\n    }\n    target.prev = vertex;\n    return this;\n  } // Inserts a vertex after the target vertex\n\n  insertAfter(target, vertex) {\n    vertex.prev = target;\n    vertex.next = target.next;\n    if (vertex.next === null) {\n      this.tail = vertex;\n    } else {\n      vertex.next.prev = vertex;\n    }\n    target.next = vertex;\n    return this;\n  } // Appends a vertex to the end of the linked list\n\n  append(vertex) {\n    if (this.head === null) {\n      this.head = vertex;\n    } else {\n      this.tail.next = vertex;\n    }\n    vertex.prev = this.tail;\n    vertex.next = null; // the tail has no subsequent vertex\n\n    this.tail = vertex;\n    return this;\n  } // Appends a chain of vertices where 'vertex' is the head.\n\n  appendChain(vertex) {\n    if (this.head === null) {\n      this.head = vertex;\n    } else {\n      this.tail.next = vertex;\n    }\n    vertex.prev = this.tail; // ensure that the 'tail' reference points to the last vertex of the chain\n\n    while (vertex.next !== null) {\n      vertex = vertex.next;\n    }\n    this.tail = vertex;\n    return this;\n  } // Removes a vertex from the linked list\n\n  remove(vertex) {\n    if (vertex.prev === null) {\n      this.head = vertex.next;\n    } else {\n      vertex.prev.next = vertex.next;\n    }\n    if (vertex.next === null) {\n      this.tail = vertex.prev;\n    } else {\n      vertex.next.prev = vertex.prev;\n    }\n    return this;\n  } // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\n\n  removeSubList(a, b) {\n    if (a.prev === null) {\n      this.head = b.next;\n    } else {\n      a.prev.next = b.next;\n    }\n    if (b.next === null) {\n      this.tail = a.prev;\n    } else {\n      b.next.prev = a.prev;\n    }\n    return this;\n  }\n  isEmpty() {\n    return this.head === null;\n  }\n}\nexport { ConvexHull };","map":{"version":3,"names":["Vector3","Line3","Plane","Triangle","Visible","Deleted","_v1","_line3","_plane","_closestPoint","_triangle","ConvexHull","constructor","tolerance","faces","newFaces","assigned","VertexList","unassigned","vertices","setFromPoints","points","length","makeEmpty","i","l","push","VertexNode","compute","setFromObject","object","updateMatrixWorld","traverse","node","geometry","undefined","isGeometry","console","error","isBufferGeometry","attribute","attributes","position","count","point","fromBufferAttribute","applyMatrix4","matrixWorld","containsPoint","face","distanceToPoint","intersectRay","ray","target","tNear","Infinity","tFar","vN","origin","vD","normal","dot","direction","t","Math","min","max","at","intersectsRay","addVertexToFace","vertex","outside","append","insertBefore","removeVertexFromFace","next","remove","removeAllVerticesFromFace","start","end","removeSubList","prev","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distance","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","mark","computeExtremes","minVertices","maxVertices","copy","j","getComponent","setComponent","Number","EPSILON","abs","x","y","z","computeInitialHull","extremes","index","v0","v1","v2","v3","set","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","Face","create","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","edge","twinEdge","twin","oppositeFace","addAdjoiningFace","horizonEdge","tail","head","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","clear","cleanup","midpoint","area","constant","a","b","c","e0","HalfEdge","e1","e2","getNormal","getMidpoint","getArea","distanceTo","lengthSquared","last","insertAfter"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/math/ConvexHull.js"],"sourcesContent":["import { Vector3, Line3, Plane, Triangle } from 'three';\n\n/**\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\n */\n\nconst Visible = 0;\nconst Deleted = 1;\n\nconst _v1 = new Vector3();\n\nconst _line3 = new Line3();\n\nconst _plane = new Plane();\n\nconst _closestPoint = new Vector3();\n\nconst _triangle = new Triangle();\n\nclass ConvexHull {\n  constructor() {\n    this.tolerance = -1;\n    this.faces = []; // the generated faces of the convex hull\n\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\n    // the vertex lists work as follows:\n    //\n    // let 'a' and 'b' be 'Face' instances\n    // let 'v' be points wrapped as instance of 'Vertex'\n    //\n    //     [v, v, ..., v, v, v, ...]\n    //      ^             ^\n    //      |             |\n    //  a.outside     b.outside\n    //\n\n    this.assigned = new VertexList();\n    this.unassigned = new VertexList();\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\n  }\n\n  setFromPoints(points) {\n    // The algorithm needs at least four points.\n    if (points.length >= 4) {\n      this.makeEmpty();\n\n      for (let i = 0, l = points.length; i < l; i++) {\n        this.vertices.push(new VertexNode(points[i]));\n      }\n\n      this.compute();\n    }\n\n    return this;\n  }\n\n  setFromObject(object) {\n    const points = [];\n    object.updateMatrixWorld(true);\n    object.traverse(function (node) {\n      const geometry = node.geometry;\n\n      if (geometry !== undefined) {\n        if (geometry.isGeometry) {\n          console.error('THREE.ConvexHull no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        } else if (geometry.isBufferGeometry) {\n          const attribute = geometry.attributes.position;\n\n          if (attribute !== undefined) {\n            for (let i = 0, l = attribute.count; i < l; i++) {\n              const point = new Vector3();\n              point.fromBufferAttribute(attribute, i).applyMatrix4(node.matrixWorld);\n              points.push(point);\n            }\n          }\n        }\n      }\n    });\n    return this.setFromPoints(points);\n  }\n\n  containsPoint(point) {\n    const faces = this.faces;\n\n    for (let i = 0, l = faces.length; i < l; i++) {\n      const face = faces[i]; // compute signed distance and check on what half space the point lies\n\n      if (face.distanceToPoint(point) > this.tolerance) return false;\n    }\n\n    return true;\n  }\n\n  intersectRay(ray, target) {\n    // based on \"Fast Ray-Convex Polyhedron Intersection\"  by Eric Haines, GRAPHICS GEMS II\n    const faces = this.faces;\n    let tNear = -Infinity;\n    let tFar = Infinity;\n\n    for (let i = 0, l = faces.length; i < l; i++) {\n      const face = faces[i]; // interpret faces as planes for the further computation\n\n      const vN = face.distanceToPoint(ray.origin);\n      const vD = face.normal.dot(ray.direction); // if the origin is on the positive side of a plane (so the plane can \"see\" the origin) and\n      // the ray is turned away or parallel to the plane, there is no intersection\n\n      if (vN > 0 && vD >= 0) return null; // compute the distance from the rayâ€™s origin to the intersection with the plane\n\n      const t = vD !== 0 ? -vN / vD : 0; // only proceed if the distance is positive. a negative distance means the intersection point\n      // lies \"behind\" the origin\n\n      if (t <= 0) continue; // now categorized plane as front-facing or back-facing\n\n      if (vD > 0) {\n        //  plane faces away from the ray, so this plane is a back-face\n        tFar = Math.min(t, tFar);\n      } else {\n        // front-face\n        tNear = Math.max(t, tNear);\n      }\n\n      if (tNear > tFar) {\n        // if tNear ever is greater than tFar, the ray must miss the convex hull\n        return null;\n      }\n    } // evaluate intersection point\n    // always try tNear first since its the closer intersection point\n\n\n    if (tNear !== -Infinity) {\n      ray.at(tNear, target);\n    } else {\n      ray.at(tFar, target);\n    }\n\n    return target;\n  }\n\n  intersectsRay(ray) {\n    return this.intersectRay(ray, _v1) !== null;\n  }\n\n  makeEmpty() {\n    this.faces = [];\n    this.vertices = [];\n    return this;\n  } // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\n\n\n  addVertexToFace(vertex, face) {\n    vertex.face = face;\n\n    if (face.outside === null) {\n      this.assigned.append(vertex);\n    } else {\n      this.assigned.insertBefore(face.outside, vertex);\n    }\n\n    face.outside = vertex;\n    return this;\n  } // Removes a vertex from the 'assigned' list of vertices and from the given face\n\n\n  removeVertexFromFace(vertex, face) {\n    if (vertex === face.outside) {\n      // fix face.outside link\n      if (vertex.next !== null && vertex.next.face === face) {\n        // face has at least 2 outside vertices, move the 'outside' reference\n        face.outside = vertex.next;\n      } else {\n        // vertex was the only outside vertex that face had\n        face.outside = null;\n      }\n    }\n\n    this.assigned.remove(vertex);\n    return this;\n  } // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\n\n\n  removeAllVerticesFromFace(face) {\n    if (face.outside !== null) {\n      // reference to the first and last vertex of this face\n      const start = face.outside;\n      let end = face.outside;\n\n      while (end.next !== null && end.next.face === face) {\n        end = end.next;\n      }\n\n      this.assigned.removeSubList(start, end); // fix references\n\n      start.prev = end.next = null;\n      face.outside = null;\n      return start;\n    }\n  } // Removes all the visible vertices that 'face' is able to see\n\n\n  deleteFaceVertices(face, absorbingFace) {\n    const faceVertices = this.removeAllVerticesFromFace(face);\n\n    if (faceVertices !== undefined) {\n      if (absorbingFace === undefined) {\n        // mark the vertices to be reassigned to some other face\n        this.unassigned.appendChain(faceVertices);\n      } else {\n        // if there's an absorbing face try to assign as many vertices as possible to it\n        let vertex = faceVertices;\n\n        do {\n          // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\n          // will be changed by upcoming method calls\n          const nextVertex = vertex.next;\n          const distance = absorbingFace.distanceToPoint(vertex.point); // check if 'vertex' is able to see 'absorbingFace'\n\n          if (distance > this.tolerance) {\n            this.addVertexToFace(vertex, absorbingFace);\n          } else {\n            this.unassigned.append(vertex);\n          } // now assign next vertex\n\n\n          vertex = nextVertex;\n        } while (vertex !== null);\n      }\n    }\n\n    return this;\n  } // Reassigns as many vertices as possible from the unassigned list to the new faces\n\n\n  resolveUnassignedPoints(newFaces) {\n    if (this.unassigned.isEmpty() === false) {\n      let vertex = this.unassigned.first();\n\n      do {\n        // buffer 'next' reference, see .deleteFaceVertices()\n        const nextVertex = vertex.next;\n        let maxDistance = this.tolerance;\n        let maxFace = null;\n\n        for (let i = 0; i < newFaces.length; i++) {\n          const face = newFaces[i];\n\n          if (face.mark === Visible) {\n            const distance = face.distanceToPoint(vertex.point);\n\n            if (distance > maxDistance) {\n              maxDistance = distance;\n              maxFace = face;\n            }\n\n            if (maxDistance > 1000 * this.tolerance) break;\n          }\n        } // 'maxFace' can be null e.g. if there are identical vertices\n\n\n        if (maxFace !== null) {\n          this.addVertexToFace(vertex, maxFace);\n        }\n\n        vertex = nextVertex;\n      } while (vertex !== null);\n    }\n\n    return this;\n  } // Computes the extremes of a simplex which will be the initial hull\n\n\n  computeExtremes() {\n    const min = new Vector3();\n    const max = new Vector3();\n    const minVertices = [];\n    const maxVertices = []; // initially assume that the first vertex is the min/max\n\n    for (let i = 0; i < 3; i++) {\n      minVertices[i] = maxVertices[i] = this.vertices[0];\n    }\n\n    min.copy(this.vertices[0].point);\n    max.copy(this.vertices[0].point); // compute the min/max vertex on all six directions\n\n    for (let i = 0, l = this.vertices.length; i < l; i++) {\n      const vertex = this.vertices[i];\n      const point = vertex.point; // update the min coordinates\n\n      for (let j = 0; j < 3; j++) {\n        if (point.getComponent(j) < min.getComponent(j)) {\n          min.setComponent(j, point.getComponent(j));\n          minVertices[j] = vertex;\n        }\n      } // update the max coordinates\n\n\n      for (let j = 0; j < 3; j++) {\n        if (point.getComponent(j) > max.getComponent(j)) {\n          max.setComponent(j, point.getComponent(j));\n          maxVertices[j] = vertex;\n        }\n      }\n    } // use min/max vectors to compute an optimal epsilon\n\n\n    this.tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(min.x), Math.abs(max.x)) + Math.max(Math.abs(min.y), Math.abs(max.y)) + Math.max(Math.abs(min.z), Math.abs(max.z)));\n    return {\n      min: minVertices,\n      max: maxVertices\n    };\n  } // Computes the initial simplex assigning to its faces all the points\n  // that are candidates to form part of the hull\n\n\n  computeInitialHull() {\n    const vertices = this.vertices;\n    const extremes = this.computeExtremes();\n    const min = extremes.min;\n    const max = extremes.max; // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\n    // (max.x - min.x)\n    // (max.y - min.y)\n    // (max.z - min.z)\n\n    let maxDistance = 0;\n    let index = 0;\n\n    for (let i = 0; i < 3; i++) {\n      const distance = max[i].point.getComponent(i) - min[i].point.getComponent(i);\n\n      if (distance > maxDistance) {\n        maxDistance = distance;\n        index = i;\n      }\n    }\n\n    const v0 = min[index];\n    const v1 = max[index];\n    let v2;\n    let v3; // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\n\n    maxDistance = 0;\n\n    _line3.set(v0.point, v1.point);\n\n    for (let i = 0, l = this.vertices.length; i < l; i++) {\n      const vertex = vertices[i];\n\n      if (vertex !== v0 && vertex !== v1) {\n        _line3.closestPointToPoint(vertex.point, true, _closestPoint);\n\n        const distance = _closestPoint.distanceToSquared(vertex.point);\n\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          v2 = vertex;\n        }\n      }\n    } // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\n\n\n    maxDistance = -1;\n\n    _plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\n\n    for (let i = 0, l = this.vertices.length; i < l; i++) {\n      const vertex = vertices[i];\n\n      if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\n        const distance = Math.abs(_plane.distanceToPoint(vertex.point));\n\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          v3 = vertex;\n        }\n      }\n    }\n\n    const faces = [];\n\n    if (_plane.distanceToPoint(v3.point) < 0) {\n      // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\n      faces.push(Face.create(v0, v1, v2), Face.create(v3, v1, v0), Face.create(v3, v2, v1), Face.create(v3, v0, v2)); // set the twin edge\n\n      for (let i = 0; i < 3; i++) {\n        const j = (i + 1) % 3; // join face[ i ] i > 0, with the first face\n\n        faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j)); // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\n\n        faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\n      }\n    } else {\n      // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\n      faces.push(Face.create(v0, v2, v1), Face.create(v3, v0, v1), Face.create(v3, v1, v2), Face.create(v3, v2, v0)); // set the twin edge\n\n      for (let i = 0; i < 3; i++) {\n        const j = (i + 1) % 3; // join face[ i ] i > 0, with the first face\n\n        faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3)); // join face[ i ] with face[ i + 1 ]\n\n        faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\n      }\n    } // the initial hull is the tetrahedron\n\n\n    for (let i = 0; i < 4; i++) {\n      this.faces.push(faces[i]);\n    } // initial assignment of vertices to the faces of the tetrahedron\n\n\n    for (let i = 0, l = vertices.length; i < l; i++) {\n      const vertex = vertices[i];\n\n      if (vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3) {\n        maxDistance = this.tolerance;\n        let maxFace = null;\n\n        for (let j = 0; j < 4; j++) {\n          const distance = this.faces[j].distanceToPoint(vertex.point);\n\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            maxFace = this.faces[j];\n          }\n        }\n\n        if (maxFace !== null) {\n          this.addVertexToFace(vertex, maxFace);\n        }\n      }\n    }\n\n    return this;\n  } // Removes inactive faces\n\n\n  reindexFaces() {\n    const activeFaces = [];\n\n    for (let i = 0; i < this.faces.length; i++) {\n      const face = this.faces[i];\n\n      if (face.mark === Visible) {\n        activeFaces.push(face);\n      }\n    }\n\n    this.faces = activeFaces;\n    return this;\n  } // Finds the next vertex to create faces with the current hull\n\n\n  nextVertexToAdd() {\n    // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\n    if (this.assigned.isEmpty() === false) {\n      let eyeVertex,\n          maxDistance = 0; // grap the first available face and start with the first visible vertex of that face\n\n      const eyeFace = this.assigned.first().face;\n      let vertex = eyeFace.outside; // now calculate the farthest vertex that face can see\n\n      do {\n        const distance = eyeFace.distanceToPoint(vertex.point);\n\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          eyeVertex = vertex;\n        }\n\n        vertex = vertex.next;\n      } while (vertex !== null && vertex.face === eyeFace);\n\n      return eyeVertex;\n    }\n  } // Computes a chain of half edges in CCW order called the 'horizon'.\n  // For an edge to be part of the horizon it must join a face that can see\n  // 'eyePoint' and a face that cannot see 'eyePoint'.\n\n\n  computeHorizon(eyePoint, crossEdge, face, horizon) {\n    // moves face's vertices to the 'unassigned' vertex list\n    this.deleteFaceVertices(face);\n    face.mark = Deleted;\n    let edge;\n\n    if (crossEdge === null) {\n      edge = crossEdge = face.getEdge(0);\n    } else {\n      // start from the next edge since 'crossEdge' was already analyzed\n      // (actually 'crossEdge.twin' was the edge who called this method recursively)\n      edge = crossEdge.next;\n    }\n\n    do {\n      const twinEdge = edge.twin;\n      const oppositeFace = twinEdge.face;\n\n      if (oppositeFace.mark === Visible) {\n        if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\n          // the opposite face can see the vertex, so proceed with next edge\n          this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\n        } else {\n          // the opposite face can't see the vertex, so this edge is part of the horizon\n          horizon.push(edge);\n        }\n      }\n\n      edge = edge.next;\n    } while (edge !== crossEdge);\n\n    return this;\n  } // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\n\n\n  addAdjoiningFace(eyeVertex, horizonEdge) {\n    // all the half edges are created in ccw order thus the face is always pointing outside the hull\n    const face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\n    this.faces.push(face); // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\n\n    face.getEdge(-1).setTwin(horizonEdge.twin);\n    return face.getEdge(0); // the half edge whose vertex is the eyeVertex\n  } //  Adds 'horizon.length' faces to the hull, each face will be linked with the\n  //  horizon opposite face and the face on the left/right\n\n\n  addNewFaces(eyeVertex, horizon) {\n    this.newFaces = [];\n    let firstSideEdge = null;\n    let previousSideEdge = null;\n\n    for (let i = 0; i < horizon.length; i++) {\n      const horizonEdge = horizon[i]; // returns the right side edge\n\n      const sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\n\n      if (firstSideEdge === null) {\n        firstSideEdge = sideEdge;\n      } else {\n        // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\n        sideEdge.next.setTwin(previousSideEdge);\n      }\n\n      this.newFaces.push(sideEdge.face);\n      previousSideEdge = sideEdge;\n    } // perform final join of new faces\n\n\n    firstSideEdge.next.setTwin(previousSideEdge);\n    return this;\n  } // Adds a vertex to the hull\n\n\n  addVertexToHull(eyeVertex) {\n    const horizon = [];\n    this.unassigned.clear(); // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\n\n    this.removeVertexFromFace(eyeVertex, eyeVertex.face);\n    this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\n    this.addNewFaces(eyeVertex, horizon); // reassign 'unassigned' vertices to the new faces\n\n    this.resolveUnassignedPoints(this.newFaces);\n    return this;\n  }\n\n  cleanup() {\n    this.assigned.clear();\n    this.unassigned.clear();\n    this.newFaces = [];\n    return this;\n  }\n\n  compute() {\n    let vertex;\n    this.computeInitialHull(); // add all available vertices gradually to the hull\n\n    while ((vertex = this.nextVertexToAdd()) !== undefined) {\n      this.addVertexToHull(vertex);\n    }\n\n    this.reindexFaces();\n    this.cleanup();\n    return this;\n  }\n\n} //\n\n\nclass Face {\n  constructor() {\n    this.normal = new Vector3();\n    this.midpoint = new Vector3();\n    this.area = 0;\n    this.constant = 0; // signed distance from face to the origin\n\n    this.outside = null; // reference to a vertex in a vertex list this face can see\n\n    this.mark = Visible;\n    this.edge = null;\n  }\n\n  static create(a, b, c) {\n    const face = new Face();\n    const e0 = new HalfEdge(a, face);\n    const e1 = new HalfEdge(b, face);\n    const e2 = new HalfEdge(c, face); // join edges\n\n    e0.next = e2.prev = e1;\n    e1.next = e0.prev = e2;\n    e2.next = e1.prev = e0; // main half edge reference\n\n    face.edge = e0;\n    return face.compute();\n  }\n\n  getEdge(i) {\n    let edge = this.edge;\n\n    while (i > 0) {\n      edge = edge.next;\n      i--;\n    }\n\n    while (i < 0) {\n      edge = edge.prev;\n      i++;\n    }\n\n    return edge;\n  }\n\n  compute() {\n    const a = this.edge.tail();\n    const b = this.edge.head();\n    const c = this.edge.next.head();\n\n    _triangle.set(a.point, b.point, c.point);\n\n    _triangle.getNormal(this.normal);\n\n    _triangle.getMidpoint(this.midpoint);\n\n    this.area = _triangle.getArea();\n    this.constant = this.normal.dot(this.midpoint);\n    return this;\n  }\n\n  distanceToPoint(point) {\n    return this.normal.dot(point) - this.constant;\n  }\n\n} // Entity for a Doubly-Connected Edge List (DCEL).\n\n\nclass HalfEdge {\n  constructor(vertex, face) {\n    this.vertex = vertex;\n    this.prev = null;\n    this.next = null;\n    this.twin = null;\n    this.face = face;\n  }\n\n  head() {\n    return this.vertex;\n  }\n\n  tail() {\n    return this.prev ? this.prev.vertex : null;\n  }\n\n  length() {\n    const head = this.head();\n    const tail = this.tail();\n\n    if (tail !== null) {\n      return tail.point.distanceTo(head.point);\n    }\n\n    return -1;\n  }\n\n  lengthSquared() {\n    const head = this.head();\n    const tail = this.tail();\n\n    if (tail !== null) {\n      return tail.point.distanceToSquared(head.point);\n    }\n\n    return -1;\n  }\n\n  setTwin(edge) {\n    this.twin = edge;\n    edge.twin = this;\n    return this;\n  }\n\n} // A vertex as a double linked list node.\n\n\nclass VertexNode {\n  constructor(point) {\n    this.point = point;\n    this.prev = null;\n    this.next = null;\n    this.face = null; // the face that is able to see this vertex\n  }\n\n} // A double linked list that contains vertex nodes.\n\n\nclass VertexList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n  }\n\n  first() {\n    return this.head;\n  }\n\n  last() {\n    return this.tail;\n  }\n\n  clear() {\n    this.head = this.tail = null;\n    return this;\n  } // Inserts a vertex before the target vertex\n\n\n  insertBefore(target, vertex) {\n    vertex.prev = target.prev;\n    vertex.next = target;\n\n    if (vertex.prev === null) {\n      this.head = vertex;\n    } else {\n      vertex.prev.next = vertex;\n    }\n\n    target.prev = vertex;\n    return this;\n  } // Inserts a vertex after the target vertex\n\n\n  insertAfter(target, vertex) {\n    vertex.prev = target;\n    vertex.next = target.next;\n\n    if (vertex.next === null) {\n      this.tail = vertex;\n    } else {\n      vertex.next.prev = vertex;\n    }\n\n    target.next = vertex;\n    return this;\n  } // Appends a vertex to the end of the linked list\n\n\n  append(vertex) {\n    if (this.head === null) {\n      this.head = vertex;\n    } else {\n      this.tail.next = vertex;\n    }\n\n    vertex.prev = this.tail;\n    vertex.next = null; // the tail has no subsequent vertex\n\n    this.tail = vertex;\n    return this;\n  } // Appends a chain of vertices where 'vertex' is the head.\n\n\n  appendChain(vertex) {\n    if (this.head === null) {\n      this.head = vertex;\n    } else {\n      this.tail.next = vertex;\n    }\n\n    vertex.prev = this.tail; // ensure that the 'tail' reference points to the last vertex of the chain\n\n    while (vertex.next !== null) {\n      vertex = vertex.next;\n    }\n\n    this.tail = vertex;\n    return this;\n  } // Removes a vertex from the linked list\n\n\n  remove(vertex) {\n    if (vertex.prev === null) {\n      this.head = vertex.next;\n    } else {\n      vertex.prev.next = vertex.next;\n    }\n\n    if (vertex.next === null) {\n      this.tail = vertex.prev;\n    } else {\n      vertex.next.prev = vertex.prev;\n    }\n\n    return this;\n  } // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\n\n\n  removeSubList(a, b) {\n    if (a.prev === null) {\n      this.head = b.next;\n    } else {\n      a.prev.next = b.next;\n    }\n\n    if (b.next === null) {\n      this.tail = a.prev;\n    } else {\n      b.next.prev = a.prev;\n    }\n\n    return this;\n  }\n\n  isEmpty() {\n    return this.head === null;\n  }\n\n}\n\nexport { ConvexHull };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}