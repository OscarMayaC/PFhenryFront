{"ast":null,"code":"import { ShaderMaterial, Material } from 'three';\nimport { getNodesKeys } from '../core/NodeUtils.js';\nclass NodeMaterial extends ShaderMaterial {\n  constructor() {\n    super();\n    this.type = this.constructor.name;\n    this.lights = true;\n  }\n  setDefaultValues(values) {\n    // This approach is to reuse the native refreshUniforms*\n    // and turn available the use of features like transmission and environment in core\n    let value;\n    for (const property in values) {\n      value = values[property];\n      if (this[property] === undefined) {\n        if (value && typeof value.clone === 'function') {\n          this[property] = value.clone();\n        } else {\n          this[property] = value;\n        }\n      }\n    }\n    Object.assign(this.defines, values.defines);\n  }\n  toJSON(meta) {\n    const isRoot = meta === undefined || typeof meta === 'string';\n    if (isRoot) {\n      meta = {\n        textures: {},\n        images: {},\n        nodes: {}\n      };\n    }\n    const data = Material.prototype.toJSON.call(this, meta);\n    const nodeKeys = getNodesKeys(this);\n    data.inputNodes = {};\n    for (const name of nodeKeys) {\n      data.inputNodes[name] = this[name].toJSON(meta).uuid;\n    } // TODO: Copied from Object3D.toJSON\n\n    function extractFromCache(cache) {\n      const values = [];\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n      return values;\n    }\n    if (isRoot) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      const nodes = extractFromCache(meta.nodes);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n      if (nodes.length > 0) data.nodes = nodes;\n    }\n    return data;\n  }\n}\nNodeMaterial.prototype.isNodeMaterial = true;\nexport default NodeMaterial;","map":{"version":3,"names":["ShaderMaterial","Material","getNodesKeys","NodeMaterial","constructor","type","name","lights","setDefaultValues","values","value","property","undefined","clone","Object","assign","defines","toJSON","meta","isRoot","textures","images","nodes","data","prototype","call","nodeKeys","inputNodes","uuid","extractFromCache","cache","key","metadata","push","length","isNodeMaterial"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/nodes/materials/NodeMaterial.js"],"sourcesContent":["import { ShaderMaterial, Material } from 'three';\nimport { getNodesKeys } from '../core/NodeUtils.js';\n\nclass NodeMaterial extends ShaderMaterial {\n  constructor() {\n    super();\n    this.type = this.constructor.name;\n    this.lights = true;\n  }\n\n  setDefaultValues(values) {\n    // This approach is to reuse the native refreshUniforms*\n    // and turn available the use of features like transmission and environment in core\n    let value;\n\n    for (const property in values) {\n      value = values[property];\n\n      if (this[property] === undefined) {\n        if (value && typeof value.clone === 'function') {\n          this[property] = value.clone();\n        } else {\n          this[property] = value;\n        }\n      }\n    }\n\n    Object.assign(this.defines, values.defines);\n  }\n\n  toJSON(meta) {\n    const isRoot = meta === undefined || typeof meta === 'string';\n\n    if (isRoot) {\n      meta = {\n        textures: {},\n        images: {},\n        nodes: {}\n      };\n    }\n\n    const data = Material.prototype.toJSON.call(this, meta);\n    const nodeKeys = getNodesKeys(this);\n    data.inputNodes = {};\n\n    for (const name of nodeKeys) {\n      data.inputNodes[name] = this[name].toJSON(meta).uuid;\n    } // TODO: Copied from Object3D.toJSON\n\n\n    function extractFromCache(cache) {\n      const values = [];\n\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n\n      return values;\n    }\n\n    if (isRoot) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      const nodes = extractFromCache(meta.nodes);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n      if (nodes.length > 0) data.nodes = nodes;\n    }\n\n    return data;\n  }\n\n}\n\nNodeMaterial.prototype.isNodeMaterial = true;\n\nexport default NodeMaterial;\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,QAAQ,QAAQ,OAAO;AAChD,SAASC,YAAY,QAAQ,sBAAsB;AAEnD,MAAMC,YAAY,SAASH,cAAc,CAAC;EACxCI,WAAWA,CAAA,EAAG;IACZ,KAAK,EAAE;IACP,IAAI,CAACC,IAAI,GAAG,IAAI,CAACD,WAAW,CAACE,IAAI;IACjC,IAAI,CAACC,MAAM,GAAG,IAAI;EACpB;EAEAC,gBAAgBA,CAACC,MAAM,EAAE;IACvB;IACA;IACA,IAAIC,KAAK;IAET,KAAK,MAAMC,QAAQ,IAAIF,MAAM,EAAE;MAC7BC,KAAK,GAAGD,MAAM,CAACE,QAAQ,CAAC;MAExB,IAAI,IAAI,CAACA,QAAQ,CAAC,KAAKC,SAAS,EAAE;QAChC,IAAIF,KAAK,IAAI,OAAOA,KAAK,CAACG,KAAK,KAAK,UAAU,EAAE;UAC9C,IAAI,CAACF,QAAQ,CAAC,GAAGD,KAAK,CAACG,KAAK,EAAE;QAChC,CAAC,MAAM;UACL,IAAI,CAACF,QAAQ,CAAC,GAAGD,KAAK;QACxB;MACF;IACF;IAEAI,MAAM,CAACC,MAAM,CAAC,IAAI,CAACC,OAAO,EAAEP,MAAM,CAACO,OAAO,CAAC;EAC7C;EAEAC,MAAMA,CAACC,IAAI,EAAE;IACX,MAAMC,MAAM,GAAGD,IAAI,KAAKN,SAAS,IAAI,OAAOM,IAAI,KAAK,QAAQ;IAE7D,IAAIC,MAAM,EAAE;MACVD,IAAI,GAAG;QACLE,QAAQ,EAAE,CAAC,CAAC;QACZC,MAAM,EAAE,CAAC,CAAC;QACVC,KAAK,EAAE,CAAC;MACV,CAAC;IACH;IAEA,MAAMC,IAAI,GAAGtB,QAAQ,CAACuB,SAAS,CAACP,MAAM,CAACQ,IAAI,CAAC,IAAI,EAAEP,IAAI,CAAC;IACvD,MAAMQ,QAAQ,GAAGxB,YAAY,CAAC,IAAI,CAAC;IACnCqB,IAAI,CAACI,UAAU,GAAG,CAAC,CAAC;IAEpB,KAAK,MAAMrB,IAAI,IAAIoB,QAAQ,EAAE;MAC3BH,IAAI,CAACI,UAAU,CAACrB,IAAI,CAAC,GAAG,IAAI,CAACA,IAAI,CAAC,CAACW,MAAM,CAACC,IAAI,CAAC,CAACU,IAAI;IACtD,CAAC,CAAC;;IAGF,SAASC,gBAAgBA,CAACC,KAAK,EAAE;MAC/B,MAAMrB,MAAM,GAAG,EAAE;MAEjB,KAAK,MAAMsB,GAAG,IAAID,KAAK,EAAE;QACvB,MAAMP,IAAI,GAAGO,KAAK,CAACC,GAAG,CAAC;QACvB,OAAOR,IAAI,CAACS,QAAQ;QACpBvB,MAAM,CAACwB,IAAI,CAACV,IAAI,CAAC;MACnB;MAEA,OAAOd,MAAM;IACf;IAEA,IAAIU,MAAM,EAAE;MACV,MAAMC,QAAQ,GAAGS,gBAAgB,CAACX,IAAI,CAACE,QAAQ,CAAC;MAChD,MAAMC,MAAM,GAAGQ,gBAAgB,CAACX,IAAI,CAACG,MAAM,CAAC;MAC5C,MAAMC,KAAK,GAAGO,gBAAgB,CAACX,IAAI,CAACI,KAAK,CAAC;MAC1C,IAAIF,QAAQ,CAACc,MAAM,GAAG,CAAC,EAAEX,IAAI,CAACH,QAAQ,GAAGA,QAAQ;MACjD,IAAIC,MAAM,CAACa,MAAM,GAAG,CAAC,EAAEX,IAAI,CAACF,MAAM,GAAGA,MAAM;MAC3C,IAAIC,KAAK,CAACY,MAAM,GAAG,CAAC,EAAEX,IAAI,CAACD,KAAK,GAAGA,KAAK;IAC1C;IAEA,OAAOC,IAAI;EACb;AAEF;AAEApB,YAAY,CAACqB,SAAS,CAACW,cAAc,GAAG,IAAI;AAE5C,eAAehC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}