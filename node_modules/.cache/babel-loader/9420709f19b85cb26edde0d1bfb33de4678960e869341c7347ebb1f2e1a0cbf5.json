{"ast":null,"code":"import { Vector3, Quaternion, FileLoader, LoaderUtils, Matrix4, Bone, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, MeshPhongMaterial, FrontSide, Vector2, SkinnedMesh, Mesh, Skeleton, AnimationClip, AnimationMixer, Loader, TextureLoader } from 'three';\nvar XLoader = function () {\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  };\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (let i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if ('value' in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n  var XboneInf = function XboneInf() {\n    classCallCheck(this, XboneInf);\n    this.boneName = '';\n    this.BoneIndex = 0;\n    this.Indeces = [];\n    this.Weights = [];\n    this.initMatrix = null;\n    this.OffsetMatrix = null;\n  };\n  var XAnimationInfo = function XAnimationInfo() {\n    classCallCheck(this, XAnimationInfo);\n    this.animeName = '';\n    this.boneName = '';\n    this.targetBone = null;\n    this.keyType = 4;\n    this.frameStartLv = 0;\n    this.keyFrames = [];\n    this.InverseMx = null;\n  };\n  var XAnimationObj = function () {\n    function XAnimationObj(_flags) {\n      classCallCheck(this, XAnimationObj);\n      this.fps = 30;\n      this.name = 'xanimation';\n      this.length = 0;\n      this.hierarchy = [];\n      this.putFlags = _flags;\n      if (this.putFlags.putPos === undefined) {\n        this.putFlags.putPos = true;\n      }\n      if (this.putFlags.putRot === undefined) {\n        this.putFlags.putRot = true;\n      }\n      if (this.putFlags.putScl === undefined) {\n        this.putFlags.putScl = true;\n      }\n    }\n    createClass(XAnimationObj, [{\n      key: 'make',\n      value: function make(XAnimationInfoArray) {\n        for (let i = 0; i < XAnimationInfoArray.length; i++) {\n          this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i]));\n        }\n        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\n      }\n    }, {\n      key: 'clone',\n      value: function clone() {\n        return Object.assign({}, this);\n      }\n    }, {\n      key: 'makeBonekeys',\n      value: function makeBonekeys(XAnimationInfo) {\n        var refObj = {};\n        refObj.name = XAnimationInfo.boneName;\n        refObj.parent = '';\n        refObj.keys = this.keyFrameRefactor(XAnimationInfo);\n        refObj.copy = function () {\n          return Object.assign({}, this);\n        };\n        return refObj;\n      }\n    }, {\n      key: 'keyFrameRefactor',\n      value: function keyFrameRefactor(XAnimationInfo) {\n        var keys = [];\n        for (let i = 0; i < XAnimationInfo.keyFrames.length; i++) {\n          var keyframe = {};\n          keyframe.time = XAnimationInfo.keyFrames[i].time * this.fps;\n          if (XAnimationInfo.keyFrames[i].pos && this.putFlags.putPos) {\n            keyframe.pos = XAnimationInfo.keyFrames[i].pos;\n          }\n          if (XAnimationInfo.keyFrames[i].rot && this.putFlags.putRot) {\n            keyframe.rot = XAnimationInfo.keyFrames[i].rot;\n          }\n          if (XAnimationInfo.keyFrames[i].scl && this.putFlags.putScl) {\n            keyframe.scl = XAnimationInfo.keyFrames[i].scl;\n          }\n          if (XAnimationInfo.keyFrames[i].matrix) {\n            keyframe.matrix = XAnimationInfo.keyFrames[i].matrix;\n            if (this.putFlags.putPos) {\n              keyframe.pos = new Vector3().setFromMatrixPosition(keyframe.matrix);\n            }\n            if (this.putFlags.putRot) {\n              keyframe.rot = new Quaternion().setFromRotationMatrix(keyframe.matrix);\n            }\n            if (this.putFlags.putScl) {\n              keyframe.scl = new Vector3().setFromMatrixScale(keyframe.matrix);\n            }\n          }\n          keys.push(keyframe);\n        }\n        return keys;\n      }\n    }]);\n    return XAnimationObj;\n  }();\n  var XKeyFrameInfo = function XKeyFrameInfo() {\n    classCallCheck(this, XKeyFrameInfo);\n    this.index = 0;\n    this.Frame = 0;\n    this.time = 0.0;\n    this.matrix = null;\n  };\n  var XLoader = function () {\n    function XLoader(manager) {\n      Loader.call(this, manager);\n      classCallCheck(this, XLoader);\n      this.debug = false;\n      this.texloader = new TextureLoader(this.manager);\n      this.url = '';\n      this._putMatLength = 0;\n      this._nowMat = null;\n      this._nowFrameName = '';\n      this.frameHierarchie = [];\n      this.Hierarchies = {};\n      this.HieStack = [];\n      this._currentObject = {};\n      this._currentFrame = {};\n      this._data = null;\n      this.onLoad = null;\n      this.IsUvYReverse = true;\n      this.Meshes = [];\n      this.animations = [];\n      this.animTicksPerSecond = 30;\n      this._currentGeo = null;\n      this._currentAnime = null;\n      this._currentAnimeFrames = null;\n    }\n    createClass(XLoader, [{\n      key: '_setArgOption',\n      value: function _setArgOption(_arg) {\n        var _start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        if (!_arg) {\n          return;\n        }\n        for (let i = _start; i < _arg.length; i++) {\n          switch (i) {\n            case 0:\n              this.url = _arg[i];\n              break;\n            case 1:\n              this.options = _arg[i];\n              break;\n          }\n        }\n        if (this.options === undefined) {\n          this.options = {};\n        }\n      }\n    }, {\n      key: 'load',\n      value: function load(_arg, onLoad, onProgress, onError) {\n        var _this = this;\n        this._setArgOption(_arg);\n        var loader = new FileLoader(this.manager);\n        loader.setPath(this.path);\n        loader.setResponseType('arraybuffer');\n        loader.setRequestHeader(this.requestHeader);\n        loader.setWithCredentials(this.withCredentials);\n        loader.load(this.url, function (response) {\n          try {\n            _this.parse(response, onLoad);\n          } catch (e) {\n            if (onError) {\n              onError(e);\n            } else {\n              console.error(e);\n            }\n            _this.manager.itemError(_this.url);\n          }\n        }, onProgress, onError);\n      }\n    }, {\n      key: '_readLine',\n      value: function _readLine(line) {\n        var readed = 0;\n        while (true) {\n          var find = -1;\n          find = line.indexOf('//', readed);\n          if (find === -1) {\n            find = line.indexOf('#', readed);\n          }\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf('\\r\\n', readed);\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf('\\r', readed);\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf('\\n', readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n        return line.substr(readed);\n      }\n    }, {\n      key: '_readLine',\n      value: function _readLine(line) {\n        var readed = 0;\n        while (true) {\n          var find = -1;\n          find = line.indexOf('//', readed);\n          if (find === -1) {\n            find = line.indexOf('#', readed);\n          }\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf('\\r\\n', readed);\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf('\\r', readed);\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf('\\n', readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n        return line.substr(readed);\n      }\n    }, {\n      key: '_isBinary',\n      value: function _isBinary(binData) {\n        var reader = new DataView(binData);\n        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n        var n_faces = reader.getUint32(80, true);\n        var expect = 80 + 32 / 8 + n_faces * face_size;\n        if (expect === reader.byteLength) {\n          return true;\n        }\n        var fileLength = reader.byteLength;\n        for (let index = 0; index < fileLength; index++) {\n          if (reader.getUint8(index, false) > 127) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: '_ensureBinary',\n      value: function _ensureBinary(buf) {\n        if (typeof buf === 'string') {\n          var array_buffer = new Uint8Array(buf.length);\n          for (let i = 0; i < buf.length; i++) {\n            array_buffer[i] = buf.charCodeAt(i) & 0xff;\n          }\n          return array_buffer.buffer || array_buffer;\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: '_ensureString',\n      value: function _ensureString(buf) {\n        if (typeof buf !== 'string') {\n          return LoaderUtils.decodeText(new Uint8Array(buf));\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: 'parse',\n      value: function _parse(data, onLoad) {\n        var binData = this._ensureBinary(data);\n        this._data = this._ensureString(data);\n        this.onLoad = onLoad;\n        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\n      }\n    }, {\n      key: '_parseBinary',\n      value: function _parseBinary(data) {\n        return this._parseASCII(LoaderUtils.decodeText(new Uint8Array(data)));\n      }\n    }, {\n      key: '_parseASCII',\n      value: function _parseASCII() {\n        var path;\n        if (this.resourcePath !== '') {\n          path = this.resourcePath;\n        } else if (this.path !== '') {\n          path = this.path;\n        } else {\n          path = LoaderUtils.extractUrlBase(this.url);\n        }\n        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\n        var endRead = 16;\n        this.Hierarchies.children = [];\n        this._hierarchieParse(this.Hierarchies, endRead);\n        this._changeRoot();\n        this._currentObject = this.Hierarchies.children.shift();\n        this._mainloop();\n      }\n    }, {\n      key: '_hierarchieParse',\n      value: function _hierarchieParse(_parent, _end) {\n        var endRead = _end;\n        while (true) {\n          var find1 = this._data.indexOf('{', endRead) + 1;\n          var findEnd = this._data.indexOf('}', endRead);\n          var findNext = this._data.indexOf('{', find1) + 1;\n          if (find1 > 0 && findEnd > find1) {\n            var _currentObject = {};\n            _currentObject.children = [];\n            var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\n            var word = nameData.split(/ /g);\n            if (word.length > 0) {\n              _currentObject.type = word[0];\n              if (word.length >= 2) {\n                _currentObject.name = word[1];\n              } else {\n                _currentObject.name = word[0] + this.Hierarchies.children.length;\n              }\n            } else {\n              _currentObject.name = nameData;\n              _currentObject.type = '';\n            }\n            if (_currentObject.type === 'Animation') {\n              _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\n              var refs = this._hierarchieParse(_currentObject, findEnd + 1);\n              endRead = refs.end;\n              _currentObject.children = refs.parent.children;\n            } else {\n              var DataEnder = this._data.lastIndexOf(';', findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\n              _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\n              if (findNext <= 0 || findEnd < findNext) {\n                endRead = findEnd + 1;\n              } else {\n                var nextStart = Math.max(DataEnder + 1, find1);\n                var _refs = this._hierarchieParse(_currentObject, nextStart);\n                endRead = _refs.end;\n                _currentObject.children = _refs.parent.children;\n              }\n            }\n            _currentObject.parent = _parent;\n            if (_currentObject.type != 'template') {\n              _parent.children.push(_currentObject);\n            }\n          } else {\n            endRead = find1 === -1 ? this._data.length : findEnd + 1;\n            break;\n          }\n        }\n        return {\n          parent: _parent,\n          end: endRead\n        };\n      }\n    }, {\n      key: '_mainloop',\n      value: function _mainloop() {\n        var _this2 = this;\n        this._mainProc();\n        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n          setTimeout(function () {\n            _this2._mainloop();\n          }, 1);\n        } else {\n          setTimeout(function () {\n            _this2.onLoad({\n              models: _this2.Meshes,\n              animations: _this2.animations\n            });\n          }, 1);\n        }\n      }\n    }, {\n      key: '_mainProc',\n      value: function _mainProc() {\n        var breakFlag = false;\n        while (true) {\n          if (!this._currentObject.worked) {\n            switch (this._currentObject.type) {\n              case 'template':\n                break;\n              case 'AnimTicksPerSecond':\n                this.animTicksPerSecond = parseInt(this._currentObject.data);\n                break;\n              case 'Frame':\n                this._setFrame();\n                break;\n              case 'FrameTransformMatrix':\n                this._setFrameTransformMatrix();\n                break;\n              case 'Mesh':\n                this._changeRoot();\n                this._currentGeo = {};\n                this._currentGeo.name = this._currentObject.name.trim();\n                this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\n                this._currentGeo.VertexSetedBoneCount = [];\n                this._currentGeo.GeometryData = {\n                  vertices: [],\n                  normals: [],\n                  uvs: [],\n                  skinIndices: [],\n                  skinWeights: [],\n                  indices: [],\n                  materialIndices: []\n                };\n                this._currentGeo.Materials = [];\n                this._currentGeo.normalVectors = [];\n                this._currentGeo.BoneInfs = [];\n                this._currentGeo.baseFrame = this._currentFrame;\n                this._makeBoneFrom_CurrentFrame();\n                this._readVertexDatas();\n                breakFlag = true;\n                break;\n              case 'MeshNormals':\n                this._readVertexDatas();\n                break;\n              case 'MeshTextureCoords':\n                this._setMeshTextureCoords();\n                break;\n              case 'VertexDuplicationIndices':\n                break;\n              case 'MeshMaterialList':\n                this._setMeshMaterialList();\n                break;\n              case 'Material':\n                this._setMaterial();\n                break;\n              case 'SkinWeights':\n                this._setSkinWeights();\n                break;\n              case 'AnimationSet':\n                this._changeRoot();\n                this._currentAnime = {};\n                this._currentAnime.name = this._currentObject.name.trim();\n                this._currentAnime.AnimeFrames = [];\n                break;\n              case 'Animation':\n                if (this._currentAnimeFrames) {\n                  this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                }\n                this._currentAnimeFrames = new XAnimationInfo();\n                this._currentAnimeFrames.boneName = this._currentObject.data.trim();\n                break;\n              case 'AnimationKey':\n                this._readAnimationKey();\n                breakFlag = true;\n                break;\n            }\n            this._currentObject.worked = true;\n          }\n          if (this._currentObject.children.length > 0) {\n            this._currentObject = this._currentObject.children.shift();\n            if (this.debug) {\n              console.log('processing ' + this._currentObject.name);\n            }\n            if (breakFlag) break;\n          } else {\n            if (this._currentObject.worked) {\n              if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                this._changeRoot();\n              }\n            }\n            if (this._currentObject.parent) {\n              this._currentObject = this._currentObject.parent;\n            } else {\n              breakFlag = true;\n            }\n            if (breakFlag) break;\n          }\n        }\n        return;\n      }\n    }, {\n      key: '_changeRoot',\n      value: function _changeRoot() {\n        if (this._currentGeo != null && this._currentGeo.name) {\n          this._makeOutputGeometry();\n        }\n        this._currentGeo = {};\n        if (this._currentAnime != null && this._currentAnime.name) {\n          if (this._currentAnimeFrames) {\n            this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n            this._currentAnimeFrames = null;\n          }\n          this._makeOutputAnimation();\n        }\n        this._currentAnime = {};\n      }\n    }, {\n      key: '_getParentName',\n      value: function _getParentName(_obj) {\n        if (_obj.parent) {\n          if (_obj.parent.name) {\n            return _obj.parent.name;\n          } else {\n            return this._getParentName(_obj.parent);\n          }\n        } else {\n          return '';\n        }\n      }\n    }, {\n      key: '_setFrame',\n      value: function _setFrame() {\n        this._nowFrameName = this._currentObject.name.trim();\n        this._currentFrame = {};\n        this._currentFrame.name = this._nowFrameName;\n        this._currentFrame.children = [];\n        if (this._currentObject.parent && this._currentObject.parent.name) {\n          this._currentFrame.parentName = this._currentObject.parent.name;\n        }\n        this.frameHierarchie.push(this._nowFrameName);\n        this.HieStack[this._nowFrameName] = this._currentFrame;\n      }\n    }, {\n      key: '_setFrameTransformMatrix',\n      value: function _setFrameTransformMatrix() {\n        this._currentFrame.FrameTransformMatrix = new Matrix4();\n        var data = this._currentObject.data.split(',');\n        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\n        this._makeBoneFrom_CurrentFrame();\n      }\n    }, {\n      key: '_makeBoneFrom_CurrentFrame',\n      value: function _makeBoneFrom_CurrentFrame() {\n        if (!this._currentFrame.FrameTransformMatrix) {\n          return;\n        }\n        var b = new Bone();\n        b.name = this._currentFrame.name;\n        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\n        b.matrixWorld = b.matrix;\n        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n        this._currentFrame.putBone = b;\n        if (this._currentFrame.parentName) {\n          for (let frame in this.HieStack) {\n            if (this.HieStack[frame].name === this._currentFrame.parentName) {\n              this.HieStack[frame].putBone.add(this._currentFrame.putBone);\n            }\n          }\n        }\n      }\n    }, {\n      key: '_readVertexDatas',\n      value: function _readVertexDatas() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n        var maxLength = 0;\n        while (true) {\n          var changeMode = false;\n          if (mode_local === 0) {\n            var refO = this._readInt1(endRead);\n            endRead = refO.endRead;\n            mode_local = 1;\n            maxLength = this._currentObject.data.indexOf(';;', endRead) + 1;\n            if (maxLength <= 0) {\n              maxLength = this._currentObject.data.length;\n            }\n          } else {\n            var find = 0;\n            switch (mode) {\n              case 0:\n                find = this._currentObject.data.indexOf(',', endRead) + 1;\n                break;\n              case 1:\n                find = this._currentObject.data.indexOf(';,', endRead) + 1;\n                break;\n            }\n            if (find === 0 || find > maxLength) {\n              find = maxLength;\n              mode_local = 0;\n              changeMode = true;\n            }\n            switch (this._currentObject.type) {\n              case 'Mesh':\n                switch (mode) {\n                  case 0:\n                    this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\n                    break;\n                  case 1:\n                    this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\n                    break;\n                }\n                break;\n              case 'MeshNormals':\n                switch (mode) {\n                  case 0:\n                    this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\n                    break;\n                }\n                break;\n            }\n            endRead = find + 1;\n            if (changeMode) {\n              mode++;\n            }\n          }\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_readInt1',\n      value: function _readInt1(start) {\n        var find = this._currentObject.data.indexOf(';', start);\n        return {\n          refI: parseInt(this._currentObject.data.substr(start, find - start)),\n          endRead: find + 1\n        };\n      }\n    }, {\n      key: '_readVertex1',\n      value: function _readVertex1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\n        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\n        this._currentGeo.VertexSetedBoneCount.push(0);\n      }\n    }, {\n      key: '_readFace1',\n      value: function _readFace1(line) {\n        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(',');\n        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));\n      }\n    }, {\n      key: '_readNormalVector1',\n      value: function _readNormalVector1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n      }\n    }, {\n      key: '_buildGeometry',\n      value: function _buildGeometry() {\n        var bufferGeometry = new BufferGeometry();\n        var position = [];\n        var normals = [];\n        var uvs = [];\n        var skinIndices = [];\n        var skinWeights = []; //\n\n        var data = this._currentGeo.GeometryData;\n        for (let i = 0, l = data.indices.length; i < l; i++) {\n          var stride2 = data.indices[i] * 2;\n          var stride3 = data.indices[i] * 3;\n          var stride4 = data.indices[i] * 4;\n          position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\n          normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\n          skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);\n          skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);\n          uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\n        } //\n\n        bufferGeometry.setAttribute('position', new Float32BufferAttribute(position, 3));\n        bufferGeometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n        bufferGeometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n        bufferGeometry.setAttribute('skinIndex', new Uint16BufferAttribute(skinIndices, 4));\n        bufferGeometry.setAttribute('skinWeight', new Float32BufferAttribute(skinWeights, 4));\n        this._computeGroups(bufferGeometry, data.materialIndices);\n        return bufferGeometry;\n      }\n    }, {\n      key: '_computeGroups',\n      value: function _computeGroups(bufferGeometry, materialIndices) {\n        var group;\n        var groups = [];\n        var materialIndex = undefined;\n        for (let i = 0; i < materialIndices.length; i++) {\n          var currentMaterialIndex = materialIndices[i];\n          if (currentMaterialIndex !== materialIndex) {\n            materialIndex = currentMaterialIndex;\n            if (group !== undefined) {\n              group.count = i * 3 - group.start;\n              groups.push(group);\n            }\n            group = {\n              start: i * 3,\n              materialIndex: materialIndex\n            };\n          }\n        }\n        if (group !== undefined) {\n          group.count = i * 3 - group.start;\n          groups.push(group);\n        }\n        bufferGeometry.groups = groups;\n      }\n    }, {\n      key: '_setMeshTextureCoords',\n      value: function _setMeshTextureCoords() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n        while (true) {\n          switch (mode) {\n            case 0:\n              if (mode_local === 0) {\n                var refO = this._readInt1(0);\n                endRead = refO.endRead;\n                mode_local = 1;\n              } else {\n                var find = this._currentObject.data.indexOf(',', endRead) + 1;\n                if (find === 0) {\n                  find = this._currentObject.data.length;\n                  mode = 2;\n                  mode_local = 0;\n                }\n                var line = this._currentObject.data.substr(endRead, find - endRead);\n                var data = this._readLine(line.trim()).split(';');\n                if (this.IsUvYReverse) {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\n                } else {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\n                }\n                endRead = find + 1;\n              }\n              break;\n          }\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_setMeshMaterialList',\n      value: function _setMeshMaterialList() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n        while (true) {\n          if (mode_local < 2) {\n            var refO = this._readInt1(endRead);\n            endRead = refO.endRead;\n            mode_local++;\n          } else {\n            var find = this._currentObject.data.indexOf(';', endRead);\n            if (find === -1) {\n              find = this._currentObject.data.length;\n              mode = 3;\n              mode_local = 0;\n            }\n            var line = this._currentObject.data.substr(endRead, find - endRead);\n            var data = this._readLine(line.trim()).split(',');\n            for (let i = 0; i < data.length; i++) {\n              this._currentGeo.GeometryData.materialIndices[i] = parseInt(data[i]);\n            }\n            endRead = this._currentObject.data.length;\n          }\n          if (endRead >= this._currentObject.data.length || mode >= 3) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_setMaterial',\n      value: function _setMaterial() {\n        var _nowMat = new MeshPhongMaterial({\n          color: Math.random() * 0xffffff\n        });\n        _nowMat.side = FrontSide;\n        _nowMat.name = this._currentObject.name;\n        var endRead = 0;\n        var find = this._currentObject.data.indexOf(';;', endRead);\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n        var data = this._readLine(line.trim()).split(';');\n        _nowMat.color.r = parseFloat(data[0]);\n        _nowMat.color.g = parseFloat(data[1]);\n        _nowMat.color.b = parseFloat(data[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        _nowMat.shininess = parseFloat(this._readLine(line));\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';;', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data2 = this._readLine(line.trim()).split(';');\n        _nowMat.specular.r = parseFloat(data2[0]);\n        _nowMat.specular.g = parseFloat(data2[1]);\n        _nowMat.specular.b = parseFloat(data2[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(';;', endRead);\n        if (find === -1) {\n          find = this._currentObject.data.length;\n        }\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data3 = this._readLine(line.trim()).split(';');\n        _nowMat.emissive.r = parseFloat(data3[0]);\n        _nowMat.emissive.g = parseFloat(data3[1]);\n        _nowMat.emissive.b = parseFloat(data3[2]);\n        var localObject = null;\n        while (true) {\n          if (this._currentObject.children.length > 0) {\n            localObject = this._currentObject.children.shift();\n            if (this.debug) {\n              console.log('processing ' + localObject.name);\n            }\n            var fileName = localObject.data.substr(1, localObject.data.length - 2);\n            switch (localObject.type) {\n              case 'TextureFilename':\n                _nowMat.map = this.texloader.load(fileName);\n                break;\n              case 'BumpMapFilename':\n                _nowMat.bumpMap = this.texloader.load(fileName);\n                _nowMat.bumpScale = 0.05;\n                break;\n              case 'NormalMapFilename':\n                _nowMat.normalMap = this.texloader.load(fileName);\n                _nowMat.normalScale = new Vector2(2, 2);\n                break;\n              case 'EmissiveMapFilename':\n                _nowMat.emissiveMap = this.texloader.load(fileName);\n                break;\n              case 'LightMapFilename':\n                _nowMat.lightMap = this.texloader.load(fileName);\n                break;\n            }\n          } else {\n            break;\n          }\n        }\n        this._currentGeo.Materials.push(_nowMat);\n      }\n    }, {\n      key: '_setSkinWeights',\n      value: function _setSkinWeights() {\n        var boneInf = new XboneInf();\n        var endRead = 0;\n        var find = this._currentObject.data.indexOf(';', endRead);\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n        endRead = find + 1;\n        boneInf.boneName = line.substr(1, line.length - 2);\n        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n        find = this._currentObject.data.indexOf(';', endRead);\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data = this._readLine(line.trim()).split(',');\n        for (let i = 0; i < data.length; i++) {\n          boneInf.Indeces.push(parseInt(data[i]));\n        }\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data2 = this._readLine(line.trim()).split(',');\n        for (let _i = 0; _i < data2.length; _i++) {\n          boneInf.Weights.push(parseFloat(data2[_i]));\n        }\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n        if (find <= 0) {\n          find = this._currentObject.data.length;\n        }\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data3 = this._readLine(line.trim()).split(',');\n        boneInf.OffsetMatrix = new Matrix4();\n        this._ParseMatrixData(boneInf.OffsetMatrix, data3);\n        this._currentGeo.BoneInfs.push(boneInf);\n      }\n    }, {\n      key: '_makePutBoneList',\n      value: function _makePutBoneList(_RootName, _bones) {\n        var putting = false;\n        for (let frame in this.HieStack) {\n          if (this.HieStack[frame].name === _RootName || putting) {\n            putting = true;\n            var b = new Bone();\n            b.name = this.HieStack[frame].name;\n            b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\n            b.matrixWorld = b.matrix;\n            b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\n            b.pos = new Vector3().setFromMatrixPosition(b.FrameTransformMatrix).toArray();\n            b.rotq = new Quaternion().setFromRotationMatrix(b.FrameTransformMatrix).toArray();\n            b.scl = new Vector3().setFromMatrixScale(b.FrameTransformMatrix).toArray();\n            if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n              for (let i = 0; i < _bones.length; i++) {\n                if (this.HieStack[frame].parentName === _bones[i].name) {\n                  _bones[i].add(b);\n                  b.parent = i;\n                  break;\n                }\n              }\n            }\n            _bones.push(b);\n          }\n        }\n      }\n    }, {\n      key: '_makeOutputGeometry',\n      value: function _makeOutputGeometry() {\n        var mesh = null;\n        if (this._currentGeo.BoneInfs.length > 0) {\n          var putBones = [];\n          this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\n          for (let bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n            var boneIndex = 0;\n            for (let bb = 0; bb < putBones.length; bb++) {\n              if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                boneIndex = bb;\n                putBones[bb].OffsetMatrix = new Matrix4();\n                putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\n                break;\n              }\n            }\n            for (let vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n              var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\n              var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\n              var stride = nowVertexID * 4;\n              switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                case 0:\n                  this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\n                  break;\n                case 1:\n                  this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\n                  break;\n                case 2:\n                  this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\n                  break;\n                case 3:\n                  this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\n                  break;\n              }\n              this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\n              if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                console.log('warn! over 4 bone weight! :' + nowVertexID);\n              }\n            }\n          }\n          for (let sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n            this._currentGeo.Materials[sk].skinning = true;\n          }\n          var offsetList = [];\n          for (let _bi = 0; _bi < putBones.length; _bi++) {\n            if (putBones[_bi].OffsetMatrix) {\n              offsetList.push(putBones[_bi].OffsetMatrix);\n            } else {\n              offsetList.push(new Matrix4());\n            }\n          }\n          var bufferGeometry = this._buildGeometry();\n          mesh = new SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n          this._initSkeleton(mesh, putBones, offsetList);\n        } else {\n          var _bufferGeometry = this._buildGeometry();\n          mesh = new Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n        }\n        mesh.name = this._currentGeo.name;\n        var worldBaseMx = new Matrix4();\n        var currentMxFrame = this._currentGeo.baseFrame.putBone;\n        if (currentMxFrame && currentMxFrame.parent) {\n          while (true) {\n            currentMxFrame = currentMxFrame.parent;\n            if (currentMxFrame) {\n              worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\n            } else {\n              break;\n            }\n          }\n          mesh.applyMatrix4(worldBaseMx);\n        }\n        this.Meshes.push(mesh);\n      }\n    }, {\n      key: '_initSkeleton',\n      value: function _initSkeleton(mesh, boneList, boneInverses) {\n        var bones = [],\n          bone,\n          gbone;\n        var i, il;\n        for (i = 0, il = boneList.length; i < il; i++) {\n          gbone = boneList[i];\n          bone = new Bone();\n          bones.push(bone);\n          bone.name = gbone.name;\n          bone.position.fromArray(gbone.pos);\n          bone.quaternion.fromArray(gbone.rotq);\n          if (gbone.scl !== undefined) bone.scale.fromArray(gbone.scl);\n        }\n        for (i = 0, il = boneList.length; i < il; i++) {\n          gbone = boneList[i];\n          if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\n            bones[gbone.parent].add(bones[i]);\n          } else {\n            mesh.add(bones[i]);\n          }\n        }\n        mesh.updateMatrixWorld(true);\n        var skeleton = new Skeleton(bones, boneInverses);\n        mesh.bind(skeleton, mesh.matrixWorld);\n      }\n    }, {\n      key: '_readAnimationKey',\n      value: function _readAnimationKey() {\n        var endRead = 0;\n        var find = this._currentObject.data.indexOf(';', endRead);\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n        endRead = find + 1;\n        var nowKeyType = parseInt(this._readLine(line));\n        find = this._currentObject.data.indexOf(';', endRead);\n        endRead = find + 1;\n        line = this._currentObject.data.substr(endRead);\n        var data = this._readLine(line.trim()).split(';;,');\n        for (let i = 0; i < data.length; i++) {\n          var data2 = data[i].split(';');\n          var keyInfo = new XKeyFrameInfo();\n          keyInfo.type = nowKeyType;\n          keyInfo.Frame = parseInt(data2[0]);\n          keyInfo.index = this._currentAnimeFrames.keyFrames.length;\n          keyInfo.time = keyInfo.Frame;\n          if (nowKeyType != 4) {\n            var frameFound = false;\n            for (let mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n              if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                keyInfo = this._currentAnimeFrames.keyFrames[mm];\n                frameFound = true;\n                break;\n              }\n            }\n            var frameValue = data2[2].split(',');\n            switch (nowKeyType) {\n              case 0:\n                keyInfo.rot = new Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);\n                break;\n              case 1:\n                keyInfo.scl = new Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n              case 2:\n                keyInfo.pos = new Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n            }\n            if (!frameFound) {\n              this._currentAnimeFrames.keyFrames.push(keyInfo);\n            }\n          } else {\n            keyInfo.matrix = new Matrix4();\n            this._ParseMatrixData(keyInfo.matrix, data2[2].split(','));\n            this._currentAnimeFrames.keyFrames.push(keyInfo);\n          }\n        }\n      }\n    }, {\n      key: '_makeOutputAnimation',\n      value: function _makeOutputAnimation() {\n        var animationObj = new XAnimationObj(this.options);\n        animationObj.fps = this.animTicksPerSecond;\n        animationObj.name = this._currentAnime.name;\n        animationObj.make(this._currentAnime.AnimeFrames);\n        this.animations.push(animationObj);\n      }\n    }, {\n      key: 'assignAnimation',\n      value: function assignAnimation(_model, _animation) {\n        var model = _model;\n        var animation = _animation;\n        if (!model) {\n          model = this.Meshes[0];\n        }\n        if (!animation) {\n          animation = this.animations[0];\n        }\n        if (!model || !animation) {\n          return null;\n        }\n        var put = {};\n        put.fps = animation.fps;\n        put.name = animation.name;\n        put.length = animation.length;\n        put.hierarchy = [];\n        for (let b = 0; b < model.skeleton.bones.length; b++) {\n          var findAnimation = false;\n          for (let i = 0; i < animation.hierarchy.length; i++) {\n            if (model.skeleton.bones[b].name === animation.hierarchy[i].name) {\n              findAnimation = true;\n              var c_key = animation.hierarchy[i].copy();\n              c_key.parent = -1;\n              if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === 'Bone') {\n                for (let bb = 0; bb < put.hierarchy.length; bb++) {\n                  if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                    c_key.parent = bb;\n                    c_key.parentName = model.skeleton.bones[b].parent.name;\n                  }\n                }\n              }\n              put.hierarchy.push(c_key);\n              break;\n            }\n          }\n          if (!findAnimation) {\n            var _c_key = animation.hierarchy[0].copy();\n            _c_key.name = model.skeleton.bones[b].name;\n            _c_key.parent = -1;\n            for (let k = 0; k < _c_key.keys.length; k++) {\n              if (_c_key.keys[k].pos) {\n                _c_key.keys[k].pos.set(0, 0, 0);\n              }\n              if (_c_key.keys[k].scl) {\n                _c_key.keys[k].scl.set(1, 1, 1);\n              }\n              if (_c_key.keys[k].rot) {\n                _c_key.keys[k].rot.set(0, 0, 0, 1);\n              }\n            }\n            put.hierarchy.push(_c_key);\n          }\n        }\n        if (!model.geometry.animations) {\n          model.geometry.animations = [];\n        }\n        model.geometry.animations.push(AnimationClip.parseAnimation(put, model.skeleton.bones));\n        if (!model.animationMixer) {\n          model.animationMixer = new AnimationMixer(model);\n        }\n        return put;\n      }\n    }, {\n      key: '_ParseMatrixData',\n      value: function _ParseMatrixData(targetMatrix, data) {\n        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));\n      }\n    }]);\n    return XLoader;\n  }();\n  return XLoader;\n}();\nexport { XLoader };","map":{"version":3,"names":["Vector3","Quaternion","FileLoader","LoaderUtils","Matrix4","Bone","BufferGeometry","Float32BufferAttribute","Uint16BufferAttribute","MeshPhongMaterial","FrontSide","Vector2","SkinnedMesh","Mesh","Skeleton","AnimationClip","AnimationMixer","Loader","TextureLoader","XLoader","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","XboneInf","boneName","BoneIndex","Indeces","Weights","initMatrix","OffsetMatrix","XAnimationInfo","animeName","targetBone","keyType","frameStartLv","keyFrames","InverseMx","XAnimationObj","_flags","fps","name","hierarchy","putFlags","putPos","undefined","putRot","putScl","value","make","XAnimationInfoArray","push","makeBonekeys","keys","time","clone","assign","refObj","parent","keyFrameRefactor","copy","keyframe","pos","rot","scl","matrix","setFromMatrixPosition","setFromRotationMatrix","setFromMatrixScale","XKeyFrameInfo","index","Frame","manager","call","debug","texloader","url","_putMatLength","_nowMat","_nowFrameName","frameHierarchie","Hierarchies","HieStack","_currentObject","_currentFrame","_data","onLoad","IsUvYReverse","Meshes","animations","animTicksPerSecond","_currentGeo","_currentAnime","_currentAnimeFrames","_setArgOption","_arg","_start","arguments","options","load","onProgress","onError","_this","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","response","parse","e","console","error","itemError","_readLine","line","readed","find","indexOf","foundNewLine","substr","_isBinary","binData","reader","DataView","face_size","n_faces","getUint32","expect","byteLength","fileLength","getUint8","_ensureBinary","buf","array_buffer","Uint8Array","charCodeAt","buffer","_ensureString","decodeText","_parse","data","_parseBinary","_parseASCII","resourcePath","extractUrlBase","setCrossOrigin","crossOrigin","endRead","children","_hierarchieParse","_changeRoot","shift","_mainloop","_parent","_end","find1","findEnd","findNext","nameData","trim","word","split","type","refs","end","DataEnder","lastIndexOf","Math","min","nextStart","max","_refs","_this2","_mainProc","worked","setTimeout","models","breakFlag","parseInt","_setFrame","_setFrameTransformMatrix","parentName","_getParentName","VertexSetedBoneCount","GeometryData","vertices","normals","uvs","skinIndices","skinWeights","indices","materialIndices","Materials","normalVectors","BoneInfs","baseFrame","_makeBoneFrom_CurrentFrame","_readVertexDatas","_setMeshTextureCoords","_setMeshMaterialList","_setMaterial","_setSkinWeights","AnimeFrames","_readAnimationKey","log","_makeOutputGeometry","_makeOutputAnimation","_obj","FrameTransformMatrix","_ParseMatrixData","b","applyMatrix4","matrixWorld","putBone","frame","add","mode","mode_local","maxLength","changeMode","refO","_readInt1","_readVertex1","_readFace1","_readNormalVector1","start","refI","parseFloat","_buildGeometry","bufferGeometry","position","l","stride2","stride3","stride4","setAttribute","_computeGroups","group","groups","materialIndex","currentMaterialIndex","count","color","random","side","r","g","shininess","data2","specular","data3","emissive","localObject","fileName","map","bumpMap","bumpScale","normalMap","normalScale","emissiveMap","lightMap","boneInf","_i","_makePutBoneList","_RootName","_bones","putting","toArray","rotq","mesh","putBones","bi","boneIndex","bb","vi","nowVertexID","nowVal","stride","sk","skinning","offsetList","_bi","_initSkeleton","_bufferGeometry","worldBaseMx","currentMxFrame","multiply","boneList","boneInverses","bones","bone","gbone","il","fromArray","quaternion","scale","updateMatrixWorld","skeleton","bind","nowKeyType","keyInfo","frameFound","mm","frameValue","animationObj","assignAnimation","_model","_animation","model","animation","put","findAnimation","c_key","_c_key","k","set","geometry","parseAnimation","animationMixer","targetMatrix"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/loaders/XLoader.js"],"sourcesContent":["import { Vector3, Quaternion, FileLoader, LoaderUtils, Matrix4, Bone, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, MeshPhongMaterial, FrontSide, Vector2, SkinnedMesh, Mesh, Skeleton, AnimationClip, AnimationMixer, Loader, TextureLoader } from 'three';\n\nvar XLoader = function () {\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (let i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if ('value' in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var XboneInf = function XboneInf() {\n    classCallCheck(this, XboneInf);\n    this.boneName = '';\n    this.BoneIndex = 0;\n    this.Indeces = [];\n    this.Weights = [];\n    this.initMatrix = null;\n    this.OffsetMatrix = null;\n  };\n\n  var XAnimationInfo = function XAnimationInfo() {\n    classCallCheck(this, XAnimationInfo);\n    this.animeName = '';\n    this.boneName = '';\n    this.targetBone = null;\n    this.keyType = 4;\n    this.frameStartLv = 0;\n    this.keyFrames = [];\n    this.InverseMx = null;\n  };\n\n  var XAnimationObj = function () {\n    function XAnimationObj(_flags) {\n      classCallCheck(this, XAnimationObj);\n      this.fps = 30;\n      this.name = 'xanimation';\n      this.length = 0;\n      this.hierarchy = [];\n      this.putFlags = _flags;\n\n      if (this.putFlags.putPos === undefined) {\n        this.putFlags.putPos = true;\n      }\n\n      if (this.putFlags.putRot === undefined) {\n        this.putFlags.putRot = true;\n      }\n\n      if (this.putFlags.putScl === undefined) {\n        this.putFlags.putScl = true;\n      }\n    }\n\n    createClass(XAnimationObj, [{\n      key: 'make',\n      value: function make(XAnimationInfoArray) {\n        for (let i = 0; i < XAnimationInfoArray.length; i++) {\n          this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i]));\n        }\n\n        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\n      }\n    }, {\n      key: 'clone',\n      value: function clone() {\n        return Object.assign({}, this);\n      }\n    }, {\n      key: 'makeBonekeys',\n      value: function makeBonekeys(XAnimationInfo) {\n        var refObj = {};\n        refObj.name = XAnimationInfo.boneName;\n        refObj.parent = '';\n        refObj.keys = this.keyFrameRefactor(XAnimationInfo);\n\n        refObj.copy = function () {\n          return Object.assign({}, this);\n        };\n\n        return refObj;\n      }\n    }, {\n      key: 'keyFrameRefactor',\n      value: function keyFrameRefactor(XAnimationInfo) {\n        var keys = [];\n\n        for (let i = 0; i < XAnimationInfo.keyFrames.length; i++) {\n          var keyframe = {};\n          keyframe.time = XAnimationInfo.keyFrames[i].time * this.fps;\n\n          if (XAnimationInfo.keyFrames[i].pos && this.putFlags.putPos) {\n            keyframe.pos = XAnimationInfo.keyFrames[i].pos;\n          }\n\n          if (XAnimationInfo.keyFrames[i].rot && this.putFlags.putRot) {\n            keyframe.rot = XAnimationInfo.keyFrames[i].rot;\n          }\n\n          if (XAnimationInfo.keyFrames[i].scl && this.putFlags.putScl) {\n            keyframe.scl = XAnimationInfo.keyFrames[i].scl;\n          }\n\n          if (XAnimationInfo.keyFrames[i].matrix) {\n            keyframe.matrix = XAnimationInfo.keyFrames[i].matrix;\n\n            if (this.putFlags.putPos) {\n              keyframe.pos = new Vector3().setFromMatrixPosition(keyframe.matrix);\n            }\n\n            if (this.putFlags.putRot) {\n              keyframe.rot = new Quaternion().setFromRotationMatrix(keyframe.matrix);\n            }\n\n            if (this.putFlags.putScl) {\n              keyframe.scl = new Vector3().setFromMatrixScale(keyframe.matrix);\n            }\n          }\n\n          keys.push(keyframe);\n        }\n\n        return keys;\n      }\n    }]);\n    return XAnimationObj;\n  }();\n\n  var XKeyFrameInfo = function XKeyFrameInfo() {\n    classCallCheck(this, XKeyFrameInfo);\n    this.index = 0;\n    this.Frame = 0;\n    this.time = 0.0;\n    this.matrix = null;\n  };\n\n  var XLoader = function () {\n    function XLoader(manager) {\n      Loader.call(this, manager);\n      classCallCheck(this, XLoader);\n      this.debug = false;\n      this.texloader = new TextureLoader(this.manager);\n      this.url = '';\n      this._putMatLength = 0;\n      this._nowMat = null;\n      this._nowFrameName = '';\n      this.frameHierarchie = [];\n      this.Hierarchies = {};\n      this.HieStack = [];\n      this._currentObject = {};\n      this._currentFrame = {};\n      this._data = null;\n      this.onLoad = null;\n      this.IsUvYReverse = true;\n      this.Meshes = [];\n      this.animations = [];\n      this.animTicksPerSecond = 30;\n      this._currentGeo = null;\n      this._currentAnime = null;\n      this._currentAnimeFrames = null;\n    }\n\n    createClass(XLoader, [{\n      key: '_setArgOption',\n      value: function _setArgOption(_arg) {\n        var _start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n        if (!_arg) {\n          return;\n        }\n\n        for (let i = _start; i < _arg.length; i++) {\n          switch (i) {\n            case 0:\n              this.url = _arg[i];\n              break;\n\n            case 1:\n              this.options = _arg[i];\n              break;\n          }\n        }\n\n        if (this.options === undefined) {\n          this.options = {};\n        }\n      }\n    }, {\n      key: 'load',\n      value: function load(_arg, onLoad, onProgress, onError) {\n        var _this = this;\n\n        this._setArgOption(_arg);\n\n        var loader = new FileLoader(this.manager);\n        loader.setPath(this.path);\n        loader.setResponseType('arraybuffer');\n        loader.setRequestHeader(this.requestHeader);\n        loader.setWithCredentials(this.withCredentials);\n        loader.load(this.url, function (response) {\n          try {\n            _this.parse(response, onLoad);\n          } catch (e) {\n            if (onError) {\n              onError(e);\n            } else {\n              console.error(e);\n            }\n\n            _this.manager.itemError(_this.url);\n          }\n        }, onProgress, onError);\n      }\n    }, {\n      key: '_readLine',\n      value: function _readLine(line) {\n        var readed = 0;\n\n        while (true) {\n          var find = -1;\n          find = line.indexOf('//', readed);\n\n          if (find === -1) {\n            find = line.indexOf('#', readed);\n          }\n\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf('\\r\\n', readed);\n\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf('\\r', readed);\n\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf('\\n', readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n\n        return line.substr(readed);\n      }\n    }, {\n      key: '_readLine',\n      value: function _readLine(line) {\n        var readed = 0;\n\n        while (true) {\n          var find = -1;\n          find = line.indexOf('//', readed);\n\n          if (find === -1) {\n            find = line.indexOf('#', readed);\n          }\n\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf('\\r\\n', readed);\n\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf('\\r', readed);\n\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf('\\n', readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n\n        return line.substr(readed);\n      }\n    }, {\n      key: '_isBinary',\n      value: function _isBinary(binData) {\n        var reader = new DataView(binData);\n        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n        var n_faces = reader.getUint32(80, true);\n        var expect = 80 + 32 / 8 + n_faces * face_size;\n\n        if (expect === reader.byteLength) {\n          return true;\n        }\n\n        var fileLength = reader.byteLength;\n\n        for (let index = 0; index < fileLength; index++) {\n          if (reader.getUint8(index, false) > 127) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: '_ensureBinary',\n      value: function _ensureBinary(buf) {\n        if (typeof buf === 'string') {\n          var array_buffer = new Uint8Array(buf.length);\n\n          for (let i = 0; i < buf.length; i++) {\n            array_buffer[i] = buf.charCodeAt(i) & 0xff;\n          }\n\n          return array_buffer.buffer || array_buffer;\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: '_ensureString',\n      value: function _ensureString(buf) {\n        if (typeof buf !== 'string') {\n          return LoaderUtils.decodeText(new Uint8Array(buf));\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: 'parse',\n      value: function _parse(data, onLoad) {\n        var binData = this._ensureBinary(data);\n\n        this._data = this._ensureString(data);\n        this.onLoad = onLoad;\n        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\n      }\n    }, {\n      key: '_parseBinary',\n      value: function _parseBinary(data) {\n        return this._parseASCII(LoaderUtils.decodeText(new Uint8Array(data)));\n      }\n    }, {\n      key: '_parseASCII',\n      value: function _parseASCII() {\n        var path;\n\n        if (this.resourcePath !== '') {\n          path = this.resourcePath;\n        } else if (this.path !== '') {\n          path = this.path;\n        } else {\n          path = LoaderUtils.extractUrlBase(this.url);\n        }\n\n        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\n        var endRead = 16;\n        this.Hierarchies.children = [];\n\n        this._hierarchieParse(this.Hierarchies, endRead);\n\n        this._changeRoot();\n\n        this._currentObject = this.Hierarchies.children.shift();\n\n        this._mainloop();\n      }\n    }, {\n      key: '_hierarchieParse',\n      value: function _hierarchieParse(_parent, _end) {\n        var endRead = _end;\n\n        while (true) {\n          var find1 = this._data.indexOf('{', endRead) + 1;\n\n          var findEnd = this._data.indexOf('}', endRead);\n\n          var findNext = this._data.indexOf('{', find1) + 1;\n\n          if (find1 > 0 && findEnd > find1) {\n            var _currentObject = {};\n            _currentObject.children = [];\n\n            var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\n\n            var word = nameData.split(/ /g);\n\n            if (word.length > 0) {\n              _currentObject.type = word[0];\n\n              if (word.length >= 2) {\n                _currentObject.name = word[1];\n              } else {\n                _currentObject.name = word[0] + this.Hierarchies.children.length;\n              }\n            } else {\n              _currentObject.name = nameData;\n              _currentObject.type = '';\n            }\n\n            if (_currentObject.type === 'Animation') {\n              _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\n\n              var refs = this._hierarchieParse(_currentObject, findEnd + 1);\n\n              endRead = refs.end;\n              _currentObject.children = refs.parent.children;\n            } else {\n              var DataEnder = this._data.lastIndexOf(';', findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\n\n              _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\n\n              if (findNext <= 0 || findEnd < findNext) {\n                endRead = findEnd + 1;\n              } else {\n                var nextStart = Math.max(DataEnder + 1, find1);\n\n                var _refs = this._hierarchieParse(_currentObject, nextStart);\n\n                endRead = _refs.end;\n                _currentObject.children = _refs.parent.children;\n              }\n            }\n\n            _currentObject.parent = _parent;\n\n            if (_currentObject.type != 'template') {\n              _parent.children.push(_currentObject);\n            }\n          } else {\n            endRead = find1 === -1 ? this._data.length : findEnd + 1;\n            break;\n          }\n        }\n\n        return {\n          parent: _parent,\n          end: endRead\n        };\n      }\n    }, {\n      key: '_mainloop',\n      value: function _mainloop() {\n        var _this2 = this;\n\n        this._mainProc();\n\n        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n          setTimeout(function () {\n            _this2._mainloop();\n          }, 1);\n        } else {\n          setTimeout(function () {\n            _this2.onLoad({\n              models: _this2.Meshes,\n              animations: _this2.animations\n            });\n          }, 1);\n        }\n      }\n    }, {\n      key: '_mainProc',\n      value: function _mainProc() {\n        var breakFlag = false;\n\n        while (true) {\n          if (!this._currentObject.worked) {\n            switch (this._currentObject.type) {\n              case 'template':\n                break;\n\n              case 'AnimTicksPerSecond':\n                this.animTicksPerSecond = parseInt(this._currentObject.data);\n                break;\n\n              case 'Frame':\n                this._setFrame();\n\n                break;\n\n              case 'FrameTransformMatrix':\n                this._setFrameTransformMatrix();\n\n                break;\n\n              case 'Mesh':\n                this._changeRoot();\n\n                this._currentGeo = {};\n                this._currentGeo.name = this._currentObject.name.trim();\n                this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\n                this._currentGeo.VertexSetedBoneCount = [];\n                this._currentGeo.GeometryData = {\n                  vertices: [],\n                  normals: [],\n                  uvs: [],\n                  skinIndices: [],\n                  skinWeights: [],\n                  indices: [],\n                  materialIndices: []\n                };\n                this._currentGeo.Materials = [];\n                this._currentGeo.normalVectors = [];\n                this._currentGeo.BoneInfs = [];\n                this._currentGeo.baseFrame = this._currentFrame;\n\n                this._makeBoneFrom_CurrentFrame();\n\n                this._readVertexDatas();\n\n                breakFlag = true;\n                break;\n\n              case 'MeshNormals':\n                this._readVertexDatas();\n\n                break;\n\n              case 'MeshTextureCoords':\n                this._setMeshTextureCoords();\n\n                break;\n\n              case 'VertexDuplicationIndices':\n                break;\n\n              case 'MeshMaterialList':\n                this._setMeshMaterialList();\n\n                break;\n\n              case 'Material':\n                this._setMaterial();\n\n                break;\n\n              case 'SkinWeights':\n                this._setSkinWeights();\n\n                break;\n\n              case 'AnimationSet':\n                this._changeRoot();\n\n                this._currentAnime = {};\n                this._currentAnime.name = this._currentObject.name.trim();\n                this._currentAnime.AnimeFrames = [];\n                break;\n\n              case 'Animation':\n                if (this._currentAnimeFrames) {\n                  this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                }\n\n                this._currentAnimeFrames = new XAnimationInfo();\n                this._currentAnimeFrames.boneName = this._currentObject.data.trim();\n                break;\n\n              case 'AnimationKey':\n                this._readAnimationKey();\n\n                breakFlag = true;\n                break;\n            }\n\n            this._currentObject.worked = true;\n          }\n\n          if (this._currentObject.children.length > 0) {\n            this._currentObject = this._currentObject.children.shift();\n\n            if (this.debug) {\n              console.log('processing ' + this._currentObject.name);\n            }\n\n            if (breakFlag) break;\n          } else {\n            if (this._currentObject.worked) {\n              if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                this._changeRoot();\n              }\n            }\n\n            if (this._currentObject.parent) {\n              this._currentObject = this._currentObject.parent;\n            } else {\n              breakFlag = true;\n            }\n\n            if (breakFlag) break;\n          }\n        }\n\n        return;\n      }\n    }, {\n      key: '_changeRoot',\n      value: function _changeRoot() {\n        if (this._currentGeo != null && this._currentGeo.name) {\n          this._makeOutputGeometry();\n        }\n\n        this._currentGeo = {};\n\n        if (this._currentAnime != null && this._currentAnime.name) {\n          if (this._currentAnimeFrames) {\n            this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n\n            this._currentAnimeFrames = null;\n          }\n\n          this._makeOutputAnimation();\n        }\n\n        this._currentAnime = {};\n      }\n    }, {\n      key: '_getParentName',\n      value: function _getParentName(_obj) {\n        if (_obj.parent) {\n          if (_obj.parent.name) {\n            return _obj.parent.name;\n          } else {\n            return this._getParentName(_obj.parent);\n          }\n        } else {\n          return '';\n        }\n      }\n    }, {\n      key: '_setFrame',\n      value: function _setFrame() {\n        this._nowFrameName = this._currentObject.name.trim();\n        this._currentFrame = {};\n        this._currentFrame.name = this._nowFrameName;\n        this._currentFrame.children = [];\n\n        if (this._currentObject.parent && this._currentObject.parent.name) {\n          this._currentFrame.parentName = this._currentObject.parent.name;\n        }\n\n        this.frameHierarchie.push(this._nowFrameName);\n        this.HieStack[this._nowFrameName] = this._currentFrame;\n      }\n    }, {\n      key: '_setFrameTransformMatrix',\n      value: function _setFrameTransformMatrix() {\n        this._currentFrame.FrameTransformMatrix = new Matrix4();\n\n        var data = this._currentObject.data.split(',');\n\n        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\n\n        this._makeBoneFrom_CurrentFrame();\n      }\n    }, {\n      key: '_makeBoneFrom_CurrentFrame',\n      value: function _makeBoneFrom_CurrentFrame() {\n        if (!this._currentFrame.FrameTransformMatrix) {\n          return;\n        }\n\n        var b = new Bone();\n        b.name = this._currentFrame.name;\n        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\n        b.matrixWorld = b.matrix;\n        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n        this._currentFrame.putBone = b;\n\n        if (this._currentFrame.parentName) {\n          for (let frame in this.HieStack) {\n            if (this.HieStack[frame].name === this._currentFrame.parentName) {\n              this.HieStack[frame].putBone.add(this._currentFrame.putBone);\n            }\n          }\n        }\n      }\n    }, {\n      key: '_readVertexDatas',\n      value: function _readVertexDatas() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n        var maxLength = 0;\n\n        while (true) {\n          var changeMode = false;\n\n          if (mode_local === 0) {\n            var refO = this._readInt1(endRead);\n\n            endRead = refO.endRead;\n            mode_local = 1;\n            maxLength = this._currentObject.data.indexOf(';;', endRead) + 1;\n\n            if (maxLength <= 0) {\n              maxLength = this._currentObject.data.length;\n            }\n          } else {\n            var find = 0;\n\n            switch (mode) {\n              case 0:\n                find = this._currentObject.data.indexOf(',', endRead) + 1;\n                break;\n\n              case 1:\n                find = this._currentObject.data.indexOf(';,', endRead) + 1;\n                break;\n            }\n\n            if (find === 0 || find > maxLength) {\n              find = maxLength;\n              mode_local = 0;\n              changeMode = true;\n            }\n\n            switch (this._currentObject.type) {\n              case 'Mesh':\n                switch (mode) {\n                  case 0:\n                    this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n\n                  case 1:\n                    this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n                }\n\n                break;\n\n              case 'MeshNormals':\n                switch (mode) {\n                  case 0:\n                    this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n                }\n\n                break;\n            }\n\n            endRead = find + 1;\n\n            if (changeMode) {\n              mode++;\n            }\n          }\n\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_readInt1',\n      value: function _readInt1(start) {\n        var find = this._currentObject.data.indexOf(';', start);\n\n        return {\n          refI: parseInt(this._currentObject.data.substr(start, find - start)),\n          endRead: find + 1\n        };\n      }\n    }, {\n      key: '_readVertex1',\n      value: function _readVertex1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n\n        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n\n        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\n\n        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\n\n        this._currentGeo.VertexSetedBoneCount.push(0);\n      }\n    }, {\n      key: '_readFace1',\n      value: function _readFace1(line) {\n        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(',');\n\n        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));\n      }\n    }, {\n      key: '_readNormalVector1',\n      value: function _readNormalVector1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n\n        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n      }\n    }, {\n      key: '_buildGeometry',\n      value: function _buildGeometry() {\n        var bufferGeometry = new BufferGeometry();\n        var position = [];\n        var normals = [];\n        var uvs = [];\n        var skinIndices = [];\n        var skinWeights = []; //\n\n        var data = this._currentGeo.GeometryData;\n\n        for (let i = 0, l = data.indices.length; i < l; i++) {\n          var stride2 = data.indices[i] * 2;\n          var stride3 = data.indices[i] * 3;\n          var stride4 = data.indices[i] * 4;\n          position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\n          normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\n          skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);\n          skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);\n          uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\n        } //\n\n\n        bufferGeometry.setAttribute('position', new Float32BufferAttribute(position, 3));\n        bufferGeometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n        bufferGeometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n        bufferGeometry.setAttribute('skinIndex', new Uint16BufferAttribute(skinIndices, 4));\n        bufferGeometry.setAttribute('skinWeight', new Float32BufferAttribute(skinWeights, 4));\n\n        this._computeGroups(bufferGeometry, data.materialIndices);\n\n        return bufferGeometry;\n      }\n    }, {\n      key: '_computeGroups',\n      value: function _computeGroups(bufferGeometry, materialIndices) {\n        var group;\n        var groups = [];\n        var materialIndex = undefined;\n\n        for (let i = 0; i < materialIndices.length; i++) {\n          var currentMaterialIndex = materialIndices[i];\n\n          if (currentMaterialIndex !== materialIndex) {\n            materialIndex = currentMaterialIndex;\n\n            if (group !== undefined) {\n              group.count = i * 3 - group.start;\n              groups.push(group);\n            }\n\n            group = {\n              start: i * 3,\n              materialIndex: materialIndex\n            };\n          }\n        }\n\n        if (group !== undefined) {\n          group.count = i * 3 - group.start;\n          groups.push(group);\n        }\n\n        bufferGeometry.groups = groups;\n      }\n    }, {\n      key: '_setMeshTextureCoords',\n      value: function _setMeshTextureCoords() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n\n        while (true) {\n          switch (mode) {\n            case 0:\n              if (mode_local === 0) {\n                var refO = this._readInt1(0);\n\n                endRead = refO.endRead;\n                mode_local = 1;\n              } else {\n                var find = this._currentObject.data.indexOf(',', endRead) + 1;\n\n                if (find === 0) {\n                  find = this._currentObject.data.length;\n                  mode = 2;\n                  mode_local = 0;\n                }\n\n                var line = this._currentObject.data.substr(endRead, find - endRead);\n\n                var data = this._readLine(line.trim()).split(';');\n\n                if (this.IsUvYReverse) {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\n                } else {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\n                }\n\n                endRead = find + 1;\n              }\n\n              break;\n          }\n\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_setMeshMaterialList',\n      value: function _setMeshMaterialList() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n\n        while (true) {\n          if (mode_local < 2) {\n            var refO = this._readInt1(endRead);\n\n            endRead = refO.endRead;\n            mode_local++;\n          } else {\n            var find = this._currentObject.data.indexOf(';', endRead);\n\n            if (find === -1) {\n              find = this._currentObject.data.length;\n              mode = 3;\n              mode_local = 0;\n            }\n\n            var line = this._currentObject.data.substr(endRead, find - endRead);\n\n            var data = this._readLine(line.trim()).split(',');\n\n            for (let i = 0; i < data.length; i++) {\n              this._currentGeo.GeometryData.materialIndices[i] = parseInt(data[i]);\n            }\n\n            endRead = this._currentObject.data.length;\n          }\n\n          if (endRead >= this._currentObject.data.length || mode >= 3) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_setMaterial',\n      value: function _setMaterial() {\n        var _nowMat = new MeshPhongMaterial({\n          color: Math.random() * 0xffffff\n        });\n\n        _nowMat.side = FrontSide;\n        _nowMat.name = this._currentObject.name;\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(';;', endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data = this._readLine(line.trim()).split(';');\n\n        _nowMat.color.r = parseFloat(data[0]);\n        _nowMat.color.g = parseFloat(data[1]);\n        _nowMat.color.b = parseFloat(data[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        _nowMat.shininess = parseFloat(this._readLine(line));\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';;', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data2 = this._readLine(line.trim()).split(';');\n\n        _nowMat.specular.r = parseFloat(data2[0]);\n        _nowMat.specular.g = parseFloat(data2[1]);\n        _nowMat.specular.b = parseFloat(data2[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(';;', endRead);\n\n        if (find === -1) {\n          find = this._currentObject.data.length;\n        }\n\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data3 = this._readLine(line.trim()).split(';');\n\n        _nowMat.emissive.r = parseFloat(data3[0]);\n        _nowMat.emissive.g = parseFloat(data3[1]);\n        _nowMat.emissive.b = parseFloat(data3[2]);\n        var localObject = null;\n\n        while (true) {\n          if (this._currentObject.children.length > 0) {\n            localObject = this._currentObject.children.shift();\n\n            if (this.debug) {\n              console.log('processing ' + localObject.name);\n            }\n\n            var fileName = localObject.data.substr(1, localObject.data.length - 2);\n\n            switch (localObject.type) {\n              case 'TextureFilename':\n                _nowMat.map = this.texloader.load(fileName);\n                break;\n\n              case 'BumpMapFilename':\n                _nowMat.bumpMap = this.texloader.load(fileName);\n                _nowMat.bumpScale = 0.05;\n                break;\n\n              case 'NormalMapFilename':\n                _nowMat.normalMap = this.texloader.load(fileName);\n                _nowMat.normalScale = new Vector2(2, 2);\n                break;\n\n              case 'EmissiveMapFilename':\n                _nowMat.emissiveMap = this.texloader.load(fileName);\n                break;\n\n              case 'LightMapFilename':\n                _nowMat.lightMap = this.texloader.load(fileName);\n                break;\n            }\n          } else {\n            break;\n          }\n        }\n\n        this._currentGeo.Materials.push(_nowMat);\n      }\n    }, {\n      key: '_setSkinWeights',\n      value: function _setSkinWeights() {\n        var boneInf = new XboneInf();\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(';', endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        endRead = find + 1;\n        boneInf.boneName = line.substr(1, line.length - 2);\n        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n        find = this._currentObject.data.indexOf(';', endRead);\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data = this._readLine(line.trim()).split(',');\n\n        for (let i = 0; i < data.length; i++) {\n          boneInf.Indeces.push(parseInt(data[i]));\n        }\n\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data2 = this._readLine(line.trim()).split(',');\n\n        for (let _i = 0; _i < data2.length; _i++) {\n          boneInf.Weights.push(parseFloat(data2[_i]));\n        }\n\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n\n        if (find <= 0) {\n          find = this._currentObject.data.length;\n        }\n\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data3 = this._readLine(line.trim()).split(',');\n\n        boneInf.OffsetMatrix = new Matrix4();\n\n        this._ParseMatrixData(boneInf.OffsetMatrix, data3);\n\n        this._currentGeo.BoneInfs.push(boneInf);\n      }\n    }, {\n      key: '_makePutBoneList',\n      value: function _makePutBoneList(_RootName, _bones) {\n        var putting = false;\n\n        for (let frame in this.HieStack) {\n          if (this.HieStack[frame].name === _RootName || putting) {\n            putting = true;\n            var b = new Bone();\n            b.name = this.HieStack[frame].name;\n            b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\n            b.matrixWorld = b.matrix;\n            b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\n            b.pos = new Vector3().setFromMatrixPosition(b.FrameTransformMatrix).toArray();\n            b.rotq = new Quaternion().setFromRotationMatrix(b.FrameTransformMatrix).toArray();\n            b.scl = new Vector3().setFromMatrixScale(b.FrameTransformMatrix).toArray();\n\n            if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n              for (let i = 0; i < _bones.length; i++) {\n                if (this.HieStack[frame].parentName === _bones[i].name) {\n                  _bones[i].add(b);\n\n                  b.parent = i;\n                  break;\n                }\n              }\n            }\n\n            _bones.push(b);\n          }\n        }\n      }\n    }, {\n      key: '_makeOutputGeometry',\n      value: function _makeOutputGeometry() {\n        var mesh = null;\n\n        if (this._currentGeo.BoneInfs.length > 0) {\n          var putBones = [];\n\n          this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\n\n          for (let bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n            var boneIndex = 0;\n\n            for (let bb = 0; bb < putBones.length; bb++) {\n              if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                boneIndex = bb;\n                putBones[bb].OffsetMatrix = new Matrix4();\n                putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\n                break;\n              }\n            }\n\n            for (let vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n              var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\n              var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\n              var stride = nowVertexID * 4;\n\n              switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                case 0:\n                  this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\n                  break;\n\n                case 1:\n                  this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\n                  break;\n\n                case 2:\n                  this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\n                  break;\n\n                case 3:\n                  this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\n                  break;\n              }\n\n              this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\n\n              if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                console.log('warn! over 4 bone weight! :' + nowVertexID);\n              }\n            }\n          }\n\n          for (let sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n            this._currentGeo.Materials[sk].skinning = true;\n          }\n\n          var offsetList = [];\n\n          for (let _bi = 0; _bi < putBones.length; _bi++) {\n            if (putBones[_bi].OffsetMatrix) {\n              offsetList.push(putBones[_bi].OffsetMatrix);\n            } else {\n              offsetList.push(new Matrix4());\n            }\n          }\n\n          var bufferGeometry = this._buildGeometry();\n\n          mesh = new SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n\n          this._initSkeleton(mesh, putBones, offsetList);\n        } else {\n          var _bufferGeometry = this._buildGeometry();\n\n          mesh = new Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n        }\n\n        mesh.name = this._currentGeo.name;\n        var worldBaseMx = new Matrix4();\n        var currentMxFrame = this._currentGeo.baseFrame.putBone;\n\n        if (currentMxFrame && currentMxFrame.parent) {\n          while (true) {\n            currentMxFrame = currentMxFrame.parent;\n\n            if (currentMxFrame) {\n              worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\n            } else {\n              break;\n            }\n          }\n\n          mesh.applyMatrix4(worldBaseMx);\n        }\n\n        this.Meshes.push(mesh);\n      }\n    }, {\n      key: '_initSkeleton',\n      value: function _initSkeleton(mesh, boneList, boneInverses) {\n        var bones = [],\n            bone,\n            gbone;\n        var i, il;\n\n        for (i = 0, il = boneList.length; i < il; i++) {\n          gbone = boneList[i];\n          bone = new Bone();\n          bones.push(bone);\n          bone.name = gbone.name;\n          bone.position.fromArray(gbone.pos);\n          bone.quaternion.fromArray(gbone.rotq);\n          if (gbone.scl !== undefined) bone.scale.fromArray(gbone.scl);\n        }\n\n        for (i = 0, il = boneList.length; i < il; i++) {\n          gbone = boneList[i];\n\n          if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\n            bones[gbone.parent].add(bones[i]);\n          } else {\n            mesh.add(bones[i]);\n          }\n        }\n\n        mesh.updateMatrixWorld(true);\n        var skeleton = new Skeleton(bones, boneInverses);\n        mesh.bind(skeleton, mesh.matrixWorld);\n      }\n    }, {\n      key: '_readAnimationKey',\n      value: function _readAnimationKey() {\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(';', endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        endRead = find + 1;\n        var nowKeyType = parseInt(this._readLine(line));\n        find = this._currentObject.data.indexOf(';', endRead);\n        endRead = find + 1;\n        line = this._currentObject.data.substr(endRead);\n\n        var data = this._readLine(line.trim()).split(';;,');\n\n        for (let i = 0; i < data.length; i++) {\n          var data2 = data[i].split(';');\n          var keyInfo = new XKeyFrameInfo();\n          keyInfo.type = nowKeyType;\n          keyInfo.Frame = parseInt(data2[0]);\n          keyInfo.index = this._currentAnimeFrames.keyFrames.length;\n          keyInfo.time = keyInfo.Frame;\n\n          if (nowKeyType != 4) {\n            var frameFound = false;\n\n            for (let mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n              if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                keyInfo = this._currentAnimeFrames.keyFrames[mm];\n                frameFound = true;\n                break;\n              }\n            }\n\n            var frameValue = data2[2].split(',');\n\n            switch (nowKeyType) {\n              case 0:\n                keyInfo.rot = new Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);\n                break;\n\n              case 1:\n                keyInfo.scl = new Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n\n              case 2:\n                keyInfo.pos = new Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n            }\n\n            if (!frameFound) {\n              this._currentAnimeFrames.keyFrames.push(keyInfo);\n            }\n          } else {\n            keyInfo.matrix = new Matrix4();\n\n            this._ParseMatrixData(keyInfo.matrix, data2[2].split(','));\n\n            this._currentAnimeFrames.keyFrames.push(keyInfo);\n          }\n        }\n      }\n    }, {\n      key: '_makeOutputAnimation',\n      value: function _makeOutputAnimation() {\n        var animationObj = new XAnimationObj(this.options);\n        animationObj.fps = this.animTicksPerSecond;\n        animationObj.name = this._currentAnime.name;\n        animationObj.make(this._currentAnime.AnimeFrames);\n        this.animations.push(animationObj);\n      }\n    }, {\n      key: 'assignAnimation',\n      value: function assignAnimation(_model, _animation) {\n        var model = _model;\n        var animation = _animation;\n\n        if (!model) {\n          model = this.Meshes[0];\n        }\n\n        if (!animation) {\n          animation = this.animations[0];\n        }\n\n        if (!model || !animation) {\n          return null;\n        }\n\n        var put = {};\n        put.fps = animation.fps;\n        put.name = animation.name;\n        put.length = animation.length;\n        put.hierarchy = [];\n\n        for (let b = 0; b < model.skeleton.bones.length; b++) {\n          var findAnimation = false;\n\n          for (let i = 0; i < animation.hierarchy.length; i++) {\n            if (model.skeleton.bones[b].name === animation.hierarchy[i].name) {\n              findAnimation = true;\n              var c_key = animation.hierarchy[i].copy();\n              c_key.parent = -1;\n\n              if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === 'Bone') {\n                for (let bb = 0; bb < put.hierarchy.length; bb++) {\n                  if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                    c_key.parent = bb;\n                    c_key.parentName = model.skeleton.bones[b].parent.name;\n                  }\n                }\n              }\n\n              put.hierarchy.push(c_key);\n              break;\n            }\n          }\n\n          if (!findAnimation) {\n            var _c_key = animation.hierarchy[0].copy();\n\n            _c_key.name = model.skeleton.bones[b].name;\n            _c_key.parent = -1;\n\n            for (let k = 0; k < _c_key.keys.length; k++) {\n              if (_c_key.keys[k].pos) {\n                _c_key.keys[k].pos.set(0, 0, 0);\n              }\n\n              if (_c_key.keys[k].scl) {\n                _c_key.keys[k].scl.set(1, 1, 1);\n              }\n\n              if (_c_key.keys[k].rot) {\n                _c_key.keys[k].rot.set(0, 0, 0, 1);\n              }\n            }\n\n            put.hierarchy.push(_c_key);\n          }\n        }\n\n        if (!model.geometry.animations) {\n          model.geometry.animations = [];\n        }\n\n        model.geometry.animations.push(AnimationClip.parseAnimation(put, model.skeleton.bones));\n\n        if (!model.animationMixer) {\n          model.animationMixer = new AnimationMixer(model);\n        }\n\n        return put;\n      }\n    }, {\n      key: '_ParseMatrixData',\n      value: function _ParseMatrixData(targetMatrix, data) {\n        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));\n      }\n    }]);\n    return XLoader;\n  }();\n\n  return XLoader;\n}();\n\nexport { XLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}