{"ast":null,"code":"import { Object3D, Box2, Color, Vector3, Matrix3, Matrix4, Camera } from 'three';\nimport { Projector, RenderableSprite, RenderableLine, RenderableFace } from './Projector.js';\nvar SVGObject = function (node) {\n  Object3D.call(this);\n  this.node = node;\n};\nSVGObject.prototype = Object.create(Object3D.prototype);\nSVGObject.prototype.constructor = SVGObject;\nvar SVGRenderer = function () {\n  var _this = this,\n    _renderData,\n    _elements,\n    _lights,\n    _projector = new Projector(),\n    _svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),\n    _svgWidth,\n    _svgHeight,\n    _svgWidthHalf,\n    _svgHeightHalf,\n    _v1,\n    _v2,\n    _v3,\n    _clipBox = new Box2(),\n    _elemBox = new Box2(),\n    _color = new Color(),\n    _diffuseColor = new Color(),\n    _ambientLight = new Color(),\n    _directionalLights = new Color(),\n    _pointLights = new Color(),\n    _clearColor = new Color(),\n    _vector3 = new Vector3(),\n    // Needed for PointLight\n    _centroid = new Vector3(),\n    _normal = new Vector3(),\n    _normalViewMatrix = new Matrix3(),\n    _viewMatrix = new Matrix4(),\n    _viewProjectionMatrix = new Matrix4(),\n    _svgPathPool = [],\n    _svgNode,\n    _pathCount = 0,\n    _currentPath,\n    _currentStyle,\n    _quality = 1,\n    _precision = null;\n  this.domElement = _svg;\n  this.autoClear = true;\n  this.sortObjects = true;\n  this.sortElements = true;\n  this.overdraw = 0.5;\n  this.info = {\n    render: {\n      vertices: 0,\n      faces: 0\n    }\n  };\n  this.setQuality = function (quality) {\n    switch (quality) {\n      case 'high':\n        _quality = 1;\n        break;\n      case 'low':\n        _quality = 0;\n        break;\n    }\n  };\n  this.setClearColor = function (color) {\n    _clearColor.set(color);\n  };\n  this.setPixelRatio = function () {};\n  this.setSize = function (width, height) {\n    _svgWidth = width;\n    _svgHeight = height;\n    _svgWidthHalf = _svgWidth / 2;\n    _svgHeightHalf = _svgHeight / 2;\n    _svg.setAttribute('viewBox', -_svgWidthHalf + ' ' + -_svgHeightHalf + ' ' + _svgWidth + ' ' + _svgHeight);\n    _svg.setAttribute('width', _svgWidth);\n    _svg.setAttribute('height', _svgHeight);\n    _clipBox.min.set(-_svgWidthHalf, -_svgHeightHalf);\n    _clipBox.max.set(_svgWidthHalf, _svgHeightHalf);\n  };\n  this.getSize = function () {\n    return {\n      width: _svgWidth,\n      height: _svgHeight\n    };\n  };\n  this.setPrecision = function (precision) {\n    _precision = precision;\n  };\n  function removeChildNodes() {\n    _pathCount = 0;\n    while (_svg.childNodes.length > 0) {\n      _svg.removeChild(_svg.childNodes[0]);\n    }\n  }\n  function convert(c) {\n    return _precision !== null ? c.toFixed(_precision) : c;\n  }\n  this.clear = function () {\n    removeChildNodes();\n    _svg.style.backgroundColor = _clearColor.getStyle();\n  };\n  this.render = function (scene, camera) {\n    if (camera instanceof Camera === false) {\n      console.error('THREE.SVGRenderer.render: camera is not an instance of Camera.');\n      return;\n    }\n    var background = scene.background;\n    if (background && background.isColor) {\n      removeChildNodes();\n      _svg.style.backgroundColor = background.getStyle();\n    } else if (this.autoClear === true) {\n      this.clear();\n    }\n    _this.info.render.vertices = 0;\n    _this.info.render.faces = 0;\n    _viewMatrix.copy(camera.matrixWorldInverse);\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n    _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n    _elements = _renderData.elements;\n    _lights = _renderData.lights;\n    _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n    calculateLights(_lights); // reset accumulated path\n\n    _currentPath = '';\n    _currentStyle = '';\n    for (let e = 0, el = _elements.length; e < el; e++) {\n      var element = _elements[e];\n      var material = element.material;\n      if (material === undefined || material.opacity === 0) continue;\n      _elemBox.makeEmpty();\n      if (element instanceof RenderableSprite) {\n        _v1 = element;\n        _v1.x *= _svgWidthHalf;\n        _v1.y *= -_svgHeightHalf;\n        renderSprite(_v1, element, material);\n      } else if (element instanceof RenderableLine) {\n        _v1 = element.v1;\n        _v2 = element.v2;\n        _v1.positionScreen.x *= _svgWidthHalf;\n        _v1.positionScreen.y *= -_svgHeightHalf;\n        _v2.positionScreen.x *= _svgWidthHalf;\n        _v2.positionScreen.y *= -_svgHeightHalf;\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);\n        if (_clipBox.intersectsBox(_elemBox) === true) {\n          renderLine(_v1, _v2, element, material);\n        }\n      } else if (element instanceof RenderableFace) {\n        _v1 = element.v1;\n        _v2 = element.v2;\n        _v3 = element.v3;\n        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n        _v1.positionScreen.x *= _svgWidthHalf;\n        _v1.positionScreen.y *= -_svgHeightHalf;\n        _v2.positionScreen.x *= _svgWidthHalf;\n        _v2.positionScreen.y *= -_svgHeightHalf;\n        _v3.positionScreen.x *= _svgWidthHalf;\n        _v3.positionScreen.y *= -_svgHeightHalf;\n        if (this.overdraw > 0) {\n          expand(_v1.positionScreen, _v2.positionScreen, this.overdraw);\n          expand(_v2.positionScreen, _v3.positionScreen, this.overdraw);\n          expand(_v3.positionScreen, _v1.positionScreen, this.overdraw);\n        }\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);\n        if (_clipBox.intersectsBox(_elemBox) === true) {\n          renderFace3(_v1, _v2, _v3, element, material);\n        }\n      }\n    }\n    flushPath(); // just to flush last svg:path\n\n    scene.traverseVisible(function (object) {\n      if (object instanceof SVGObject) {\n        _vector3.setFromMatrixPosition(object.matrixWorld);\n        _vector3.applyMatrix4(_viewProjectionMatrix);\n        if (_vector3.z < -1 || _vector3.z > 1) return;\n        var x = _vector3.x * _svgWidthHalf;\n        var y = -_vector3.y * _svgHeightHalf;\n        var node = object.node;\n        node.setAttribute('transform', 'translate(' + x + ',' + y + ')');\n        _svg.appendChild(node);\n      }\n    });\n  };\n  function calculateLights(lights) {\n    _ambientLight.setRGB(0, 0, 0);\n    _directionalLights.setRGB(0, 0, 0);\n    _pointLights.setRGB(0, 0, 0);\n    for (let l = 0, ll = lights.length; l < ll; l++) {\n      var light = lights[l];\n      var lightColor = light.color;\n      if (light.isAmbientLight) {\n        _ambientLight.r += lightColor.r;\n        _ambientLight.g += lightColor.g;\n        _ambientLight.b += lightColor.b;\n      } else if (light.isDirectionalLight) {\n        _directionalLights.r += lightColor.r;\n        _directionalLights.g += lightColor.g;\n        _directionalLights.b += lightColor.b;\n      } else if (light.isPointLight) {\n        _pointLights.r += lightColor.r;\n        _pointLights.g += lightColor.g;\n        _pointLights.b += lightColor.b;\n      }\n    }\n  }\n  function calculateLight(lights, position, normal, color) {\n    for (let l = 0, ll = lights.length; l < ll; l++) {\n      var light = lights[l];\n      var lightColor = light.color;\n      if (light.isDirectionalLight) {\n        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n        var amount = normal.dot(lightPosition);\n        if (amount <= 0) continue;\n        amount *= light.intensity;\n        color.r += lightColor.r * amount;\n        color.g += lightColor.g * amount;\n        color.b += lightColor.b * amount;\n      } else if (light.isPointLight) {\n        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n        if (amount <= 0) continue;\n        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n        if (amount == 0) continue;\n        amount *= light.intensity;\n        color.r += lightColor.r * amount;\n        color.g += lightColor.g * amount;\n        color.b += lightColor.b * amount;\n      }\n    }\n  }\n  function renderSprite(v1, element, material) {\n    var scaleX = element.scale.x * _svgWidthHalf;\n    var scaleY = element.scale.y * _svgHeightHalf;\n    if (material.isPointsMaterial) {\n      scaleX *= material.size;\n      scaleY *= material.size;\n    }\n    var path = 'M' + convert(v1.x - scaleX * 0.5) + ',' + convert(v1.y - scaleY * 0.5) + 'h' + convert(scaleX) + 'v' + convert(scaleY) + 'h' + convert(-scaleX) + 'z';\n    var style = '';\n    if (material.isSpriteMaterial || material.isPointsMaterial) {\n      style = 'fill:' + material.color.getStyle() + ';fill-opacity:' + material.opacity;\n    }\n    addPath(style, path);\n  }\n  function renderLine(v1, v2, element, material) {\n    var path = 'M' + convert(v1.positionScreen.x) + ',' + convert(v1.positionScreen.y) + 'L' + convert(v2.positionScreen.x) + ',' + convert(v2.positionScreen.y);\n    if (material.isLineBasicMaterial) {\n      var style = 'fill:none;stroke:' + material.color.getStyle() + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.linewidth + ';stroke-linecap:' + material.linecap;\n      if (material.isLineDashedMaterial) {\n        style = style + ';stroke-dasharray:' + material.dashSize + ',' + material.gapSize;\n      }\n      addPath(style, path);\n    }\n  }\n  function renderFace3(v1, v2, v3, element, material) {\n    _this.info.render.vertices += 3;\n    _this.info.render.faces++;\n    var path = 'M' + convert(v1.positionScreen.x) + ',' + convert(v1.positionScreen.y) + 'L' + convert(v2.positionScreen.x) + ',' + convert(v2.positionScreen.y) + 'L' + convert(v3.positionScreen.x) + ',' + convert(v3.positionScreen.y) + 'z';\n    var style = '';\n    if (material.isMeshBasicMaterial) {\n      _color.copy(material.color);\n      if (material.vertexColors) {\n        _color.multiply(element.color);\n      }\n    } else if (material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial) {\n      _diffuseColor.copy(material.color);\n      if (material.vertexColors) {\n        _diffuseColor.multiply(element.color);\n      }\n      _color.copy(_ambientLight);\n      _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n      calculateLight(_lights, _centroid, element.normalModel, _color);\n      _color.multiply(_diffuseColor).add(material.emissive);\n    } else if (material.isMeshNormalMaterial) {\n      _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix).normalize();\n      _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);\n    }\n    if (material.wireframe) {\n      style = 'fill:none;stroke:' + _color.getStyle() + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.wireframeLinewidth + ';stroke-linecap:' + material.wireframeLinecap + ';stroke-linejoin:' + material.wireframeLinejoin;\n    } else {\n      style = 'fill:' + _color.getStyle() + ';fill-opacity:' + material.opacity;\n    }\n    addPath(style, path);\n  } // Hide anti-alias gaps\n\n  function expand(v1, v2, pixels) {\n    var x = v2.x - v1.x,\n      y = v2.y - v1.y,\n      det = x * x + y * y,\n      idet;\n    if (det === 0) return;\n    idet = pixels / Math.sqrt(det);\n    x *= idet;\n    y *= idet;\n    v2.x += x;\n    v2.y += y;\n    v1.x -= x;\n    v1.y -= y;\n  }\n  function addPath(style, path) {\n    if (_currentStyle === style) {\n      _currentPath += path;\n    } else {\n      flushPath();\n      _currentStyle = style;\n      _currentPath = path;\n    }\n  }\n  function flushPath() {\n    if (_currentPath) {\n      _svgNode = getPathNode(_pathCount++);\n      _svgNode.setAttribute('d', _currentPath);\n      _svgNode.setAttribute('style', _currentStyle);\n      _svg.appendChild(_svgNode);\n    }\n    _currentPath = '';\n    _currentStyle = '';\n  }\n  function getPathNode(id) {\n    if (_svgPathPool[id] == null) {\n      _svgPathPool[id] = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n      if (_quality == 0) {\n        _svgPathPool[id].setAttribute('shape-rendering', 'crispEdges'); //optimizeSpeed\n      }\n\n      return _svgPathPool[id];\n    }\n    return _svgPathPool[id];\n  }\n};\nexport { SVGObject, SVGRenderer };","map":{"version":3,"names":["Object3D","Box2","Color","Vector3","Matrix3","Matrix4","Camera","Projector","RenderableSprite","RenderableLine","RenderableFace","SVGObject","node","call","prototype","Object","create","constructor","SVGRenderer","_this","_renderData","_elements","_lights","_projector","_svg","document","createElementNS","_svgWidth","_svgHeight","_svgWidthHalf","_svgHeightHalf","_v1","_v2","_v3","_clipBox","_elemBox","_color","_diffuseColor","_ambientLight","_directionalLights","_pointLights","_clearColor","_vector3","_centroid","_normal","_normalViewMatrix","_viewMatrix","_viewProjectionMatrix","_svgPathPool","_svgNode","_pathCount","_currentPath","_currentStyle","_quality","_precision","domElement","autoClear","sortObjects","sortElements","overdraw","info","render","vertices","faces","setQuality","quality","setClearColor","color","set","setPixelRatio","setSize","width","height","setAttribute","min","max","getSize","setPrecision","precision","removeChildNodes","childNodes","length","removeChild","convert","c","toFixed","clear","style","backgroundColor","getStyle","scene","camera","console","error","background","isColor","copy","matrixWorldInverse","multiplyMatrices","projectionMatrix","projectScene","elements","lights","getNormalMatrix","calculateLights","e","el","element","material","undefined","opacity","makeEmpty","x","y","renderSprite","v1","v2","positionScreen","setFromPoints","intersectsBox","renderLine","v3","z","expand","renderFace3","flushPath","traverseVisible","object","setFromMatrixPosition","matrixWorld","applyMatrix4","appendChild","setRGB","l","ll","light","lightColor","isAmbientLight","r","g","b","isDirectionalLight","isPointLight","calculateLight","position","normal","lightPosition","normalize","amount","dot","intensity","subVectors","distance","Math","distanceTo","scaleX","scale","scaleY","isPointsMaterial","size","path","isSpriteMaterial","addPath","isLineBasicMaterial","linewidth","linecap","isLineDashedMaterial","dashSize","gapSize","isMeshBasicMaterial","vertexColors","multiply","isMeshLambertMaterial","isMeshPhongMaterial","isMeshStandardMaterial","positionWorld","add","divideScalar","normalModel","emissive","isMeshNormalMaterial","applyMatrix3","multiplyScalar","addScalar","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","pixels","det","idet","sqrt","getPathNode","id"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/renderers/SVGRenderer.js"],"sourcesContent":["import { Object3D, Box2, Color, Vector3, Matrix3, Matrix4, Camera } from 'three';\nimport { Projector, RenderableSprite, RenderableLine, RenderableFace } from './Projector.js';\n\nvar SVGObject = function (node) {\n  Object3D.call(this);\n  this.node = node;\n};\n\nSVGObject.prototype = Object.create(Object3D.prototype);\nSVGObject.prototype.constructor = SVGObject;\n\nvar SVGRenderer = function () {\n  var _this = this,\n      _renderData,\n      _elements,\n      _lights,\n      _projector = new Projector(),\n      _svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),\n      _svgWidth,\n      _svgHeight,\n      _svgWidthHalf,\n      _svgHeightHalf,\n      _v1,\n      _v2,\n      _v3,\n      _clipBox = new Box2(),\n      _elemBox = new Box2(),\n      _color = new Color(),\n      _diffuseColor = new Color(),\n      _ambientLight = new Color(),\n      _directionalLights = new Color(),\n      _pointLights = new Color(),\n      _clearColor = new Color(),\n      _vector3 = new Vector3(),\n      // Needed for PointLight\n  _centroid = new Vector3(),\n      _normal = new Vector3(),\n      _normalViewMatrix = new Matrix3(),\n      _viewMatrix = new Matrix4(),\n      _viewProjectionMatrix = new Matrix4(),\n      _svgPathPool = [],\n      _svgNode,\n      _pathCount = 0,\n      _currentPath,\n      _currentStyle,\n      _quality = 1,\n      _precision = null;\n\n  this.domElement = _svg;\n  this.autoClear = true;\n  this.sortObjects = true;\n  this.sortElements = true;\n  this.overdraw = 0.5;\n  this.info = {\n    render: {\n      vertices: 0,\n      faces: 0\n    }\n  };\n\n  this.setQuality = function (quality) {\n    switch (quality) {\n      case 'high':\n        _quality = 1;\n        break;\n\n      case 'low':\n        _quality = 0;\n        break;\n    }\n  };\n\n  this.setClearColor = function (color) {\n    _clearColor.set(color);\n  };\n\n  this.setPixelRatio = function () {};\n\n  this.setSize = function (width, height) {\n    _svgWidth = width;\n    _svgHeight = height;\n    _svgWidthHalf = _svgWidth / 2;\n    _svgHeightHalf = _svgHeight / 2;\n\n    _svg.setAttribute('viewBox', -_svgWidthHalf + ' ' + -_svgHeightHalf + ' ' + _svgWidth + ' ' + _svgHeight);\n\n    _svg.setAttribute('width', _svgWidth);\n\n    _svg.setAttribute('height', _svgHeight);\n\n    _clipBox.min.set(-_svgWidthHalf, -_svgHeightHalf);\n\n    _clipBox.max.set(_svgWidthHalf, _svgHeightHalf);\n  };\n\n  this.getSize = function () {\n    return {\n      width: _svgWidth,\n      height: _svgHeight\n    };\n  };\n\n  this.setPrecision = function (precision) {\n    _precision = precision;\n  };\n\n  function removeChildNodes() {\n    _pathCount = 0;\n\n    while (_svg.childNodes.length > 0) {\n      _svg.removeChild(_svg.childNodes[0]);\n    }\n  }\n\n  function convert(c) {\n    return _precision !== null ? c.toFixed(_precision) : c;\n  }\n\n  this.clear = function () {\n    removeChildNodes();\n    _svg.style.backgroundColor = _clearColor.getStyle();\n  };\n\n  this.render = function (scene, camera) {\n    if (camera instanceof Camera === false) {\n      console.error('THREE.SVGRenderer.render: camera is not an instance of Camera.');\n      return;\n    }\n\n    var background = scene.background;\n\n    if (background && background.isColor) {\n      removeChildNodes();\n      _svg.style.backgroundColor = background.getStyle();\n    } else if (this.autoClear === true) {\n      this.clear();\n    }\n\n    _this.info.render.vertices = 0;\n    _this.info.render.faces = 0;\n\n    _viewMatrix.copy(camera.matrixWorldInverse);\n\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n    _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n    _elements = _renderData.elements;\n    _lights = _renderData.lights;\n\n    _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n\n    calculateLights(_lights); // reset accumulated path\n\n    _currentPath = '';\n    _currentStyle = '';\n\n    for (let e = 0, el = _elements.length; e < el; e++) {\n      var element = _elements[e];\n      var material = element.material;\n      if (material === undefined || material.opacity === 0) continue;\n\n      _elemBox.makeEmpty();\n\n      if (element instanceof RenderableSprite) {\n        _v1 = element;\n        _v1.x *= _svgWidthHalf;\n        _v1.y *= -_svgHeightHalf;\n        renderSprite(_v1, element, material);\n      } else if (element instanceof RenderableLine) {\n        _v1 = element.v1;\n        _v2 = element.v2;\n        _v1.positionScreen.x *= _svgWidthHalf;\n        _v1.positionScreen.y *= -_svgHeightHalf;\n        _v2.positionScreen.x *= _svgWidthHalf;\n        _v2.positionScreen.y *= -_svgHeightHalf;\n\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);\n\n        if (_clipBox.intersectsBox(_elemBox) === true) {\n          renderLine(_v1, _v2, element, material);\n        }\n      } else if (element instanceof RenderableFace) {\n        _v1 = element.v1;\n        _v2 = element.v2;\n        _v3 = element.v3;\n        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n        _v1.positionScreen.x *= _svgWidthHalf;\n        _v1.positionScreen.y *= -_svgHeightHalf;\n        _v2.positionScreen.x *= _svgWidthHalf;\n        _v2.positionScreen.y *= -_svgHeightHalf;\n        _v3.positionScreen.x *= _svgWidthHalf;\n        _v3.positionScreen.y *= -_svgHeightHalf;\n\n        if (this.overdraw > 0) {\n          expand(_v1.positionScreen, _v2.positionScreen, this.overdraw);\n          expand(_v2.positionScreen, _v3.positionScreen, this.overdraw);\n          expand(_v3.positionScreen, _v1.positionScreen, this.overdraw);\n        }\n\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);\n\n        if (_clipBox.intersectsBox(_elemBox) === true) {\n          renderFace3(_v1, _v2, _v3, element, material);\n        }\n      }\n    }\n\n    flushPath(); // just to flush last svg:path\n\n    scene.traverseVisible(function (object) {\n      if (object instanceof SVGObject) {\n        _vector3.setFromMatrixPosition(object.matrixWorld);\n\n        _vector3.applyMatrix4(_viewProjectionMatrix);\n\n        if (_vector3.z < -1 || _vector3.z > 1) return;\n        var x = _vector3.x * _svgWidthHalf;\n        var y = -_vector3.y * _svgHeightHalf;\n        var node = object.node;\n        node.setAttribute('transform', 'translate(' + x + ',' + y + ')');\n\n        _svg.appendChild(node);\n      }\n    });\n  };\n\n  function calculateLights(lights) {\n    _ambientLight.setRGB(0, 0, 0);\n\n    _directionalLights.setRGB(0, 0, 0);\n\n    _pointLights.setRGB(0, 0, 0);\n\n    for (let l = 0, ll = lights.length; l < ll; l++) {\n      var light = lights[l];\n      var lightColor = light.color;\n\n      if (light.isAmbientLight) {\n        _ambientLight.r += lightColor.r;\n        _ambientLight.g += lightColor.g;\n        _ambientLight.b += lightColor.b;\n      } else if (light.isDirectionalLight) {\n        _directionalLights.r += lightColor.r;\n        _directionalLights.g += lightColor.g;\n        _directionalLights.b += lightColor.b;\n      } else if (light.isPointLight) {\n        _pointLights.r += lightColor.r;\n        _pointLights.g += lightColor.g;\n        _pointLights.b += lightColor.b;\n      }\n    }\n  }\n\n  function calculateLight(lights, position, normal, color) {\n    for (let l = 0, ll = lights.length; l < ll; l++) {\n      var light = lights[l];\n      var lightColor = light.color;\n\n      if (light.isDirectionalLight) {\n        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n\n        var amount = normal.dot(lightPosition);\n        if (amount <= 0) continue;\n        amount *= light.intensity;\n        color.r += lightColor.r * amount;\n        color.g += lightColor.g * amount;\n        color.b += lightColor.b * amount;\n      } else if (light.isPointLight) {\n        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n\n        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n        if (amount <= 0) continue;\n        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n        if (amount == 0) continue;\n        amount *= light.intensity;\n        color.r += lightColor.r * amount;\n        color.g += lightColor.g * amount;\n        color.b += lightColor.b * amount;\n      }\n    }\n  }\n\n  function renderSprite(v1, element, material) {\n    var scaleX = element.scale.x * _svgWidthHalf;\n    var scaleY = element.scale.y * _svgHeightHalf;\n\n    if (material.isPointsMaterial) {\n      scaleX *= material.size;\n      scaleY *= material.size;\n    }\n\n    var path = 'M' + convert(v1.x - scaleX * 0.5) + ',' + convert(v1.y - scaleY * 0.5) + 'h' + convert(scaleX) + 'v' + convert(scaleY) + 'h' + convert(-scaleX) + 'z';\n    var style = '';\n\n    if (material.isSpriteMaterial || material.isPointsMaterial) {\n      style = 'fill:' + material.color.getStyle() + ';fill-opacity:' + material.opacity;\n    }\n\n    addPath(style, path);\n  }\n\n  function renderLine(v1, v2, element, material) {\n    var path = 'M' + convert(v1.positionScreen.x) + ',' + convert(v1.positionScreen.y) + 'L' + convert(v2.positionScreen.x) + ',' + convert(v2.positionScreen.y);\n\n    if (material.isLineBasicMaterial) {\n      var style = 'fill:none;stroke:' + material.color.getStyle() + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.linewidth + ';stroke-linecap:' + material.linecap;\n\n      if (material.isLineDashedMaterial) {\n        style = style + ';stroke-dasharray:' + material.dashSize + ',' + material.gapSize;\n      }\n\n      addPath(style, path);\n    }\n  }\n\n  function renderFace3(v1, v2, v3, element, material) {\n    _this.info.render.vertices += 3;\n    _this.info.render.faces++;\n    var path = 'M' + convert(v1.positionScreen.x) + ',' + convert(v1.positionScreen.y) + 'L' + convert(v2.positionScreen.x) + ',' + convert(v2.positionScreen.y) + 'L' + convert(v3.positionScreen.x) + ',' + convert(v3.positionScreen.y) + 'z';\n    var style = '';\n\n    if (material.isMeshBasicMaterial) {\n      _color.copy(material.color);\n\n      if (material.vertexColors) {\n        _color.multiply(element.color);\n      }\n    } else if (material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial) {\n      _diffuseColor.copy(material.color);\n\n      if (material.vertexColors) {\n        _diffuseColor.multiply(element.color);\n      }\n\n      _color.copy(_ambientLight);\n\n      _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n\n      calculateLight(_lights, _centroid, element.normalModel, _color);\n\n      _color.multiply(_diffuseColor).add(material.emissive);\n    } else if (material.isMeshNormalMaterial) {\n      _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix).normalize();\n\n      _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);\n    }\n\n    if (material.wireframe) {\n      style = 'fill:none;stroke:' + _color.getStyle() + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.wireframeLinewidth + ';stroke-linecap:' + material.wireframeLinecap + ';stroke-linejoin:' + material.wireframeLinejoin;\n    } else {\n      style = 'fill:' + _color.getStyle() + ';fill-opacity:' + material.opacity;\n    }\n\n    addPath(style, path);\n  } // Hide anti-alias gaps\n\n\n  function expand(v1, v2, pixels) {\n    var x = v2.x - v1.x,\n        y = v2.y - v1.y,\n        det = x * x + y * y,\n        idet;\n    if (det === 0) return;\n    idet = pixels / Math.sqrt(det);\n    x *= idet;\n    y *= idet;\n    v2.x += x;\n    v2.y += y;\n    v1.x -= x;\n    v1.y -= y;\n  }\n\n  function addPath(style, path) {\n    if (_currentStyle === style) {\n      _currentPath += path;\n    } else {\n      flushPath();\n      _currentStyle = style;\n      _currentPath = path;\n    }\n  }\n\n  function flushPath() {\n    if (_currentPath) {\n      _svgNode = getPathNode(_pathCount++);\n\n      _svgNode.setAttribute('d', _currentPath);\n\n      _svgNode.setAttribute('style', _currentStyle);\n\n      _svg.appendChild(_svgNode);\n    }\n\n    _currentPath = '';\n    _currentStyle = '';\n  }\n\n  function getPathNode(id) {\n    if (_svgPathPool[id] == null) {\n      _svgPathPool[id] = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n      if (_quality == 0) {\n        _svgPathPool[id].setAttribute('shape-rendering', 'crispEdges'); //optimizeSpeed\n\n      }\n\n      return _svgPathPool[id];\n    }\n\n    return _svgPathPool[id];\n  }\n};\n\nexport { SVGObject, SVGRenderer };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,MAAM,QAAQ,OAAO;AAChF,SAASC,SAAS,EAAEC,gBAAgB,EAAEC,cAAc,EAAEC,cAAc,QAAQ,gBAAgB;AAE5F,IAAIC,SAAS,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAC9BZ,QAAQ,CAACa,IAAI,CAAC,IAAI,CAAC;EACnB,IAAI,CAACD,IAAI,GAAGA,IAAI;AAClB,CAAC;AAEDD,SAAS,CAACG,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAChB,QAAQ,CAACc,SAAS,CAAC;AACvDH,SAAS,CAACG,SAAS,CAACG,WAAW,GAAGN,SAAS;AAE3C,IAAIO,WAAW,GAAG,SAAAA,CAAA,EAAY;EAC5B,IAAIC,KAAK,GAAG,IAAI;IACZC,WAAW;IACXC,SAAS;IACTC,OAAO;IACPC,UAAU,GAAG,IAAIhB,SAAS,EAAE;IAC5BiB,IAAI,GAAGC,QAAQ,CAACC,eAAe,CAAC,4BAA4B,EAAE,KAAK,CAAC;IACpEC,SAAS;IACTC,UAAU;IACVC,aAAa;IACbC,cAAc;IACdC,GAAG;IACHC,GAAG;IACHC,GAAG;IACHC,QAAQ,GAAG,IAAIjC,IAAI,EAAE;IACrBkC,QAAQ,GAAG,IAAIlC,IAAI,EAAE;IACrBmC,MAAM,GAAG,IAAIlC,KAAK,EAAE;IACpBmC,aAAa,GAAG,IAAInC,KAAK,EAAE;IAC3BoC,aAAa,GAAG,IAAIpC,KAAK,EAAE;IAC3BqC,kBAAkB,GAAG,IAAIrC,KAAK,EAAE;IAChCsC,YAAY,GAAG,IAAItC,KAAK,EAAE;IAC1BuC,WAAW,GAAG,IAAIvC,KAAK,EAAE;IACzBwC,QAAQ,GAAG,IAAIvC,OAAO,EAAE;IACxB;IACJwC,SAAS,GAAG,IAAIxC,OAAO,EAAE;IACrByC,OAAO,GAAG,IAAIzC,OAAO,EAAE;IACvB0C,iBAAiB,GAAG,IAAIzC,OAAO,EAAE;IACjC0C,WAAW,GAAG,IAAIzC,OAAO,EAAE;IAC3B0C,qBAAqB,GAAG,IAAI1C,OAAO,EAAE;IACrC2C,YAAY,GAAG,EAAE;IACjBC,QAAQ;IACRC,UAAU,GAAG,CAAC;IACdC,YAAY;IACZC,aAAa;IACbC,QAAQ,GAAG,CAAC;IACZC,UAAU,GAAG,IAAI;EAErB,IAAI,CAACC,UAAU,GAAG/B,IAAI;EACtB,IAAI,CAACgC,SAAS,GAAG,IAAI;EACrB,IAAI,CAACC,WAAW,GAAG,IAAI;EACvB,IAAI,CAACC,YAAY,GAAG,IAAI;EACxB,IAAI,CAACC,QAAQ,GAAG,GAAG;EACnB,IAAI,CAACC,IAAI,GAAG;IACVC,MAAM,EAAE;MACNC,QAAQ,EAAE,CAAC;MACXC,KAAK,EAAE;IACT;EACF,CAAC;EAED,IAAI,CAACC,UAAU,GAAG,UAAUC,OAAO,EAAE;IACnC,QAAQA,OAAO;MACb,KAAK,MAAM;QACTZ,QAAQ,GAAG,CAAC;QACZ;MAEF,KAAK,KAAK;QACRA,QAAQ,GAAG,CAAC;QACZ;IAAM;EAEZ,CAAC;EAED,IAAI,CAACa,aAAa,GAAG,UAAUC,KAAK,EAAE;IACpC1B,WAAW,CAAC2B,GAAG,CAACD,KAAK,CAAC;EACxB,CAAC;EAED,IAAI,CAACE,aAAa,GAAG,YAAY,CAAC,CAAC;EAEnC,IAAI,CAACC,OAAO,GAAG,UAAUC,KAAK,EAAEC,MAAM,EAAE;IACtC7C,SAAS,GAAG4C,KAAK;IACjB3C,UAAU,GAAG4C,MAAM;IACnB3C,aAAa,GAAGF,SAAS,GAAG,CAAC;IAC7BG,cAAc,GAAGF,UAAU,GAAG,CAAC;IAE/BJ,IAAI,CAACiD,YAAY,CAAC,SAAS,EAAE,CAAC5C,aAAa,GAAG,GAAG,GAAG,CAACC,cAAc,GAAG,GAAG,GAAGH,SAAS,GAAG,GAAG,GAAGC,UAAU,CAAC;IAEzGJ,IAAI,CAACiD,YAAY,CAAC,OAAO,EAAE9C,SAAS,CAAC;IAErCH,IAAI,CAACiD,YAAY,CAAC,QAAQ,EAAE7C,UAAU,CAAC;IAEvCM,QAAQ,CAACwC,GAAG,CAACN,GAAG,CAAC,CAACvC,aAAa,EAAE,CAACC,cAAc,CAAC;IAEjDI,QAAQ,CAACyC,GAAG,CAACP,GAAG,CAACvC,aAAa,EAAEC,cAAc,CAAC;EACjD,CAAC;EAED,IAAI,CAAC8C,OAAO,GAAG,YAAY;IACzB,OAAO;MACLL,KAAK,EAAE5C,SAAS;MAChB6C,MAAM,EAAE5C;IACV,CAAC;EACH,CAAC;EAED,IAAI,CAACiD,YAAY,GAAG,UAAUC,SAAS,EAAE;IACvCxB,UAAU,GAAGwB,SAAS;EACxB,CAAC;EAED,SAASC,gBAAgBA,CAAA,EAAG;IAC1B7B,UAAU,GAAG,CAAC;IAEd,OAAO1B,IAAI,CAACwD,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;MACjCzD,IAAI,CAAC0D,WAAW,CAAC1D,IAAI,CAACwD,UAAU,CAAC,CAAC,CAAC,CAAC;IACtC;EACF;EAEA,SAASG,OAAOA,CAACC,CAAC,EAAE;IAClB,OAAO9B,UAAU,KAAK,IAAI,GAAG8B,CAAC,CAACC,OAAO,CAAC/B,UAAU,CAAC,GAAG8B,CAAC;EACxD;EAEA,IAAI,CAACE,KAAK,GAAG,YAAY;IACvBP,gBAAgB,EAAE;IAClBvD,IAAI,CAAC+D,KAAK,CAACC,eAAe,GAAG/C,WAAW,CAACgD,QAAQ,EAAE;EACrD,CAAC;EAED,IAAI,CAAC5B,MAAM,GAAG,UAAU6B,KAAK,EAAEC,MAAM,EAAE;IACrC,IAAIA,MAAM,YAAYrF,MAAM,KAAK,KAAK,EAAE;MACtCsF,OAAO,CAACC,KAAK,CAAC,gEAAgE,CAAC;MAC/E;IACF;IAEA,IAAIC,UAAU,GAAGJ,KAAK,CAACI,UAAU;IAEjC,IAAIA,UAAU,IAAIA,UAAU,CAACC,OAAO,EAAE;MACpChB,gBAAgB,EAAE;MAClBvD,IAAI,CAAC+D,KAAK,CAACC,eAAe,GAAGM,UAAU,CAACL,QAAQ,EAAE;IACpD,CAAC,MAAM,IAAI,IAAI,CAACjC,SAAS,KAAK,IAAI,EAAE;MAClC,IAAI,CAAC8B,KAAK,EAAE;IACd;IAEAnE,KAAK,CAACyC,IAAI,CAACC,MAAM,CAACC,QAAQ,GAAG,CAAC;IAC9B3C,KAAK,CAACyC,IAAI,CAACC,MAAM,CAACE,KAAK,GAAG,CAAC;IAE3BjB,WAAW,CAACkD,IAAI,CAACL,MAAM,CAACM,kBAAkB,CAAC;IAE3ClD,qBAAqB,CAACmD,gBAAgB,CAACP,MAAM,CAACQ,gBAAgB,EAAErD,WAAW,CAAC;IAE5E1B,WAAW,GAAGG,UAAU,CAAC6E,YAAY,CAACV,KAAK,EAAEC,MAAM,EAAE,IAAI,CAAClC,WAAW,EAAE,IAAI,CAACC,YAAY,CAAC;IACzFrC,SAAS,GAAGD,WAAW,CAACiF,QAAQ;IAChC/E,OAAO,GAAGF,WAAW,CAACkF,MAAM;IAE5BzD,iBAAiB,CAAC0D,eAAe,CAACZ,MAAM,CAACM,kBAAkB,CAAC;IAE5DO,eAAe,CAAClF,OAAO,CAAC,CAAC,CAAC;;IAE1B6B,YAAY,GAAG,EAAE;IACjBC,aAAa,GAAG,EAAE;IAElB,KAAK,IAAIqD,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGrF,SAAS,CAAC4D,MAAM,EAAEwB,CAAC,GAAGC,EAAE,EAAED,CAAC,EAAE,EAAE;MAClD,IAAIE,OAAO,GAAGtF,SAAS,CAACoF,CAAC,CAAC;MAC1B,IAAIG,QAAQ,GAAGD,OAAO,CAACC,QAAQ;MAC/B,IAAIA,QAAQ,KAAKC,SAAS,IAAID,QAAQ,CAACE,OAAO,KAAK,CAAC,EAAE;MAEtD3E,QAAQ,CAAC4E,SAAS,EAAE;MAEpB,IAAIJ,OAAO,YAAYnG,gBAAgB,EAAE;QACvCuB,GAAG,GAAG4E,OAAO;QACb5E,GAAG,CAACiF,CAAC,IAAInF,aAAa;QACtBE,GAAG,CAACkF,CAAC,IAAI,CAACnF,cAAc;QACxBoF,YAAY,CAACnF,GAAG,EAAE4E,OAAO,EAAEC,QAAQ,CAAC;MACtC,CAAC,MAAM,IAAID,OAAO,YAAYlG,cAAc,EAAE;QAC5CsB,GAAG,GAAG4E,OAAO,CAACQ,EAAE;QAChBnF,GAAG,GAAG2E,OAAO,CAACS,EAAE;QAChBrF,GAAG,CAACsF,cAAc,CAACL,CAAC,IAAInF,aAAa;QACrCE,GAAG,CAACsF,cAAc,CAACJ,CAAC,IAAI,CAACnF,cAAc;QACvCE,GAAG,CAACqF,cAAc,CAACL,CAAC,IAAInF,aAAa;QACrCG,GAAG,CAACqF,cAAc,CAACJ,CAAC,IAAI,CAACnF,cAAc;QAEvCK,QAAQ,CAACmF,aAAa,CAAC,CAACvF,GAAG,CAACsF,cAAc,EAAErF,GAAG,CAACqF,cAAc,CAAC,CAAC;QAEhE,IAAInF,QAAQ,CAACqF,aAAa,CAACpF,QAAQ,CAAC,KAAK,IAAI,EAAE;UAC7CqF,UAAU,CAACzF,GAAG,EAAEC,GAAG,EAAE2E,OAAO,EAAEC,QAAQ,CAAC;QACzC;MACF,CAAC,MAAM,IAAID,OAAO,YAAYjG,cAAc,EAAE;QAC5CqB,GAAG,GAAG4E,OAAO,CAACQ,EAAE;QAChBnF,GAAG,GAAG2E,OAAO,CAACS,EAAE;QAChBnF,GAAG,GAAG0E,OAAO,CAACc,EAAE;QAChB,IAAI1F,GAAG,CAACsF,cAAc,CAACK,CAAC,GAAG,CAAC,CAAC,IAAI3F,GAAG,CAACsF,cAAc,CAACK,CAAC,GAAG,CAAC,EAAE;QAC3D,IAAI1F,GAAG,CAACqF,cAAc,CAACK,CAAC,GAAG,CAAC,CAAC,IAAI1F,GAAG,CAACqF,cAAc,CAACK,CAAC,GAAG,CAAC,EAAE;QAC3D,IAAIzF,GAAG,CAACoF,cAAc,CAACK,CAAC,GAAG,CAAC,CAAC,IAAIzF,GAAG,CAACoF,cAAc,CAACK,CAAC,GAAG,CAAC,EAAE;QAC3D3F,GAAG,CAACsF,cAAc,CAACL,CAAC,IAAInF,aAAa;QACrCE,GAAG,CAACsF,cAAc,CAACJ,CAAC,IAAI,CAACnF,cAAc;QACvCE,GAAG,CAACqF,cAAc,CAACL,CAAC,IAAInF,aAAa;QACrCG,GAAG,CAACqF,cAAc,CAACJ,CAAC,IAAI,CAACnF,cAAc;QACvCG,GAAG,CAACoF,cAAc,CAACL,CAAC,IAAInF,aAAa;QACrCI,GAAG,CAACoF,cAAc,CAACJ,CAAC,IAAI,CAACnF,cAAc;QAEvC,IAAI,IAAI,CAAC6B,QAAQ,GAAG,CAAC,EAAE;UACrBgE,MAAM,CAAC5F,GAAG,CAACsF,cAAc,EAAErF,GAAG,CAACqF,cAAc,EAAE,IAAI,CAAC1D,QAAQ,CAAC;UAC7DgE,MAAM,CAAC3F,GAAG,CAACqF,cAAc,EAAEpF,GAAG,CAACoF,cAAc,EAAE,IAAI,CAAC1D,QAAQ,CAAC;UAC7DgE,MAAM,CAAC1F,GAAG,CAACoF,cAAc,EAAEtF,GAAG,CAACsF,cAAc,EAAE,IAAI,CAAC1D,QAAQ,CAAC;QAC/D;QAEAxB,QAAQ,CAACmF,aAAa,CAAC,CAACvF,GAAG,CAACsF,cAAc,EAAErF,GAAG,CAACqF,cAAc,EAAEpF,GAAG,CAACoF,cAAc,CAAC,CAAC;QAEpF,IAAInF,QAAQ,CAACqF,aAAa,CAACpF,QAAQ,CAAC,KAAK,IAAI,EAAE;UAC7CyF,WAAW,CAAC7F,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAE0E,OAAO,EAAEC,QAAQ,CAAC;QAC/C;MACF;IACF;IAEAiB,SAAS,EAAE,CAAC,CAAC;;IAEbnC,KAAK,CAACoC,eAAe,CAAC,UAAUC,MAAM,EAAE;MACtC,IAAIA,MAAM,YAAYpH,SAAS,EAAE;QAC/B+B,QAAQ,CAACsF,qBAAqB,CAACD,MAAM,CAACE,WAAW,CAAC;QAElDvF,QAAQ,CAACwF,YAAY,CAACnF,qBAAqB,CAAC;QAE5C,IAAIL,QAAQ,CAACgF,CAAC,GAAG,CAAC,CAAC,IAAIhF,QAAQ,CAACgF,CAAC,GAAG,CAAC,EAAE;QACvC,IAAIV,CAAC,GAAGtE,QAAQ,CAACsE,CAAC,GAAGnF,aAAa;QAClC,IAAIoF,CAAC,GAAG,CAACvE,QAAQ,CAACuE,CAAC,GAAGnF,cAAc;QACpC,IAAIlB,IAAI,GAAGmH,MAAM,CAACnH,IAAI;QACtBA,IAAI,CAAC6D,YAAY,CAAC,WAAW,EAAE,YAAY,GAAGuC,CAAC,GAAG,GAAG,GAAGC,CAAC,GAAG,GAAG,CAAC;QAEhEzF,IAAI,CAAC2G,WAAW,CAACvH,IAAI,CAAC;MACxB;IACF,CAAC,CAAC;EACJ,CAAC;EAED,SAAS4F,eAAeA,CAACF,MAAM,EAAE;IAC/BhE,aAAa,CAAC8F,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAE7B7F,kBAAkB,CAAC6F,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAElC5F,YAAY,CAAC4F,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAE5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGhC,MAAM,CAACrB,MAAM,EAAEoD,CAAC,GAAGC,EAAE,EAAED,CAAC,EAAE,EAAE;MAC/C,IAAIE,KAAK,GAAGjC,MAAM,CAAC+B,CAAC,CAAC;MACrB,IAAIG,UAAU,GAAGD,KAAK,CAACpE,KAAK;MAE5B,IAAIoE,KAAK,CAACE,cAAc,EAAE;QACxBnG,aAAa,CAACoG,CAAC,IAAIF,UAAU,CAACE,CAAC;QAC/BpG,aAAa,CAACqG,CAAC,IAAIH,UAAU,CAACG,CAAC;QAC/BrG,aAAa,CAACsG,CAAC,IAAIJ,UAAU,CAACI,CAAC;MACjC,CAAC,MAAM,IAAIL,KAAK,CAACM,kBAAkB,EAAE;QACnCtG,kBAAkB,CAACmG,CAAC,IAAIF,UAAU,CAACE,CAAC;QACpCnG,kBAAkB,CAACoG,CAAC,IAAIH,UAAU,CAACG,CAAC;QACpCpG,kBAAkB,CAACqG,CAAC,IAAIJ,UAAU,CAACI,CAAC;MACtC,CAAC,MAAM,IAAIL,KAAK,CAACO,YAAY,EAAE;QAC7BtG,YAAY,CAACkG,CAAC,IAAIF,UAAU,CAACE,CAAC;QAC9BlG,YAAY,CAACmG,CAAC,IAAIH,UAAU,CAACG,CAAC;QAC9BnG,YAAY,CAACoG,CAAC,IAAIJ,UAAU,CAACI,CAAC;MAChC;IACF;EACF;EAEA,SAASG,cAAcA,CAACzC,MAAM,EAAE0C,QAAQ,EAAEC,MAAM,EAAE9E,KAAK,EAAE;IACvD,KAAK,IAAIkE,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGhC,MAAM,CAACrB,MAAM,EAAEoD,CAAC,GAAGC,EAAE,EAAED,CAAC,EAAE,EAAE;MAC/C,IAAIE,KAAK,GAAGjC,MAAM,CAAC+B,CAAC,CAAC;MACrB,IAAIG,UAAU,GAAGD,KAAK,CAACpE,KAAK;MAE5B,IAAIoE,KAAK,CAACM,kBAAkB,EAAE;QAC5B,IAAIK,aAAa,GAAGxG,QAAQ,CAACsF,qBAAqB,CAACO,KAAK,CAACN,WAAW,CAAC,CAACkB,SAAS,EAAE;QAEjF,IAAIC,MAAM,GAAGH,MAAM,CAACI,GAAG,CAACH,aAAa,CAAC;QACtC,IAAIE,MAAM,IAAI,CAAC,EAAE;QACjBA,MAAM,IAAIb,KAAK,CAACe,SAAS;QACzBnF,KAAK,CAACuE,CAAC,IAAIF,UAAU,CAACE,CAAC,GAAGU,MAAM;QAChCjF,KAAK,CAACwE,CAAC,IAAIH,UAAU,CAACG,CAAC,GAAGS,MAAM;QAChCjF,KAAK,CAACyE,CAAC,IAAIJ,UAAU,CAACI,CAAC,GAAGQ,MAAM;MAClC,CAAC,MAAM,IAAIb,KAAK,CAACO,YAAY,EAAE;QAC7B,IAAII,aAAa,GAAGxG,QAAQ,CAACsF,qBAAqB,CAACO,KAAK,CAACN,WAAW,CAAC;QAErE,IAAImB,MAAM,GAAGH,MAAM,CAACI,GAAG,CAAC3G,QAAQ,CAAC6G,UAAU,CAACL,aAAa,EAAEF,QAAQ,CAAC,CAACG,SAAS,EAAE,CAAC;QACjF,IAAIC,MAAM,IAAI,CAAC,EAAE;QACjBA,MAAM,IAAIb,KAAK,CAACiB,QAAQ,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAGC,IAAI,CAAC/E,GAAG,CAACsE,QAAQ,CAACU,UAAU,CAACR,aAAa,CAAC,GAAGX,KAAK,CAACiB,QAAQ,EAAE,CAAC,CAAC;QACxG,IAAIJ,MAAM,IAAI,CAAC,EAAE;QACjBA,MAAM,IAAIb,KAAK,CAACe,SAAS;QACzBnF,KAAK,CAACuE,CAAC,IAAIF,UAAU,CAACE,CAAC,GAAGU,MAAM;QAChCjF,KAAK,CAACwE,CAAC,IAAIH,UAAU,CAACG,CAAC,GAAGS,MAAM;QAChCjF,KAAK,CAACyE,CAAC,IAAIJ,UAAU,CAACI,CAAC,GAAGQ,MAAM;MAClC;IACF;EACF;EAEA,SAASlC,YAAYA,CAACC,EAAE,EAAER,OAAO,EAAEC,QAAQ,EAAE;IAC3C,IAAI+C,MAAM,GAAGhD,OAAO,CAACiD,KAAK,CAAC5C,CAAC,GAAGnF,aAAa;IAC5C,IAAIgI,MAAM,GAAGlD,OAAO,CAACiD,KAAK,CAAC3C,CAAC,GAAGnF,cAAc;IAE7C,IAAI8E,QAAQ,CAACkD,gBAAgB,EAAE;MAC7BH,MAAM,IAAI/C,QAAQ,CAACmD,IAAI;MACvBF,MAAM,IAAIjD,QAAQ,CAACmD,IAAI;IACzB;IAEA,IAAIC,IAAI,GAAG,GAAG,GAAG7E,OAAO,CAACgC,EAAE,CAACH,CAAC,GAAG2C,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,GAAGxE,OAAO,CAACgC,EAAE,CAACF,CAAC,GAAG4C,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG1E,OAAO,CAACwE,MAAM,CAAC,GAAG,GAAG,GAAGxE,OAAO,CAAC0E,MAAM,CAAC,GAAG,GAAG,GAAG1E,OAAO,CAAC,CAACwE,MAAM,CAAC,GAAG,GAAG;IACjK,IAAIpE,KAAK,GAAG,EAAE;IAEd,IAAIqB,QAAQ,CAACqD,gBAAgB,IAAIrD,QAAQ,CAACkD,gBAAgB,EAAE;MAC1DvE,KAAK,GAAG,OAAO,GAAGqB,QAAQ,CAACzC,KAAK,CAACsB,QAAQ,EAAE,GAAG,gBAAgB,GAAGmB,QAAQ,CAACE,OAAO;IACnF;IAEAoD,OAAO,CAAC3E,KAAK,EAAEyE,IAAI,CAAC;EACtB;EAEA,SAASxC,UAAUA,CAACL,EAAE,EAAEC,EAAE,EAAET,OAAO,EAAEC,QAAQ,EAAE;IAC7C,IAAIoD,IAAI,GAAG,GAAG,GAAG7E,OAAO,CAACgC,EAAE,CAACE,cAAc,CAACL,CAAC,CAAC,GAAG,GAAG,GAAG7B,OAAO,CAACgC,EAAE,CAACE,cAAc,CAACJ,CAAC,CAAC,GAAG,GAAG,GAAG9B,OAAO,CAACiC,EAAE,CAACC,cAAc,CAACL,CAAC,CAAC,GAAG,GAAG,GAAG7B,OAAO,CAACiC,EAAE,CAACC,cAAc,CAACJ,CAAC,CAAC;IAE5J,IAAIL,QAAQ,CAACuD,mBAAmB,EAAE;MAChC,IAAI5E,KAAK,GAAG,mBAAmB,GAAGqB,QAAQ,CAACzC,KAAK,CAACsB,QAAQ,EAAE,GAAG,kBAAkB,GAAGmB,QAAQ,CAACE,OAAO,GAAG,gBAAgB,GAAGF,QAAQ,CAACwD,SAAS,GAAG,kBAAkB,GAAGxD,QAAQ,CAACyD,OAAO;MAEnL,IAAIzD,QAAQ,CAAC0D,oBAAoB,EAAE;QACjC/E,KAAK,GAAGA,KAAK,GAAG,oBAAoB,GAAGqB,QAAQ,CAAC2D,QAAQ,GAAG,GAAG,GAAG3D,QAAQ,CAAC4D,OAAO;MACnF;MAEAN,OAAO,CAAC3E,KAAK,EAAEyE,IAAI,CAAC;IACtB;EACF;EAEA,SAASpC,WAAWA,CAACT,EAAE,EAAEC,EAAE,EAAEK,EAAE,EAAEd,OAAO,EAAEC,QAAQ,EAAE;IAClDzF,KAAK,CAACyC,IAAI,CAACC,MAAM,CAACC,QAAQ,IAAI,CAAC;IAC/B3C,KAAK,CAACyC,IAAI,CAACC,MAAM,CAACE,KAAK,EAAE;IACzB,IAAIiG,IAAI,GAAG,GAAG,GAAG7E,OAAO,CAACgC,EAAE,CAACE,cAAc,CAACL,CAAC,CAAC,GAAG,GAAG,GAAG7B,OAAO,CAACgC,EAAE,CAACE,cAAc,CAACJ,CAAC,CAAC,GAAG,GAAG,GAAG9B,OAAO,CAACiC,EAAE,CAACC,cAAc,CAACL,CAAC,CAAC,GAAG,GAAG,GAAG7B,OAAO,CAACiC,EAAE,CAACC,cAAc,CAACJ,CAAC,CAAC,GAAG,GAAG,GAAG9B,OAAO,CAACsC,EAAE,CAACJ,cAAc,CAACL,CAAC,CAAC,GAAG,GAAG,GAAG7B,OAAO,CAACsC,EAAE,CAACJ,cAAc,CAACJ,CAAC,CAAC,GAAG,GAAG;IAC5O,IAAI1B,KAAK,GAAG,EAAE;IAEd,IAAIqB,QAAQ,CAAC6D,mBAAmB,EAAE;MAChCrI,MAAM,CAAC4D,IAAI,CAACY,QAAQ,CAACzC,KAAK,CAAC;MAE3B,IAAIyC,QAAQ,CAAC8D,YAAY,EAAE;QACzBtI,MAAM,CAACuI,QAAQ,CAAChE,OAAO,CAACxC,KAAK,CAAC;MAChC;IACF,CAAC,MAAM,IAAIyC,QAAQ,CAACgE,qBAAqB,IAAIhE,QAAQ,CAACiE,mBAAmB,IAAIjE,QAAQ,CAACkE,sBAAsB,EAAE;MAC5GzI,aAAa,CAAC2D,IAAI,CAACY,QAAQ,CAACzC,KAAK,CAAC;MAElC,IAAIyC,QAAQ,CAAC8D,YAAY,EAAE;QACzBrI,aAAa,CAACsI,QAAQ,CAAChE,OAAO,CAACxC,KAAK,CAAC;MACvC;MAEA/B,MAAM,CAAC4D,IAAI,CAAC1D,aAAa,CAAC;MAE1BK,SAAS,CAACqD,IAAI,CAACmB,EAAE,CAAC4D,aAAa,CAAC,CAACC,GAAG,CAAC5D,EAAE,CAAC2D,aAAa,CAAC,CAACC,GAAG,CAACvD,EAAE,CAACsD,aAAa,CAAC,CAACE,YAAY,CAAC,CAAC,CAAC;MAE5FlC,cAAc,CAACzH,OAAO,EAAEqB,SAAS,EAAEgE,OAAO,CAACuE,WAAW,EAAE9I,MAAM,CAAC;MAE/DA,MAAM,CAACuI,QAAQ,CAACtI,aAAa,CAAC,CAAC2I,GAAG,CAACpE,QAAQ,CAACuE,QAAQ,CAAC;IACvD,CAAC,MAAM,IAAIvE,QAAQ,CAACwE,oBAAoB,EAAE;MACxCxI,OAAO,CAACoD,IAAI,CAACW,OAAO,CAACuE,WAAW,CAAC,CAACG,YAAY,CAACxI,iBAAiB,CAAC,CAACsG,SAAS,EAAE;MAE7E/G,MAAM,CAACgG,MAAM,CAACxF,OAAO,CAACoE,CAAC,EAAEpE,OAAO,CAACqE,CAAC,EAAErE,OAAO,CAAC8E,CAAC,CAAC,CAAC4D,cAAc,CAAC,GAAG,CAAC,CAACC,SAAS,CAAC,GAAG,CAAC;IACnF;IAEA,IAAI3E,QAAQ,CAAC4E,SAAS,EAAE;MACtBjG,KAAK,GAAG,mBAAmB,GAAGnD,MAAM,CAACqD,QAAQ,EAAE,GAAG,kBAAkB,GAAGmB,QAAQ,CAACE,OAAO,GAAG,gBAAgB,GAAGF,QAAQ,CAAC6E,kBAAkB,GAAG,kBAAkB,GAAG7E,QAAQ,CAAC8E,gBAAgB,GAAG,mBAAmB,GAAG9E,QAAQ,CAAC+E,iBAAiB;IAC9O,CAAC,MAAM;MACLpG,KAAK,GAAG,OAAO,GAAGnD,MAAM,CAACqD,QAAQ,EAAE,GAAG,gBAAgB,GAAGmB,QAAQ,CAACE,OAAO;IAC3E;IAEAoD,OAAO,CAAC3E,KAAK,EAAEyE,IAAI,CAAC;EACtB,CAAC,CAAC;;EAGF,SAASrC,MAAMA,CAACR,EAAE,EAAEC,EAAE,EAAEwE,MAAM,EAAE;IAC9B,IAAI5E,CAAC,GAAGI,EAAE,CAACJ,CAAC,GAAGG,EAAE,CAACH,CAAC;MACfC,CAAC,GAAGG,EAAE,CAACH,CAAC,GAAGE,EAAE,CAACF,CAAC;MACf4E,GAAG,GAAG7E,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC;MACnB6E,IAAI;IACR,IAAID,GAAG,KAAK,CAAC,EAAE;IACfC,IAAI,GAAGF,MAAM,GAAGnC,IAAI,CAACsC,IAAI,CAACF,GAAG,CAAC;IAC9B7E,CAAC,IAAI8E,IAAI;IACT7E,CAAC,IAAI6E,IAAI;IACT1E,EAAE,CAACJ,CAAC,IAAIA,CAAC;IACTI,EAAE,CAACH,CAAC,IAAIA,CAAC;IACTE,EAAE,CAACH,CAAC,IAAIA,CAAC;IACTG,EAAE,CAACF,CAAC,IAAIA,CAAC;EACX;EAEA,SAASiD,OAAOA,CAAC3E,KAAK,EAAEyE,IAAI,EAAE;IAC5B,IAAI5G,aAAa,KAAKmC,KAAK,EAAE;MAC3BpC,YAAY,IAAI6G,IAAI;IACtB,CAAC,MAAM;MACLnC,SAAS,EAAE;MACXzE,aAAa,GAAGmC,KAAK;MACrBpC,YAAY,GAAG6G,IAAI;IACrB;EACF;EAEA,SAASnC,SAASA,CAAA,EAAG;IACnB,IAAI1E,YAAY,EAAE;MAChBF,QAAQ,GAAG+I,WAAW,CAAC9I,UAAU,EAAE,CAAC;MAEpCD,QAAQ,CAACwB,YAAY,CAAC,GAAG,EAAEtB,YAAY,CAAC;MAExCF,QAAQ,CAACwB,YAAY,CAAC,OAAO,EAAErB,aAAa,CAAC;MAE7C5B,IAAI,CAAC2G,WAAW,CAAClF,QAAQ,CAAC;IAC5B;IAEAE,YAAY,GAAG,EAAE;IACjBC,aAAa,GAAG,EAAE;EACpB;EAEA,SAAS4I,WAAWA,CAACC,EAAE,EAAE;IACvB,IAAIjJ,YAAY,CAACiJ,EAAE,CAAC,IAAI,IAAI,EAAE;MAC5BjJ,YAAY,CAACiJ,EAAE,CAAC,GAAGxK,QAAQ,CAACC,eAAe,CAAC,4BAA4B,EAAE,MAAM,CAAC;MAEjF,IAAI2B,QAAQ,IAAI,CAAC,EAAE;QACjBL,YAAY,CAACiJ,EAAE,CAAC,CAACxH,YAAY,CAAC,iBAAiB,EAAE,YAAY,CAAC,CAAC,CAAC;MAElE;;MAEA,OAAOzB,YAAY,CAACiJ,EAAE,CAAC;IACzB;IAEA,OAAOjJ,YAAY,CAACiJ,EAAE,CAAC;EACzB;AACF,CAAC;AAED,SAAStL,SAAS,EAAEO,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}