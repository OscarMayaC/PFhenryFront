{"ast":null,"code":"import { fromType } from '../Nodes.js';\nimport { Loader } from 'three';\nclass NodeLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.textures = {};\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parseNodes(json) {\n    const nodes = {};\n    if (json !== undefined) {\n      for (const nodeJSON of json) {\n        const {\n          uuid,\n          type\n        } = nodeJSON;\n        nodes[uuid] = fromType(type);\n        nodes[uuid].uuid = uuid;\n      }\n      const meta = {\n        nodes,\n        textures: this.textures\n      };\n      for (const nodeJSON of json) {\n        nodeJSON.meta = meta;\n        const node = nodes[nodeJSON.uuid];\n        node.deserialize(nodeJSON);\n        delete nodeJSON.meta;\n      }\n    }\n    return nodes;\n  }\n  parse(json) {\n    const node = fromType(type);\n    node.uuid = json.uuid;\n    const nodes = this.parseNodes(json.inputNodes);\n    const meta = {\n      nodes,\n      textures: this.textures\n    };\n    json.meta = meta;\n    node.deserialize(json);\n    delete json.meta;\n    return node;\n  }\n  setTextures(value) {\n    this.textures = value;\n    return this;\n  }\n}\nexport default NodeLoader;","map":{"version":3,"names":["fromType","Loader","NodeLoader","constructor","manager","textures","load","url","onLoad","onProgress","onError","loader","FileLoader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","JSON","e","console","error","itemError","parseNodes","json","nodes","undefined","nodeJSON","uuid","type","meta","node","deserialize","inputNodes","setTextures","value"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/nodes/loaders/NodeLoader.js"],"sourcesContent":["import { fromType } from '../Nodes.js';\nimport { Loader } from 'three';\n\nclass NodeLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.textures = {};\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parseNodes(json) {\n    const nodes = {};\n\n    if (json !== undefined) {\n      for (const nodeJSON of json) {\n        const {\n          uuid,\n          type\n        } = nodeJSON;\n        nodes[uuid] = fromType(type);\n        nodes[uuid].uuid = uuid;\n      }\n\n      const meta = {\n        nodes,\n        textures: this.textures\n      };\n\n      for (const nodeJSON of json) {\n        nodeJSON.meta = meta;\n        const node = nodes[nodeJSON.uuid];\n        node.deserialize(nodeJSON);\n        delete nodeJSON.meta;\n      }\n    }\n\n    return nodes;\n  }\n\n  parse(json) {\n    const node = fromType(type);\n    node.uuid = json.uuid;\n    const nodes = this.parseNodes(json.inputNodes);\n    const meta = {\n      nodes,\n      textures: this.textures\n    };\n    json.meta = meta;\n    node.deserialize(json);\n    delete json.meta;\n    return node;\n  }\n\n  setTextures(value) {\n    this.textures = value;\n    return this;\n  }\n\n}\n\nexport default NodeLoader;\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,aAAa;AACtC,SAASC,MAAM,QAAQ,OAAO;AAE9B,MAAMC,UAAU,SAASD,MAAM,CAAC;EAC9BE,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;EACpB;EAEAC,IAAIA,CAACC,GAAG,EAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAE;IACrC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,IAAI,CAACR,OAAO,CAAC;IAC3CO,MAAM,CAACE,OAAO,CAAC,IAAI,CAACC,IAAI,CAAC;IACzBH,MAAM,CAACI,gBAAgB,CAAC,IAAI,CAACC,aAAa,CAAC;IAC3CL,MAAM,CAACM,kBAAkB,CAAC,IAAI,CAACC,eAAe,CAAC;IAC/CP,MAAM,CAACL,IAAI,CAACC,GAAG,EAAEY,IAAI,IAAI;MACvB,IAAI;QACFX,MAAM,CAAC,IAAI,CAACY,KAAK,CAACC,IAAI,CAACD,KAAK,CAACD,IAAI,CAAC,CAAC,CAAC;MACtC,CAAC,CAAC,OAAOG,CAAC,EAAE;QACV,IAAIZ,OAAO,EAAE;UACXA,OAAO,CAACY,CAAC,CAAC;QACZ,CAAC,MAAM;UACLC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;QAClB;QAEA,IAAI,CAAClB,OAAO,CAACqB,SAAS,CAAClB,GAAG,CAAC;MAC7B;IACF,CAAC,EAAEE,UAAU,EAAEC,OAAO,CAAC;EACzB;EAEAgB,UAAUA,CAACC,IAAI,EAAE;IACf,MAAMC,KAAK,GAAG,CAAC,CAAC;IAEhB,IAAID,IAAI,KAAKE,SAAS,EAAE;MACtB,KAAK,MAAMC,QAAQ,IAAIH,IAAI,EAAE;QAC3B,MAAM;UACJI,IAAI;UACJC;QACF,CAAC,GAAGF,QAAQ;QACZF,KAAK,CAACG,IAAI,CAAC,GAAG/B,QAAQ,CAACgC,IAAI,CAAC;QAC5BJ,KAAK,CAACG,IAAI,CAAC,CAACA,IAAI,GAAGA,IAAI;MACzB;MAEA,MAAME,IAAI,GAAG;QACXL,KAAK;QACLvB,QAAQ,EAAE,IAAI,CAACA;MACjB,CAAC;MAED,KAAK,MAAMyB,QAAQ,IAAIH,IAAI,EAAE;QAC3BG,QAAQ,CAACG,IAAI,GAAGA,IAAI;QACpB,MAAMC,IAAI,GAAGN,KAAK,CAACE,QAAQ,CAACC,IAAI,CAAC;QACjCG,IAAI,CAACC,WAAW,CAACL,QAAQ,CAAC;QAC1B,OAAOA,QAAQ,CAACG,IAAI;MACtB;IACF;IAEA,OAAOL,KAAK;EACd;EAEAR,KAAKA,CAACO,IAAI,EAAE;IACV,MAAMO,IAAI,GAAGlC,QAAQ,CAACgC,IAAI,CAAC;IAC3BE,IAAI,CAACH,IAAI,GAAGJ,IAAI,CAACI,IAAI;IACrB,MAAMH,KAAK,GAAG,IAAI,CAACF,UAAU,CAACC,IAAI,CAACS,UAAU,CAAC;IAC9C,MAAMH,IAAI,GAAG;MACXL,KAAK;MACLvB,QAAQ,EAAE,IAAI,CAACA;IACjB,CAAC;IACDsB,IAAI,CAACM,IAAI,GAAGA,IAAI;IAChBC,IAAI,CAACC,WAAW,CAACR,IAAI,CAAC;IACtB,OAAOA,IAAI,CAACM,IAAI;IAChB,OAAOC,IAAI;EACb;EAEAG,WAAWA,CAACC,KAAK,EAAE;IACjB,IAAI,CAACjC,QAAQ,GAAGiC,KAAK;IACrB,OAAO,IAAI;EACb;AAEF;AAEA,eAAepC,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}