{"ast":null,"code":"import { Vector3, Ray, Loader, FileLoader, MeshStandardMaterial, LineBasicMaterial, ShaderMaterial, UniformsUtils, UniformsLib, Color, BufferGeometry, BufferAttribute, LineSegments, Mesh, Matrix4, Group } from 'three';\n\n// Note: \"MATERIAL\" tag (e.g. GLITTER, SPECKLE) is not implemented\n\nconst FINISH_TYPE_DEFAULT = 0;\nconst FINISH_TYPE_CHROME = 1;\nconst FINISH_TYPE_PEARLESCENT = 2;\nconst FINISH_TYPE_RUBBER = 3;\nconst FINISH_TYPE_MATTE_METALLIC = 4;\nconst FINISH_TYPE_METAL = 5; // State machine to search a subobject path.\n// The LDraw standard establishes these various possible subfolders.\n\nconst FILE_LOCATION_AS_IS = 0;\nconst FILE_LOCATION_TRY_PARTS = 1;\nconst FILE_LOCATION_TRY_P = 2;\nconst FILE_LOCATION_TRY_MODELS = 3;\nconst FILE_LOCATION_TRY_RELATIVE = 4;\nconst FILE_LOCATION_TRY_ABSOLUTE = 5;\nconst FILE_LOCATION_NOT_FOUND = 6;\nconst MAIN_COLOUR_CODE = '16';\nconst MAIN_EDGE_COLOUR_CODE = '24';\nconst _tempVec0 = new Vector3();\nconst _tempVec1 = new Vector3();\nclass LDrawConditionalLineMaterial extends ShaderMaterial {\n  constructor(parameters) {\n    super({\n      uniforms: UniformsUtils.merge([UniformsLib.fog, {\n        diffuse: {\n          value: new Color()\n        },\n        opacity: {\n          value: 1.0\n        }\n      }]),\n      vertexShader: /* glsl */\n      `\n        attribute vec3 control0;\n        attribute vec3 control1;\n        attribute vec3 direction;\n        varying float discardFlag;\n\n        #include <common>\n        #include <color_pars_vertex>\n        #include <fog_pars_vertex>\n        #include <logdepthbuf_pars_vertex>\n        #include <clipping_planes_pars_vertex>\n\n        void main() {\n          #include <color_vertex>\n\n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n          gl_Position = projectionMatrix * mvPosition;\n\n          // Transform the line segment ends and control points into camera clip space\n          vec4 c0 = projectionMatrix * modelViewMatrix * vec4(control0, 1.0);\n          vec4 c1 = projectionMatrix * modelViewMatrix * vec4(control1, 1.0);\n          vec4 p0 = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          vec4 p1 = projectionMatrix * modelViewMatrix * vec4(position + direction, 1.0);\n\n          c0.xy /= c0.w;\n          c1.xy /= c1.w;\n          p0.xy /= p0.w;\n          p1.xy /= p1.w;\n\n          // Get the direction of the segment and an orthogonal vector\n          vec2 dir = p1.xy - p0.xy;\n          vec2 norm = vec2(-dir.y, dir.x);\n\n          // Get control point directions from the line\n          vec2 c0dir = c0.xy - p1.xy;\n          vec2 c1dir = c1.xy - p1.xy;\n\n          // If the vectors to the controls points are pointed in different directions away\n          // from the line segment then the line should not be drawn.\n          float d0 = dot(normalize(norm), normalize(c0dir));\n          float d1 = dot(normalize(norm), normalize(c1dir));\n          discardFlag = float(sign(d0) != sign(d1));\n\n          #include <logdepthbuf_vertex>\n          #include <clipping_planes_vertex>\n          #include <fog_vertex>\n        }\n      `,\n      fragmentShader: /* glsl */\n      `\n        uniform vec3 diffuse;\n        uniform float opacity;\n        varying float discardFlag;\n\n        #include <common>\n        #include <color_pars_fragment>\n        #include <fog_pars_fragment>\n        #include <logdepthbuf_pars_fragment>\n        #include <clipping_planes_pars_fragment>\n\n        void main() {\n          if (discardFlag > 0.5) discard;\n\n          #include <clipping_planes_fragment>\n          vec3 outgoingLight = vec3(0.0);\n          vec4 diffuseColor = vec4(diffuse, opacity);\n          #include <logdepthbuf_fragment>\n          #include <color_fragment>\n          outgoingLight = diffuseColor.rgb; // simple shader\n          gl_FragColor = vec4(outgoingLight, diffuseColor.a);\n          #include <tonemapping_fragment>\n          #include <encodings_fragment>\n          #include <fog_fragment>\n          #include <premultiplied_alpha_fragment>\n        }\n      `\n    });\n    Object.defineProperties(this, {\n      opacity: {\n        get: function () {\n          return this.uniforms.opacity.value;\n        },\n        set: function (value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      color: {\n        get: function () {\n          return this.uniforms.diffuse.value;\n        }\n      }\n    });\n    this.setValues(parameters);\n    this.isLDrawConditionalLineMaterial = true;\n  }\n}\nclass ConditionalLineSegments extends LineSegments {\n  constructor(geometry, material) {\n    super(geometry, material);\n    this.isConditionalLine = true;\n  }\n}\nfunction generateFaceNormals(faces) {\n  for (let i = 0, l = faces.length; i < l; i++) {\n    const face = faces[i];\n    const vertices = face.vertices;\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    const v2 = vertices[2];\n    _tempVec0.subVectors(v1, v0);\n    _tempVec1.subVectors(v2, v1);\n    face.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n  }\n}\nconst _ray = new Ray();\nfunction smoothNormals(faces, lineSegments) {\n  let checkSubSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // NOTE: 1e2 is pretty coarse but was chosen to quantize the resulting value because\n  // it allows edges to be smoothed as expected (see minifig arms).\n  // --\n  // And the vector values are initialize multiplied by 1 + 1e-10 to account for floating\n  // point errors on vertices along quantization boundaries. Ie after matrix multiplication\n  // vertices that should be merged might be set to \"1.7\" and \"1.6999...\" meaning they won't\n  // get merged. This added epsilon attempts to push these error values to the same quantized\n  // value for the sake of hashing. See \"AT-ST mini\" dishes. See mrdoob/three#23169.\n  const hashMultiplier = (1 + 1e-10) * 1e2;\n  function hashVertex(v) {\n    const x = ~~(v.x * hashMultiplier);\n    const y = ~~(v.y * hashMultiplier);\n    const z = ~~(v.z * hashMultiplier);\n    return `${x},${y},${z}`;\n  }\n  function hashEdge(v0, v1) {\n    return `${hashVertex(v0)}_${hashVertex(v1)}`;\n  } // converts the two vertices to a ray with a normalized direction and origin of 0, 0, 0 projected\n  // onto the original line.\n\n  function toNormalizedRay(v0, v1, targetRay) {\n    targetRay.direction.subVectors(v1, v0).normalize();\n    const scalar = v0.dot(targetRay.direction);\n    targetRay.origin.copy(v0).addScaledVector(targetRay.direction, -scalar);\n    return targetRay;\n  }\n  function hashRay(ray) {\n    return hashEdge(ray.origin, ray.direction);\n  }\n  const hardEdges = new Set();\n  const hardEdgeRays = new Map();\n  const halfEdgeList = {};\n  const normals = []; // Save the list of hard edges by hash\n\n  for (let i = 0, l = lineSegments.length; i < l; i++) {\n    const ls = lineSegments[i];\n    const vertices = ls.vertices;\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    hardEdges.add(hashEdge(v0, v1));\n    hardEdges.add(hashEdge(v1, v0)); // only generate the hard edge ray map if we're checking subsegments because it's more expensive to check\n    // and requires more memory.\n\n    if (checkSubSegments) {\n      // add both ray directions to the map\n      const ray = toNormalizedRay(v0, v1, new Ray());\n      const rh1 = hashRay(ray);\n      if (!hardEdgeRays.has(rh1)) {\n        toNormalizedRay(v1, v0, ray);\n        const rh2 = hashRay(ray);\n        const info = {\n          ray,\n          distances: []\n        };\n        hardEdgeRays.set(rh1, info);\n        hardEdgeRays.set(rh2, info);\n      } // store both segments ends in min, max order in the distances array to check if a face edge is a\n      // subsegment later.\n\n      const info = hardEdgeRays.get(rh1);\n      let d0 = info.ray.direction.dot(v0);\n      let d1 = info.ray.direction.dot(v1);\n      if (d0 > d1) {\n        [d0, d1] = [d1, d0];\n      }\n      info.distances.push(d0, d1);\n    }\n  } // track the half edges associated with each triangle\n\n  for (let i = 0, l = faces.length; i < l; i++) {\n    const tri = faces[i];\n    const vertices = tri.vertices;\n    const vertCount = vertices.length;\n    for (let i2 = 0; i2 < vertCount; i2++) {\n      const index = i2;\n      const next = (i2 + 1) % vertCount;\n      const v0 = vertices[index];\n      const v1 = vertices[next];\n      const hash = hashEdge(v0, v1); // don't add the triangle if the edge is supposed to be hard\n\n      if (hardEdges.has(hash)) {\n        continue;\n      } // if checking subsegments then check to see if this edge lies on a hard edge ray and whether its within any ray bounds\n\n      if (checkSubSegments) {\n        toNormalizedRay(v0, v1, _ray);\n        const rayHash = hashRay(_ray);\n        if (hardEdgeRays.has(rayHash)) {\n          const info = hardEdgeRays.get(rayHash);\n          const {\n            ray,\n            distances\n          } = info;\n          let d0 = ray.direction.dot(v0);\n          let d1 = ray.direction.dot(v1);\n          if (d0 > d1) {\n            [d0, d1] = [d1, d0];\n          } // return early if the face edge is found to be a subsegment of a line edge meaning the edge will have \"hard\" normals\n\n          let found = false;\n          for (let i = 0, l = distances.length; i < l; i += 2) {\n            if (d0 >= distances[i] && d1 <= distances[i + 1]) {\n              found = true;\n              break;\n            }\n          }\n          if (found) {\n            continue;\n          }\n        }\n      }\n      const info = {\n        index: index,\n        tri: tri\n      };\n      halfEdgeList[hash] = info;\n    }\n  } // Iterate until we've tried to connect all faces to share normals\n\n  while (true) {\n    // Stop if there are no more faces left\n    let halfEdge = null;\n    for (const key in halfEdgeList) {\n      halfEdge = halfEdgeList[key];\n      break;\n    }\n    if (halfEdge === null) {\n      break;\n    } // Exhaustively find all connected faces\n\n    const queue = [halfEdge];\n    while (queue.length > 0) {\n      // initialize all vertex normals in this triangle\n      const tri = queue.pop().tri;\n      const vertices = tri.vertices;\n      const vertNormals = tri.normals;\n      const faceNormal = tri.faceNormal; // Check if any edge is connected to another triangle edge\n\n      const vertCount = vertices.length;\n      for (let i2 = 0; i2 < vertCount; i2++) {\n        const index = i2;\n        const next = (i2 + 1) % vertCount;\n        const v0 = vertices[index];\n        const v1 = vertices[next]; // delete this triangle from the list so it won't be found again\n\n        const hash = hashEdge(v0, v1);\n        delete halfEdgeList[hash];\n        const reverseHash = hashEdge(v1, v0);\n        const otherInfo = halfEdgeList[reverseHash];\n        if (otherInfo) {\n          const otherTri = otherInfo.tri;\n          const otherIndex = otherInfo.index;\n          const otherNormals = otherTri.normals;\n          const otherVertCount = otherNormals.length;\n          const otherFaceNormal = otherTri.faceNormal; // NOTE: If the angle between faces is > 67.5 degrees then assume it's\n          // hard edge. There are some cases where the line segments do not line up exactly\n          // with or span multiple triangle edges (see Lunar Vehicle wheels).\n\n          if (Math.abs(otherTri.faceNormal.dot(tri.faceNormal)) < 0.25) {\n            continue;\n          } // if this triangle has already been traversed then it won't be in\n          // the halfEdgeList. If it has not then add it to the queue and delete\n          // it so it won't be found again.\n\n          if (reverseHash in halfEdgeList) {\n            queue.push(otherInfo);\n            delete halfEdgeList[reverseHash];\n          } // share the first normal\n\n          const otherNext = (otherIndex + 1) % otherVertCount;\n          if (vertNormals[index] && otherNormals[otherNext] && vertNormals[index] !== otherNormals[otherNext]) {\n            otherNormals[otherNext].norm.add(vertNormals[index].norm);\n            vertNormals[index].norm = otherNormals[otherNext].norm;\n          }\n          let sharedNormal1 = vertNormals[index] || otherNormals[otherNext];\n          if (sharedNormal1 === null) {\n            // it's possible to encounter an edge of a triangle that has already been traversed meaning\n            // both edges already have different normals defined and shared. To work around this we create\n            // a wrapper object so when those edges are merged the normals can be updated everywhere.\n            sharedNormal1 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal1.norm);\n          }\n          if (vertNormals[index] === null) {\n            vertNormals[index] = sharedNormal1;\n            sharedNormal1.norm.add(faceNormal);\n          }\n          if (otherNormals[otherNext] === null) {\n            otherNormals[otherNext] = sharedNormal1;\n            sharedNormal1.norm.add(otherFaceNormal);\n          } // share the second normal\n\n          if (vertNormals[next] && otherNormals[otherIndex] && vertNormals[next] !== otherNormals[otherIndex]) {\n            otherNormals[otherIndex].norm.add(vertNormals[next].norm);\n            vertNormals[next].norm = otherNormals[otherIndex].norm;\n          }\n          let sharedNormal2 = vertNormals[next] || otherNormals[otherIndex];\n          if (sharedNormal2 === null) {\n            sharedNormal2 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal2.norm);\n          }\n          if (vertNormals[next] === null) {\n            vertNormals[next] = sharedNormal2;\n            sharedNormal2.norm.add(faceNormal);\n          }\n          if (otherNormals[otherIndex] === null) {\n            otherNormals[otherIndex] = sharedNormal2;\n            sharedNormal2.norm.add(otherFaceNormal);\n          }\n        }\n      }\n    }\n  } // The normals of each face have been added up so now we average them by normalizing the vector.\n\n  for (let i = 0, l = normals.length; i < l; i++) {\n    normals[i].normalize();\n  }\n}\nfunction isPartType(type) {\n  return type === 'Part' || type === 'Unofficial_Part';\n}\nfunction isPrimitiveType(type) {\n  return /primitive/i.test(type) || type === 'Subpart';\n}\nclass LineParser {\n  constructor(line, lineNumber) {\n    this.line = line;\n    this.lineLength = line.length;\n    this.currentCharIndex = 0;\n    this.currentChar = ' ';\n    this.lineNumber = lineNumber;\n  }\n  seekNonSpace() {\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n      if (this.currentChar !== ' ' && this.currentChar !== '\\t') {\n        return;\n      }\n      this.currentCharIndex++;\n    }\n  }\n  getToken() {\n    const pos0 = this.currentCharIndex++; // Seek space\n\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n      if (this.currentChar === ' ' || this.currentChar === '\\t') {\n        break;\n      }\n      this.currentCharIndex++;\n    }\n    const pos1 = this.currentCharIndex;\n    this.seekNonSpace();\n    return this.line.substring(pos0, pos1);\n  }\n  getVector() {\n    return new Vector3(parseFloat(this.getToken()), parseFloat(this.getToken()), parseFloat(this.getToken()));\n  }\n  getRemainingString() {\n    return this.line.substring(this.currentCharIndex, this.lineLength);\n  }\n  isAtTheEnd() {\n    return this.currentCharIndex >= this.lineLength;\n  }\n  setToEnd() {\n    this.currentCharIndex = this.lineLength;\n  }\n  getLineNumberString() {\n    return this.lineNumber >= 0 ? ' at line ' + this.lineNumber : '';\n  }\n} // Fetches and parses an intermediate representation of LDraw parts files.\n\nclass LDrawParsedCache {\n  constructor(loader) {\n    this.loader = loader;\n    this._cache = {};\n  }\n  cloneResult(original) {\n    const result = {}; // vertices are transformed and normals computed before being converted to geometry\n    // so these pieces must be cloned.\n\n    result.faces = original.faces.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone()),\n        normals: face.normals.map(() => null),\n        faceNormal: null\n      };\n    });\n    result.conditionalSegments = original.conditionalSegments.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone()),\n        controlPoints: face.controlPoints.map(v => v.clone())\n      };\n    });\n    result.lineSegments = original.lineSegments.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone())\n      };\n    }); // none if this is subsequently modified\n\n    result.type = original.type;\n    result.category = original.category;\n    result.keywords = original.keywords;\n    result.subobjects = original.subobjects;\n    result.totalFaces = original.totalFaces;\n    result.startingConstructionStep = original.startingConstructionStep;\n    result.materials = original.materials;\n    result.group = null;\n    return result;\n  }\n  async fetchData(fileName) {\n    let triedLowerCase = false;\n    let locationState = FILE_LOCATION_AS_IS;\n    while (locationState !== FILE_LOCATION_NOT_FOUND) {\n      let subobjectURL = fileName;\n      switch (locationState) {\n        case FILE_LOCATION_AS_IS:\n          locationState = locationState + 1;\n          break;\n        case FILE_LOCATION_TRY_PARTS:\n          subobjectURL = 'parts/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n        case FILE_LOCATION_TRY_P:\n          subobjectURL = 'p/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n        case FILE_LOCATION_TRY_MODELS:\n          subobjectURL = 'models/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n        case FILE_LOCATION_TRY_RELATIVE:\n          subobjectURL = fileName.substring(0, fileName.lastIndexOf('/') + 1) + subobjectURL;\n          locationState = locationState + 1;\n          break;\n        case FILE_LOCATION_TRY_ABSOLUTE:\n          if (triedLowerCase) {\n            // Try absolute path\n            locationState = FILE_LOCATION_NOT_FOUND;\n          } else {\n            // Next attempt is lower case\n            fileName = fileName.toLowerCase();\n            subobjectURL = fileName;\n            triedLowerCase = true;\n            locationState = FILE_LOCATION_AS_IS;\n          }\n          break;\n      }\n      const loader = this.loader;\n      const fileLoader = new FileLoader(loader.manager);\n      fileLoader.setPath(loader.partsLibraryPath);\n      fileLoader.setRequestHeader(loader.requestHeader);\n      fileLoader.setWithCredentials(loader.withCredentials);\n      try {\n        const text = await fileLoader.loadAsync(subobjectURL);\n        return text;\n      } catch {\n        continue;\n      }\n    }\n    throw new Error('LDrawLoader: Subobject \"' + fileName + '\" could not be loaded.');\n  }\n  parse(text) {\n    let fileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const loader = this.loader; // final results\n\n    const faces = [];\n    const lineSegments = [];\n    const conditionalSegments = [];\n    const subobjects = [];\n    const materials = {};\n    const getLocalMaterial = colorCode => {\n      return materials[colorCode] || null;\n    };\n    let type = 'Model';\n    let category = null;\n    let keywords = null;\n    let totalFaces = 0; // split into lines\n\n    if (text.indexOf('\\r\\n') !== -1) {\n      // This is faster than String.split with regex that splits on both\n      text = text.replace(/\\r\\n/g, '\\n');\n    }\n    const lines = text.split('\\n');\n    const numLines = lines.length;\n    let parsingEmbeddedFiles = false;\n    let currentEmbeddedFileName = null;\n    let currentEmbeddedText = null;\n    let bfcCertified = false;\n    let bfcCCW = true;\n    let bfcInverted = false;\n    let bfcCull = true;\n    let startingConstructionStep = false; // Parse all line commands\n\n    for (let lineIndex = 0; lineIndex < numLines; lineIndex++) {\n      const line = lines[lineIndex];\n      if (line.length === 0) continue;\n      if (parsingEmbeddedFiles) {\n        if (line.startsWith('0 FILE ')) {\n          // Save previous embedded file in the cache\n          this.setData(currentEmbeddedFileName, currentEmbeddedText); // New embedded text file\n\n          currentEmbeddedFileName = line.substring(7);\n          currentEmbeddedText = '';\n        } else {\n          currentEmbeddedText += line + '\\n';\n        }\n        continue;\n      }\n      const lp = new LineParser(line, lineIndex + 1);\n      lp.seekNonSpace();\n      if (lp.isAtTheEnd()) {\n        // Empty line\n        continue;\n      } // Parse the line type\n\n      const lineType = lp.getToken();\n      let material;\n      let colorCode;\n      let segment;\n      let ccw;\n      let doubleSided;\n      let v0, v1, v2, v3, c0, c1;\n      switch (lineType) {\n        // Line type 0: Comment or META\n        case '0':\n          // Parse meta directive\n          const meta = lp.getToken();\n          if (meta) {\n            switch (meta) {\n              case '!LDRAW_ORG':\n                type = lp.getToken();\n                break;\n              case '!COLOUR':\n                material = loader.parseColorMetaDirective(lp);\n                if (material) {\n                  materials[material.userData.code] = material;\n                } else {\n                  console.warn('LDrawLoader: Error parsing material' + lp.getLineNumberString());\n                }\n                break;\n              case '!CATEGORY':\n                category = lp.getToken();\n                break;\n              case '!KEYWORDS':\n                const newKeywords = lp.getRemainingString().split(',');\n                if (newKeywords.length > 0) {\n                  if (!keywords) {\n                    keywords = [];\n                  }\n                  newKeywords.forEach(function (keyword) {\n                    keywords.push(keyword.trim());\n                  });\n                }\n                break;\n              case 'FILE':\n                if (lineIndex > 0) {\n                  // Start embedded text files parsing\n                  parsingEmbeddedFiles = true;\n                  currentEmbeddedFileName = lp.getRemainingString();\n                  currentEmbeddedText = '';\n                  bfcCertified = false;\n                  bfcCCW = true;\n                }\n                break;\n              case 'BFC':\n                // Changes to the backface culling state\n                while (!lp.isAtTheEnd()) {\n                  const token = lp.getToken();\n                  switch (token) {\n                    case 'CERTIFY':\n                    case 'NOCERTIFY':\n                      bfcCertified = token === 'CERTIFY';\n                      bfcCCW = true;\n                      break;\n                    case 'CW':\n                    case 'CCW':\n                      bfcCCW = token === 'CCW';\n                      break;\n                    case 'INVERTNEXT':\n                      bfcInverted = true;\n                      break;\n                    case 'CLIP':\n                    case 'NOCLIP':\n                      bfcCull = token === 'CLIP';\n                      break;\n                    default:\n                      console.warn('THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.');\n                      break;\n                  }\n                }\n                break;\n              case 'STEP':\n                startingConstructionStep = true;\n                break;\n            }\n          }\n          break;\n        // Line type 1: Sub-object file\n\n        case '1':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          const posX = parseFloat(lp.getToken());\n          const posY = parseFloat(lp.getToken());\n          const posZ = parseFloat(lp.getToken());\n          const m0 = parseFloat(lp.getToken());\n          const m1 = parseFloat(lp.getToken());\n          const m2 = parseFloat(lp.getToken());\n          const m3 = parseFloat(lp.getToken());\n          const m4 = parseFloat(lp.getToken());\n          const m5 = parseFloat(lp.getToken());\n          const m6 = parseFloat(lp.getToken());\n          const m7 = parseFloat(lp.getToken());\n          const m8 = parseFloat(lp.getToken());\n          const matrix = new Matrix4().set(m0, m1, m2, posX, m3, m4, m5, posY, m6, m7, m8, posZ, 0, 0, 0, 1);\n          let fileName = lp.getRemainingString().trim().replace(/\\\\/g, '/');\n          if (loader.fileMap[fileName]) {\n            // Found the subobject path in the preloaded file path map\n            fileName = loader.fileMap[fileName];\n          } else {\n            // Standardized subfolders\n            if (fileName.startsWith('s/')) {\n              fileName = 'parts/' + fileName;\n            } else if (fileName.startsWith('48/')) {\n              fileName = 'p/' + fileName;\n            }\n          }\n          subobjects.push({\n            material: material,\n            colorCode: colorCode,\n            matrix: matrix,\n            fileName: fileName,\n            inverted: bfcInverted,\n            startingConstructionStep: startingConstructionStep\n          });\n          bfcInverted = false;\n          break;\n        // Line type 2: Line segment\n\n        case '2':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          v0 = lp.getVector();\n          v1 = lp.getVector();\n          segment = {\n            material: material,\n            colorCode: colorCode,\n            vertices: [v0, v1]\n          };\n          lineSegments.push(segment);\n          break;\n        // Line type 5: Conditional Line segment\n\n        case '5':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          v0 = lp.getVector();\n          v1 = lp.getVector();\n          c0 = lp.getVector();\n          c1 = lp.getVector();\n          segment = {\n            material: material,\n            colorCode: colorCode,\n            vertices: [v0, v1],\n            controlPoints: [c0, c1]\n          };\n          conditionalSegments.push(segment);\n          break;\n        // Line type 3: Triangle\n\n        case '3':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          ccw = bfcCCW;\n          doubleSided = !bfcCertified || !bfcCull;\n          if (ccw === true) {\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            v2 = lp.getVector();\n          } else {\n            v2 = lp.getVector();\n            v1 = lp.getVector();\n            v0 = lp.getVector();\n          }\n          faces.push({\n            material: material,\n            colorCode: colorCode,\n            faceNormal: null,\n            vertices: [v0, v1, v2],\n            normals: [null, null, null]\n          });\n          totalFaces++;\n          if (doubleSided === true) {\n            faces.push({\n              material: material,\n              colorCode: colorCode,\n              faceNormal: null,\n              vertices: [v2, v1, v0],\n              normals: [null, null, null]\n            });\n            totalFaces++;\n          }\n          break;\n        // Line type 4: Quadrilateral\n\n        case '4':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          ccw = bfcCCW;\n          doubleSided = !bfcCertified || !bfcCull;\n          if (ccw === true) {\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            v2 = lp.getVector();\n            v3 = lp.getVector();\n          } else {\n            v3 = lp.getVector();\n            v2 = lp.getVector();\n            v1 = lp.getVector();\n            v0 = lp.getVector();\n          } // specifically place the triangle diagonal in the v0 and v1 slots so we can\n          // account for the doubling of vertices later when smoothing normals.\n\n          faces.push({\n            material: material,\n            colorCode: colorCode,\n            faceNormal: null,\n            vertices: [v0, v1, v2, v3],\n            normals: [null, null, null, null]\n          });\n          totalFaces += 2;\n          if (doubleSided === true) {\n            faces.push({\n              material: material,\n              colorCode: colorCode,\n              faceNormal: null,\n              vertices: [v3, v2, v1, v0],\n              normals: [null, null, null, null]\n            });\n            totalFaces += 2;\n          }\n          break;\n        default:\n          throw new Error('LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + '.');\n      }\n    }\n    if (parsingEmbeddedFiles) {\n      this.setData(currentEmbeddedFileName, currentEmbeddedText);\n    }\n    return {\n      faces,\n      conditionalSegments,\n      lineSegments,\n      type,\n      category,\n      keywords,\n      subobjects,\n      totalFaces,\n      startingConstructionStep,\n      materials,\n      fileName,\n      group: null\n    };\n  } // returns an (optionally cloned) instance of the data\n\n  getData(fileName) {\n    let clone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const key = fileName.toLowerCase();\n    const result = this._cache[key];\n    if (result === null || result instanceof Promise) {\n      return null;\n    }\n    if (clone) {\n      return this.cloneResult(result);\n    } else {\n      return result;\n    }\n  } // kicks off a fetch and parse of the requested data if it hasn't already been loaded. Returns when\n  // the data is ready to use and can be retrieved synchronously with \"getData\".\n\n  async ensureDataLoaded(fileName) {\n    const key = fileName.toLowerCase();\n    if (!(key in this._cache)) {\n      // replace the promise with a copy of the parsed data for immediate processing\n      this._cache[key] = this.fetchData(fileName).then(text => {\n        const info = this.parse(text, fileName);\n        this._cache[key] = info;\n        return info;\n      });\n    }\n    await this._cache[key];\n  } // sets the data in the cache from parsed data\n\n  setData(fileName, text) {\n    const key = fileName.toLowerCase();\n    this._cache[key] = this.parse(text, fileName);\n  }\n} // returns the material for an associated color code. If the color code is 16 for a face or 24 for\n// an edge then the passthroughColorCode is used.\n\nfunction getMaterialFromCode(colorCode, parentColorCode, materialHierarchy, forEdge) {\n  const isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n  if (isPassthrough) {\n    colorCode = parentColorCode;\n  }\n  return materialHierarchy[colorCode] || null;\n} // Class used to parse and build LDraw parts as three.js objects and cache them if they're a \"Part\" type.\n\nclass LDrawPartsGeometryCache {\n  constructor(loader) {\n    this.loader = loader;\n    this.parseCache = new LDrawParsedCache(loader);\n    this._cache = {};\n  } // Convert the given file information into a mesh by processing subobjects.\n\n  async processIntoMesh(info) {\n    var _this = this;\n    const loader = this.loader;\n    const parseCache = this.parseCache;\n    const faceMaterials = new Set(); // Processes the part subobject information to load child parts and merge geometry onto part\n    // piece object.\n\n    const processInfoSubobjects = async function (info) {\n      let subobject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      const subobjects = info.subobjects;\n      const promises = []; // Trigger load of all subobjects. If a subobject isn't a primitive then load it as a separate\n      // group which lets instruction steps apply correctly.\n\n      for (let i = 0, l = subobjects.length; i < l; i++) {\n        const subobject = subobjects[i];\n        const promise = parseCache.ensureDataLoaded(subobject.fileName).then(() => {\n          const subobjectInfo = parseCache.getData(subobject.fileName, false);\n          if (!isPrimitiveType(subobjectInfo.type)) {\n            return _this.loadModel(subobject.fileName).catch(error => {\n              console.warn(error);\n              return null;\n            });\n          }\n          return processInfoSubobjects(parseCache.getData(subobject.fileName), subobject);\n        });\n        promises.push(promise);\n      }\n      const group = new Group();\n      group.userData.category = info.category;\n      group.userData.keywords = info.keywords;\n      info.group = group;\n      const subobjectInfos = await Promise.all(promises);\n      for (let i = 0, l = subobjectInfos.length; i < l; i++) {\n        const subobject = info.subobjects[i];\n        const subobjectInfo = subobjectInfos[i];\n        if (subobjectInfo === null) {\n          // the subobject failed to load\n          continue;\n        } // if the subobject was loaded as a separate group then apply the parent scopes materials\n\n        if (subobjectInfo.isGroup) {\n          const subobjectGroup = subobjectInfo;\n          subobject.matrix.decompose(subobjectGroup.position, subobjectGroup.quaternion, subobjectGroup.scale);\n          subobjectGroup.userData.startingConstructionStep = subobject.startingConstructionStep;\n          subobjectGroup.name = subobject.fileName;\n          loader.applyMaterialsToMesh(subobjectGroup, subobject.colorCode, info.materials);\n          group.add(subobjectGroup);\n          continue;\n        } // add the subobject group if it has children in case it has both children and primitives\n\n        if (subobjectInfo.group.children.length) {\n          group.add(subobjectInfo.group);\n        } // transform the primitives into the local space of the parent piece and append them to\n        // to the parent primitives list.\n\n        const parentLineSegments = info.lineSegments;\n        const parentConditionalSegments = info.conditionalSegments;\n        const parentFaces = info.faces;\n        const lineSegments = subobjectInfo.lineSegments;\n        const conditionalSegments = subobjectInfo.conditionalSegments;\n        const faces = subobjectInfo.faces;\n        const matrix = subobject.matrix;\n        const inverted = subobject.inverted;\n        const matrixScaleInverted = matrix.determinant() < 0;\n        const colorCode = subobject.colorCode;\n        const lineColorCode = colorCode === MAIN_COLOUR_CODE ? MAIN_EDGE_COLOUR_CODE : colorCode;\n        for (let i = 0, l = lineSegments.length; i < l; i++) {\n          const ls = lineSegments[i];\n          const vertices = ls.vertices;\n          vertices[0].applyMatrix4(matrix);\n          vertices[1].applyMatrix4(matrix);\n          ls.colorCode = ls.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : ls.colorCode;\n          ls.material = ls.material || getMaterialFromCode(ls.colorCode, ls.colorCode, info.materials, true);\n          parentLineSegments.push(ls);\n        }\n        for (let i = 0, l = conditionalSegments.length; i < l; i++) {\n          const os = conditionalSegments[i];\n          const vertices = os.vertices;\n          const controlPoints = os.controlPoints;\n          vertices[0].applyMatrix4(matrix);\n          vertices[1].applyMatrix4(matrix);\n          controlPoints[0].applyMatrix4(matrix);\n          controlPoints[1].applyMatrix4(matrix);\n          os.colorCode = os.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : os.colorCode;\n          os.material = os.material || getMaterialFromCode(os.colorCode, os.colorCode, info.materials, true);\n          parentConditionalSegments.push(os);\n        }\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const tri = faces[i];\n          const vertices = tri.vertices;\n          for (let i = 0, l = vertices.length; i < l; i++) {\n            vertices[i].applyMatrix4(matrix);\n          }\n          tri.colorCode = tri.colorCode === MAIN_COLOUR_CODE ? colorCode : tri.colorCode;\n          tri.material = tri.material || getMaterialFromCode(tri.colorCode, colorCode, info.materials, false);\n          faceMaterials.add(tri.colorCode); // If the scale of the object is negated then the triangle winding order\n          // needs to be flipped.\n\n          if (matrixScaleInverted !== inverted) {\n            vertices.reverse();\n          }\n          parentFaces.push(tri);\n        }\n        info.totalFaces += subobjectInfo.totalFaces;\n      } // Apply the parent subobjects pass through material code to this object. This is done several times due\n      // to material scoping.\n\n      if (subobject) {\n        loader.applyMaterialsToMesh(group, subobject.colorCode, info.materials);\n      }\n      return info;\n    }; // Track material use to see if we need to use the normal smooth slow path for hard edges.\n\n    for (let i = 0, l = info.faces; i < l; i++) {\n      faceMaterials.add(info.faces[i].colorCode);\n    }\n    await processInfoSubobjects(info);\n    if (loader.smoothNormals) {\n      const checkSubSegments = faceMaterials.size > 1;\n      generateFaceNormals(info.faces);\n      smoothNormals(info.faces, info.lineSegments, checkSubSegments);\n    } // Add the primitive objects and metadata.\n\n    const group = info.group;\n    if (info.faces.length > 0) {\n      group.add(createObject(info.faces, 3, false, info.totalFaces));\n    }\n    if (info.lineSegments.length > 0) {\n      group.add(createObject(info.lineSegments, 2));\n    }\n    if (info.conditionalSegments.length > 0) {\n      group.add(createObject(info.conditionalSegments, 2, true));\n    }\n    return group;\n  }\n  hasCachedModel(fileName) {\n    return fileName !== null && fileName.toLowerCase() in this._cache;\n  }\n  async getCachedModel(fileName) {\n    if (fileName !== null && this.hasCachedModel(fileName)) {\n      const key = fileName.toLowerCase();\n      const group = await this._cache[key];\n      return group.clone();\n    } else {\n      return null;\n    }\n  } // Loads and parses the model with the given file name. Returns a cached copy if available.\n\n  async loadModel(fileName) {\n    const parseCache = this.parseCache;\n    const key = fileName.toLowerCase();\n    if (this.hasCachedModel(fileName)) {\n      // Return cached model if available.\n      return this.getCachedModel(fileName);\n    } else {\n      // Otherwise parse a new model.\n      // Ensure the file data is loaded and pre parsed.\n      await parseCache.ensureDataLoaded(fileName);\n      const info = parseCache.getData(fileName);\n      const promise = this.processIntoMesh(info); // Now that the file has loaded it's possible that another part parse has been waiting in parallel\n      // so check the cache again to see if it's been added since the last async operation so we don't\n      // do unnecessary work.\n\n      if (this.hasCachedModel(fileName)) {\n        return this.getCachedModel(fileName);\n      } // Cache object if it's a part so it can be reused later.\n\n      if (isPartType(info.type)) {\n        this._cache[key] = promise;\n      } // return a copy\n\n      const group = await promise;\n      return group.clone();\n    }\n  } // parses the given model text into a renderable object. Returns cached copy if available.\n\n  async parseModel(text) {\n    const parseCache = this.parseCache;\n    const info = parseCache.parse(text);\n    if (isPartType(info.type) && this.hasCachedModel(info.fileName)) {\n      return this.getCachedModel(info.fileName);\n    }\n    return this.processIntoMesh(info);\n  }\n}\nfunction sortByMaterial(a, b) {\n  if (a.colorCode === b.colorCode) {\n    return 0;\n  }\n  if (a.colorCode < b.colorCode) {\n    return -1;\n  }\n  return 1;\n}\nfunction createObject(elements, elementSize) {\n  let isConditionalSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let totalElements = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  // Creates a LineSegments (elementSize = 2) or a Mesh (elementSize = 3 )\n  // With per face / segment material, implemented with mesh groups and materials array\n  // Sort the faces or line segments by color code to make later the mesh groups\n  elements.sort(sortByMaterial);\n  if (totalElements === null) {\n    totalElements = elements.length;\n  }\n  const positions = new Float32Array(elementSize * totalElements * 3);\n  const normals = elementSize === 3 ? new Float32Array(elementSize * totalElements * 3) : null;\n  const materials = [];\n  const quadArray = new Array(6);\n  const bufferGeometry = new BufferGeometry();\n  let prevMaterial = null;\n  let index0 = 0;\n  let numGroupVerts = 0;\n  let offset = 0;\n  for (let iElem = 0, nElem = elements.length; iElem < nElem; iElem++) {\n    const elem = elements[iElem];\n    let vertices = elem.vertices;\n    if (vertices.length === 4) {\n      quadArray[0] = vertices[0];\n      quadArray[1] = vertices[1];\n      quadArray[2] = vertices[2];\n      quadArray[3] = vertices[0];\n      quadArray[4] = vertices[2];\n      quadArray[5] = vertices[3];\n      vertices = quadArray;\n    }\n    for (let j = 0, l = vertices.length; j < l; j++) {\n      const v = vertices[j];\n      const index = offset + j * 3;\n      positions[index + 0] = v.x;\n      positions[index + 1] = v.y;\n      positions[index + 2] = v.z;\n    } // create the normals array if this is a set of faces\n\n    if (elementSize === 3) {\n      if (!elem.faceNormal) {\n        const v0 = vertices[0];\n        const v1 = vertices[1];\n        const v2 = vertices[2];\n        _tempVec0.subVectors(v1, v0);\n        _tempVec1.subVectors(v2, v1);\n        elem.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n      }\n      let elemNormals = elem.normals;\n      if (elemNormals.length === 4) {\n        quadArray[0] = elemNormals[0];\n        quadArray[1] = elemNormals[1];\n        quadArray[2] = elemNormals[2];\n        quadArray[3] = elemNormals[0];\n        quadArray[4] = elemNormals[2];\n        quadArray[5] = elemNormals[3];\n        elemNormals = quadArray;\n      }\n      for (let j = 0, l = elemNormals.length; j < l; j++) {\n        // use face normal if a vertex normal is not provided\n        let n = elem.faceNormal;\n        if (elemNormals[j]) {\n          n = elemNormals[j].norm;\n        }\n        const index = offset + j * 3;\n        normals[index + 0] = n.x;\n        normals[index + 1] = n.y;\n        normals[index + 2] = n.z;\n      }\n    }\n    if (prevMaterial !== elem.colorCode) {\n      if (prevMaterial !== null) {\n        bufferGeometry.addGroup(index0, numGroupVerts, materials.length - 1);\n      }\n      const material = elem.material;\n      if (material !== null) {\n        if (elementSize === 3) {\n          materials.push(material);\n        } else if (elementSize === 2) {\n          if (material !== null) {\n            if (isConditionalSegments) {\n              materials.push(material.userData.edgeMaterial.userData.conditionalEdgeMaterial);\n            } else {\n              materials.push(material.userData.edgeMaterial);\n            }\n          } else {\n            materials.push(null);\n          }\n        }\n      } else {\n        // If a material has not been made available yet then keep the color code string in the material array\n        // to save the spot for the material once a parent scopes materials are being applied to the object.\n        materials.push(elem.colorCode);\n      }\n      prevMaterial = elem.colorCode;\n      index0 = offset / 3;\n      numGroupVerts = vertices.length;\n    } else {\n      numGroupVerts += vertices.length;\n    }\n    offset += 3 * vertices.length;\n  }\n  if (numGroupVerts > 0) {\n    bufferGeometry.addGroup(index0, Infinity, materials.length - 1);\n  }\n  bufferGeometry.setAttribute('position', new BufferAttribute(positions, 3));\n  if (normals !== null) {\n    bufferGeometry.setAttribute('normal', new BufferAttribute(normals, 3));\n  }\n  let object3d = null;\n  if (elementSize === 2) {\n    if (isConditionalSegments) {\n      object3d = new ConditionalLineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    } else {\n      object3d = new LineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    }\n  } else if (elementSize === 3) {\n    object3d = new Mesh(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n  }\n  if (isConditionalSegments) {\n    object3d.isConditionalLine = true;\n    const controlArray0 = new Float32Array(elements.length * 3 * 2);\n    const controlArray1 = new Float32Array(elements.length * 3 * 2);\n    const directionArray = new Float32Array(elements.length * 3 * 2);\n    for (let i = 0, l = elements.length; i < l; i++) {\n      const os = elements[i];\n      const vertices = os.vertices;\n      const controlPoints = os.controlPoints;\n      const c0 = controlPoints[0];\n      const c1 = controlPoints[1];\n      const v0 = vertices[0];\n      const v1 = vertices[1];\n      const index = i * 3 * 2;\n      controlArray0[index + 0] = c0.x;\n      controlArray0[index + 1] = c0.y;\n      controlArray0[index + 2] = c0.z;\n      controlArray0[index + 3] = c0.x;\n      controlArray0[index + 4] = c0.y;\n      controlArray0[index + 5] = c0.z;\n      controlArray1[index + 0] = c1.x;\n      controlArray1[index + 1] = c1.y;\n      controlArray1[index + 2] = c1.z;\n      controlArray1[index + 3] = c1.x;\n      controlArray1[index + 4] = c1.y;\n      controlArray1[index + 5] = c1.z;\n      directionArray[index + 0] = v1.x - v0.x;\n      directionArray[index + 1] = v1.y - v0.y;\n      directionArray[index + 2] = v1.z - v0.z;\n      directionArray[index + 3] = v1.x - v0.x;\n      directionArray[index + 4] = v1.y - v0.y;\n      directionArray[index + 5] = v1.z - v0.z;\n    }\n    bufferGeometry.setAttribute('control0', new BufferAttribute(controlArray0, 3, false));\n    bufferGeometry.setAttribute('control1', new BufferAttribute(controlArray1, 3, false));\n    bufferGeometry.setAttribute('direction', new BufferAttribute(directionArray, 3, false));\n  }\n  return object3d;\n} //\n\nclass LDrawLoader extends Loader {\n  constructor(manager) {\n    super(manager); // Array of THREE.Material\n\n    this.materials = [];\n    this.materialLibrary = {}; // This also allows to handle the embedded text files (\"0 FILE\" lines)\n\n    this.partsCache = new LDrawPartsGeometryCache(this); // This object is a map from file names to paths. It agilizes the paths search. If it is not set then files will be searched by trial and error.\n\n    this.fileMap = {}; // Initializes the materials library with default materials\n\n    this.setMaterials([]); // If this flag is set to true the vertex normals will be smoothed.\n\n    this.smoothNormals = true; // The path to load parts from the LDraw parts library from.\n\n    this.partsLibraryPath = '';\n  }\n  setPartsLibraryPath(path) {\n    this.partsLibraryPath = path;\n    return this;\n  }\n  async preloadMaterials(url) {\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    const text = await fileLoader.loadAsync(url);\n    const colorLineRegex = /^0 !COLOUR/;\n    const lines = text.split(/[\\n\\r]/g);\n    const materials = [];\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n      if (colorLineRegex.test(line)) {\n        const directive = line.replace(colorLineRegex, '');\n        const material = this.parseColorMetaDirective(new LineParser(directive));\n        materials.push(material);\n      }\n    }\n    this.setMaterials(materials);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    fileLoader.load(url, text => {\n      this.partsCache.parseModel(text, this.materialLibrary).then(group => {\n        this.applyMaterialsToMesh(group, MAIN_COLOUR_CODE, this.materialLibrary, true);\n        this.computeConstructionSteps(group);\n        onLoad(group);\n      }).catch(onError);\n    }, onProgress, onError);\n  }\n  parse(text, onLoad) {\n    this.partsCache.parseModel(text, this.materialLibrary).then(group => {\n      this.computeConstructionSteps(group);\n      onLoad(group);\n    });\n  }\n  setMaterials(materials) {\n    this.materialLibrary = {};\n    this.materials = [];\n    for (let i = 0, l = materials.length; i < l; i++) {\n      this.addMaterial(materials[i]);\n    } // Add default main triangle and line edge materials (used in pieces that can be colored with a main color)\n\n    this.addMaterial(this.parseColorMetaDirective(new LineParser('Main_Colour CODE 16 VALUE #FF8080 EDGE #333333')));\n    this.addMaterial(this.parseColorMetaDirective(new LineParser('Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333')));\n    return this;\n  }\n  setFileMap(fileMap) {\n    this.fileMap = fileMap;\n    return this;\n  }\n  addMaterial(material) {\n    // Adds a material to the material library which is on top of the parse scopes stack. And also to the materials array\n    const matLib = this.materialLibrary;\n    if (!matLib[material.userData.code]) {\n      this.materials.push(material);\n      matLib[material.userData.code] = material;\n    }\n    return this;\n  }\n  getMaterial(colorCode) {\n    if (colorCode.startsWith('0x2')) {\n      // Special 'direct' material value (RGB color)\n      const color = colorCode.substring(3);\n      return this.parseColorMetaDirective(new LineParser('Direct_Color_' + color + ' CODE -1 VALUE #' + color + ' EDGE #' + color + ''));\n    }\n    return this.materialLibrary[colorCode] || null;\n  } // Applies the appropriate materials to a prebuilt hierarchy of geometry. Assumes that color codes are present\n  // in the material array if they need to be filled in.\n\n  applyMaterialsToMesh(group, parentColorCode, materialHierarchy) {\n    let finalMaterialPass = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    // find any missing materials as indicated by a color code string and replace it with a material from the current material lib\n    const loader = this;\n    const parentIsPassthrough = parentColorCode === MAIN_COLOUR_CODE;\n    group.traverse(c => {\n      if (c.isMesh || c.isLineSegments) {\n        if (Array.isArray(c.material)) {\n          for (let i = 0, l = c.material.length; i < l; i++) {\n            if (!c.material[i].isMaterial) {\n              c.material[i] = getMaterial(c, c.material[i]);\n            }\n          }\n        } else if (!c.material.isMaterial) {\n          c.material = getMaterial(c, c.material);\n        }\n      }\n    }); // Returns the appropriate material for the object (line or face) given color code. If the code is \"pass through\"\n    // (24 for lines, 16 for edges) then the pass through color code is used. If that is also pass through then it's\n    // simply returned for the subsequent material application.\n\n    function getMaterial(c, colorCode) {\n      // if our parent is a passthrough color code and we don't have the current material color available then\n      // return early.\n      if (parentIsPassthrough && !(colorCode in materialHierarchy) && !finalMaterialPass) {\n        return colorCode;\n      }\n      const forEdge = c.isLineSegments || c.isConditionalLine;\n      const isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n      if (isPassthrough) {\n        colorCode = parentColorCode;\n      }\n      let material = null;\n      if (colorCode in materialHierarchy) {\n        material = materialHierarchy[colorCode];\n      } else if (finalMaterialPass) {\n        // see if we can get the final material from from the \"getMaterial\" function which will attempt to\n        // parse the \"direct\" colors\n        material = loader.getMaterial(colorCode);\n        if (material === null) {\n          // otherwise throw an error if this is final opportunity to set the material\n          throw new Error(`LDrawLoader: Material properties for code ${colorCode} not available.`);\n        }\n      } else {\n        return colorCode;\n      }\n      if (c.isLineSegments) {\n        material = material.userData.edgeMaterial;\n        if (c.isConditionalLine) {\n          material = material.userData.conditionalEdgeMaterial;\n        }\n      }\n      return material;\n    }\n  }\n  getMainMaterial() {\n    return this.getMaterial(MAIN_COLOUR_CODE);\n  }\n  getMainEdgeMaterial() {\n    return this.getMaterial(MAIN_EDGE_COLOUR_CODE);\n  }\n  parseColorMetaDirective(lineParser) {\n    // Parses a color definition and returns a THREE.Material\n    let code = null; // Triangle and line colors\n\n    let color = 0xff00ff;\n    let edgeColor = 0xff00ff; // Transparency\n\n    let alpha = 1;\n    let isTransparent = false; // Self-illumination:\n\n    let luminance = 0;\n    let finishType = FINISH_TYPE_DEFAULT;\n    let edgeMaterial = null;\n    const name = lineParser.getToken();\n    if (!name) {\n      throw new Error('LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + '.');\n    } // Parse tag tokens and their parameters\n\n    let token = null;\n    while (true) {\n      token = lineParser.getToken();\n      if (!token) {\n        break;\n      }\n      switch (token.toUpperCase()) {\n        case 'CODE':\n          code = lineParser.getToken();\n          break;\n        case 'VALUE':\n          color = lineParser.getToken();\n          if (color.startsWith('0x')) {\n            color = '#' + color.substring(2);\n          } else if (!color.startsWith('#')) {\n            throw new Error('LDrawLoader: Invalid color while parsing material' + lineParser.getLineNumberString() + '.');\n          }\n          break;\n        case 'EDGE':\n          edgeColor = lineParser.getToken();\n          if (edgeColor.startsWith('0x')) {\n            edgeColor = '#' + edgeColor.substring(2);\n          } else if (!edgeColor.startsWith('#')) {\n            // Try to see if edge color is a color code\n            edgeMaterial = this.getMaterial(edgeColor);\n            if (!edgeMaterial) {\n              throw new Error('LDrawLoader: Invalid edge color while parsing material' + lineParser.getLineNumberString() + '.');\n            } // Get the edge material for this triangle material\n\n            edgeMaterial = edgeMaterial.userData.edgeMaterial;\n          }\n          break;\n        case 'ALPHA':\n          alpha = parseInt(lineParser.getToken());\n          if (isNaN(alpha)) {\n            throw new Error('LDrawLoader: Invalid alpha value in material definition' + lineParser.getLineNumberString() + '.');\n          }\n          alpha = Math.max(0, Math.min(1, alpha / 255));\n          if (alpha < 1) {\n            isTransparent = true;\n          }\n          break;\n        case 'LUMINANCE':\n          luminance = parseInt(lineParser.getToken());\n          if (isNaN(luminance)) {\n            throw new Error('LDrawLoader: Invalid luminance value in material definition' + LineParser.getLineNumberString() + '.');\n          }\n          luminance = Math.max(0, Math.min(1, luminance / 255));\n          break;\n        case 'CHROME':\n          finishType = FINISH_TYPE_CHROME;\n          break;\n        case 'PEARLESCENT':\n          finishType = FINISH_TYPE_PEARLESCENT;\n          break;\n        case 'RUBBER':\n          finishType = FINISH_TYPE_RUBBER;\n          break;\n        case 'MATTE_METALLIC':\n          finishType = FINISH_TYPE_MATTE_METALLIC;\n          break;\n        case 'METAL':\n          finishType = FINISH_TYPE_METAL;\n          break;\n        case 'MATERIAL':\n          // Not implemented\n          lineParser.setToEnd();\n          break;\n        default:\n          throw new Error('LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + '.');\n      }\n    }\n    let material = null;\n    switch (finishType) {\n      case FINISH_TYPE_DEFAULT:\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.3,\n          metalness: 0\n        });\n        break;\n      case FINISH_TYPE_PEARLESCENT:\n        // Try to imitate pearlescency by making the surface glossy\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.3,\n          metalness: 0.25\n        });\n        break;\n      case FINISH_TYPE_CHROME:\n        // Mirror finish surface\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0,\n          metalness: 1\n        });\n        break;\n      case FINISH_TYPE_RUBBER:\n        // Rubber finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.9,\n          metalness: 0\n        });\n        break;\n      case FINISH_TYPE_MATTE_METALLIC:\n        // Brushed metal finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.8,\n          metalness: 0.4\n        });\n        break;\n      case FINISH_TYPE_METAL:\n        // Average metal finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.2,\n          metalness: 0.85\n        });\n        break;\n    }\n    material.transparent = isTransparent;\n    material.premultipliedAlpha = true;\n    material.opacity = alpha;\n    material.depthWrite = !isTransparent;\n    material.polygonOffset = true;\n    material.polygonOffsetFactor = 1;\n    if (luminance !== 0) {\n      material.emissive.set(material.color).multiplyScalar(luminance);\n    }\n    if (!edgeMaterial) {\n      // This is the material used for edges\n      edgeMaterial = new LineBasicMaterial({\n        color: edgeColor,\n        transparent: isTransparent,\n        opacity: alpha,\n        depthWrite: !isTransparent\n      });\n      edgeMaterial.userData.code = code;\n      edgeMaterial.name = name + ' - Edge'; // This is the material used for conditional edges\n\n      edgeMaterial.userData.conditionalEdgeMaterial = new LDrawConditionalLineMaterial({\n        fog: true,\n        transparent: isTransparent,\n        depthWrite: !isTransparent,\n        color: edgeColor,\n        opacity: alpha\n      });\n    }\n    material.userData.code = code;\n    material.name = name;\n    material.userData.edgeMaterial = edgeMaterial;\n    this.addMaterial(material);\n    return material;\n  }\n  computeConstructionSteps(model) {\n    // Sets userdata.constructionStep number in Group objects and userData.numConstructionSteps number in the root Group object.\n    let stepNumber = 0;\n    model.traverse(c => {\n      if (c.isGroup) {\n        if (c.userData.startingConstructionStep) {\n          stepNumber++;\n        }\n        c.userData.constructionStep = stepNumber;\n      }\n    });\n    model.userData.numConstructionSteps = stepNumber + 1;\n  }\n}\nexport { LDrawLoader };","map":{"version":3,"names":["Vector3","Ray","Loader","FileLoader","MeshStandardMaterial","LineBasicMaterial","ShaderMaterial","UniformsUtils","UniformsLib","Color","BufferGeometry","BufferAttribute","LineSegments","Mesh","Matrix4","Group","FINISH_TYPE_DEFAULT","FINISH_TYPE_CHROME","FINISH_TYPE_PEARLESCENT","FINISH_TYPE_RUBBER","FINISH_TYPE_MATTE_METALLIC","FINISH_TYPE_METAL","FILE_LOCATION_AS_IS","FILE_LOCATION_TRY_PARTS","FILE_LOCATION_TRY_P","FILE_LOCATION_TRY_MODELS","FILE_LOCATION_TRY_RELATIVE","FILE_LOCATION_TRY_ABSOLUTE","FILE_LOCATION_NOT_FOUND","MAIN_COLOUR_CODE","MAIN_EDGE_COLOUR_CODE","_tempVec0","_tempVec1","LDrawConditionalLineMaterial","constructor","parameters","uniforms","merge","fog","diffuse","value","opacity","vertexShader","fragmentShader","Object","defineProperties","get","set","color","setValues","isLDrawConditionalLineMaterial","ConditionalLineSegments","geometry","material","isConditionalLine","generateFaceNormals","faces","i","l","length","face","vertices","v0","v1","v2","subVectors","faceNormal","crossVectors","normalize","_ray","smoothNormals","lineSegments","checkSubSegments","arguments","undefined","hashMultiplier","hashVertex","v","x","y","z","hashEdge","toNormalizedRay","targetRay","direction","scalar","dot","origin","copy","addScaledVector","hashRay","ray","hardEdges","Set","hardEdgeRays","Map","halfEdgeList","normals","ls","add","rh1","has","rh2","info","distances","d0","d1","push","tri","vertCount","i2","index","next","hash","rayHash","found","halfEdge","key","queue","pop","vertNormals","reverseHash","otherInfo","otherTri","otherIndex","otherNormals","otherVertCount","otherFaceNormal","Math","abs","otherNext","norm","sharedNormal1","sharedNormal2","isPartType","type","isPrimitiveType","test","LineParser","line","lineNumber","lineLength","currentCharIndex","currentChar","seekNonSpace","charAt","getToken","pos0","pos1","substring","getVector","parseFloat","getRemainingString","isAtTheEnd","setToEnd","getLineNumberString","LDrawParsedCache","loader","_cache","cloneResult","original","result","map","colorCode","clone","conditionalSegments","controlPoints","category","keywords","subobjects","totalFaces","startingConstructionStep","materials","group","fetchData","fileName","triedLowerCase","locationState","subobjectURL","lastIndexOf","toLowerCase","fileLoader","manager","setPath","partsLibraryPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","loadAsync","Error","parse","getLocalMaterial","indexOf","replace","lines","split","numLines","parsingEmbeddedFiles","currentEmbeddedFileName","currentEmbeddedText","bfcCertified","bfcCCW","bfcInverted","bfcCull","lineIndex","startsWith","setData","lp","lineType","segment","ccw","doubleSided","v3","c0","c1","meta","parseColorMetaDirective","userData","code","console","warn","newKeywords","forEach","keyword","trim","token","posX","posY","posZ","m0","m1","m2","m3","m4","m5","m6","m7","m8","matrix","fileMap","inverted","getData","Promise","ensureDataLoaded","then","getMaterialFromCode","parentColorCode","materialHierarchy","forEdge","isPassthrough","LDrawPartsGeometryCache","parseCache","processIntoMesh","_this","faceMaterials","processInfoSubobjects","subobject","promises","promise","subobjectInfo","loadModel","catch","error","subobjectInfos","all","isGroup","subobjectGroup","decompose","position","quaternion","scale","name","applyMaterialsToMesh","children","parentLineSegments","parentConditionalSegments","parentFaces","matrixScaleInverted","determinant","lineColorCode","applyMatrix4","os","reverse","size","createObject","hasCachedModel","getCachedModel","parseModel","sortByMaterial","a","b","elements","elementSize","isConditionalSegments","totalElements","sort","positions","Float32Array","quadArray","Array","bufferGeometry","prevMaterial","index0","numGroupVerts","offset","iElem","nElem","elem","j","elemNormals","n","addGroup","edgeMaterial","conditionalEdgeMaterial","Infinity","setAttribute","object3d","controlArray0","controlArray1","directionArray","LDrawLoader","materialLibrary","partsCache","setMaterials","setPartsLibraryPath","path","preloadMaterials","url","colorLineRegex","directive","load","onLoad","onProgress","onError","computeConstructionSteps","addMaterial","setFileMap","matLib","getMaterial","finalMaterialPass","parentIsPassthrough","traverse","c","isMesh","isLineSegments","isArray","isMaterial","getMainMaterial","getMainEdgeMaterial","lineParser","edgeColor","alpha","isTransparent","luminance","finishType","toUpperCase","parseInt","isNaN","max","min","roughness","metalness","transparent","premultipliedAlpha","depthWrite","polygonOffset","polygonOffsetFactor","emissive","multiplyScalar","model","stepNumber","constructionStep","numConstructionSteps"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/loaders/LDrawLoader.js"],"sourcesContent":["import { Vector3, Ray, Loader, FileLoader, MeshStandardMaterial, LineBasicMaterial, ShaderMaterial, UniformsUtils, UniformsLib, Color, BufferGeometry, BufferAttribute, LineSegments, Mesh, Matrix4, Group } from 'three';\n\n// Note: \"MATERIAL\" tag (e.g. GLITTER, SPECKLE) is not implemented\n\nconst FINISH_TYPE_DEFAULT = 0;\nconst FINISH_TYPE_CHROME = 1;\nconst FINISH_TYPE_PEARLESCENT = 2;\nconst FINISH_TYPE_RUBBER = 3;\nconst FINISH_TYPE_MATTE_METALLIC = 4;\nconst FINISH_TYPE_METAL = 5; // State machine to search a subobject path.\n// The LDraw standard establishes these various possible subfolders.\n\nconst FILE_LOCATION_AS_IS = 0;\nconst FILE_LOCATION_TRY_PARTS = 1;\nconst FILE_LOCATION_TRY_P = 2;\nconst FILE_LOCATION_TRY_MODELS = 3;\nconst FILE_LOCATION_TRY_RELATIVE = 4;\nconst FILE_LOCATION_TRY_ABSOLUTE = 5;\nconst FILE_LOCATION_NOT_FOUND = 6;\nconst MAIN_COLOUR_CODE = '16';\nconst MAIN_EDGE_COLOUR_CODE = '24';\n\nconst _tempVec0 = new Vector3();\n\nconst _tempVec1 = new Vector3();\n\nclass LDrawConditionalLineMaterial extends ShaderMaterial {\n  constructor(parameters) {\n    super({\n      uniforms: UniformsUtils.merge([UniformsLib.fog, {\n        diffuse: {\n          value: new Color()\n        },\n        opacity: {\n          value: 1.0\n        }\n      }]),\n      vertexShader:\n      /* glsl */\n      `\n        attribute vec3 control0;\n        attribute vec3 control1;\n        attribute vec3 direction;\n        varying float discardFlag;\n\n        #include <common>\n        #include <color_pars_vertex>\n        #include <fog_pars_vertex>\n        #include <logdepthbuf_pars_vertex>\n        #include <clipping_planes_pars_vertex>\n\n        void main() {\n          #include <color_vertex>\n\n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n          gl_Position = projectionMatrix * mvPosition;\n\n          // Transform the line segment ends and control points into camera clip space\n          vec4 c0 = projectionMatrix * modelViewMatrix * vec4(control0, 1.0);\n          vec4 c1 = projectionMatrix * modelViewMatrix * vec4(control1, 1.0);\n          vec4 p0 = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          vec4 p1 = projectionMatrix * modelViewMatrix * vec4(position + direction, 1.0);\n\n          c0.xy /= c0.w;\n          c1.xy /= c1.w;\n          p0.xy /= p0.w;\n          p1.xy /= p1.w;\n\n          // Get the direction of the segment and an orthogonal vector\n          vec2 dir = p1.xy - p0.xy;\n          vec2 norm = vec2(-dir.y, dir.x);\n\n          // Get control point directions from the line\n          vec2 c0dir = c0.xy - p1.xy;\n          vec2 c1dir = c1.xy - p1.xy;\n\n          // If the vectors to the controls points are pointed in different directions away\n          // from the line segment then the line should not be drawn.\n          float d0 = dot(normalize(norm), normalize(c0dir));\n          float d1 = dot(normalize(norm), normalize(c1dir));\n          discardFlag = float(sign(d0) != sign(d1));\n\n          #include <logdepthbuf_vertex>\n          #include <clipping_planes_vertex>\n          #include <fog_vertex>\n        }\n      `,\n      fragmentShader:\n      /* glsl */\n      `\n        uniform vec3 diffuse;\n        uniform float opacity;\n        varying float discardFlag;\n\n        #include <common>\n        #include <color_pars_fragment>\n        #include <fog_pars_fragment>\n        #include <logdepthbuf_pars_fragment>\n        #include <clipping_planes_pars_fragment>\n\n        void main() {\n          if (discardFlag > 0.5) discard;\n\n          #include <clipping_planes_fragment>\n          vec3 outgoingLight = vec3(0.0);\n          vec4 diffuseColor = vec4(diffuse, opacity);\n          #include <logdepthbuf_fragment>\n          #include <color_fragment>\n          outgoingLight = diffuseColor.rgb; // simple shader\n          gl_FragColor = vec4(outgoingLight, diffuseColor.a);\n          #include <tonemapping_fragment>\n          #include <encodings_fragment>\n          #include <fog_fragment>\n          #include <premultiplied_alpha_fragment>\n        }\n      `\n    });\n    Object.defineProperties(this, {\n      opacity: {\n        get: function () {\n          return this.uniforms.opacity.value;\n        },\n        set: function (value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      color: {\n        get: function () {\n          return this.uniforms.diffuse.value;\n        }\n      }\n    });\n    this.setValues(parameters);\n    this.isLDrawConditionalLineMaterial = true;\n  }\n\n}\n\nclass ConditionalLineSegments extends LineSegments {\n  constructor(geometry, material) {\n    super(geometry, material);\n    this.isConditionalLine = true;\n  }\n\n}\n\nfunction generateFaceNormals(faces) {\n  for (let i = 0, l = faces.length; i < l; i++) {\n    const face = faces[i];\n    const vertices = face.vertices;\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    const v2 = vertices[2];\n\n    _tempVec0.subVectors(v1, v0);\n\n    _tempVec1.subVectors(v2, v1);\n\n    face.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n  }\n}\n\nconst _ray = new Ray();\n\nfunction smoothNormals(faces, lineSegments, checkSubSegments = false) {\n  // NOTE: 1e2 is pretty coarse but was chosen to quantize the resulting value because\n  // it allows edges to be smoothed as expected (see minifig arms).\n  // --\n  // And the vector values are initialize multiplied by 1 + 1e-10 to account for floating\n  // point errors on vertices along quantization boundaries. Ie after matrix multiplication\n  // vertices that should be merged might be set to \"1.7\" and \"1.6999...\" meaning they won't\n  // get merged. This added epsilon attempts to push these error values to the same quantized\n  // value for the sake of hashing. See \"AT-ST mini\" dishes. See mrdoob/three#23169.\n  const hashMultiplier = (1 + 1e-10) * 1e2;\n\n  function hashVertex(v) {\n    const x = ~~(v.x * hashMultiplier);\n    const y = ~~(v.y * hashMultiplier);\n    const z = ~~(v.z * hashMultiplier);\n    return `${x},${y},${z}`;\n  }\n\n  function hashEdge(v0, v1) {\n    return `${hashVertex(v0)}_${hashVertex(v1)}`;\n  } // converts the two vertices to a ray with a normalized direction and origin of 0, 0, 0 projected\n  // onto the original line.\n\n\n  function toNormalizedRay(v0, v1, targetRay) {\n    targetRay.direction.subVectors(v1, v0).normalize();\n    const scalar = v0.dot(targetRay.direction);\n    targetRay.origin.copy(v0).addScaledVector(targetRay.direction, -scalar);\n    return targetRay;\n  }\n\n  function hashRay(ray) {\n    return hashEdge(ray.origin, ray.direction);\n  }\n\n  const hardEdges = new Set();\n  const hardEdgeRays = new Map();\n  const halfEdgeList = {};\n  const normals = []; // Save the list of hard edges by hash\n\n  for (let i = 0, l = lineSegments.length; i < l; i++) {\n    const ls = lineSegments[i];\n    const vertices = ls.vertices;\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    hardEdges.add(hashEdge(v0, v1));\n    hardEdges.add(hashEdge(v1, v0)); // only generate the hard edge ray map if we're checking subsegments because it's more expensive to check\n    // and requires more memory.\n\n    if (checkSubSegments) {\n      // add both ray directions to the map\n      const ray = toNormalizedRay(v0, v1, new Ray());\n      const rh1 = hashRay(ray);\n\n      if (!hardEdgeRays.has(rh1)) {\n        toNormalizedRay(v1, v0, ray);\n        const rh2 = hashRay(ray);\n        const info = {\n          ray,\n          distances: []\n        };\n        hardEdgeRays.set(rh1, info);\n        hardEdgeRays.set(rh2, info);\n      } // store both segments ends in min, max order in the distances array to check if a face edge is a\n      // subsegment later.\n\n\n      const info = hardEdgeRays.get(rh1);\n      let d0 = info.ray.direction.dot(v0);\n      let d1 = info.ray.direction.dot(v1);\n\n      if (d0 > d1) {\n        [d0, d1] = [d1, d0];\n      }\n\n      info.distances.push(d0, d1);\n    }\n  } // track the half edges associated with each triangle\n\n\n  for (let i = 0, l = faces.length; i < l; i++) {\n    const tri = faces[i];\n    const vertices = tri.vertices;\n    const vertCount = vertices.length;\n\n    for (let i2 = 0; i2 < vertCount; i2++) {\n      const index = i2;\n      const next = (i2 + 1) % vertCount;\n      const v0 = vertices[index];\n      const v1 = vertices[next];\n      const hash = hashEdge(v0, v1); // don't add the triangle if the edge is supposed to be hard\n\n      if (hardEdges.has(hash)) {\n        continue;\n      } // if checking subsegments then check to see if this edge lies on a hard edge ray and whether its within any ray bounds\n\n\n      if (checkSubSegments) {\n        toNormalizedRay(v0, v1, _ray);\n        const rayHash = hashRay(_ray);\n\n        if (hardEdgeRays.has(rayHash)) {\n          const info = hardEdgeRays.get(rayHash);\n          const {\n            ray,\n            distances\n          } = info;\n          let d0 = ray.direction.dot(v0);\n          let d1 = ray.direction.dot(v1);\n\n          if (d0 > d1) {\n            [d0, d1] = [d1, d0];\n          } // return early if the face edge is found to be a subsegment of a line edge meaning the edge will have \"hard\" normals\n\n\n          let found = false;\n\n          for (let i = 0, l = distances.length; i < l; i += 2) {\n            if (d0 >= distances[i] && d1 <= distances[i + 1]) {\n              found = true;\n              break;\n            }\n          }\n\n          if (found) {\n            continue;\n          }\n        }\n      }\n\n      const info = {\n        index: index,\n        tri: tri\n      };\n      halfEdgeList[hash] = info;\n    }\n  } // Iterate until we've tried to connect all faces to share normals\n\n\n  while (true) {\n    // Stop if there are no more faces left\n    let halfEdge = null;\n\n    for (const key in halfEdgeList) {\n      halfEdge = halfEdgeList[key];\n      break;\n    }\n\n    if (halfEdge === null) {\n      break;\n    } // Exhaustively find all connected faces\n\n\n    const queue = [halfEdge];\n\n    while (queue.length > 0) {\n      // initialize all vertex normals in this triangle\n      const tri = queue.pop().tri;\n      const vertices = tri.vertices;\n      const vertNormals = tri.normals;\n      const faceNormal = tri.faceNormal; // Check if any edge is connected to another triangle edge\n\n      const vertCount = vertices.length;\n\n      for (let i2 = 0; i2 < vertCount; i2++) {\n        const index = i2;\n        const next = (i2 + 1) % vertCount;\n        const v0 = vertices[index];\n        const v1 = vertices[next]; // delete this triangle from the list so it won't be found again\n\n        const hash = hashEdge(v0, v1);\n        delete halfEdgeList[hash];\n        const reverseHash = hashEdge(v1, v0);\n        const otherInfo = halfEdgeList[reverseHash];\n\n        if (otherInfo) {\n          const otherTri = otherInfo.tri;\n          const otherIndex = otherInfo.index;\n          const otherNormals = otherTri.normals;\n          const otherVertCount = otherNormals.length;\n          const otherFaceNormal = otherTri.faceNormal; // NOTE: If the angle between faces is > 67.5 degrees then assume it's\n          // hard edge. There are some cases where the line segments do not line up exactly\n          // with or span multiple triangle edges (see Lunar Vehicle wheels).\n\n          if (Math.abs(otherTri.faceNormal.dot(tri.faceNormal)) < 0.25) {\n            continue;\n          } // if this triangle has already been traversed then it won't be in\n          // the halfEdgeList. If it has not then add it to the queue and delete\n          // it so it won't be found again.\n\n\n          if (reverseHash in halfEdgeList) {\n            queue.push(otherInfo);\n            delete halfEdgeList[reverseHash];\n          } // share the first normal\n\n\n          const otherNext = (otherIndex + 1) % otherVertCount;\n\n          if (vertNormals[index] && otherNormals[otherNext] && vertNormals[index] !== otherNormals[otherNext]) {\n            otherNormals[otherNext].norm.add(vertNormals[index].norm);\n            vertNormals[index].norm = otherNormals[otherNext].norm;\n          }\n\n          let sharedNormal1 = vertNormals[index] || otherNormals[otherNext];\n\n          if (sharedNormal1 === null) {\n            // it's possible to encounter an edge of a triangle that has already been traversed meaning\n            // both edges already have different normals defined and shared. To work around this we create\n            // a wrapper object so when those edges are merged the normals can be updated everywhere.\n            sharedNormal1 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal1.norm);\n          }\n\n          if (vertNormals[index] === null) {\n            vertNormals[index] = sharedNormal1;\n            sharedNormal1.norm.add(faceNormal);\n          }\n\n          if (otherNormals[otherNext] === null) {\n            otherNormals[otherNext] = sharedNormal1;\n            sharedNormal1.norm.add(otherFaceNormal);\n          } // share the second normal\n\n\n          if (vertNormals[next] && otherNormals[otherIndex] && vertNormals[next] !== otherNormals[otherIndex]) {\n            otherNormals[otherIndex].norm.add(vertNormals[next].norm);\n            vertNormals[next].norm = otherNormals[otherIndex].norm;\n          }\n\n          let sharedNormal2 = vertNormals[next] || otherNormals[otherIndex];\n\n          if (sharedNormal2 === null) {\n            sharedNormal2 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal2.norm);\n          }\n\n          if (vertNormals[next] === null) {\n            vertNormals[next] = sharedNormal2;\n            sharedNormal2.norm.add(faceNormal);\n          }\n\n          if (otherNormals[otherIndex] === null) {\n            otherNormals[otherIndex] = sharedNormal2;\n            sharedNormal2.norm.add(otherFaceNormal);\n          }\n        }\n      }\n    }\n  } // The normals of each face have been added up so now we average them by normalizing the vector.\n\n\n  for (let i = 0, l = normals.length; i < l; i++) {\n    normals[i].normalize();\n  }\n}\n\nfunction isPartType(type) {\n  return type === 'Part' || type === 'Unofficial_Part';\n}\n\nfunction isPrimitiveType(type) {\n  return /primitive/i.test(type) || type === 'Subpart';\n}\n\nclass LineParser {\n  constructor(line, lineNumber) {\n    this.line = line;\n    this.lineLength = line.length;\n    this.currentCharIndex = 0;\n    this.currentChar = ' ';\n    this.lineNumber = lineNumber;\n  }\n\n  seekNonSpace() {\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n\n      if (this.currentChar !== ' ' && this.currentChar !== '\\t') {\n        return;\n      }\n\n      this.currentCharIndex++;\n    }\n  }\n\n  getToken() {\n    const pos0 = this.currentCharIndex++; // Seek space\n\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n\n      if (this.currentChar === ' ' || this.currentChar === '\\t') {\n        break;\n      }\n\n      this.currentCharIndex++;\n    }\n\n    const pos1 = this.currentCharIndex;\n    this.seekNonSpace();\n    return this.line.substring(pos0, pos1);\n  }\n\n  getVector() {\n    return new Vector3(parseFloat(this.getToken()), parseFloat(this.getToken()), parseFloat(this.getToken()));\n  }\n\n  getRemainingString() {\n    return this.line.substring(this.currentCharIndex, this.lineLength);\n  }\n\n  isAtTheEnd() {\n    return this.currentCharIndex >= this.lineLength;\n  }\n\n  setToEnd() {\n    this.currentCharIndex = this.lineLength;\n  }\n\n  getLineNumberString() {\n    return this.lineNumber >= 0 ? ' at line ' + this.lineNumber : '';\n  }\n\n} // Fetches and parses an intermediate representation of LDraw parts files.\n\n\nclass LDrawParsedCache {\n  constructor(loader) {\n    this.loader = loader;\n    this._cache = {};\n  }\n\n  cloneResult(original) {\n    const result = {}; // vertices are transformed and normals computed before being converted to geometry\n    // so these pieces must be cloned.\n\n    result.faces = original.faces.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone()),\n        normals: face.normals.map(() => null),\n        faceNormal: null\n      };\n    });\n    result.conditionalSegments = original.conditionalSegments.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone()),\n        controlPoints: face.controlPoints.map(v => v.clone())\n      };\n    });\n    result.lineSegments = original.lineSegments.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone())\n      };\n    }); // none if this is subsequently modified\n\n    result.type = original.type;\n    result.category = original.category;\n    result.keywords = original.keywords;\n    result.subobjects = original.subobjects;\n    result.totalFaces = original.totalFaces;\n    result.startingConstructionStep = original.startingConstructionStep;\n    result.materials = original.materials;\n    result.group = null;\n    return result;\n  }\n\n  async fetchData(fileName) {\n    let triedLowerCase = false;\n    let locationState = FILE_LOCATION_AS_IS;\n\n    while (locationState !== FILE_LOCATION_NOT_FOUND) {\n      let subobjectURL = fileName;\n\n      switch (locationState) {\n        case FILE_LOCATION_AS_IS:\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_PARTS:\n          subobjectURL = 'parts/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_P:\n          subobjectURL = 'p/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_MODELS:\n          subobjectURL = 'models/' + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_RELATIVE:\n          subobjectURL = fileName.substring(0, fileName.lastIndexOf('/') + 1) + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_ABSOLUTE:\n          if (triedLowerCase) {\n            // Try absolute path\n            locationState = FILE_LOCATION_NOT_FOUND;\n          } else {\n            // Next attempt is lower case\n            fileName = fileName.toLowerCase();\n            subobjectURL = fileName;\n            triedLowerCase = true;\n            locationState = FILE_LOCATION_AS_IS;\n          }\n\n          break;\n      }\n\n      const loader = this.loader;\n      const fileLoader = new FileLoader(loader.manager);\n      fileLoader.setPath(loader.partsLibraryPath);\n      fileLoader.setRequestHeader(loader.requestHeader);\n      fileLoader.setWithCredentials(loader.withCredentials);\n\n      try {\n        const text = await fileLoader.loadAsync(subobjectURL);\n        return text;\n      } catch {\n        continue;\n      }\n    }\n\n    throw new Error('LDrawLoader: Subobject \"' + fileName + '\" could not be loaded.');\n  }\n\n  parse(text, fileName = null) {\n    const loader = this.loader; // final results\n\n    const faces = [];\n    const lineSegments = [];\n    const conditionalSegments = [];\n    const subobjects = [];\n    const materials = {};\n\n    const getLocalMaterial = colorCode => {\n      return materials[colorCode] || null;\n    };\n\n    let type = 'Model';\n    let category = null;\n    let keywords = null;\n    let totalFaces = 0; // split into lines\n\n    if (text.indexOf('\\r\\n') !== -1) {\n      // This is faster than String.split with regex that splits on both\n      text = text.replace(/\\r\\n/g, '\\n');\n    }\n\n    const lines = text.split('\\n');\n    const numLines = lines.length;\n    let parsingEmbeddedFiles = false;\n    let currentEmbeddedFileName = null;\n    let currentEmbeddedText = null;\n    let bfcCertified = false;\n    let bfcCCW = true;\n    let bfcInverted = false;\n    let bfcCull = true;\n    let startingConstructionStep = false; // Parse all line commands\n\n    for (let lineIndex = 0; lineIndex < numLines; lineIndex++) {\n      const line = lines[lineIndex];\n      if (line.length === 0) continue;\n\n      if (parsingEmbeddedFiles) {\n        if (line.startsWith('0 FILE ')) {\n          // Save previous embedded file in the cache\n          this.setData(currentEmbeddedFileName, currentEmbeddedText); // New embedded text file\n\n          currentEmbeddedFileName = line.substring(7);\n          currentEmbeddedText = '';\n        } else {\n          currentEmbeddedText += line + '\\n';\n        }\n\n        continue;\n      }\n\n      const lp = new LineParser(line, lineIndex + 1);\n      lp.seekNonSpace();\n\n      if (lp.isAtTheEnd()) {\n        // Empty line\n        continue;\n      } // Parse the line type\n\n\n      const lineType = lp.getToken();\n      let material;\n      let colorCode;\n      let segment;\n      let ccw;\n      let doubleSided;\n      let v0, v1, v2, v3, c0, c1;\n\n      switch (lineType) {\n        // Line type 0: Comment or META\n        case '0':\n          // Parse meta directive\n          const meta = lp.getToken();\n\n          if (meta) {\n            switch (meta) {\n              case '!LDRAW_ORG':\n                type = lp.getToken();\n                break;\n\n              case '!COLOUR':\n                material = loader.parseColorMetaDirective(lp);\n\n                if (material) {\n                  materials[material.userData.code] = material;\n                } else {\n                  console.warn('LDrawLoader: Error parsing material' + lp.getLineNumberString());\n                }\n\n                break;\n\n              case '!CATEGORY':\n                category = lp.getToken();\n                break;\n\n              case '!KEYWORDS':\n                const newKeywords = lp.getRemainingString().split(',');\n\n                if (newKeywords.length > 0) {\n                  if (!keywords) {\n                    keywords = [];\n                  }\n\n                  newKeywords.forEach(function (keyword) {\n                    keywords.push(keyword.trim());\n                  });\n                }\n\n                break;\n\n              case 'FILE':\n                if (lineIndex > 0) {\n                  // Start embedded text files parsing\n                  parsingEmbeddedFiles = true;\n                  currentEmbeddedFileName = lp.getRemainingString();\n                  currentEmbeddedText = '';\n                  bfcCertified = false;\n                  bfcCCW = true;\n                }\n\n                break;\n\n              case 'BFC':\n                // Changes to the backface culling state\n                while (!lp.isAtTheEnd()) {\n                  const token = lp.getToken();\n\n                  switch (token) {\n                    case 'CERTIFY':\n                    case 'NOCERTIFY':\n                      bfcCertified = token === 'CERTIFY';\n                      bfcCCW = true;\n                      break;\n\n                    case 'CW':\n                    case 'CCW':\n                      bfcCCW = token === 'CCW';\n                      break;\n\n                    case 'INVERTNEXT':\n                      bfcInverted = true;\n                      break;\n\n                    case 'CLIP':\n                    case 'NOCLIP':\n                      bfcCull = token === 'CLIP';\n                      break;\n\n                    default:\n                      console.warn('THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.');\n                      break;\n                  }\n                }\n\n                break;\n\n              case 'STEP':\n                startingConstructionStep = true;\n                break;\n            }\n          }\n\n          break;\n        // Line type 1: Sub-object file\n\n        case '1':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          const posX = parseFloat(lp.getToken());\n          const posY = parseFloat(lp.getToken());\n          const posZ = parseFloat(lp.getToken());\n          const m0 = parseFloat(lp.getToken());\n          const m1 = parseFloat(lp.getToken());\n          const m2 = parseFloat(lp.getToken());\n          const m3 = parseFloat(lp.getToken());\n          const m4 = parseFloat(lp.getToken());\n          const m5 = parseFloat(lp.getToken());\n          const m6 = parseFloat(lp.getToken());\n          const m7 = parseFloat(lp.getToken());\n          const m8 = parseFloat(lp.getToken());\n          const matrix = new Matrix4().set(m0, m1, m2, posX, m3, m4, m5, posY, m6, m7, m8, posZ, 0, 0, 0, 1);\n          let fileName = lp.getRemainingString().trim().replace(/\\\\/g, '/');\n\n          if (loader.fileMap[fileName]) {\n            // Found the subobject path in the preloaded file path map\n            fileName = loader.fileMap[fileName];\n          } else {\n            // Standardized subfolders\n            if (fileName.startsWith('s/')) {\n              fileName = 'parts/' + fileName;\n            } else if (fileName.startsWith('48/')) {\n              fileName = 'p/' + fileName;\n            }\n          }\n\n          subobjects.push({\n            material: material,\n            colorCode: colorCode,\n            matrix: matrix,\n            fileName: fileName,\n            inverted: bfcInverted,\n            startingConstructionStep: startingConstructionStep\n          });\n          bfcInverted = false;\n          break;\n        // Line type 2: Line segment\n\n        case '2':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          v0 = lp.getVector();\n          v1 = lp.getVector();\n          segment = {\n            material: material,\n            colorCode: colorCode,\n            vertices: [v0, v1]\n          };\n          lineSegments.push(segment);\n          break;\n        // Line type 5: Conditional Line segment\n\n        case '5':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          v0 = lp.getVector();\n          v1 = lp.getVector();\n          c0 = lp.getVector();\n          c1 = lp.getVector();\n          segment = {\n            material: material,\n            colorCode: colorCode,\n            vertices: [v0, v1],\n            controlPoints: [c0, c1]\n          };\n          conditionalSegments.push(segment);\n          break;\n        // Line type 3: Triangle\n\n        case '3':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          ccw = bfcCCW;\n          doubleSided = !bfcCertified || !bfcCull;\n\n          if (ccw === true) {\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            v2 = lp.getVector();\n          } else {\n            v2 = lp.getVector();\n            v1 = lp.getVector();\n            v0 = lp.getVector();\n          }\n\n          faces.push({\n            material: material,\n            colorCode: colorCode,\n            faceNormal: null,\n            vertices: [v0, v1, v2],\n            normals: [null, null, null]\n          });\n          totalFaces++;\n\n          if (doubleSided === true) {\n            faces.push({\n              material: material,\n              colorCode: colorCode,\n              faceNormal: null,\n              vertices: [v2, v1, v0],\n              normals: [null, null, null]\n            });\n            totalFaces++;\n          }\n\n          break;\n        // Line type 4: Quadrilateral\n\n        case '4':\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          ccw = bfcCCW;\n          doubleSided = !bfcCertified || !bfcCull;\n\n          if (ccw === true) {\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            v2 = lp.getVector();\n            v3 = lp.getVector();\n          } else {\n            v3 = lp.getVector();\n            v2 = lp.getVector();\n            v1 = lp.getVector();\n            v0 = lp.getVector();\n          } // specifically place the triangle diagonal in the v0 and v1 slots so we can\n          // account for the doubling of vertices later when smoothing normals.\n\n\n          faces.push({\n            material: material,\n            colorCode: colorCode,\n            faceNormal: null,\n            vertices: [v0, v1, v2, v3],\n            normals: [null, null, null, null]\n          });\n          totalFaces += 2;\n\n          if (doubleSided === true) {\n            faces.push({\n              material: material,\n              colorCode: colorCode,\n              faceNormal: null,\n              vertices: [v3, v2, v1, v0],\n              normals: [null, null, null, null]\n            });\n            totalFaces += 2;\n          }\n\n          break;\n\n        default:\n          throw new Error('LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + '.');\n      }\n    }\n\n    if (parsingEmbeddedFiles) {\n      this.setData(currentEmbeddedFileName, currentEmbeddedText);\n    }\n\n    return {\n      faces,\n      conditionalSegments,\n      lineSegments,\n      type,\n      category,\n      keywords,\n      subobjects,\n      totalFaces,\n      startingConstructionStep,\n      materials,\n      fileName,\n      group: null\n    };\n  } // returns an (optionally cloned) instance of the data\n\n\n  getData(fileName, clone = true) {\n    const key = fileName.toLowerCase();\n    const result = this._cache[key];\n\n    if (result === null || result instanceof Promise) {\n      return null;\n    }\n\n    if (clone) {\n      return this.cloneResult(result);\n    } else {\n      return result;\n    }\n  } // kicks off a fetch and parse of the requested data if it hasn't already been loaded. Returns when\n  // the data is ready to use and can be retrieved synchronously with \"getData\".\n\n\n  async ensureDataLoaded(fileName) {\n    const key = fileName.toLowerCase();\n\n    if (!(key in this._cache)) {\n      // replace the promise with a copy of the parsed data for immediate processing\n      this._cache[key] = this.fetchData(fileName).then(text => {\n        const info = this.parse(text, fileName);\n        this._cache[key] = info;\n        return info;\n      });\n    }\n\n    await this._cache[key];\n  } // sets the data in the cache from parsed data\n\n\n  setData(fileName, text) {\n    const key = fileName.toLowerCase();\n    this._cache[key] = this.parse(text, fileName);\n  }\n\n} // returns the material for an associated color code. If the color code is 16 for a face or 24 for\n// an edge then the passthroughColorCode is used.\n\n\nfunction getMaterialFromCode(colorCode, parentColorCode, materialHierarchy, forEdge) {\n  const isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\n  if (isPassthrough) {\n    colorCode = parentColorCode;\n  }\n\n  return materialHierarchy[colorCode] || null;\n} // Class used to parse and build LDraw parts as three.js objects and cache them if they're a \"Part\" type.\n\n\nclass LDrawPartsGeometryCache {\n  constructor(loader) {\n    this.loader = loader;\n    this.parseCache = new LDrawParsedCache(loader);\n    this._cache = {};\n  } // Convert the given file information into a mesh by processing subobjects.\n\n\n  async processIntoMesh(info) {\n    const loader = this.loader;\n    const parseCache = this.parseCache;\n    const faceMaterials = new Set(); // Processes the part subobject information to load child parts and merge geometry onto part\n    // piece object.\n\n    const processInfoSubobjects = async (info, subobject = null) => {\n      const subobjects = info.subobjects;\n      const promises = []; // Trigger load of all subobjects. If a subobject isn't a primitive then load it as a separate\n      // group which lets instruction steps apply correctly.\n\n      for (let i = 0, l = subobjects.length; i < l; i++) {\n        const subobject = subobjects[i];\n        const promise = parseCache.ensureDataLoaded(subobject.fileName).then(() => {\n          const subobjectInfo = parseCache.getData(subobject.fileName, false);\n\n          if (!isPrimitiveType(subobjectInfo.type)) {\n            return this.loadModel(subobject.fileName).catch(error => {\n              console.warn(error);\n              return null;\n            });\n          }\n\n          return processInfoSubobjects(parseCache.getData(subobject.fileName), subobject);\n        });\n        promises.push(promise);\n      }\n\n      const group = new Group();\n      group.userData.category = info.category;\n      group.userData.keywords = info.keywords;\n      info.group = group;\n      const subobjectInfos = await Promise.all(promises);\n\n      for (let i = 0, l = subobjectInfos.length; i < l; i++) {\n        const subobject = info.subobjects[i];\n        const subobjectInfo = subobjectInfos[i];\n\n        if (subobjectInfo === null) {\n          // the subobject failed to load\n          continue;\n        } // if the subobject was loaded as a separate group then apply the parent scopes materials\n\n\n        if (subobjectInfo.isGroup) {\n          const subobjectGroup = subobjectInfo;\n          subobject.matrix.decompose(subobjectGroup.position, subobjectGroup.quaternion, subobjectGroup.scale);\n          subobjectGroup.userData.startingConstructionStep = subobject.startingConstructionStep;\n          subobjectGroup.name = subobject.fileName;\n          loader.applyMaterialsToMesh(subobjectGroup, subobject.colorCode, info.materials);\n          group.add(subobjectGroup);\n          continue;\n        } // add the subobject group if it has children in case it has both children and primitives\n\n\n        if (subobjectInfo.group.children.length) {\n          group.add(subobjectInfo.group);\n        } // transform the primitives into the local space of the parent piece and append them to\n        // to the parent primitives list.\n\n\n        const parentLineSegments = info.lineSegments;\n        const parentConditionalSegments = info.conditionalSegments;\n        const parentFaces = info.faces;\n        const lineSegments = subobjectInfo.lineSegments;\n        const conditionalSegments = subobjectInfo.conditionalSegments;\n        const faces = subobjectInfo.faces;\n        const matrix = subobject.matrix;\n        const inverted = subobject.inverted;\n        const matrixScaleInverted = matrix.determinant() < 0;\n        const colorCode = subobject.colorCode;\n        const lineColorCode = colorCode === MAIN_COLOUR_CODE ? MAIN_EDGE_COLOUR_CODE : colorCode;\n\n        for (let i = 0, l = lineSegments.length; i < l; i++) {\n          const ls = lineSegments[i];\n          const vertices = ls.vertices;\n          vertices[0].applyMatrix4(matrix);\n          vertices[1].applyMatrix4(matrix);\n          ls.colorCode = ls.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : ls.colorCode;\n          ls.material = ls.material || getMaterialFromCode(ls.colorCode, ls.colorCode, info.materials, true);\n          parentLineSegments.push(ls);\n        }\n\n        for (let i = 0, l = conditionalSegments.length; i < l; i++) {\n          const os = conditionalSegments[i];\n          const vertices = os.vertices;\n          const controlPoints = os.controlPoints;\n          vertices[0].applyMatrix4(matrix);\n          vertices[1].applyMatrix4(matrix);\n          controlPoints[0].applyMatrix4(matrix);\n          controlPoints[1].applyMatrix4(matrix);\n          os.colorCode = os.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : os.colorCode;\n          os.material = os.material || getMaterialFromCode(os.colorCode, os.colorCode, info.materials, true);\n          parentConditionalSegments.push(os);\n        }\n\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const tri = faces[i];\n          const vertices = tri.vertices;\n\n          for (let i = 0, l = vertices.length; i < l; i++) {\n            vertices[i].applyMatrix4(matrix);\n          }\n\n          tri.colorCode = tri.colorCode === MAIN_COLOUR_CODE ? colorCode : tri.colorCode;\n          tri.material = tri.material || getMaterialFromCode(tri.colorCode, colorCode, info.materials, false);\n          faceMaterials.add(tri.colorCode); // If the scale of the object is negated then the triangle winding order\n          // needs to be flipped.\n\n          if (matrixScaleInverted !== inverted) {\n            vertices.reverse();\n          }\n\n          parentFaces.push(tri);\n        }\n\n        info.totalFaces += subobjectInfo.totalFaces;\n      } // Apply the parent subobjects pass through material code to this object. This is done several times due\n      // to material scoping.\n\n\n      if (subobject) {\n        loader.applyMaterialsToMesh(group, subobject.colorCode, info.materials);\n      }\n\n      return info;\n    }; // Track material use to see if we need to use the normal smooth slow path for hard edges.\n\n\n    for (let i = 0, l = info.faces; i < l; i++) {\n      faceMaterials.add(info.faces[i].colorCode);\n    }\n\n    await processInfoSubobjects(info);\n\n    if (loader.smoothNormals) {\n      const checkSubSegments = faceMaterials.size > 1;\n      generateFaceNormals(info.faces);\n      smoothNormals(info.faces, info.lineSegments, checkSubSegments);\n    } // Add the primitive objects and metadata.\n\n\n    const group = info.group;\n\n    if (info.faces.length > 0) {\n      group.add(createObject(info.faces, 3, false, info.totalFaces));\n    }\n\n    if (info.lineSegments.length > 0) {\n      group.add(createObject(info.lineSegments, 2));\n    }\n\n    if (info.conditionalSegments.length > 0) {\n      group.add(createObject(info.conditionalSegments, 2, true));\n    }\n\n    return group;\n  }\n\n  hasCachedModel(fileName) {\n    return fileName !== null && fileName.toLowerCase() in this._cache;\n  }\n\n  async getCachedModel(fileName) {\n    if (fileName !== null && this.hasCachedModel(fileName)) {\n      const key = fileName.toLowerCase();\n      const group = await this._cache[key];\n      return group.clone();\n    } else {\n      return null;\n    }\n  } // Loads and parses the model with the given file name. Returns a cached copy if available.\n\n\n  async loadModel(fileName) {\n    const parseCache = this.parseCache;\n    const key = fileName.toLowerCase();\n\n    if (this.hasCachedModel(fileName)) {\n      // Return cached model if available.\n      return this.getCachedModel(fileName);\n    } else {\n      // Otherwise parse a new model.\n      // Ensure the file data is loaded and pre parsed.\n      await parseCache.ensureDataLoaded(fileName);\n      const info = parseCache.getData(fileName);\n      const promise = this.processIntoMesh(info); // Now that the file has loaded it's possible that another part parse has been waiting in parallel\n      // so check the cache again to see if it's been added since the last async operation so we don't\n      // do unnecessary work.\n\n      if (this.hasCachedModel(fileName)) {\n        return this.getCachedModel(fileName);\n      } // Cache object if it's a part so it can be reused later.\n\n\n      if (isPartType(info.type)) {\n        this._cache[key] = promise;\n      } // return a copy\n\n\n      const group = await promise;\n      return group.clone();\n    }\n  } // parses the given model text into a renderable object. Returns cached copy if available.\n\n\n  async parseModel(text) {\n    const parseCache = this.parseCache;\n    const info = parseCache.parse(text);\n\n    if (isPartType(info.type) && this.hasCachedModel(info.fileName)) {\n      return this.getCachedModel(info.fileName);\n    }\n\n    return this.processIntoMesh(info);\n  }\n\n}\n\nfunction sortByMaterial(a, b) {\n  if (a.colorCode === b.colorCode) {\n    return 0;\n  }\n\n  if (a.colorCode < b.colorCode) {\n    return -1;\n  }\n\n  return 1;\n}\n\nfunction createObject(elements, elementSize, isConditionalSegments = false, totalElements = null) {\n  // Creates a LineSegments (elementSize = 2) or a Mesh (elementSize = 3 )\n  // With per face / segment material, implemented with mesh groups and materials array\n  // Sort the faces or line segments by color code to make later the mesh groups\n  elements.sort(sortByMaterial);\n\n  if (totalElements === null) {\n    totalElements = elements.length;\n  }\n\n  const positions = new Float32Array(elementSize * totalElements * 3);\n  const normals = elementSize === 3 ? new Float32Array(elementSize * totalElements * 3) : null;\n  const materials = [];\n  const quadArray = new Array(6);\n  const bufferGeometry = new BufferGeometry();\n  let prevMaterial = null;\n  let index0 = 0;\n  let numGroupVerts = 0;\n  let offset = 0;\n\n  for (let iElem = 0, nElem = elements.length; iElem < nElem; iElem++) {\n    const elem = elements[iElem];\n    let vertices = elem.vertices;\n\n    if (vertices.length === 4) {\n      quadArray[0] = vertices[0];\n      quadArray[1] = vertices[1];\n      quadArray[2] = vertices[2];\n      quadArray[3] = vertices[0];\n      quadArray[4] = vertices[2];\n      quadArray[5] = vertices[3];\n      vertices = quadArray;\n    }\n\n    for (let j = 0, l = vertices.length; j < l; j++) {\n      const v = vertices[j];\n      const index = offset + j * 3;\n      positions[index + 0] = v.x;\n      positions[index + 1] = v.y;\n      positions[index + 2] = v.z;\n    } // create the normals array if this is a set of faces\n\n\n    if (elementSize === 3) {\n      if (!elem.faceNormal) {\n        const v0 = vertices[0];\n        const v1 = vertices[1];\n        const v2 = vertices[2];\n\n        _tempVec0.subVectors(v1, v0);\n\n        _tempVec1.subVectors(v2, v1);\n\n        elem.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n      }\n\n      let elemNormals = elem.normals;\n\n      if (elemNormals.length === 4) {\n        quadArray[0] = elemNormals[0];\n        quadArray[1] = elemNormals[1];\n        quadArray[2] = elemNormals[2];\n        quadArray[3] = elemNormals[0];\n        quadArray[4] = elemNormals[2];\n        quadArray[5] = elemNormals[3];\n        elemNormals = quadArray;\n      }\n\n      for (let j = 0, l = elemNormals.length; j < l; j++) {\n        // use face normal if a vertex normal is not provided\n        let n = elem.faceNormal;\n\n        if (elemNormals[j]) {\n          n = elemNormals[j].norm;\n        }\n\n        const index = offset + j * 3;\n        normals[index + 0] = n.x;\n        normals[index + 1] = n.y;\n        normals[index + 2] = n.z;\n      }\n    }\n\n    if (prevMaterial !== elem.colorCode) {\n      if (prevMaterial !== null) {\n        bufferGeometry.addGroup(index0, numGroupVerts, materials.length - 1);\n      }\n\n      const material = elem.material;\n\n      if (material !== null) {\n        if (elementSize === 3) {\n          materials.push(material);\n        } else if (elementSize === 2) {\n          if (material !== null) {\n            if (isConditionalSegments) {\n              materials.push(material.userData.edgeMaterial.userData.conditionalEdgeMaterial);\n            } else {\n              materials.push(material.userData.edgeMaterial);\n            }\n          } else {\n            materials.push(null);\n          }\n        }\n      } else {\n        // If a material has not been made available yet then keep the color code string in the material array\n        // to save the spot for the material once a parent scopes materials are being applied to the object.\n        materials.push(elem.colorCode);\n      }\n\n      prevMaterial = elem.colorCode;\n      index0 = offset / 3;\n      numGroupVerts = vertices.length;\n    } else {\n      numGroupVerts += vertices.length;\n    }\n\n    offset += 3 * vertices.length;\n  }\n\n  if (numGroupVerts > 0) {\n    bufferGeometry.addGroup(index0, Infinity, materials.length - 1);\n  }\n\n  bufferGeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\n  if (normals !== null) {\n    bufferGeometry.setAttribute('normal', new BufferAttribute(normals, 3));\n  }\n\n  let object3d = null;\n\n  if (elementSize === 2) {\n    if (isConditionalSegments) {\n      object3d = new ConditionalLineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    } else {\n      object3d = new LineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    }\n  } else if (elementSize === 3) {\n    object3d = new Mesh(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n  }\n\n  if (isConditionalSegments) {\n    object3d.isConditionalLine = true;\n    const controlArray0 = new Float32Array(elements.length * 3 * 2);\n    const controlArray1 = new Float32Array(elements.length * 3 * 2);\n    const directionArray = new Float32Array(elements.length * 3 * 2);\n\n    for (let i = 0, l = elements.length; i < l; i++) {\n      const os = elements[i];\n      const vertices = os.vertices;\n      const controlPoints = os.controlPoints;\n      const c0 = controlPoints[0];\n      const c1 = controlPoints[1];\n      const v0 = vertices[0];\n      const v1 = vertices[1];\n      const index = i * 3 * 2;\n      controlArray0[index + 0] = c0.x;\n      controlArray0[index + 1] = c0.y;\n      controlArray0[index + 2] = c0.z;\n      controlArray0[index + 3] = c0.x;\n      controlArray0[index + 4] = c0.y;\n      controlArray0[index + 5] = c0.z;\n      controlArray1[index + 0] = c1.x;\n      controlArray1[index + 1] = c1.y;\n      controlArray1[index + 2] = c1.z;\n      controlArray1[index + 3] = c1.x;\n      controlArray1[index + 4] = c1.y;\n      controlArray1[index + 5] = c1.z;\n      directionArray[index + 0] = v1.x - v0.x;\n      directionArray[index + 1] = v1.y - v0.y;\n      directionArray[index + 2] = v1.z - v0.z;\n      directionArray[index + 3] = v1.x - v0.x;\n      directionArray[index + 4] = v1.y - v0.y;\n      directionArray[index + 5] = v1.z - v0.z;\n    }\n\n    bufferGeometry.setAttribute('control0', new BufferAttribute(controlArray0, 3, false));\n    bufferGeometry.setAttribute('control1', new BufferAttribute(controlArray1, 3, false));\n    bufferGeometry.setAttribute('direction', new BufferAttribute(directionArray, 3, false));\n  }\n\n  return object3d;\n} //\n\n\nclass LDrawLoader extends Loader {\n  constructor(manager) {\n    super(manager); // Array of THREE.Material\n\n    this.materials = [];\n    this.materialLibrary = {}; // This also allows to handle the embedded text files (\"0 FILE\" lines)\n\n    this.partsCache = new LDrawPartsGeometryCache(this); // This object is a map from file names to paths. It agilizes the paths search. If it is not set then files will be searched by trial and error.\n\n    this.fileMap = {}; // Initializes the materials library with default materials\n\n    this.setMaterials([]); // If this flag is set to true the vertex normals will be smoothed.\n\n    this.smoothNormals = true; // The path to load parts from the LDraw parts library from.\n\n    this.partsLibraryPath = '';\n  }\n\n  setPartsLibraryPath(path) {\n    this.partsLibraryPath = path;\n    return this;\n  }\n\n  async preloadMaterials(url) {\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    const text = await fileLoader.loadAsync(url);\n    const colorLineRegex = /^0 !COLOUR/;\n    const lines = text.split(/[\\n\\r]/g);\n    const materials = [];\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n\n      if (colorLineRegex.test(line)) {\n        const directive = line.replace(colorLineRegex, '');\n        const material = this.parseColorMetaDirective(new LineParser(directive));\n        materials.push(material);\n      }\n    }\n\n    this.setMaterials(materials);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    fileLoader.load(url, text => {\n      this.partsCache.parseModel(text, this.materialLibrary).then(group => {\n        this.applyMaterialsToMesh(group, MAIN_COLOUR_CODE, this.materialLibrary, true);\n        this.computeConstructionSteps(group);\n        onLoad(group);\n      }).catch(onError);\n    }, onProgress, onError);\n  }\n\n  parse(text, onLoad) {\n    this.partsCache.parseModel(text, this.materialLibrary).then(group => {\n      this.computeConstructionSteps(group);\n      onLoad(group);\n    });\n  }\n\n  setMaterials(materials) {\n    this.materialLibrary = {};\n    this.materials = [];\n\n    for (let i = 0, l = materials.length; i < l; i++) {\n      this.addMaterial(materials[i]);\n    } // Add default main triangle and line edge materials (used in pieces that can be colored with a main color)\n\n\n    this.addMaterial(this.parseColorMetaDirective(new LineParser('Main_Colour CODE 16 VALUE #FF8080 EDGE #333333')));\n    this.addMaterial(this.parseColorMetaDirective(new LineParser('Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333')));\n    return this;\n  }\n\n  setFileMap(fileMap) {\n    this.fileMap = fileMap;\n    return this;\n  }\n\n  addMaterial(material) {\n    // Adds a material to the material library which is on top of the parse scopes stack. And also to the materials array\n    const matLib = this.materialLibrary;\n\n    if (!matLib[material.userData.code]) {\n      this.materials.push(material);\n      matLib[material.userData.code] = material;\n    }\n\n    return this;\n  }\n\n  getMaterial(colorCode) {\n    if (colorCode.startsWith('0x2')) {\n      // Special 'direct' material value (RGB color)\n      const color = colorCode.substring(3);\n      return this.parseColorMetaDirective(new LineParser('Direct_Color_' + color + ' CODE -1 VALUE #' + color + ' EDGE #' + color + ''));\n    }\n\n    return this.materialLibrary[colorCode] || null;\n  } // Applies the appropriate materials to a prebuilt hierarchy of geometry. Assumes that color codes are present\n  // in the material array if they need to be filled in.\n\n\n  applyMaterialsToMesh(group, parentColorCode, materialHierarchy, finalMaterialPass = false) {\n    // find any missing materials as indicated by a color code string and replace it with a material from the current material lib\n    const loader = this;\n    const parentIsPassthrough = parentColorCode === MAIN_COLOUR_CODE;\n    group.traverse(c => {\n      if (c.isMesh || c.isLineSegments) {\n        if (Array.isArray(c.material)) {\n          for (let i = 0, l = c.material.length; i < l; i++) {\n            if (!c.material[i].isMaterial) {\n              c.material[i] = getMaterial(c, c.material[i]);\n            }\n          }\n        } else if (!c.material.isMaterial) {\n          c.material = getMaterial(c, c.material);\n        }\n      }\n    }); // Returns the appropriate material for the object (line or face) given color code. If the code is \"pass through\"\n    // (24 for lines, 16 for edges) then the pass through color code is used. If that is also pass through then it's\n    // simply returned for the subsequent material application.\n\n    function getMaterial(c, colorCode) {\n      // if our parent is a passthrough color code and we don't have the current material color available then\n      // return early.\n      if (parentIsPassthrough && !(colorCode in materialHierarchy) && !finalMaterialPass) {\n        return colorCode;\n      }\n\n      const forEdge = c.isLineSegments || c.isConditionalLine;\n      const isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\n      if (isPassthrough) {\n        colorCode = parentColorCode;\n      }\n\n      let material = null;\n\n      if (colorCode in materialHierarchy) {\n        material = materialHierarchy[colorCode];\n      } else if (finalMaterialPass) {\n        // see if we can get the final material from from the \"getMaterial\" function which will attempt to\n        // parse the \"direct\" colors\n        material = loader.getMaterial(colorCode);\n\n        if (material === null) {\n          // otherwise throw an error if this is final opportunity to set the material\n          throw new Error(`LDrawLoader: Material properties for code ${colorCode} not available.`);\n        }\n      } else {\n        return colorCode;\n      }\n\n      if (c.isLineSegments) {\n        material = material.userData.edgeMaterial;\n\n        if (c.isConditionalLine) {\n          material = material.userData.conditionalEdgeMaterial;\n        }\n      }\n\n      return material;\n    }\n  }\n\n  getMainMaterial() {\n    return this.getMaterial(MAIN_COLOUR_CODE);\n  }\n\n  getMainEdgeMaterial() {\n    return this.getMaterial(MAIN_EDGE_COLOUR_CODE);\n  }\n\n  parseColorMetaDirective(lineParser) {\n    // Parses a color definition and returns a THREE.Material\n    let code = null; // Triangle and line colors\n\n    let color = 0xff00ff;\n    let edgeColor = 0xff00ff; // Transparency\n\n    let alpha = 1;\n    let isTransparent = false; // Self-illumination:\n\n    let luminance = 0;\n    let finishType = FINISH_TYPE_DEFAULT;\n    let edgeMaterial = null;\n    const name = lineParser.getToken();\n\n    if (!name) {\n      throw new Error('LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + '.');\n    } // Parse tag tokens and their parameters\n\n\n    let token = null;\n\n    while (true) {\n      token = lineParser.getToken();\n\n      if (!token) {\n        break;\n      }\n\n      switch (token.toUpperCase()) {\n        case 'CODE':\n          code = lineParser.getToken();\n          break;\n\n        case 'VALUE':\n          color = lineParser.getToken();\n\n          if (color.startsWith('0x')) {\n            color = '#' + color.substring(2);\n          } else if (!color.startsWith('#')) {\n            throw new Error('LDrawLoader: Invalid color while parsing material' + lineParser.getLineNumberString() + '.');\n          }\n\n          break;\n\n        case 'EDGE':\n          edgeColor = lineParser.getToken();\n\n          if (edgeColor.startsWith('0x')) {\n            edgeColor = '#' + edgeColor.substring(2);\n          } else if (!edgeColor.startsWith('#')) {\n            // Try to see if edge color is a color code\n            edgeMaterial = this.getMaterial(edgeColor);\n\n            if (!edgeMaterial) {\n              throw new Error('LDrawLoader: Invalid edge color while parsing material' + lineParser.getLineNumberString() + '.');\n            } // Get the edge material for this triangle material\n\n\n            edgeMaterial = edgeMaterial.userData.edgeMaterial;\n          }\n\n          break;\n\n        case 'ALPHA':\n          alpha = parseInt(lineParser.getToken());\n\n          if (isNaN(alpha)) {\n            throw new Error('LDrawLoader: Invalid alpha value in material definition' + lineParser.getLineNumberString() + '.');\n          }\n\n          alpha = Math.max(0, Math.min(1, alpha / 255));\n\n          if (alpha < 1) {\n            isTransparent = true;\n          }\n\n          break;\n\n        case 'LUMINANCE':\n          luminance = parseInt(lineParser.getToken());\n\n          if (isNaN(luminance)) {\n            throw new Error('LDrawLoader: Invalid luminance value in material definition' + LineParser.getLineNumberString() + '.');\n          }\n\n          luminance = Math.max(0, Math.min(1, luminance / 255));\n          break;\n\n        case 'CHROME':\n          finishType = FINISH_TYPE_CHROME;\n          break;\n\n        case 'PEARLESCENT':\n          finishType = FINISH_TYPE_PEARLESCENT;\n          break;\n\n        case 'RUBBER':\n          finishType = FINISH_TYPE_RUBBER;\n          break;\n\n        case 'MATTE_METALLIC':\n          finishType = FINISH_TYPE_MATTE_METALLIC;\n          break;\n\n        case 'METAL':\n          finishType = FINISH_TYPE_METAL;\n          break;\n\n        case 'MATERIAL':\n          // Not implemented\n          lineParser.setToEnd();\n          break;\n\n        default:\n          throw new Error('LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + '.');\n      }\n    }\n\n    let material = null;\n\n    switch (finishType) {\n      case FINISH_TYPE_DEFAULT:\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.3,\n          metalness: 0\n        });\n        break;\n\n      case FINISH_TYPE_PEARLESCENT:\n        // Try to imitate pearlescency by making the surface glossy\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.3,\n          metalness: 0.25\n        });\n        break;\n\n      case FINISH_TYPE_CHROME:\n        // Mirror finish surface\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0,\n          metalness: 1\n        });\n        break;\n\n      case FINISH_TYPE_RUBBER:\n        // Rubber finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.9,\n          metalness: 0\n        });\n        break;\n\n      case FINISH_TYPE_MATTE_METALLIC:\n        // Brushed metal finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.8,\n          metalness: 0.4\n        });\n        break;\n\n      case FINISH_TYPE_METAL:\n        // Average metal finish\n        material = new MeshStandardMaterial({\n          color: color,\n          roughness: 0.2,\n          metalness: 0.85\n        });\n        break;\n    }\n\n    material.transparent = isTransparent;\n    material.premultipliedAlpha = true;\n    material.opacity = alpha;\n    material.depthWrite = !isTransparent;\n    material.polygonOffset = true;\n    material.polygonOffsetFactor = 1;\n\n    if (luminance !== 0) {\n      material.emissive.set(material.color).multiplyScalar(luminance);\n    }\n\n    if (!edgeMaterial) {\n      // This is the material used for edges\n      edgeMaterial = new LineBasicMaterial({\n        color: edgeColor,\n        transparent: isTransparent,\n        opacity: alpha,\n        depthWrite: !isTransparent\n      });\n      edgeMaterial.userData.code = code;\n      edgeMaterial.name = name + ' - Edge'; // This is the material used for conditional edges\n\n      edgeMaterial.userData.conditionalEdgeMaterial = new LDrawConditionalLineMaterial({\n        fog: true,\n        transparent: isTransparent,\n        depthWrite: !isTransparent,\n        color: edgeColor,\n        opacity: alpha\n      });\n    }\n\n    material.userData.code = code;\n    material.name = name;\n    material.userData.edgeMaterial = edgeMaterial;\n    this.addMaterial(material);\n    return material;\n  }\n\n  computeConstructionSteps(model) {\n    // Sets userdata.constructionStep number in Group objects and userData.numConstructionSteps number in the root Group object.\n    let stepNumber = 0;\n    model.traverse(c => {\n      if (c.isGroup) {\n        if (c.userData.startingConstructionStep) {\n          stepNumber++;\n        }\n\n        c.userData.constructionStep = stepNumber;\n      }\n    });\n    model.userData.numConstructionSteps = stepNumber + 1;\n  }\n\n}\n\nexport { LDrawLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}