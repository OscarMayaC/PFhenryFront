import { ExtensionProperty, PropertyType, Texture, TextureInfo, vec3, vec4 } from '@gltf-transform/core';
/**
 * # PBRSpecularGlossiness
 *
 * Converts a {@link Material} to a spec/gloss workflow. See {@link MaterialsPBRSpecularGlossiness}.
 */
export declare class PBRSpecularGlossiness extends ExtensionProperty {
    readonly propertyType = "PBRSpecularGlossiness";
    readonly parentTypes: PropertyType[];
    readonly extensionName = "KHR_materials_pbrSpecularGlossiness";
    static EXTENSION_NAME: string;
    private _diffuseFactor;
    private _specularFactor;
    private _glossinessFactor;
    private diffuseTexture;
    private diffuseTextureInfo;
    private specularGlossinessTexture;
    private specularGlossinessTextureInfo;
    copy(other: this, resolve?: <T extends import("@gltf-transform/core").Property>(t: T) => T): this;
    dispose(): void;
    /**********************************************************************************************
     * Diffuse.
     */
    /** Diffuse; linear multiplier. See {@link getDiffuseTexture}. */
    getDiffuseFactor(): vec4;
    /** Diffuse; linear multiplier. See {@link getDiffuseTexture}. */
    setDiffuseFactor(diffuseFactor: vec4): this;
    /** Diffuse; hex color in sRGB colorspace. */
    getDiffuseHex(): number;
    /** Diffuse; hex color in sRGB colorspace. */
    setDiffuseHex(hex: number): this;
    /**
     * Diffuse texture; linear multiplier. Alternative to baseColorTexture used within the
     * spec/gloss PBR workflow.
     */
    getDiffuseTexture(): Texture | null;
    /**
     * Settings affecting the material's use of its diffuse texture. If no texture is attached,
     * {@link TextureInfo} is `null`.
     */
    getDiffuseTextureInfo(): TextureInfo | null;
    /** Sets diffuse texture. See {@link getDiffuseTexture}. */
    setDiffuseTexture(texture: Texture | null): this;
    /**********************************************************************************************
     * Specular.
     */
    /** Specular; linear multiplier. */
    getSpecularFactor(): vec3;
    /** Specular; linear multiplier. */
    setSpecularFactor(specularFactor: vec3): this;
    /**********************************************************************************************
     * Glossiness.
     */
    /** Glossiness; linear multiplier. */
    getGlossinessFactor(): number;
    /** Glossiness; linear multiplier. */
    setGlossinessFactor(glossinessFactor: number): this;
    /**********************************************************************************************
     * Specular/Glossiness.
     */
    /** Spec/gloss texture; linear multiplier. */
    getSpecularGlossinessTexture(): Texture | null;
    /**
     * Settings affecting the material's use of its spec/gloss texture. If no texture is attached,
     * {@link TextureInfo} is `null`.
     */
    getSpecularGlossinessTextureInfo(): TextureInfo | null;
    /** Spec/gloss texture; linear multiplier. */
    setSpecularGlossinessTexture(texture: Texture | null): this;
}
