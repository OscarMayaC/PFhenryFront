{"ast":null,"code":"import TempNode from '../core/TempNode.js';\nclass OperatorNode extends TempNode {\n  constructor(op, aNode, bNode) {\n    super();\n    this.op = op;\n    if ((arguments.length <= 3 ? 0 : arguments.length - 3) > 0) {\n      let finalBNode = bNode;\n      for (let i = 0; i < (arguments.length <= 3 ? 0 : arguments.length - 3); i++) {\n        finalBNode = new OperatorNode(op, finalBNode, i + 3 < 3 || arguments.length <= i + 3 ? undefined : arguments[i + 3]);\n      }\n      bNode = finalBNode;\n    }\n    this.aNode = aNode;\n    this.bNode = bNode;\n  }\n  getNodeType(builder, output) {\n    const op = this.op;\n    const aNode = this.aNode;\n    const bNode = this.bNode;\n    const typeA = aNode.getNodeType(builder);\n    const typeB = bNode.getNodeType(builder);\n    if (typeA === 'void' || typeB === 'void') {\n      return 'void';\n    } else if (op === '=' || op === '%') {\n      return typeA;\n    } else if (op === '&' || op === '|' || op === '^' || op === '>>' || op === '<<') {\n      return 'int';\n    } else if (op === '==' || op === '&&' || op === '||' || op === '^^') {\n      return 'bool';\n    } else if (op === '<' || op === '>' || op === '<=' || op === '>=') {\n      const typeLength = builder.getTypeLength(output);\n      return typeLength > 1 ? `bvec${typeLength}` : 'bool';\n    } else {\n      if (typeA === 'float' && builder.isMatrix(typeB)) {\n        return typeB;\n      } else if (builder.isMatrix(typeA) && builder.isVector(typeB)) {\n        // matrix x vector\n        return builder.getVectorFromMatrix(typeA);\n      } else if (builder.isVector(typeA) && builder.isMatrix(typeB)) {\n        // vector x matrix\n        return builder.getVectorFromMatrix(typeB);\n      } else if (builder.getTypeLength(typeB) > builder.getTypeLength(typeA)) {\n        // anytype x anytype: use the greater length vector\n        return typeB;\n      }\n      return typeA;\n    }\n  }\n  generate(builder, output) {\n    const op = this.op;\n    const aNode = this.aNode;\n    const bNode = this.bNode;\n    const type = this.getNodeType(builder, output);\n    let typeA = null;\n    let typeB = null;\n    if (type !== 'void') {\n      typeA = aNode.getNodeType(builder);\n      typeB = bNode.getNodeType(builder);\n      if (op === '=') {\n        typeB = typeA;\n      } else if (op === '<' || op === '>' || op === '<=' || op === '>=') {\n        if (builder.isVector(typeA)) {\n          typeB = typeA;\n        } else {\n          typeA = typeB = 'float';\n        }\n      } else if (builder.isMatrix(typeA) && builder.isVector(typeB)) {\n        // matrix x vector\n        typeB = builder.getVectorFromMatrix(typeA);\n      } else if (builder.isVector(typeA) && builder.isMatrix(typeB)) {\n        // vector x matrix\n        typeA = builder.getVectorFromMatrix(typeB);\n      } else {\n        // anytype x anytype\n        typeA = typeB = type;\n      }\n    } else {\n      typeA = typeB = type;\n    }\n    const a = aNode.build(builder, typeA);\n    const b = bNode.build(builder, typeB);\n    const outputLength = builder.getTypeLength(output);\n    if (output !== 'void') {\n      if (op === '=') {\n        builder.addFlowCode(`${a} ${this.op} ${b}`);\n        return a;\n      } else if (op === '>' && outputLength > 1) {\n        return builder.format(`${builder.getMethod('greaterThan')}( ${a}, ${b} )`, type, output);\n      } else if (op === '<=' && outputLength > 1) {\n        return builder.format(`${builder.getMethod('lessThanEqual')}( ${a}, ${b} )`, type, output);\n      } else {\n        return builder.format(`( ${a} ${this.op} ${b} )`, type, output);\n      }\n    } else if (typeA !== 'void') {\n      return builder.format(`${a} ${this.op} ${b}`, type, output);\n    }\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.op = this.op;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.op = data.op;\n  }\n}\nexport default OperatorNode;","map":{"version":3,"names":["TempNode","OperatorNode","constructor","op","aNode","bNode","arguments","length","finalBNode","i","undefined","getNodeType","builder","output","typeA","typeB","typeLength","getTypeLength","isMatrix","isVector","getVectorFromMatrix","generate","type","a","build","b","outputLength","addFlowCode","format","getMethod","serialize","data","deserialize"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/nodes/math/OperatorNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\n\nclass OperatorNode extends TempNode {\n  constructor(op, aNode, bNode, ...params) {\n    super();\n    this.op = op;\n\n    if (params.length > 0) {\n      let finalBNode = bNode;\n\n      for (let i = 0; i < params.length; i++) {\n        finalBNode = new OperatorNode(op, finalBNode, params[i]);\n      }\n\n      bNode = finalBNode;\n    }\n\n    this.aNode = aNode;\n    this.bNode = bNode;\n  }\n\n  getNodeType(builder, output) {\n    const op = this.op;\n    const aNode = this.aNode;\n    const bNode = this.bNode;\n    const typeA = aNode.getNodeType(builder);\n    const typeB = bNode.getNodeType(builder);\n\n    if (typeA === 'void' || typeB === 'void') {\n      return 'void';\n    } else if (op === '=' || op === '%') {\n      return typeA;\n    } else if (op === '&' || op === '|' || op === '^' || op === '>>' || op === '<<') {\n      return 'int';\n    } else if (op === '==' || op === '&&' || op === '||' || op === '^^') {\n      return 'bool';\n    } else if (op === '<' || op === '>' || op === '<=' || op === '>=') {\n      const typeLength = builder.getTypeLength(output);\n      return typeLength > 1 ? `bvec${typeLength}` : 'bool';\n    } else {\n      if (typeA === 'float' && builder.isMatrix(typeB)) {\n        return typeB;\n      } else if (builder.isMatrix(typeA) && builder.isVector(typeB)) {\n        // matrix x vector\n        return builder.getVectorFromMatrix(typeA);\n      } else if (builder.isVector(typeA) && builder.isMatrix(typeB)) {\n        // vector x matrix\n        return builder.getVectorFromMatrix(typeB);\n      } else if (builder.getTypeLength(typeB) > builder.getTypeLength(typeA)) {\n        // anytype x anytype: use the greater length vector\n        return typeB;\n      }\n\n      return typeA;\n    }\n  }\n\n  generate(builder, output) {\n    const op = this.op;\n    const aNode = this.aNode;\n    const bNode = this.bNode;\n    const type = this.getNodeType(builder, output);\n    let typeA = null;\n    let typeB = null;\n\n    if (type !== 'void') {\n      typeA = aNode.getNodeType(builder);\n      typeB = bNode.getNodeType(builder);\n\n      if (op === '=') {\n        typeB = typeA;\n      } else if (op === '<' || op === '>' || op === '<=' || op === '>=') {\n        if (builder.isVector(typeA)) {\n          typeB = typeA;\n        } else {\n          typeA = typeB = 'float';\n        }\n      } else if (builder.isMatrix(typeA) && builder.isVector(typeB)) {\n        // matrix x vector\n        typeB = builder.getVectorFromMatrix(typeA);\n      } else if (builder.isVector(typeA) && builder.isMatrix(typeB)) {\n        // vector x matrix\n        typeA = builder.getVectorFromMatrix(typeB);\n      } else {\n        // anytype x anytype\n        typeA = typeB = type;\n      }\n    } else {\n      typeA = typeB = type;\n    }\n\n    const a = aNode.build(builder, typeA);\n    const b = bNode.build(builder, typeB);\n    const outputLength = builder.getTypeLength(output);\n\n    if (output !== 'void') {\n      if (op === '=') {\n        builder.addFlowCode(`${a} ${this.op} ${b}`);\n        return a;\n      } else if (op === '>' && outputLength > 1) {\n        return builder.format(`${builder.getMethod('greaterThan')}( ${a}, ${b} )`, type, output);\n      } else if (op === '<=' && outputLength > 1) {\n        return builder.format(`${builder.getMethod('lessThanEqual')}( ${a}, ${b} )`, type, output);\n      } else {\n        return builder.format(`( ${a} ${this.op} ${b} )`, type, output);\n      }\n    } else if (typeA !== 'void') {\n      return builder.format(`${a} ${this.op} ${b}`, type, output);\n    }\n  }\n\n  serialize(data) {\n    super.serialize(data);\n    data.op = this.op;\n  }\n\n  deserialize(data) {\n    super.deserialize(data);\n    this.op = data.op;\n  }\n\n}\n\nexport default OperatorNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}