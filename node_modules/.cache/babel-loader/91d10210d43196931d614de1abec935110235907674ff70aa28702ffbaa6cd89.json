{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CatmullRomCurve3, Color } from 'three';\nimport { Line } from './Line.js';\nconst CatmullRomLine = /*#__PURE__*/React.forwardRef(function CatmullRomLine(_ref, ref) {\n  let {\n    points,\n    closed = false,\n    curveType = 'centripetal',\n    tension = 0.5,\n    segments = 20,\n    vertexColors,\n    ...rest\n  } = _ref;\n  const curve = React.useMemo(() => {\n    const mappedPoints = points.map(pt => pt instanceof Vector3 ? pt : new Vector3(...pt));\n    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);\n  }, [points, closed, curveType, tension]);\n  const segmentedPoints = React.useMemo(() => curve.getPoints(segments), [curve, segments]);\n  const interpolatedVertexColors = React.useMemo(() => {\n    if (!vertexColors || vertexColors.length < 2) return undefined;\n    if (vertexColors.length === segments + 1) return vertexColors;\n    const mappedColors = vertexColors.map(color => color instanceof Color ? color : new Color(...color));\n    if (closed) mappedColors.push(mappedColors[0].clone());\n    const iColors = [mappedColors[0]];\n    const divisions = segments / (mappedColors.length - 1);\n    for (let i = 1; i < segments; i++) {\n      const alpha = i % divisions / divisions;\n      const colorIndex = Math.floor(i / divisions);\n      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));\n    }\n    iColors.push(mappedColors[mappedColors.length - 1]);\n    return iColors;\n  }, [vertexColors, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: segmentedPoints,\n    vertexColors: interpolatedVertexColors\n  }, rest));\n});\nexport { CatmullRomLine };","map":{"version":3,"names":["_extends","React","Vector3","CatmullRomCurve3","Color","Line","CatmullRomLine","forwardRef","_ref","ref","points","closed","curveType","tension","segments","vertexColors","rest","curve","useMemo","mappedPoints","map","pt","segmentedPoints","getPoints","interpolatedVertexColors","length","undefined","mappedColors","color","push","clone","iColors","divisions","i","alpha","colorIndex","Math","floor","lerp","createElement"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/@react-three/drei/core/CatmullRomLine.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CatmullRomCurve3, Color } from 'three';\nimport { Line } from './Line.js';\n\nconst CatmullRomLine = /*#__PURE__*/React.forwardRef(function CatmullRomLine({\n  points,\n  closed = false,\n  curveType = 'centripetal',\n  tension = 0.5,\n  segments = 20,\n  vertexColors,\n  ...rest\n}, ref) {\n  const curve = React.useMemo(() => {\n    const mappedPoints = points.map(pt => pt instanceof Vector3 ? pt : new Vector3(...pt));\n    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);\n  }, [points, closed, curveType, tension]);\n  const segmentedPoints = React.useMemo(() => curve.getPoints(segments), [curve, segments]);\n  const interpolatedVertexColors = React.useMemo(() => {\n    if (!vertexColors || vertexColors.length < 2) return undefined;\n    if (vertexColors.length === segments + 1) return vertexColors;\n    const mappedColors = vertexColors.map(color => color instanceof Color ? color : new Color(...color));\n    if (closed) mappedColors.push(mappedColors[0].clone());\n    const iColors = [mappedColors[0]];\n    const divisions = segments / (mappedColors.length - 1);\n\n    for (let i = 1; i < segments; i++) {\n      const alpha = i % divisions / divisions;\n      const colorIndex = Math.floor(i / divisions);\n      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));\n    }\n\n    iColors.push(mappedColors[mappedColors.length - 1]);\n    return iColors;\n  }, [vertexColors, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: segmentedPoints,\n    vertexColors: interpolatedVertexColors\n  }, rest));\n});\n\nexport { CatmullRomLine };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}