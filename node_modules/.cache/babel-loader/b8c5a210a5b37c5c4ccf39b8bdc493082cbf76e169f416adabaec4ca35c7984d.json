{"ast":null,"code":"import { Vector3, Mesh, InstancedInterleavedBuffer, InterleavedBufferAttribute } from 'three';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\nimport { LineMaterial } from './LineMaterial.js';\nconst _start = new Vector3();\nconst _end = new Vector3();\nclass Wireframe extends Mesh {\n  constructor() {\n    let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new LineSegmentsGeometry();\n    let material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new LineMaterial({\n      color: Math.random() * 0xffffff\n    });\n    super(geometry, material);\n    this.isWireframe = true;\n    this.type = 'Wireframe';\n  } // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n\n  computeLineDistances() {\n    const geometry = this.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const lineDistances = new Float32Array(2 * instanceStart.count);\n    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n      _start.fromBufferAttribute(instanceStart, i);\n      _end.fromBufferAttribute(instanceEnd, i);\n      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n    }\n    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n    geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n    geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n    return this;\n  }\n}\nexport { Wireframe };","map":{"version":3,"names":["Vector3","Mesh","InstancedInterleavedBuffer","InterleavedBufferAttribute","LineSegmentsGeometry","LineMaterial","_start","_end","Wireframe","constructor","geometry","arguments","length","undefined","material","color","Math","random","isWireframe","type","computeLineDistances","instanceStart","attributes","instanceEnd","lineDistances","Float32Array","count","i","j","l","fromBufferAttribute","distanceTo","instanceDistanceBuffer","setAttribute"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/lines/Wireframe.js"],"sourcesContent":["import { Vector3, Mesh, InstancedInterleavedBuffer, InterleavedBufferAttribute } from 'three';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\nimport { LineMaterial } from './LineMaterial.js';\n\nconst _start = new Vector3();\n\nconst _end = new Vector3();\n\nclass Wireframe extends Mesh {\n  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({\n    color: Math.random() * 0xffffff\n  })) {\n    super(geometry, material);\n    this.isWireframe = true;\n    this.type = 'Wireframe';\n  } // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n\n\n  computeLineDistances() {\n    const geometry = this.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const lineDistances = new Float32Array(2 * instanceStart.count);\n\n    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n      _start.fromBufferAttribute(instanceStart, i);\n\n      _end.fromBufferAttribute(instanceEnd, i);\n\n      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n    }\n\n    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n    geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n    geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n    return this;\n  }\n\n}\n\nexport { Wireframe };\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,IAAI,EAAEC,0BAA0B,EAAEC,0BAA0B,QAAQ,OAAO;AAC7F,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,SAASC,YAAY,QAAQ,mBAAmB;AAEhD,MAAMC,MAAM,GAAG,IAAIN,OAAO,EAAE;AAE5B,MAAMO,IAAI,GAAG,IAAIP,OAAO,EAAE;AAE1B,MAAMQ,SAAS,SAASP,IAAI,CAAC;EAC3BQ,WAAWA,CAAA,EAEP;IAAA,IAFQC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAIP,oBAAoB,EAAE;IAAA,IAAEU,QAAQ,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAIN,YAAY,CAAC;MAC7EU,KAAK,EAAEC,IAAI,CAACC,MAAM,EAAE,GAAG;IACzB,CAAC,CAAC;IACA,KAAK,CAACP,QAAQ,EAAEI,QAAQ,CAAC;IACzB,IAAI,CAACI,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,IAAI,GAAG,WAAW;EACzB,CAAC,CAAC;;EAGFC,oBAAoBA,CAAA,EAAG;IACrB,MAAMV,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,MAAMW,aAAa,GAAGX,QAAQ,CAACY,UAAU,CAACD,aAAa;IACvD,MAAME,WAAW,GAAGb,QAAQ,CAACY,UAAU,CAACC,WAAW;IACnD,MAAMC,aAAa,GAAG,IAAIC,YAAY,CAAC,CAAC,GAAGJ,aAAa,CAACK,KAAK,CAAC;IAE/D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGR,aAAa,CAACK,KAAK,EAAEC,CAAC,GAAGE,CAAC,EAAEF,CAAC,EAAE,EAAEC,CAAC,IAAI,CAAC,EAAE;MAClEtB,MAAM,CAACwB,mBAAmB,CAACT,aAAa,EAAEM,CAAC,CAAC;MAE5CpB,IAAI,CAACuB,mBAAmB,CAACP,WAAW,EAAEI,CAAC,CAAC;MAExCH,aAAa,CAACI,CAAC,CAAC,GAAGA,CAAC,KAAK,CAAC,GAAG,CAAC,GAAGJ,aAAa,CAACI,CAAC,GAAG,CAAC,CAAC;MACrDJ,aAAa,CAACI,CAAC,GAAG,CAAC,CAAC,GAAGJ,aAAa,CAACI,CAAC,CAAC,GAAGtB,MAAM,CAACyB,UAAU,CAACxB,IAAI,CAAC;IACnE;IAEA,MAAMyB,sBAAsB,GAAG,IAAI9B,0BAA0B,CAACsB,aAAa,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;IAEpFd,QAAQ,CAACuB,YAAY,CAAC,uBAAuB,EAAE,IAAI9B,0BAA0B,CAAC6B,sBAAsB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE9GtB,QAAQ,CAACuB,YAAY,CAAC,qBAAqB,EAAE,IAAI9B,0BAA0B,CAAC6B,sBAAsB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE5G,OAAO,IAAI;EACb;AAEF;AAEA,SAASxB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}