{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GAstVisitor = void 0;\nvar model_1 = require(\"./model\");\nvar GAstVisitor = /** @class */function () {\n  function GAstVisitor() {}\n  GAstVisitor.prototype.visit = function (node) {\n    var nodeAny = node;\n    switch (nodeAny.constructor) {\n      case model_1.NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n      case model_1.Alternative:\n        return this.visitAlternative(nodeAny);\n      case model_1.Option:\n        return this.visitOption(nodeAny);\n      case model_1.RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n      case model_1.RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n      case model_1.RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n      case model_1.Repetition:\n        return this.visitRepetition(nodeAny);\n      case model_1.Alternation:\n        return this.visitAlternation(nodeAny);\n      case model_1.Terminal:\n        return this.visitTerminal(nodeAny);\n      case model_1.Rule:\n        return this.visitRule(nodeAny);\n      /* istanbul ignore next */\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  };\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitNonTerminal = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitAlternative = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitOption = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRepetition = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRepetitionMandatory = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRepetitionWithSeparator = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitAlternation = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitTerminal = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRule = function (node) {};\n  return GAstVisitor;\n}();\nexports.GAstVisitor = GAstVisitor;","map":{"version":3,"names":["model_1","require","GAstVisitor","prototype","visit","node","nodeAny","constructor","NonTerminal","visitNonTerminal","Alternative","visitAlternative","Option","visitOption","RepetitionMandatory","visitRepetitionMandatory","RepetitionMandatoryWithSeparator","visitRepetitionMandatoryWithSeparator","RepetitionWithSeparator","visitRepetitionWithSeparator","Repetition","visitRepetition","Alternation","visitAlternation","Terminal","visitTerminal","Rule","visitRule","Error","exports"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/@chevrotain/gast/src/visitor.ts"],"sourcesContent":["import {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal\n} from \"./model\"\nimport { IProduction } from \"@chevrotain/types\"\n\nexport abstract class GAstVisitor {\n  public visit(node: IProduction): any {\n    const nodeAny: any = node\n    switch (nodeAny.constructor) {\n      case NonTerminal:\n        return this.visitNonTerminal(nodeAny)\n      case Alternative:\n        return this.visitAlternative(nodeAny)\n      case Option:\n        return this.visitOption(nodeAny)\n      case RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny)\n      case RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny)\n      case RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny)\n      case Repetition:\n        return this.visitRepetition(nodeAny)\n      case Alternation:\n        return this.visitAlternation(nodeAny)\n      case Terminal:\n        return this.visitTerminal(nodeAny)\n      case Rule:\n        return this.visitRule(nodeAny)\n      /* istanbul ignore next */\n      default:\n        throw Error(\"non exhaustive match\")\n    }\n  }\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitNonTerminal(node: NonTerminal): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitAlternative(node: Alternative): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitOption(node: Option): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetition(node: Repetition): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetitionMandatory(node: RepetitionMandatory): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator\n  ): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitAlternation(node: Alternation): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitTerminal(node: Terminal): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRule(node: Rule): any {}\n}\n"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AAcA,IAAAC,WAAA;EAAA,SAAAA,YAAA,GA6DA;EA5DSA,WAAA,CAAAC,SAAA,CAAAC,KAAK,GAAZ,UAAaC,IAAiB;IAC5B,IAAMC,OAAO,GAAQD,IAAI;IACzB,QAAQC,OAAO,CAACC,WAAW;MACzB,KAAKP,OAAA,CAAAQ,WAAW;QACd,OAAO,IAAI,CAACC,gBAAgB,CAACH,OAAO,CAAC;MACvC,KAAKN,OAAA,CAAAU,WAAW;QACd,OAAO,IAAI,CAACC,gBAAgB,CAACL,OAAO,CAAC;MACvC,KAAKN,OAAA,CAAAY,MAAM;QACT,OAAO,IAAI,CAACC,WAAW,CAACP,OAAO,CAAC;MAClC,KAAKN,OAAA,CAAAc,mBAAmB;QACtB,OAAO,IAAI,CAACC,wBAAwB,CAACT,OAAO,CAAC;MAC/C,KAAKN,OAAA,CAAAgB,gCAAgC;QACnC,OAAO,IAAI,CAACC,qCAAqC,CAACX,OAAO,CAAC;MAC5D,KAAKN,OAAA,CAAAkB,uBAAuB;QAC1B,OAAO,IAAI,CAACC,4BAA4B,CAACb,OAAO,CAAC;MACnD,KAAKN,OAAA,CAAAoB,UAAU;QACb,OAAO,IAAI,CAACC,eAAe,CAACf,OAAO,CAAC;MACtC,KAAKN,OAAA,CAAAsB,WAAW;QACd,OAAO,IAAI,CAACC,gBAAgB,CAACjB,OAAO,CAAC;MACvC,KAAKN,OAAA,CAAAwB,QAAQ;QACX,OAAO,IAAI,CAACC,aAAa,CAACnB,OAAO,CAAC;MACpC,KAAKN,OAAA,CAAA0B,IAAI;QACP,OAAO,IAAI,CAACC,SAAS,CAACrB,OAAO,CAAC;MAChC;MACA;QACE,MAAMsB,KAAK,CAAC,sBAAsB,CAAC;IAAA;EAEzC,CAAC;EAED;EACO1B,WAAA,CAAAC,SAAA,CAAAM,gBAAgB,GAAvB,UAAwBJ,IAAiB,GAAQ,CAAC;EAElD;EACOH,WAAA,CAAAC,SAAA,CAAAQ,gBAAgB,GAAvB,UAAwBN,IAAiB,GAAQ,CAAC;EAElD;EACOH,WAAA,CAAAC,SAAA,CAAAU,WAAW,GAAlB,UAAmBR,IAAY,GAAQ,CAAC;EAExC;EACOH,WAAA,CAAAC,SAAA,CAAAkB,eAAe,GAAtB,UAAuBhB,IAAgB,GAAQ,CAAC;EAEhD;EACOH,WAAA,CAAAC,SAAA,CAAAY,wBAAwB,GAA/B,UAAgCV,IAAyB,GAAQ,CAAC;EAElE;EACOH,WAAA,CAAAC,SAAA,CAAAc,qCAAqC,GAA5C,UACEZ,IAAsC,GAChC,CAAC;EAET;EACOH,WAAA,CAAAC,SAAA,CAAAgB,4BAA4B,GAAnC,UAAoCd,IAA6B,GAAQ,CAAC;EAE1E;EACOH,WAAA,CAAAC,SAAA,CAAAoB,gBAAgB,GAAvB,UAAwBlB,IAAiB,GAAQ,CAAC;EAElD;EACOH,WAAA,CAAAC,SAAA,CAAAsB,aAAa,GAApB,UAAqBpB,IAAc,GAAQ,CAAC;EAE5C;EACOH,WAAA,CAAAC,SAAA,CAAAwB,SAAS,GAAhB,UAAiBtB,IAAU,GAAQ,CAAC;EACtC,OAAAH,WAAC;AAAD,CAAC,EA7DD;AAAsB2B,OAAA,CAAA3B,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}