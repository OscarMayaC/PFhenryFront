{"ast":null,"code":"import { Box3, Vector3, InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Sphere } from 'three';\nconst _box = new Box3();\nconst _vector = new Vector3();\nclass LineSegmentsGeometry extends InstancedBufferGeometry {\n  constructor() {\n    super();\n    this.isLineSegmentsGeometry = true;\n    this.type = 'LineSegmentsGeometry';\n    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    this.setIndex(index);\n    this.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n  applyMatrix4(matrix) {\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== undefined) {\n      start.applyMatrix4(matrix);\n      end.applyMatrix4(matrix);\n      start.needsUpdate = true;\n    }\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n    return this;\n  }\n  setPositions(array) {\n    let lineSegments;\n    if (array instanceof Float32Array) {\n      lineSegments = array;\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array);\n    }\n    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1); // xyz, xyz\n\n    this.setAttribute('instanceStart', new InterleavedBufferAttribute(instanceBuffer, 3, 0)); // xyz\n\n    this.setAttribute('instanceEnd', new InterleavedBufferAttribute(instanceBuffer, 3, 3)); // xyz\n    //\n\n    this.computeBoundingBox();\n    this.computeBoundingSphere();\n    return this;\n  }\n  setColors(array) {\n    let colors;\n    if (array instanceof Float32Array) {\n      colors = array;\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array);\n    }\n    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1); // rgb, rgb\n\n    this.setAttribute('instanceColorStart', new InterleavedBufferAttribute(instanceColorBuffer, 3, 0)); // rgb\n\n    this.setAttribute('instanceColorEnd', new InterleavedBufferAttribute(instanceColorBuffer, 3, 3)); // rgb\n\n    return this;\n  }\n  fromWireframeGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromEdgesGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromMesh(mesh) {\n    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry)); // set colors, maybe\n\n    return this;\n  }\n  fromLineSegments(lineSegments) {\n    const geometry = lineSegments.geometry;\n    this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n    // set colors, maybe\n\n    return this;\n  }\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== undefined && end !== undefined) {\n      this.boundingBox.setFromBufferAttribute(start);\n      _box.setFromBufferAttribute(end);\n      this.boundingBox.union(_box);\n    }\n  }\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    if (this.boundingBox === null) {\n      this.computeBoundingBox();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== undefined && end !== undefined) {\n      const center = this.boundingSphere.center;\n      this.boundingBox.getCenter(center);\n      let maxRadiusSq = 0;\n      for (let i = 0, il = start.count; i < il; i++) {\n        _vector.fromBufferAttribute(start, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n        _vector.fromBufferAttribute(end, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n      }\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error('THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this);\n      }\n    }\n  }\n  toJSON() {// todo\n  }\n  applyMatrix(matrix) {\n    console.warn('THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().');\n    return this.applyMatrix4(matrix);\n  }\n}\nexport { LineSegmentsGeometry };","map":{"version":3,"names":["Box3","Vector3","InstancedBufferGeometry","Float32BufferAttribute","InstancedInterleavedBuffer","InterleavedBufferAttribute","WireframeGeometry","Sphere","_box","_vector","LineSegmentsGeometry","constructor","isLineSegmentsGeometry","type","positions","uvs","index","setIndex","setAttribute","applyMatrix4","matrix","start","attributes","instanceStart","end","instanceEnd","undefined","needsUpdate","boundingBox","computeBoundingBox","boundingSphere","computeBoundingSphere","setPositions","array","lineSegments","Float32Array","Array","isArray","instanceBuffer","setColors","colors","instanceColorBuffer","fromWireframeGeometry","geometry","position","fromEdgesGeometry","fromMesh","mesh","fromLineSegments","setFromBufferAttribute","union","center","getCenter","maxRadiusSq","i","il","count","fromBufferAttribute","Math","max","distanceToSquared","radius","sqrt","isNaN","console","error","toJSON","applyMatrix","warn"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/lines/LineSegmentsGeometry.js"],"sourcesContent":["import { Box3, Vector3, InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Sphere } from 'three';\n\nconst _box = new Box3();\n\nconst _vector = new Vector3();\n\nclass LineSegmentsGeometry extends InstancedBufferGeometry {\n  constructor() {\n    super();\n    this.isLineSegmentsGeometry = true;\n    this.type = 'LineSegmentsGeometry';\n    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    this.setIndex(index);\n    this.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n\n  applyMatrix4(matrix) {\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n\n    if (start !== undefined) {\n      start.applyMatrix4(matrix);\n      end.applyMatrix4(matrix);\n      start.needsUpdate = true;\n    }\n\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n\n    return this;\n  }\n\n  setPositions(array) {\n    let lineSegments;\n\n    if (array instanceof Float32Array) {\n      lineSegments = array;\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array);\n    }\n\n    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1); // xyz, xyz\n\n    this.setAttribute('instanceStart', new InterleavedBufferAttribute(instanceBuffer, 3, 0)); // xyz\n\n    this.setAttribute('instanceEnd', new InterleavedBufferAttribute(instanceBuffer, 3, 3)); // xyz\n    //\n\n    this.computeBoundingBox();\n    this.computeBoundingSphere();\n    return this;\n  }\n\n  setColors(array) {\n    let colors;\n\n    if (array instanceof Float32Array) {\n      colors = array;\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array);\n    }\n\n    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1); // rgb, rgb\n\n    this.setAttribute('instanceColorStart', new InterleavedBufferAttribute(instanceColorBuffer, 3, 0)); // rgb\n\n    this.setAttribute('instanceColorEnd', new InterleavedBufferAttribute(instanceColorBuffer, 3, 3)); // rgb\n\n    return this;\n  }\n\n  fromWireframeGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n\n  fromEdgesGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n\n  fromMesh(mesh) {\n    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry)); // set colors, maybe\n\n    return this;\n  }\n\n  fromLineSegments(lineSegments) {\n    const geometry = lineSegments.geometry;\n    this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n    // set colors, maybe\n\n    return this;\n  }\n\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n\n    if (start !== undefined && end !== undefined) {\n      this.boundingBox.setFromBufferAttribute(start);\n\n      _box.setFromBufferAttribute(end);\n\n      this.boundingBox.union(_box);\n    }\n  }\n\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n\n    if (this.boundingBox === null) {\n      this.computeBoundingBox();\n    }\n\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n\n    if (start !== undefined && end !== undefined) {\n      const center = this.boundingSphere.center;\n      this.boundingBox.getCenter(center);\n      let maxRadiusSq = 0;\n\n      for (let i = 0, il = start.count; i < il; i++) {\n        _vector.fromBufferAttribute(start, i);\n\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n\n        _vector.fromBufferAttribute(end, i);\n\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n      }\n\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error('THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this);\n      }\n    }\n  }\n\n  toJSON() {// todo\n  }\n\n  applyMatrix(matrix) {\n    console.warn('THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().');\n    return this.applyMatrix4(matrix);\n  }\n\n}\n\nexport { LineSegmentsGeometry };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}