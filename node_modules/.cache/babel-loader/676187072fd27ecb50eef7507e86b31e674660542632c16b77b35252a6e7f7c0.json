{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GastRecorder = void 0;\nvar last_1 = __importDefault(require(\"lodash/last\"));\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\nvar some_1 = __importDefault(require(\"lodash/some\"));\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\nvar isFunction_1 = __importDefault(require(\"lodash/isFunction\"));\nvar has_1 = __importDefault(require(\"lodash/has\"));\nvar gast_1 = require(\"@chevrotain/gast\");\nvar lexer_public_1 = require(\"../../../scan/lexer_public\");\nvar tokens_1 = require(\"../../../scan/tokens\");\nvar tokens_public_1 = require(\"../../../scan/tokens_public\");\nvar parser_1 = require(\"../parser\");\nvar keys_1 = require(\"../../grammar/keys\");\nvar RECORDING_NULL_OBJECT = {\n  description: \"This Object indicates the Parser is during Recording Phase\"\n};\nObject.freeze(RECORDING_NULL_OBJECT);\nvar HANDLE_SEPARATOR = true;\nvar MAX_METHOD_IDX = Math.pow(2, keys_1.BITS_FOR_OCCURRENCE_IDX) - 1;\nvar RFT = (0, tokens_public_1.createToken)({\n  name: \"RECORDING_PHASE_TOKEN\",\n  pattern: lexer_public_1.Lexer.NA\n});\n(0, tokens_1.augmentTokenTypes)([RFT]);\nvar RECORDING_PHASE_TOKEN = (0, tokens_public_1.createTokenInstance)(RFT, \"This IToken indicates the Parser is in Recording Phase\\n\\t\" + \"\" + \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n// Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n// cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n-1, -1, -1, -1, -1, -1);\nObject.freeze(RECORDING_PHASE_TOKEN);\nvar RECORDING_PHASE_CSTNODE = {\n  name: \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" + \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  children: {}\n};\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nvar GastRecorder = /** @class */function () {\n  function GastRecorder() {}\n  GastRecorder.prototype.initGastRecorder = function (config) {\n    this.recordingProdStack = [];\n    this.RECORDING_PHASE = false;\n  };\n  GastRecorder.prototype.enableRecording = function () {\n    var _this = this;\n    this.RECORDING_PHASE = true;\n    this.TRACE_INIT(\"Enable Recording\", function () {\n      var _loop_1 = function (i) {\n        var idx = i > 0 ? i : \"\";\n        _this[\"CONSUME\".concat(idx)] = function (arg1, arg2) {\n          return this.consumeInternalRecord(arg1, i, arg2);\n        };\n        _this[\"SUBRULE\".concat(idx)] = function (arg1, arg2) {\n          return this.subruleInternalRecord(arg1, i, arg2);\n        };\n        _this[\"OPTION\".concat(idx)] = function (arg1) {\n          return this.optionInternalRecord(arg1, i);\n        };\n        _this[\"OR\".concat(idx)] = function (arg1) {\n          return this.orInternalRecord(arg1, i);\n        };\n        _this[\"MANY\".concat(idx)] = function (arg1) {\n          this.manyInternalRecord(i, arg1);\n        };\n        _this[\"MANY_SEP\".concat(idx)] = function (arg1) {\n          this.manySepFirstInternalRecord(i, arg1);\n        };\n        _this[\"AT_LEAST_ONE\".concat(idx)] = function (arg1) {\n          this.atLeastOneInternalRecord(i, arg1);\n        };\n        _this[\"AT_LEAST_ONE_SEP\".concat(idx)] = function (arg1) {\n          this.atLeastOneSepFirstInternalRecord(i, arg1);\n        };\n      };\n      /**\n       * Warning Dark Voodoo Magic upcoming!\n       * We are \"replacing\" the public parsing DSL methods API\n       * With **new** alternative implementations on the Parser **instance**\n       *\n       * So far this is the only way I've found to avoid performance regressions during parsing time.\n       * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n       *   implementations directly instead.\n       */\n      for (var i = 0; i < 10; i++) {\n        _loop_1(i);\n      }\n      // DSL methods with the idx(suffix) as an argument\n      _this[\"consume\"] = function (idx, arg1, arg2) {\n        return this.consumeInternalRecord(arg1, idx, arg2);\n      };\n      _this[\"subrule\"] = function (idx, arg1, arg2) {\n        return this.subruleInternalRecord(arg1, idx, arg2);\n      };\n      _this[\"option\"] = function (idx, arg1) {\n        return this.optionInternalRecord(arg1, idx);\n      };\n      _this[\"or\"] = function (idx, arg1) {\n        return this.orInternalRecord(arg1, idx);\n      };\n      _this[\"many\"] = function (idx, arg1) {\n        this.manyInternalRecord(idx, arg1);\n      };\n      _this[\"atLeastOne\"] = function (idx, arg1) {\n        this.atLeastOneInternalRecord(idx, arg1);\n      };\n      _this.ACTION = _this.ACTION_RECORD;\n      _this.BACKTRACK = _this.BACKTRACK_RECORD;\n      _this.LA = _this.LA_RECORD;\n    });\n  };\n  GastRecorder.prototype.disableRecording = function () {\n    var _this = this;\n    this.RECORDING_PHASE = false;\n    // By deleting these **instance** properties, any future invocation\n    // will be deferred to the original methods on the **prototype** object\n    // This seems to get rid of any incorrect optimizations that V8 may\n    // do during the recording phase.\n    this.TRACE_INIT(\"Deleting Recording methods\", function () {\n      var that = _this;\n      for (var i = 0; i < 10; i++) {\n        var idx = i > 0 ? i : \"\";\n        delete that[\"CONSUME\".concat(idx)];\n        delete that[\"SUBRULE\".concat(idx)];\n        delete that[\"OPTION\".concat(idx)];\n        delete that[\"OR\".concat(idx)];\n        delete that[\"MANY\".concat(idx)];\n        delete that[\"MANY_SEP\".concat(idx)];\n        delete that[\"AT_LEAST_ONE\".concat(idx)];\n        delete that[\"AT_LEAST_ONE_SEP\".concat(idx)];\n      }\n      delete that[\"consume\"];\n      delete that[\"subrule\"];\n      delete that[\"option\"];\n      delete that[\"or\"];\n      delete that[\"many\"];\n      delete that[\"atLeastOne\"];\n      delete that.ACTION;\n      delete that.BACKTRACK;\n      delete that.LA;\n    });\n  };\n  //   Parser methods are called inside an ACTION?\n  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n  // @ts-expect-error -- noop place holder\n  GastRecorder.prototype.ACTION_RECORD = function (impl) {\n    // NO-OP during recording\n  };\n  // Executing backtracking logic will break our recording logic assumptions\n  GastRecorder.prototype.BACKTRACK_RECORD = function (grammarRule, args) {\n    return function () {\n      return true;\n    };\n  };\n  // LA is part of the official API and may be used for custom lookahead logic\n  // by end users who may forget to wrap it in ACTION or inside a GATE\n  GastRecorder.prototype.LA_RECORD = function (howMuch) {\n    // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n    // On LA return EOF at the end of the input so an infinite loop may occur.\n    return parser_1.END_OF_FILE;\n  };\n  GastRecorder.prototype.topLevelRuleRecord = function (name, def) {\n    try {\n      var newTopLevelRule = new gast_1.Rule({\n        definition: [],\n        name: name\n      });\n      newTopLevelRule.name = name;\n      this.recordingProdStack.push(newTopLevelRule);\n      def.call(this);\n      this.recordingProdStack.pop();\n      return newTopLevelRule;\n    } catch (originalError) {\n      if (originalError.KNOWN_RECORDER_ERROR !== true) {\n        try {\n          originalError.message = originalError.message + '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' + \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n        } catch (mutabilityError) {\n          // We may not be able to modify the original error object\n          throw originalError;\n        }\n      }\n      throw originalError;\n    }\n  };\n  // Implementation of parsing DSL\n  GastRecorder.prototype.optionInternalRecord = function (actionORMethodDef, occurrence) {\n    return recordProd.call(this, gast_1.Option, actionORMethodDef, occurrence);\n  };\n  GastRecorder.prototype.atLeastOneInternalRecord = function (occurrence, actionORMethodDef) {\n    recordProd.call(this, gast_1.RepetitionMandatory, actionORMethodDef, occurrence);\n  };\n  GastRecorder.prototype.atLeastOneSepFirstInternalRecord = function (occurrence, options) {\n    recordProd.call(this, gast_1.RepetitionMandatoryWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n  };\n  GastRecorder.prototype.manyInternalRecord = function (occurrence, actionORMethodDef) {\n    recordProd.call(this, gast_1.Repetition, actionORMethodDef, occurrence);\n  };\n  GastRecorder.prototype.manySepFirstInternalRecord = function (occurrence, options) {\n    recordProd.call(this, gast_1.RepetitionWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n  };\n  GastRecorder.prototype.orInternalRecord = function (altsOrOpts, occurrence) {\n    return recordOrProd.call(this, altsOrOpts, occurrence);\n  };\n  GastRecorder.prototype.subruleInternalRecord = function (ruleToCall, occurrence, options) {\n    assertMethodIdxIsValid(occurrence);\n    if (!ruleToCall || (0, has_1.default)(ruleToCall, \"ruleName\") === false) {\n      var error = new Error(\"<SUBRULE\".concat(getIdxSuffix(occurrence), \"> argument is invalid\") + \" expecting a Parser method reference but got: <\".concat(JSON.stringify(ruleToCall), \">\") + \"\\n inside top level rule: <\".concat(this.recordingProdStack[0].name, \">\"));\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n    var prevProd = (0, last_1.default)(this.recordingProdStack);\n    var ruleName = ruleToCall.ruleName;\n    var newNoneTerminal = new gast_1.NonTerminal({\n      idx: occurrence,\n      nonTerminalName: ruleName,\n      label: options === null || options === void 0 ? void 0 : options.LABEL,\n      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n      referencedRule: undefined\n    });\n    prevProd.definition.push(newNoneTerminal);\n    return this.outputCst ? RECORDING_PHASE_CSTNODE : RECORDING_NULL_OBJECT;\n  };\n  GastRecorder.prototype.consumeInternalRecord = function (tokType, occurrence, options) {\n    assertMethodIdxIsValid(occurrence);\n    if (!(0, tokens_1.hasShortKeyProperty)(tokType)) {\n      var error = new Error(\"<CONSUME\".concat(getIdxSuffix(occurrence), \"> argument is invalid\") + \" expecting a TokenType reference but got: <\".concat(JSON.stringify(tokType), \">\") + \"\\n inside top level rule: <\".concat(this.recordingProdStack[0].name, \">\"));\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n    var prevProd = (0, last_1.default)(this.recordingProdStack);\n    var newNoneTerminal = new gast_1.Terminal({\n      idx: occurrence,\n      terminalType: tokType,\n      label: options === null || options === void 0 ? void 0 : options.LABEL\n    });\n    prevProd.definition.push(newNoneTerminal);\n    return RECORDING_PHASE_TOKEN;\n  };\n  return GastRecorder;\n}();\nexports.GastRecorder = GastRecorder;\nfunction recordProd(prodConstructor, mainProdArg, occurrence, handleSep) {\n  if (handleSep === void 0) {\n    handleSep = false;\n  }\n  assertMethodIdxIsValid(occurrence);\n  var prevProd = (0, last_1.default)(this.recordingProdStack);\n  var grammarAction = (0, isFunction_1.default)(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n  var newProd = new prodConstructor({\n    definition: [],\n    idx: occurrence\n  });\n  if (handleSep) {\n    newProd.separator = mainProdArg.SEP;\n  }\n  if ((0, has_1.default)(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n  this.recordingProdStack.push(newProd);\n  grammarAction.call(this);\n  prevProd.definition.push(newProd);\n  this.recordingProdStack.pop();\n  return RECORDING_NULL_OBJECT;\n}\nfunction recordOrProd(mainProdArg, occurrence) {\n  var _this = this;\n  assertMethodIdxIsValid(occurrence);\n  var prevProd = (0, last_1.default)(this.recordingProdStack);\n  // Only an array of alternatives\n  var hasOptions = (0, isArray_1.default)(mainProdArg) === false;\n  var alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;\n  var newOrProd = new gast_1.Alternation({\n    definition: [],\n    idx: occurrence,\n    ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true\n  });\n  if ((0, has_1.default)(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n  var hasPredicates = (0, some_1.default)(alts, function (currAlt) {\n    return (0, isFunction_1.default)(currAlt.GATE);\n  });\n  newOrProd.hasPredicates = hasPredicates;\n  prevProd.definition.push(newOrProd);\n  (0, forEach_1.default)(alts, function (currAlt) {\n    var currAltFlat = new gast_1.Alternative({\n      definition: []\n    });\n    newOrProd.definition.push(currAltFlat);\n    if ((0, has_1.default)(currAlt, \"IGNORE_AMBIGUITIES\")) {\n      currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES; // assumes end user provides the correct config value/type\n    }\n    // **implicit** ignoreAmbiguities due to usage of gate\n    else if ((0, has_1.default)(currAlt, \"GATE\")) {\n      currAltFlat.ignoreAmbiguities = true;\n    }\n    _this.recordingProdStack.push(currAltFlat);\n    currAlt.ALT.call(_this);\n    _this.recordingProdStack.pop();\n  });\n  return RECORDING_NULL_OBJECT;\n}\nfunction getIdxSuffix(idx) {\n  return idx === 0 ? \"\" : \"\".concat(idx);\n}\nfunction assertMethodIdxIsValid(idx) {\n  if (idx < 0 || idx > MAX_METHOD_IDX) {\n    var error = new Error(\n    // The stack trace will contain all the needed details\n    \"Invalid DSL Method idx value: <\".concat(idx, \">\\n\\t\") + \"Idx value must be a none negative value smaller than \".concat(MAX_METHOD_IDX + 1));\n    error.KNOWN_RECORDER_ERROR = true;\n    throw error;\n  }\n}","map":{"version":3,"names":["last_1","__importDefault","require","isArray_1","some_1","forEach_1","isFunction_1","has_1","gast_1","lexer_public_1","tokens_1","tokens_public_1","parser_1","keys_1","RECORDING_NULL_OBJECT","description","Object","freeze","HANDLE_SEPARATOR","MAX_METHOD_IDX","Math","pow","BITS_FOR_OCCURRENCE_IDX","RFT","createToken","name","pattern","Lexer","NA","augmentTokenTypes","RECORDING_PHASE_TOKEN","createTokenInstance","RECORDING_PHASE_CSTNODE","children","GastRecorder","prototype","initGastRecorder","config","recordingProdStack","RECORDING_PHASE","enableRecording","_this","TRACE_INIT","i","idx","concat","arg1","arg2","consumeInternalRecord","subruleInternalRecord","optionInternalRecord","orInternalRecord","manyInternalRecord","manySepFirstInternalRecord","atLeastOneInternalRecord","atLeastOneSepFirstInternalRecord","ACTION","ACTION_RECORD","BACKTRACK","BACKTRACK_RECORD","LA","LA_RECORD","disableRecording","that","impl","grammarRule","args","howMuch","END_OF_FILE","topLevelRuleRecord","def","newTopLevelRule","Rule","definition","push","call","pop","originalError","KNOWN_RECORDER_ERROR","message","mutabilityError","actionORMethodDef","occurrence","recordProd","Option","RepetitionMandatory","options","RepetitionMandatoryWithSeparator","Repetition","RepetitionWithSeparator","altsOrOpts","recordOrProd","ruleToCall","assertMethodIdxIsValid","default","error","Error","getIdxSuffix","JSON","stringify","prevProd","ruleName","newNoneTerminal","NonTerminal","nonTerminalName","label","LABEL","referencedRule","undefined","outputCst","tokType","hasShortKeyProperty","Terminal","terminalType","exports","prodConstructor","mainProdArg","handleSep","grammarAction","DEF","newProd","separator","SEP","maxLookahead","MAX_LOOKAHEAD","hasOptions","alts","newOrProd","Alternation","ignoreAmbiguities","IGNORE_AMBIGUITIES","hasPredicates","currAlt","GATE","currAltFlat","Alternative","ALT"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/chevrotain/src/parse/parser/traits/gast_recorder.ts"],"sourcesContent":["import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  CstNode,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IProduction,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType\n} from \"@chevrotain/types\"\nimport peek from \"lodash/last\"\nimport isArray from \"lodash/isArray\"\nimport some from \"lodash/some\"\nimport forEach from \"lodash/forEach\"\nimport isFunction from \"lodash/isFunction\"\nimport has from \"lodash/has\"\nimport { MixedInParser } from \"./parser_traits\"\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal\n} from \"@chevrotain/gast\"\nimport { Lexer } from \"../../../scan/lexer_public\"\nimport { augmentTokenTypes, hasShortKeyProperty } from \"../../../scan/tokens\"\nimport { createToken, createTokenInstance } from \"../../../scan/tokens_public\"\nimport { END_OF_FILE } from \"../parser\"\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys\"\nimport { ParserMethodInternal } from \"../types\"\n\ntype ProdWithDef = IProduction & { definition?: IProduction[] }\nconst RECORDING_NULL_OBJECT = {\n  description: \"This Object indicates the Parser is during Recording Phase\"\n}\nObject.freeze(RECORDING_NULL_OBJECT)\n\nconst HANDLE_SEPARATOR = true\nconst MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1\n\nconst RFT = createToken({ name: \"RECORDING_PHASE_TOKEN\", pattern: Lexer.NA })\naugmentTokenTypes([RFT])\nconst RECORDING_PHASE_TOKEN = createTokenInstance(\n  RFT,\n  \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n)\nObject.freeze(RECORDING_PHASE_TOKEN)\n\nconst RECORDING_PHASE_CSTNODE: CstNode = {\n  name:\n    \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  children: {}\n}\n\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nexport class GastRecorder {\n  recordingProdStack: ProdWithDef[]\n  RECORDING_PHASE: boolean\n\n  initGastRecorder(this: MixedInParser, config: IParserConfig): void {\n    this.recordingProdStack = []\n    this.RECORDING_PHASE = false\n  }\n\n  enableRecording(this: MixedInParser): void {\n    this.RECORDING_PHASE = true\n\n    this.TRACE_INIT(\"Enable Recording\", () => {\n      /**\n       * Warning Dark Voodoo Magic upcoming!\n       * We are \"replacing\" the public parsing DSL methods API\n       * With **new** alternative implementations on the Parser **instance**\n       *\n       * So far this is the only way I've found to avoid performance regressions during parsing time.\n       * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n       *   implementations directly instead.\n       */\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\"\n        this[`CONSUME${idx}` as \"CONSUME\"] = function (arg1, arg2) {\n          return this.consumeInternalRecord(arg1, i, arg2)\n        }\n        this[`SUBRULE${idx}` as \"SUBRULE\"] = function (arg1, arg2) {\n          return this.subruleInternalRecord(arg1, i, arg2) as any\n        }\n        this[`OPTION${idx}` as \"OPTION\"] = function (arg1) {\n          return this.optionInternalRecord(arg1, i)\n        }\n        this[`OR${idx}` as \"OR\"] = function (arg1) {\n          return this.orInternalRecord(arg1, i)\n        }\n        this[`MANY${idx}` as \"MANY\"] = function (arg1) {\n          this.manyInternalRecord(i, arg1)\n        }\n        this[`MANY_SEP${idx}` as \"MANY_SEP\"] = function (arg1) {\n          this.manySepFirstInternalRecord(i, arg1)\n        }\n        this[`AT_LEAST_ONE${idx}` as \"AT_LEAST_ONE\"] = function (arg1) {\n          this.atLeastOneInternalRecord(i, arg1)\n        }\n        this[`AT_LEAST_ONE_SEP${idx}` as \"AT_LEAST_ONE_SEP\"] = function (arg1) {\n          this.atLeastOneSepFirstInternalRecord(i, arg1)\n        }\n      }\n\n      // DSL methods with the idx(suffix) as an argument\n      this[`consume`] = function (idx, arg1, arg2) {\n        return this.consumeInternalRecord(arg1, idx, arg2)\n      }\n      this[`subrule`] = function (idx, arg1, arg2) {\n        return this.subruleInternalRecord(arg1, idx, arg2) as any\n      }\n      this[`option`] = function (idx, arg1) {\n        return this.optionInternalRecord(arg1, idx)\n      }\n      this[`or`] = function (idx, arg1) {\n        return this.orInternalRecord(arg1, idx)\n      }\n      this[`many`] = function (idx, arg1) {\n        this.manyInternalRecord(idx, arg1)\n      }\n      this[`atLeastOne`] = function (idx, arg1) {\n        this.atLeastOneInternalRecord(idx, arg1)\n      }\n\n      this.ACTION = this.ACTION_RECORD\n      this.BACKTRACK = this.BACKTRACK_RECORD\n      this.LA = this.LA_RECORD\n    })\n  }\n\n  disableRecording(this: MixedInParser) {\n    this.RECORDING_PHASE = false\n    // By deleting these **instance** properties, any future invocation\n    // will be deferred to the original methods on the **prototype** object\n    // This seems to get rid of any incorrect optimizations that V8 may\n    // do during the recording phase.\n    this.TRACE_INIT(\"Deleting Recording methods\", () => {\n      const that: any = this\n\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\"\n        delete that[`CONSUME${idx}`]\n        delete that[`SUBRULE${idx}`]\n        delete that[`OPTION${idx}`]\n        delete that[`OR${idx}`]\n        delete that[`MANY${idx}`]\n        delete that[`MANY_SEP${idx}`]\n        delete that[`AT_LEAST_ONE${idx}`]\n        delete that[`AT_LEAST_ONE_SEP${idx}`]\n      }\n\n      delete that[`consume`]\n      delete that[`subrule`]\n      delete that[`option`]\n      delete that[`or`]\n      delete that[`many`]\n      delete that[`atLeastOne`]\n\n      delete that.ACTION\n      delete that.BACKTRACK\n      delete that.LA\n    })\n  }\n\n  //   Parser methods are called inside an ACTION?\n  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n  // @ts-expect-error -- noop place holder\n  ACTION_RECORD<T>(this: MixedInParser, impl: () => T): T {\n    // NO-OP during recording\n  }\n\n  // Executing backtracking logic will break our recording logic assumptions\n  BACKTRACK_RECORD<T>(\n    grammarRule: (...args: any[]) => T,\n    args?: any[]\n  ): () => boolean {\n    return () => true\n  }\n\n  // LA is part of the official API and may be used for custom lookahead logic\n  // by end users who may forget to wrap it in ACTION or inside a GATE\n  LA_RECORD(howMuch: number): IToken {\n    // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n    // On LA return EOF at the end of the input so an infinite loop may occur.\n    return END_OF_FILE\n  }\n\n  topLevelRuleRecord(name: string, def: Function): Rule {\n    try {\n      const newTopLevelRule = new Rule({ definition: [], name: name })\n      newTopLevelRule.name = name\n      this.recordingProdStack.push(newTopLevelRule)\n      def.call(this)\n      this.recordingProdStack.pop()\n      return newTopLevelRule\n    } catch (originalError) {\n      if (originalError.KNOWN_RECORDER_ERROR !== true) {\n        try {\n          originalError.message =\n            originalError.message +\n            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\"\n        } catch (mutabilityError) {\n          // We may not be able to modify the original error object\n          throw originalError\n        }\n      }\n      throw originalError\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternalRecord<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number\n  ): OUT {\n    return recordProd.call(this, Option, actionORMethodDef, occurrence)\n  }\n\n  atLeastOneInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>\n  ): void {\n    recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence)\n  }\n\n  atLeastOneSepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionMandatoryWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR\n    )\n  }\n\n  manyInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>\n  ): void {\n    recordProd.call(this, Repetition, actionORMethodDef, occurrence)\n  }\n\n  manySepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: ManySepMethodOpts<OUT>\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR\n    )\n  }\n\n  orInternalRecord<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number\n  ): T {\n    return recordOrProd.call(this, altsOrOpts, occurrence)\n  }\n\n  subruleInternalRecord<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    occurrence: number,\n    options?: SubruleMethodOpts<ARGS>\n  ): R | CstNode {\n    assertMethodIdxIsValid(occurrence)\n    if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n      const error: any = new Error(\n        `<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a Parser method reference but got: <${JSON.stringify(\n            ruleToCall\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`\n      )\n      error.KNOWN_RECORDER_ERROR = true\n      throw error\n    }\n\n    const prevProd: any = peek(this.recordingProdStack)\n    const ruleName = ruleToCall.ruleName\n    const newNoneTerminal = new NonTerminal({\n      idx: occurrence,\n      nonTerminalName: ruleName,\n      label: options?.LABEL,\n      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n      referencedRule: undefined\n    })\n    prevProd.definition.push(newNoneTerminal)\n\n    return this.outputCst ? RECORDING_PHASE_CSTNODE : <any>RECORDING_NULL_OBJECT\n  }\n\n  consumeInternalRecord(\n    this: MixedInParser,\n    tokType: TokenType,\n    occurrence: number,\n    options?: ConsumeMethodOpts\n  ): IToken {\n    assertMethodIdxIsValid(occurrence)\n    if (!hasShortKeyProperty(tokType)) {\n      const error: any = new Error(\n        `<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a TokenType reference but got: <${JSON.stringify(\n            tokType\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`\n      )\n      error.KNOWN_RECORDER_ERROR = true\n      throw error\n    }\n    const prevProd: any = peek(this.recordingProdStack)\n    const newNoneTerminal = new Terminal({\n      idx: occurrence,\n      terminalType: tokType,\n      label: options?.LABEL\n    })\n    prevProd.definition.push(newNoneTerminal)\n\n    return RECORDING_PHASE_TOKEN\n  }\n}\n\nfunction recordProd(\n  prodConstructor: any,\n  mainProdArg: any,\n  occurrence: number,\n  handleSep: boolean = false\n): any {\n  assertMethodIdxIsValid(occurrence)\n  const prevProd: any = peek(this.recordingProdStack)\n  const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF\n\n  const newProd = new prodConstructor({ definition: [], idx: occurrence })\n  if (handleSep) {\n    newProd.separator = mainProdArg.SEP\n  }\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD\n  }\n\n  this.recordingProdStack.push(newProd)\n  grammarAction.call(this)\n  prevProd.definition.push(newProd)\n  this.recordingProdStack.pop()\n\n  return RECORDING_NULL_OBJECT\n}\n\nfunction recordOrProd(mainProdArg: any, occurrence: number): any {\n  assertMethodIdxIsValid(occurrence)\n  const prevProd: any = peek(this.recordingProdStack)\n  // Only an array of alternatives\n  const hasOptions = isArray(mainProdArg) === false\n  const alts: IOrAlt<unknown>[] =\n    hasOptions === false ? mainProdArg : mainProdArg.DEF\n\n  const newOrProd = new Alternation({\n    definition: [],\n    idx: occurrence,\n    ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true\n  })\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD\n  }\n\n  const hasPredicates = some(alts, (currAlt: any) => isFunction(currAlt.GATE))\n  newOrProd.hasPredicates = hasPredicates\n\n  prevProd.definition.push(newOrProd)\n\n  forEach(alts, (currAlt) => {\n    const currAltFlat = new Alternative({ definition: [] })\n    newOrProd.definition.push(currAltFlat)\n    if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n      currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES as boolean // assumes end user provides the correct config value/type\n    }\n    // **implicit** ignoreAmbiguities due to usage of gate\n    else if (has(currAlt, \"GATE\")) {\n      currAltFlat.ignoreAmbiguities = true\n    }\n    this.recordingProdStack.push(currAltFlat)\n    currAlt.ALT.call(this)\n    this.recordingProdStack.pop()\n  })\n  return RECORDING_NULL_OBJECT\n}\n\nfunction getIdxSuffix(idx: number): string {\n  return idx === 0 ? \"\" : `${idx}`\n}\n\nfunction assertMethodIdxIsValid(idx: number): void {\n  if (idx < 0 || idx > MAX_METHOD_IDX) {\n    const error: any = new Error(\n      // The stack trace will contain all the needed details\n      `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n        `Idx value must be a none negative value smaller than ${\n          MAX_METHOD_IDX + 1\n        }`\n    )\n    error.KNOWN_RECORDER_ERROR = true\n    throw error\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}