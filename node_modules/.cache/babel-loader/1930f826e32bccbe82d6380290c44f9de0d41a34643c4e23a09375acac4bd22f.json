{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateMissingCstMethods = exports.validateVisitor = exports.CstVisitorDefinitionError = exports.createBaseVisitorConstructorWithDefaults = exports.createBaseSemanticVisitorConstructor = exports.defaultVisit = void 0;\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\nvar compact_1 = __importDefault(require(\"lodash/compact\"));\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\nvar map_1 = __importDefault(require(\"lodash/map\"));\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\nvar filter_1 = __importDefault(require(\"lodash/filter\"));\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\nvar isFunction_1 = __importDefault(require(\"lodash/isFunction\"));\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\nvar lang_extensions_1 = require(\"../../lang/lang_extensions\");\nfunction defaultVisit(ctx, param) {\n  var childrenNames = (0, keys_1.default)(ctx);\n  var childrenNamesLength = childrenNames.length;\n  for (var i = 0; i < childrenNamesLength; i++) {\n    var currChildName = childrenNames[i];\n    var currChildArray = ctx[currChildName];\n    var currChildArrayLength = currChildArray.length;\n    for (var j = 0; j < currChildArrayLength; j++) {\n      var currChild = currChildArray[j];\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n}\n\nexports.defaultVisit = defaultVisit;\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n  var derivedConstructor = function () {};\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemantics\");\n  var semanticProto = {\n    visit: function (cstNode, param) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if ((0, isArray_1.default)(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      }\n      // enables passing optional CstNodes concisely.\n      if ((0, isUndefined_1.default)(cstNode)) {\n        return undefined;\n      }\n      return this[cstNode.name](cstNode.children, param);\n    },\n    validateVisitor: function () {\n      var semanticDefinitionErrors = validateVisitor(this, ruleNames);\n      if (!(0, isEmpty_1.default)(semanticDefinitionErrors)) {\n        var errorMessages = (0, map_1.default)(semanticDefinitionErrors, function (currDefError) {\n          return currDefError.msg;\n        });\n        throw Error(\"Errors Detected in CST Visitor <\".concat(this.constructor.name, \">:\\n\\t\") + \"\".concat(errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n      }\n    }\n  };\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  derivedConstructor._RULE_NAMES = ruleNames;\n  return derivedConstructor;\n}\nexports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n  var derivedConstructor = function () {};\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n  var withDefaultsProto = Object.create(baseConstructor.prototype);\n  (0, forEach_1.default)(ruleNames, function (ruleName) {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  return derivedConstructor;\n}\nexports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;\nvar CstVisitorDefinitionError;\n(function (CstVisitorDefinitionError) {\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));\nfunction validateVisitor(visitorInstance, ruleNames) {\n  var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n  return missingErrors;\n}\nexports.validateVisitor = validateVisitor;\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\n  var missingRuleNames = (0, filter_1.default)(ruleNames, function (currRuleName) {\n    return (0, isFunction_1.default)(visitorInstance[currRuleName]) === false;\n  });\n  var errors = (0, map_1.default)(missingRuleNames, function (currRuleName) {\n    return {\n      msg: \"Missing visitor method: <\".concat(currRuleName, \"> on \").concat(visitorInstance.constructor.name, \" CST Visitor.\"),\n      type: CstVisitorDefinitionError.MISSING_METHOD,\n      methodName: currRuleName\n    };\n  });\n  return (0, compact_1.default)(errors);\n}\nexports.validateMissingCstMethods = validateMissingCstMethods;","map":{"version":3,"names":["isEmpty_1","__importDefault","require","compact_1","isArray_1","map_1","forEach_1","filter_1","keys_1","isFunction_1","isUndefined_1","lang_extensions_1","defaultVisit","ctx","param","childrenNames","default","childrenNamesLength","length","i","currChildName","currChildArray","currChildArrayLength","j","currChild","tokenTypeIdx","undefined","name","children","exports","createBaseSemanticVisitorConstructor","grammarName","ruleNames","derivedConstructor","defineNameProp","semanticProto","visit","cstNode","validateVisitor","semanticDefinitionErrors","errorMessages","currDefError","msg","Error","concat","constructor","join","replace","prototype","_RULE_NAMES","createBaseVisitorConstructorWithDefaults","baseConstructor","withDefaultsProto","Object","create","ruleName","CstVisitorDefinitionError","visitorInstance","missingErrors","validateMissingCstMethods","missingRuleNames","currRuleName","errors","type","MISSING_METHOD","methodName"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/chevrotain/src/parse/cst/cst_visitor.ts"],"sourcesContent":["import isEmpty from \"lodash/isEmpty\"\nimport compact from \"lodash/compact\"\nimport isArray from \"lodash/isArray\"\nimport map from \"lodash/map\"\nimport forEach from \"lodash/forEach\"\nimport filter from \"lodash/filter\"\nimport keys from \"lodash/keys\"\nimport isFunction from \"lodash/isFunction\"\nimport isUndefined from \"lodash/isUndefined\"\nimport { defineNameProp } from \"../../lang/lang_extensions\"\nimport { CstNode, ICstVisitor } from \"@chevrotain/types\"\n\nexport function defaultVisit<IN>(ctx: any, param: IN): void {\n  const childrenNames = keys(ctx)\n  const childrenNamesLength = childrenNames.length\n  for (let i = 0; i < childrenNamesLength; i++) {\n    const currChildName = childrenNames[i]\n    const currChildArray = ctx[currChildName]\n    const currChildArrayLength = currChildArray.length\n    for (let j = 0; j < currChildArrayLength; j++) {\n      const currChild: any = currChildArray[j]\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param)\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n}\n\nexport function createBaseSemanticVisitorConstructor(\n  grammarName: string,\n  ruleNames: string[]\n): {\n  new (...args: any[]): ICstVisitor<any, any>\n} {\n  const derivedConstructor: any = function () {}\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\")\n\n  const semanticProto = {\n    visit: function (cstNode: CstNode | CstNode[], param: any) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0]\n      }\n\n      // enables passing optional CstNodes concisely.\n      if (isUndefined(cstNode)) {\n        return undefined\n      }\n\n      return this[cstNode.name](cstNode.children, param)\n    },\n\n    validateVisitor: function () {\n      const semanticDefinitionErrors = validateVisitor(this, ruleNames)\n      if (!isEmpty(semanticDefinitionErrors)) {\n        const errorMessages = map(\n          semanticDefinitionErrors,\n          (currDefError) => currDefError.msg\n        )\n        throw Error(\n          `Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n            `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`\n        )\n      }\n    }\n  }\n\n  derivedConstructor.prototype = semanticProto\n  derivedConstructor.prototype.constructor = derivedConstructor\n\n  derivedConstructor._RULE_NAMES = ruleNames\n\n  return derivedConstructor\n}\n\nexport function createBaseVisitorConstructorWithDefaults(\n  grammarName: string,\n  ruleNames: string[],\n  baseConstructor: Function\n): {\n  new (...args: any[]): ICstVisitor<any, any>\n} {\n  const derivedConstructor: any = function () {}\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\")\n\n  const withDefaultsProto = Object.create(baseConstructor.prototype)\n  forEach(ruleNames, (ruleName) => {\n    withDefaultsProto[ruleName] = defaultVisit\n  })\n\n  derivedConstructor.prototype = withDefaultsProto\n  derivedConstructor.prototype.constructor = derivedConstructor\n\n  return derivedConstructor\n}\n\nexport enum CstVisitorDefinitionError {\n  REDUNDANT_METHOD,\n  MISSING_METHOD\n}\n\nexport interface IVisitorDefinitionError {\n  msg: string\n  type: CstVisitorDefinitionError\n  methodName: string\n}\n\nexport function validateVisitor(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[]\n): IVisitorDefinitionError[] {\n  const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames)\n\n  return missingErrors\n}\n\nexport function validateMissingCstMethods(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[]\n): IVisitorDefinitionError[] {\n  const missingRuleNames = filter(ruleNames, (currRuleName) => {\n    return isFunction((visitorInstance as any)[currRuleName]) === false\n  })\n\n  const errors: IVisitorDefinitionError[] = map(\n    missingRuleNames,\n    (currRuleName) => {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${<any>(\n          visitorInstance.constructor.name\n        )} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName\n      }\n    }\n  )\n\n  return compact<IVisitorDefinitionError>(errors)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}