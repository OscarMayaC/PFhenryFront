{"ast":null,"code":"import { Loader, FileLoader, Vector3, Matrix4 } from 'three';\nimport { gunzipSync } from 'fflate';\nimport { Volume } from '../misc/Volume.js';\nclass NRRDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(data) {\n    // this parser is largely inspired from the XTK NRRD parser : https://github.com/xtk/X\n    let _data = data;\n    let _dataPointer = 0;\n    const _nativeLittleEndian = new Int8Array(new Int16Array([1]).buffer)[0] > 0;\n    const _littleEndian = true;\n    const headerObject = {};\n    function scan(type, chunks) {\n      if (chunks === undefined || chunks === null) {\n        chunks = 1;\n      }\n      let _chunkSize = 1;\n      let _array_type = Uint8Array;\n      switch (type) {\n        // 1 byte data types\n        case 'uchar':\n          break;\n        case 'schar':\n          _array_type = Int8Array;\n          break;\n        // 2 byte data types\n\n        case 'ushort':\n          _array_type = Uint16Array;\n          _chunkSize = 2;\n          break;\n        case 'sshort':\n          _array_type = Int16Array;\n          _chunkSize = 2;\n          break;\n        // 4 byte data types\n\n        case 'uint':\n          _array_type = Uint32Array;\n          _chunkSize = 4;\n          break;\n        case 'sint':\n          _array_type = Int32Array;\n          _chunkSize = 4;\n          break;\n        case 'float':\n          _array_type = Float32Array;\n          _chunkSize = 4;\n          break;\n        case 'complex':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n        case 'double':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n      } // increase the data pointer in-place\n\n      let _bytes = new _array_type(_data.slice(_dataPointer, _dataPointer += chunks * _chunkSize)); // if required, flip the endianness of the bytes\n\n      if (_nativeLittleEndian != _littleEndian) {\n        // we need to flip here since the format doesn't match the native endianness\n        _bytes = flipEndianness(_bytes, _chunkSize);\n      }\n      if (chunks == 1) {\n        // if only one chunk was requested, just return one value\n        return _bytes[0];\n      } // return the byte array\n\n      return _bytes;\n    } //Flips typed array endianness in-place. Based on https://github.com/kig/DataStream.js/blob/master/DataStream.js.\n\n    function flipEndianness(array, chunkSize) {\n      const u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n      for (let i = 0; i < array.byteLength; i += chunkSize) {\n        for (let j = i + chunkSize - 1, k = i; j > k; j--, k++) {\n          const tmp = u8[k];\n          u8[k] = u8[j];\n          u8[j] = tmp;\n        }\n      }\n      return array;\n    } //parse the header\n\n    function parseHeader(header) {\n      let data, field, fn, i, l, m, _i, _len;\n      const lines = header.split(/\\r?\\n/);\n      for (_i = 0, _len = lines.length; _i < _len; _i++) {\n        l = lines[_i];\n        if (l.match(/NRRD\\d+/)) {\n          headerObject.isNrrd = true;\n        } else if (l.match(/^#/)) ;else if (m = l.match(/(.*):(.*)/)) {\n          field = m[1].trim();\n          data = m[2].trim();\n          fn = _fieldFunctions[field];\n          if (fn) {\n            fn.call(headerObject, data);\n          } else {\n            headerObject[field] = data;\n          }\n        }\n      }\n      if (!headerObject.isNrrd) {\n        throw new Error('Not an NRRD file');\n      }\n      if (headerObject.encoding === 'bz2' || headerObject.encoding === 'bzip2') {\n        throw new Error('Bzip is not supported');\n      }\n      if (!headerObject.vectors) {\n        //if no space direction is set, let's use the identity\n        headerObject.vectors = [new Vector3(1, 0, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1)]; //apply spacing if defined\n\n        if (headerObject.spacings) {\n          for (i = 0; i <= 2; i++) {\n            if (!isNaN(headerObject.spacings[i])) {\n              headerObject.vectors[i].multiplyScalar(headerObject.spacings[i]);\n            }\n          }\n        }\n      }\n    } //parse the data when registred as one of this type : 'text', 'ascii', 'txt'\n\n    function parseDataAsText(data, start, end) {\n      let number = '';\n      start = start || 0;\n      end = end || data.length;\n      let value; //length of the result is the product of the sizes\n\n      const lengthOfTheResult = headerObject.sizes.reduce(function (previous, current) {\n        return previous * current;\n      }, 1);\n      let base = 10;\n      if (headerObject.encoding === 'hex') {\n        base = 16;\n      }\n      const result = new headerObject.__array(lengthOfTheResult);\n      let resultIndex = 0;\n      let parsingFunction = parseInt;\n      if (headerObject.__array === Float32Array || headerObject.__array === Float64Array) {\n        parsingFunction = parseFloat;\n      }\n      for (let i = start; i < end; i++) {\n        value = data[i]; //if value is not a space\n\n        if ((value < 9 || value > 13) && value !== 32) {\n          number += String.fromCharCode(value);\n        } else {\n          if (number !== '') {\n            result[resultIndex] = parsingFunction(number, base);\n            resultIndex++;\n          }\n          number = '';\n        }\n      }\n      if (number !== '') {\n        result[resultIndex] = parsingFunction(number, base);\n        resultIndex++;\n      }\n      return result;\n    }\n    const _bytes = scan('uchar', data.byteLength);\n    const _length = _bytes.length;\n    let _header = null;\n    let _data_start = 0;\n    let i;\n    for (i = 1; i < _length; i++) {\n      if (_bytes[i - 1] == 10 && _bytes[i] == 10) {\n        // we found two line breaks in a row\n        // now we know what the header is\n        _header = this.parseChars(_bytes, 0, i - 2); // this is were the data starts\n\n        _data_start = i + 1;\n        break;\n      }\n    } // parse the header\n\n    parseHeader(_header);\n    _data = _bytes.subarray(_data_start); // the data without header\n\n    if (headerObject.encoding.substring(0, 2) === 'gz') {\n      // we need to decompress the datastream\n      // here we start the unzipping and get a typed Uint8Array back\n      _data = gunzipSync(new Uint8Array(_data)); // eslint-disable-line no-undef\n    } else if (headerObject.encoding === 'ascii' || headerObject.encoding === 'text' || headerObject.encoding === 'txt' || headerObject.encoding === 'hex') {\n      _data = parseDataAsText(_data);\n    } else if (headerObject.encoding === 'raw') {\n      //we need to copy the array to create a new array buffer, else we retrieve the original arraybuffer with the header\n      const _copy = new Uint8Array(_data.length);\n      for (let i = 0; i < _data.length; i++) {\n        _copy[i] = _data[i];\n      }\n      _data = _copy;\n    } // .. let's use the underlying array buffer\n\n    _data = _data.buffer;\n    const volume = new Volume();\n    volume.header = headerObject; //\n    // parse the (unzipped) data to a datastream of the correct type\n    //\n\n    volume.data = new headerObject.__array(_data); // get the min and max intensities\n\n    const min_max = volume.computeMinMax();\n    const min = min_max[0];\n    const max = min_max[1]; // attach the scalar range to the volume\n\n    volume.windowLow = min;\n    volume.windowHigh = max; // get the image dimensions\n\n    volume.dimensions = [headerObject.sizes[0], headerObject.sizes[1], headerObject.sizes[2]];\n    volume.xLength = volume.dimensions[0];\n    volume.yLength = volume.dimensions[1];\n    volume.zLength = volume.dimensions[2]; // spacing\n\n    const spacingX = new Vector3(headerObject.vectors[0][0], headerObject.vectors[0][1], headerObject.vectors[0][2]).length();\n    const spacingY = new Vector3(headerObject.vectors[1][0], headerObject.vectors[1][1], headerObject.vectors[1][2]).length();\n    const spacingZ = new Vector3(headerObject.vectors[2][0], headerObject.vectors[2][1], headerObject.vectors[2][2]).length();\n    volume.spacing = [spacingX, spacingY, spacingZ]; // Create IJKtoRAS matrix\n\n    volume.matrix = new Matrix4();\n    let _spaceX = 1;\n    let _spaceY = 1;\n    const _spaceZ = 1;\n    if (headerObject.space == 'left-posterior-superior') {\n      _spaceX = -1;\n      _spaceY = -1;\n    } else if (headerObject.space === 'left-anterior-superior') {\n      _spaceX = -1;\n    }\n    if (!headerObject.vectors) {\n      volume.matrix.set(_spaceX, 0, 0, 0, 0, _spaceY, 0, 0, 0, 0, _spaceZ, 0, 0, 0, 0, 1);\n    } else {\n      const v = headerObject.vectors;\n      volume.matrix.set(_spaceX * v[0][0], _spaceX * v[1][0], _spaceX * v[2][0], 0, _spaceY * v[0][1], _spaceY * v[1][1], _spaceY * v[2][1], 0, _spaceZ * v[0][2], _spaceZ * v[1][2], _spaceZ * v[2][2], 0, 0, 0, 0, 1);\n    }\n    volume.inverseMatrix = new Matrix4();\n    volume.inverseMatrix.copy(volume.matrix).invert();\n    volume.RASDimensions = new Vector3(volume.xLength, volume.yLength, volume.zLength).applyMatrix4(volume.matrix).round().toArray().map(Math.abs); // .. and set the default threshold\n    // only if the threshold was not already set\n\n    if (volume.lowerThreshold === -Infinity) {\n      volume.lowerThreshold = min;\n    }\n    if (volume.upperThreshold === Infinity) {\n      volume.upperThreshold = max;\n    }\n    return volume;\n  }\n  parseChars(array, start, end) {\n    // without borders, use the whole array\n    if (start === undefined) {\n      start = 0;\n    }\n    if (end === undefined) {\n      end = array.length;\n    }\n    let output = ''; // create and append the chars\n\n    let i = 0;\n    for (i = start; i < end; ++i) {\n      output += String.fromCharCode(array[i]);\n    }\n    return output;\n  }\n}\nconst _fieldFunctions = {\n  type: function (data) {\n    switch (data) {\n      case 'uchar':\n      case 'unsigned char':\n      case 'uint8':\n      case 'uint8_t':\n        this.__array = Uint8Array;\n        break;\n      case 'signed char':\n      case 'int8':\n      case 'int8_t':\n        this.__array = Int8Array;\n        break;\n      case 'short':\n      case 'short int':\n      case 'signed short':\n      case 'signed short int':\n      case 'int16':\n      case 'int16_t':\n        this.__array = Int16Array;\n        break;\n      case 'ushort':\n      case 'unsigned short':\n      case 'unsigned short int':\n      case 'uint16':\n      case 'uint16_t':\n        this.__array = Uint16Array;\n        break;\n      case 'int':\n      case 'signed int':\n      case 'int32':\n      case 'int32_t':\n        this.__array = Int32Array;\n        break;\n      case 'uint':\n      case 'unsigned int':\n      case 'uint32':\n      case 'uint32_t':\n        this.__array = Uint32Array;\n        break;\n      case 'float':\n        this.__array = Float32Array;\n        break;\n      case 'double':\n        this.__array = Float64Array;\n        break;\n      default:\n        throw new Error('Unsupported NRRD data type: ' + data);\n    }\n    return this.type = data;\n  },\n  endian: function (data) {\n    return this.endian = data;\n  },\n  encoding: function (data) {\n    return this.encoding = data;\n  },\n  dimension: function (data) {\n    return this.dim = parseInt(data, 10);\n  },\n  sizes: function (data) {\n    let i;\n    return this.sizes = function () {\n      const _ref = data.split(/\\s+/);\n      const _results = [];\n      for (let _i = 0, _len = _ref.length; _i < _len; _i++) {\n        i = _ref[_i];\n        _results.push(parseInt(i, 10));\n      }\n      return _results;\n    }();\n  },\n  space: function (data) {\n    return this.space = data;\n  },\n  'space origin': function (data) {\n    return this.space_origin = data.split('(')[1].split(')')[0].split(',');\n  },\n  'space directions': function (data) {\n    let f, v;\n    const parts = data.match(/\\(.*?\\)/g);\n    return this.vectors = function () {\n      const _results = [];\n      for (let _i = 0, _len = parts.length; _i < _len; _i++) {\n        v = parts[_i];\n        _results.push(function () {\n          const _ref = v.slice(1, -1).split(/,/);\n          const _results2 = [];\n          for (let _j = 0, _len2 = _ref.length; _j < _len2; _j++) {\n            f = _ref[_j];\n            _results2.push(parseFloat(f));\n          }\n          return _results2;\n        }());\n      }\n      return _results;\n    }();\n  },\n  spacings: function (data) {\n    let f;\n    const parts = data.split(/\\s+/);\n    return this.spacings = function () {\n      const _results = [];\n      for (let _i = 0, _len = parts.length; _i < _len; _i++) {\n        f = parts[_i];\n        _results.push(parseFloat(f));\n      }\n      return _results;\n    }();\n  }\n};\nexport { NRRDLoader };","map":{"version":3,"names":["Loader","FileLoader","Vector3","Matrix4","gunzipSync","Volume","NRRDLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","data","parse","e","console","error","itemError","_data","_dataPointer","_nativeLittleEndian","Int8Array","Int16Array","buffer","_littleEndian","headerObject","scan","type","chunks","undefined","_chunkSize","_array_type","Uint8Array","Uint16Array","Uint32Array","Int32Array","Float32Array","Float64Array","_bytes","slice","flipEndianness","array","chunkSize","u8","byteOffset","byteLength","i","j","k","tmp","parseHeader","header","field","fn","l","m","_i","_len","lines","split","length","match","isNrrd","trim","_fieldFunctions","call","Error","encoding","vectors","spacings","isNaN","multiplyScalar","parseDataAsText","start","end","number","value","lengthOfTheResult","sizes","reduce","previous","current","base","result","__array","resultIndex","parsingFunction","parseInt","parseFloat","String","fromCharCode","_length","_header","_data_start","parseChars","subarray","substring","_copy","volume","min_max","computeMinMax","min","max","windowLow","windowHigh","dimensions","xLength","yLength","zLength","spacingX","spacingY","spacingZ","spacing","matrix","_spaceX","_spaceY","_spaceZ","space","set","v","inverseMatrix","copy","invert","RASDimensions","applyMatrix4","round","toArray","map","Math","abs","lowerThreshold","Infinity","upperThreshold","output","endian","dimension","dim","_ref","_results","push","space origin","space_origin","space directions","f","parts","_results2","_j","_len2"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/loaders/NRRDLoader.js"],"sourcesContent":["import { Loader, FileLoader, Vector3, Matrix4 } from 'three';\nimport { gunzipSync } from 'fflate';\nimport { Volume } from '../misc/Volume.js';\n\nclass NRRDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    // this parser is largely inspired from the XTK NRRD parser : https://github.com/xtk/X\n    let _data = data;\n    let _dataPointer = 0;\n\n    const _nativeLittleEndian = new Int8Array(new Int16Array([1]).buffer)[0] > 0;\n\n    const _littleEndian = true;\n    const headerObject = {};\n\n    function scan(type, chunks) {\n      if (chunks === undefined || chunks === null) {\n        chunks = 1;\n      }\n\n      let _chunkSize = 1;\n      let _array_type = Uint8Array;\n\n      switch (type) {\n        // 1 byte data types\n        case 'uchar':\n          break;\n\n        case 'schar':\n          _array_type = Int8Array;\n          break;\n        // 2 byte data types\n\n        case 'ushort':\n          _array_type = Uint16Array;\n          _chunkSize = 2;\n          break;\n\n        case 'sshort':\n          _array_type = Int16Array;\n          _chunkSize = 2;\n          break;\n        // 4 byte data types\n\n        case 'uint':\n          _array_type = Uint32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'sint':\n          _array_type = Int32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'float':\n          _array_type = Float32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'complex':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n\n        case 'double':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n      } // increase the data pointer in-place\n\n\n      let _bytes = new _array_type(_data.slice(_dataPointer, _dataPointer += chunks * _chunkSize)); // if required, flip the endianness of the bytes\n\n\n      if (_nativeLittleEndian != _littleEndian) {\n        // we need to flip here since the format doesn't match the native endianness\n        _bytes = flipEndianness(_bytes, _chunkSize);\n      }\n\n      if (chunks == 1) {\n        // if only one chunk was requested, just return one value\n        return _bytes[0];\n      } // return the byte array\n\n\n      return _bytes;\n    } //Flips typed array endianness in-place. Based on https://github.com/kig/DataStream.js/blob/master/DataStream.js.\n\n\n    function flipEndianness(array, chunkSize) {\n      const u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n\n      for (let i = 0; i < array.byteLength; i += chunkSize) {\n        for (let j = i + chunkSize - 1, k = i; j > k; j--, k++) {\n          const tmp = u8[k];\n          u8[k] = u8[j];\n          u8[j] = tmp;\n        }\n      }\n\n      return array;\n    } //parse the header\n\n\n    function parseHeader(header) {\n      let data, field, fn, i, l, m, _i, _len;\n\n      const lines = header.split(/\\r?\\n/);\n\n      for (_i = 0, _len = lines.length; _i < _len; _i++) {\n        l = lines[_i];\n\n        if (l.match(/NRRD\\d+/)) {\n          headerObject.isNrrd = true;\n        } else if (l.match(/^#/)) ; else if (m = l.match(/(.*):(.*)/)) {\n          field = m[1].trim();\n          data = m[2].trim();\n          fn = _fieldFunctions[field];\n\n          if (fn) {\n            fn.call(headerObject, data);\n          } else {\n            headerObject[field] = data;\n          }\n        }\n      }\n\n      if (!headerObject.isNrrd) {\n        throw new Error('Not an NRRD file');\n      }\n\n      if (headerObject.encoding === 'bz2' || headerObject.encoding === 'bzip2') {\n        throw new Error('Bzip is not supported');\n      }\n\n      if (!headerObject.vectors) {\n        //if no space direction is set, let's use the identity\n        headerObject.vectors = [new Vector3(1, 0, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1)]; //apply spacing if defined\n\n        if (headerObject.spacings) {\n          for (i = 0; i <= 2; i++) {\n            if (!isNaN(headerObject.spacings[i])) {\n              headerObject.vectors[i].multiplyScalar(headerObject.spacings[i]);\n            }\n          }\n        }\n      }\n    } //parse the data when registred as one of this type : 'text', 'ascii', 'txt'\n\n\n    function parseDataAsText(data, start, end) {\n      let number = '';\n      start = start || 0;\n      end = end || data.length;\n      let value; //length of the result is the product of the sizes\n\n      const lengthOfTheResult = headerObject.sizes.reduce(function (previous, current) {\n        return previous * current;\n      }, 1);\n      let base = 10;\n\n      if (headerObject.encoding === 'hex') {\n        base = 16;\n      }\n\n      const result = new headerObject.__array(lengthOfTheResult);\n      let resultIndex = 0;\n      let parsingFunction = parseInt;\n\n      if (headerObject.__array === Float32Array || headerObject.__array === Float64Array) {\n        parsingFunction = parseFloat;\n      }\n\n      for (let i = start; i < end; i++) {\n        value = data[i]; //if value is not a space\n\n        if ((value < 9 || value > 13) && value !== 32) {\n          number += String.fromCharCode(value);\n        } else {\n          if (number !== '') {\n            result[resultIndex] = parsingFunction(number, base);\n            resultIndex++;\n          }\n\n          number = '';\n        }\n      }\n\n      if (number !== '') {\n        result[resultIndex] = parsingFunction(number, base);\n        resultIndex++;\n      }\n\n      return result;\n    }\n\n    const _bytes = scan('uchar', data.byteLength);\n\n    const _length = _bytes.length;\n    let _header = null;\n    let _data_start = 0;\n    let i;\n\n    for (i = 1; i < _length; i++) {\n      if (_bytes[i - 1] == 10 && _bytes[i] == 10) {\n        // we found two line breaks in a row\n        // now we know what the header is\n        _header = this.parseChars(_bytes, 0, i - 2); // this is were the data starts\n\n        _data_start = i + 1;\n        break;\n      }\n    } // parse the header\n\n\n    parseHeader(_header);\n    _data = _bytes.subarray(_data_start); // the data without header\n\n    if (headerObject.encoding.substring(0, 2) === 'gz') {\n      // we need to decompress the datastream\n      // here we start the unzipping and get a typed Uint8Array back\n      _data = gunzipSync(new Uint8Array(_data)); // eslint-disable-line no-undef\n    } else if (headerObject.encoding === 'ascii' || headerObject.encoding === 'text' || headerObject.encoding === 'txt' || headerObject.encoding === 'hex') {\n      _data = parseDataAsText(_data);\n    } else if (headerObject.encoding === 'raw') {\n      //we need to copy the array to create a new array buffer, else we retrieve the original arraybuffer with the header\n      const _copy = new Uint8Array(_data.length);\n\n      for (let i = 0; i < _data.length; i++) {\n        _copy[i] = _data[i];\n      }\n\n      _data = _copy;\n    } // .. let's use the underlying array buffer\n\n\n    _data = _data.buffer;\n    const volume = new Volume();\n    volume.header = headerObject; //\n    // parse the (unzipped) data to a datastream of the correct type\n    //\n\n    volume.data = new headerObject.__array(_data); // get the min and max intensities\n\n    const min_max = volume.computeMinMax();\n    const min = min_max[0];\n    const max = min_max[1]; // attach the scalar range to the volume\n\n    volume.windowLow = min;\n    volume.windowHigh = max; // get the image dimensions\n\n    volume.dimensions = [headerObject.sizes[0], headerObject.sizes[1], headerObject.sizes[2]];\n    volume.xLength = volume.dimensions[0];\n    volume.yLength = volume.dimensions[1];\n    volume.zLength = volume.dimensions[2]; // spacing\n\n    const spacingX = new Vector3(headerObject.vectors[0][0], headerObject.vectors[0][1], headerObject.vectors[0][2]).length();\n    const spacingY = new Vector3(headerObject.vectors[1][0], headerObject.vectors[1][1], headerObject.vectors[1][2]).length();\n    const spacingZ = new Vector3(headerObject.vectors[2][0], headerObject.vectors[2][1], headerObject.vectors[2][2]).length();\n    volume.spacing = [spacingX, spacingY, spacingZ]; // Create IJKtoRAS matrix\n\n    volume.matrix = new Matrix4();\n    let _spaceX = 1;\n    let _spaceY = 1;\n    const _spaceZ = 1;\n\n    if (headerObject.space == 'left-posterior-superior') {\n      _spaceX = -1;\n      _spaceY = -1;\n    } else if (headerObject.space === 'left-anterior-superior') {\n      _spaceX = -1;\n    }\n\n    if (!headerObject.vectors) {\n      volume.matrix.set(_spaceX, 0, 0, 0, 0, _spaceY, 0, 0, 0, 0, _spaceZ, 0, 0, 0, 0, 1);\n    } else {\n      const v = headerObject.vectors;\n      volume.matrix.set(_spaceX * v[0][0], _spaceX * v[1][0], _spaceX * v[2][0], 0, _spaceY * v[0][1], _spaceY * v[1][1], _spaceY * v[2][1], 0, _spaceZ * v[0][2], _spaceZ * v[1][2], _spaceZ * v[2][2], 0, 0, 0, 0, 1);\n    }\n\n    volume.inverseMatrix = new Matrix4();\n    volume.inverseMatrix.copy(volume.matrix).invert();\n    volume.RASDimensions = new Vector3(volume.xLength, volume.yLength, volume.zLength).applyMatrix4(volume.matrix).round().toArray().map(Math.abs); // .. and set the default threshold\n    // only if the threshold was not already set\n\n    if (volume.lowerThreshold === -Infinity) {\n      volume.lowerThreshold = min;\n    }\n\n    if (volume.upperThreshold === Infinity) {\n      volume.upperThreshold = max;\n    }\n\n    return volume;\n  }\n\n  parseChars(array, start, end) {\n    // without borders, use the whole array\n    if (start === undefined) {\n      start = 0;\n    }\n\n    if (end === undefined) {\n      end = array.length;\n    }\n\n    let output = ''; // create and append the chars\n\n    let i = 0;\n\n    for (i = start; i < end; ++i) {\n      output += String.fromCharCode(array[i]);\n    }\n\n    return output;\n  }\n\n}\n\nconst _fieldFunctions = {\n  type: function (data) {\n    switch (data) {\n      case 'uchar':\n      case 'unsigned char':\n      case 'uint8':\n      case 'uint8_t':\n        this.__array = Uint8Array;\n        break;\n\n      case 'signed char':\n      case 'int8':\n      case 'int8_t':\n        this.__array = Int8Array;\n        break;\n\n      case 'short':\n      case 'short int':\n      case 'signed short':\n      case 'signed short int':\n      case 'int16':\n      case 'int16_t':\n        this.__array = Int16Array;\n        break;\n\n      case 'ushort':\n      case 'unsigned short':\n      case 'unsigned short int':\n      case 'uint16':\n      case 'uint16_t':\n        this.__array = Uint16Array;\n        break;\n\n      case 'int':\n      case 'signed int':\n      case 'int32':\n      case 'int32_t':\n        this.__array = Int32Array;\n        break;\n\n      case 'uint':\n      case 'unsigned int':\n      case 'uint32':\n      case 'uint32_t':\n        this.__array = Uint32Array;\n        break;\n\n      case 'float':\n        this.__array = Float32Array;\n        break;\n\n      case 'double':\n        this.__array = Float64Array;\n        break;\n\n      default:\n        throw new Error('Unsupported NRRD data type: ' + data);\n    }\n\n    return this.type = data;\n  },\n  endian: function (data) {\n    return this.endian = data;\n  },\n  encoding: function (data) {\n    return this.encoding = data;\n  },\n  dimension: function (data) {\n    return this.dim = parseInt(data, 10);\n  },\n  sizes: function (data) {\n    let i;\n    return this.sizes = function () {\n      const _ref = data.split(/\\s+/);\n\n      const _results = [];\n\n      for (let _i = 0, _len = _ref.length; _i < _len; _i++) {\n        i = _ref[_i];\n\n        _results.push(parseInt(i, 10));\n      }\n\n      return _results;\n    }();\n  },\n  space: function (data) {\n    return this.space = data;\n  },\n  'space origin': function (data) {\n    return this.space_origin = data.split('(')[1].split(')')[0].split(',');\n  },\n  'space directions': function (data) {\n    let f, v;\n    const parts = data.match(/\\(.*?\\)/g);\n    return this.vectors = function () {\n      const _results = [];\n\n      for (let _i = 0, _len = parts.length; _i < _len; _i++) {\n        v = parts[_i];\n\n        _results.push(function () {\n          const _ref = v.slice(1, -1).split(/,/);\n\n          const _results2 = [];\n\n          for (let _j = 0, _len2 = _ref.length; _j < _len2; _j++) {\n            f = _ref[_j];\n\n            _results2.push(parseFloat(f));\n          }\n\n          return _results2;\n        }());\n      }\n\n      return _results;\n    }();\n  },\n  spacings: function (data) {\n    let f;\n    const parts = data.split(/\\s+/);\n    return this.spacings = function () {\n      const _results = [];\n\n      for (let _i = 0, _len = parts.length; _i < _len; _i++) {\n        f = parts[_i];\n\n        _results.push(parseFloat(f));\n      }\n\n      return _results;\n    }();\n  }\n};\n\nexport { NRRDLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}