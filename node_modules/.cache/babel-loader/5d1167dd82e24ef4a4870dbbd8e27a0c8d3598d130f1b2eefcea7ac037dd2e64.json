{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { UniformsUtils, ShaderMaterial } from 'three';\nimport { FilmShader } from '../shaders/FilmShader.js';\nclass FilmPass extends Pass {\n  constructor(noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n    super();\n    _defineProperty(this, \"material\", void 0);\n    _defineProperty(this, \"fsQuad\", void 0);\n    _defineProperty(this, \"uniforms\", void 0);\n    if (FilmShader === undefined) console.error('THREE.FilmPass relies on FilmShader');\n    const shader = FilmShader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    if (grayscale !== undefined) this.uniforms.grayscale.value = grayscale;\n    if (noiseIntensity !== undefined) this.uniforms.nIntensity.value = noiseIntensity;\n    if (scanlinesIntensity !== undefined) this.uniforms.sIntensity.value = scanlinesIntensity;\n    if (scanlinesCount !== undefined) this.uniforms.sCount.value = scanlinesCount;\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['time'].value += deltaTime;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n}\nexport { FilmPass };","map":{"version":3,"names":["_defineProperty","Pass","FullScreenQuad","UniformsUtils","ShaderMaterial","FilmShader","FilmPass","constructor","noiseIntensity","scanlinesIntensity","scanlinesCount","grayscale","undefined","console","error","shader","uniforms","clone","material","vertexShader","fragmentShader","value","nIntensity","sIntensity","sCount","fsQuad","render","renderer","writeBuffer","readBuffer","deltaTime","texture","renderToScreen","setRenderTarget","clear"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/postprocessing/FilmPass.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { UniformsUtils, ShaderMaterial } from 'three';\nimport { FilmShader } from '../shaders/FilmShader.js';\n\nclass FilmPass extends Pass {\n  constructor(noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n    super();\n\n    _defineProperty(this, \"material\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    if (FilmShader === undefined) console.error('THREE.FilmPass relies on FilmShader');\n    const shader = FilmShader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    if (grayscale !== undefined) this.uniforms.grayscale.value = grayscale;\n    if (noiseIntensity !== undefined) this.uniforms.nIntensity.value = noiseIntensity;\n    if (scanlinesIntensity !== undefined) this.uniforms.sIntensity.value = scanlinesIntensity;\n    if (scanlinesCount !== undefined) this.uniforms.sCount.value = scanlinesCount;\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['time'].value += deltaTime;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n\n}\n\nexport { FilmPass };\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,2CAA2C;AACvE,SAASC,IAAI,EAAEC,cAAc,QAAQ,WAAW;AAChD,SAASC,aAAa,EAAEC,cAAc,QAAQ,OAAO;AACrD,SAASC,UAAU,QAAQ,0BAA0B;AAErD,MAAMC,QAAQ,SAASL,IAAI,CAAC;EAC1BM,WAAWA,CAACC,cAAc,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,SAAS,EAAE;IACzE,KAAK,EAAE;IAEPX,eAAe,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;IAEzCA,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IAEvCA,eAAe,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;IAEzC,IAAIK,UAAU,KAAKO,SAAS,EAAEC,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;IAClF,MAAMC,MAAM,GAAGV,UAAU;IACzB,IAAI,CAACW,QAAQ,GAAGb,aAAa,CAACc,KAAK,CAACF,MAAM,CAACC,QAAQ,CAAC;IACpD,IAAI,CAACE,QAAQ,GAAG,IAAId,cAAc,CAAC;MACjCY,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBG,YAAY,EAAEJ,MAAM,CAACI,YAAY;MACjCC,cAAc,EAAEL,MAAM,CAACK;IACzB,CAAC,CAAC;IACF,IAAIT,SAAS,KAAKC,SAAS,EAAE,IAAI,CAACI,QAAQ,CAACL,SAAS,CAACU,KAAK,GAAGV,SAAS;IACtE,IAAIH,cAAc,KAAKI,SAAS,EAAE,IAAI,CAACI,QAAQ,CAACM,UAAU,CAACD,KAAK,GAAGb,cAAc;IACjF,IAAIC,kBAAkB,KAAKG,SAAS,EAAE,IAAI,CAACI,QAAQ,CAACO,UAAU,CAACF,KAAK,GAAGZ,kBAAkB;IACzF,IAAIC,cAAc,KAAKE,SAAS,EAAE,IAAI,CAACI,QAAQ,CAACQ,MAAM,CAACH,KAAK,GAAGX,cAAc;IAC7E,IAAI,CAACe,MAAM,GAAG,IAAIvB,cAAc,CAAC,IAAI,CAACgB,QAAQ,CAAC;EACjD;EAEAQ,MAAMA,CAACC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,EAAEC,SAAS,EAAE;IACnD,IAAI,CAACd,QAAQ,CAAC,UAAU,CAAC,CAACK,KAAK,GAAGQ,UAAU,CAACE,OAAO;IACpD,IAAI,CAACf,QAAQ,CAAC,MAAM,CAAC,CAACK,KAAK,IAAIS,SAAS;IAExC,IAAI,IAAI,CAACE,cAAc,EAAE;MACvBL,QAAQ,CAACM,eAAe,CAAC,IAAI,CAAC;MAC9B,IAAI,CAACR,MAAM,CAACC,MAAM,CAACC,QAAQ,CAAC;IAC9B,CAAC,MAAM;MACLA,QAAQ,CAACM,eAAe,CAACL,WAAW,CAAC;MACrC,IAAI,IAAI,CAACM,KAAK,EAAEP,QAAQ,CAACO,KAAK,EAAE;MAChC,IAAI,CAACT,MAAM,CAACC,MAAM,CAACC,QAAQ,CAAC;IAC9B;EACF;AAEF;AAEA,SAASrB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}