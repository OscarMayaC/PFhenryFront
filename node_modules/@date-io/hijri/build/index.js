'use strict';

var tslib = require('tslib');
var iMoment = require('moment-hijri');
var DefaultMomentUtils = require('@date-io/moment');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var iMoment__default = /*#__PURE__*/_interopDefaultLegacy(iMoment);
var DefaultMomentUtils__default = /*#__PURE__*/_interopDefaultLegacy(DefaultMomentUtils);

var symbolMap = {
    1: "١",
    2: "٢",
    3: "٣",
    4: "٤",
    5: "٥",
    6: "٦",
    7: "٧",
    8: "٨",
    9: "٩",
    0: "٠",
};
var defaultFormats = {
    dayOfMonth: "iD",
    fullDate: "iYYYY, iMMMM Do",
    fullDateWithWeekday: "iYYYY, iMMMM Do, dddd",
    fullDateTime: "iYYYY, iMMMM Do, hh:mm A",
    fullDateTime12h: "iD iMMMM hh:mm A",
    fullDateTime24h: "iD iMMMM HH:mm",
    fullTime: "LT",
    fullTime12h: "hh:mm A",
    fullTime24h: "HH:mm",
    hours12h: "hh",
    hours24h: "HH",
    keyboardDate: "iYYYY/iMM/iDD",
    keyboardDateTime: "iYYYY/iMM/iDD LT",
    keyboardDateTime12h: "iYYYY/iMM/iDD hh:mm A",
    keyboardDateTime24h: "iYYYY/iMM/iDD HH:mm",
    minutes: "mm",
    month: "iMMMM",
    monthAndDate: "iD iMMMM",
    monthAndYear: "iMMMM iYYYY",
    monthShort: "iMMM",
    weekday: "dddd",
    weekdayShort: "ddd",
    normalDate: "dddd, iD iMMM",
    normalDateWithWeekday: "DD iMMMM",
    seconds: "ss",
    shortDate: "iD iMMM",
    year: "iYYYY",
};
var MomentUtils = /** @class */ (function (_super) {
    tslib.__extends(MomentUtils, _super);
    function MomentUtils(_a) {
        var _b = _a === void 0 ? {} : _a, instance = _b.instance, formats = _b.formats;
        var _this = _super.call(this, { locale: "ar-SA", instance: instance }) || this;
        _this.lib = "moment=hijiri";
        _this.toIMoment = function (date) {
            return _this.moment(date ? date.clone() : undefined).locale("ar-SA");
        };
        _this.parse = function (value, format) {
            if (value === "") {
                return null;
            }
            return _this.moment(value, format, true).locale("ar-SA");
        };
        _this.date = function (value) {
            if (value === null) {
                return null;
            }
            return _this.moment(value).locale("ar-SA");
        };
        _this.isBeforeYear = function (date, value) {
            return date.iYear() < value.iYear();
        };
        _this.isAfterYear = function (date, value) {
            return date.iYear() > value.iYear();
        };
        _this.getMonth = function (date) {
            return date.iMonth();
        };
        _this.getDaysInMonth = function (date) {
            return date.daysInMonth();
        };
        _this.startOfYear = function (date) {
            return date.clone().startOf("iYear");
        };
        _this.endOfYear = function (date) {
            return date.clone().endOf("iYear");
        };
        _this.startOfMonth = function (date) {
            return date.clone().startOf("iMonth");
        };
        _this.endOfMonth = function (date) {
            return date.clone().endOf("iMonth");
        };
        _this.getNextMonth = function (date) {
            return date.clone().add(1, "iMonth");
        };
        _this.getPreviousMonth = function (date) {
            return date.clone().subtract(1, "iMonth");
        };
        _this.getYear = function (date) {
            return date.iYear();
        };
        _this.setYear = function (date, year) {
            return date.clone().iYear(year);
        };
        _this.getDate = function (date) {
            return date.iDate();
        };
        _this.setDate = function (date, year) {
            return date.clone().iDate(year);
        };
        _this.getMeridiemText = function (ampm) {
            return ampm === "am"
                ? _this.toIMoment().hours(2).format("A")
                : _this.toIMoment().hours(14).format("A");
        };
        _this.getWeekdays = function () {
            return [0, 1, 2, 3, 4, 5, 6].map(function (dayOfWeek) {
                return _this.toIMoment().weekday(dayOfWeek).format("dd");
            });
        };
        _this.isEqual = function (value, comparing) {
            if (value === null && comparing === null) {
                return true;
            }
            return _this.moment(value).isSame(comparing);
        };
        _this.formatNumber = function (num) {
            return num.replace(/\d/g, function (match) { return symbolMap[match]; }).replace(/,/g, "،");
        };
        _this.getWeekArray = function (date) {
            var start = date.clone().startOf("iMonth").startOf("week");
            var end = date.clone().endOf("iMonth").endOf("week");
            var count = 0;
            var current = start;
            var nestedWeeks = [];
            while (current.isBefore(end)) {
                var weekNumber = Math.floor(count / 7);
                nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
                nestedWeeks[weekNumber].push(current);
                current = current.clone().add(1, "day");
                count += 1;
            }
            return nestedWeeks;
        };
        _this.getYearRange = function (start, end) {
            // moment-hijri only supports dates between 1356-01-01 H and 1499-12-29 H
            // We need to throw if outside min/max bounds, otherwise the while loop below will be infinite.
            if (start.isBefore("1937-03-14")) {
                throw new Error("min date must be on or after 1356-01-01 H (1937-03-14)");
            }
            if (end.isAfter("2076-11-26")) {
                throw new Error("max date must be on or before 1499-12-29 H (2076-11-26)");
            }
            var startDate = _this.moment(start).startOf("iYear");
            var endDate = _this.moment(end).endOf("iYear");
            var years = [];
            var current = startDate;
            while (current.isBefore(endDate)) {
                years.push(current);
                current = current.clone().add(1, "iYear");
            }
            return years;
        };
        _this.moment = instance || iMoment__default["default"];
        _this.locale = "ar-SA";
        _this.formats = Object.assign({}, defaultFormats, formats);
        return _this;
    }
    return MomentUtils;
}(DefaultMomentUtils__default["default"]));

module.exports = MomentUtils;
