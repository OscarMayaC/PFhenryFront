var e=require("ndarray"),r=require("ndarray-ops");function t(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=t(e),a=t(r);function i(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}function o(e,r){var t;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(t=function(e,r){if(e){if("string"==typeof e)return i(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?i(e,r):void 0}}(e))||r&&e&&"number"==typeof e.length){t&&(e=t);var n=0;return function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(t=e[Symbol.iterator]()).next.bind(t)}function s(e,r,t){void 0===t&&(t={});var n=document.createElement("canvas");n.width=e.shape[0],n.height=e.shape[1];var a=n.getContext("2d"),i=a.getImageData(0,0,n.width,n.height);try{f(e,i.data)}catch(e){return h.from(Promise.reject(e))}a.putImageData(i,0,0);var o=t.quality?t.quality/100:void 0;switch(r){case"canvas":return n;case"jpg":case"jpeg":return u(n,"image/jpeg",o);case"png":return u(n,"image/png");default:throw new Error("[ndarray-pixels] Unsupported file type: "+r)}}function u(e,r,t){var n=new Promise(function(n,a){e.toBlob(function(e){try{var r=function(){if(e)return Promise.resolve(e.arrayBuffer()).then(function(e){n(new Uint8Array(e))});a(new Error("[ndarray-pixels] Failed to canvas.toBlob()."))}();return Promise.resolve(r&&r.then?r.then(function(){}):void 0)}catch(e){return Promise.reject(e)}},r,t)});return h.from(n)}function f(e,r,t){if(void 0===t&&(t=-1),4===e.shape.length)return f(e.pick(t),r,0);if(3===e.shape.length)if(3===e.shape[2])a.default.assign(n.default(r,[e.shape[0],e.shape[1],3],[4,4*e.shape[0],1]),e),a.default.assigns(n.default(r,[e.shape[0]*e.shape[1]],[4],3),255);else if(4===e.shape[2])a.default.assign(n.default(r,[e.shape[0],e.shape[1],4],[4,4*e.shape[0],1]),e);else{if(1!==e.shape[2])throw new Error("[ndarray-pixels] Incompatible array shape.");a.default.assign(n.default(r,[e.shape[0],e.shape[1],3],[4,4*e.shape[0],1]),n.default(e.data,[e.shape[0],e.shape[1],3],[e.stride[0],e.stride[1],0],e.offset)),a.default.assigns(n.default(r,[e.shape[0]*e.shape[1]],[4],3),255)}else{if(2!==e.shape.length)throw new Error("[ndarray-pixels] Incompatible array shape.");a.default.assign(n.default(r,[e.shape[0],e.shape[1],3],[4,4*e.shape[0],1]),n.default(e.data,[e.shape[0],e.shape[1],3],[e.stride[0],e.stride[1],0],e.offset)),a.default.assigns(n.default(r,[e.shape[0]*e.shape[1]],[4],3),255)}return r}var h=function(){function e(e){this._promise=void 0,this._promise=e}return e.prototype.on=function(e,r){return"data"===e?this._promise.then(r):"error"===e?this._promise.catch(r):"end"===e&&this._promise.finally(r),this},e.from=function(r){return new e(r)},e}();exports.getPixels=function(e,r){try{return e instanceof Uint8Array&&"undefined"!=typeof Buffer&&(e=Buffer.from(e)),Promise.resolve(new Promise(function(t,a){!function(e,r,t){if(t=t||r,e instanceof Uint8Array){if("string"!=typeof r)throw new Error("[ndarray-pixels] Type must be given for Uint8Array image data");var a=new Blob([e],{type:r});e=URL.createObjectURL(a)}var i=new Image;i.crossOrigin="anonymous",i.onload=function(){URL.revokeObjectURL(e);var r=document.createElement("canvas");r.width=i.width,r.height=i.height;var a=r.getContext("2d");a.drawImage(i,0,0);var o=a.getImageData(0,0,i.width,i.height);t(null,n.default(new Uint8Array(o.data),[i.width,i.height,4],[4,4*i.width,1],0))},i.onerror=function(r){URL.revokeObjectURL(e),t(r)},i.src=e}(e,r,function(e,r){r&&!e?t(r):a(e)})}))}catch(e){return Promise.reject(e)}},exports.savePixels=function(e,r){try{return Promise.resolve(new Promise(function(t,n){var a=[],i=r.replace("image/","");s(e,i).on("data",function(e){return a.push(e)}).on("end",function(){return t(function(e){for(var r,t=0,n=o(e);!(r=n()).done;)t+=r.value.byteLength;for(var a,i=new Uint8Array(t),s=0,u=o(e);!(a=u()).done;){var f=a.value;i.set(f,s),s+=f.byteLength}return i}(a))}).on("error",function(e){return n(e)})}))}catch(e){return Promise.reject(e)}};
//# sourceMappingURL=ndarray-pixels-browser.js.map
