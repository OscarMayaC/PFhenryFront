{"ast":null,"code":"import { DataTextureLoader, HalfFloatType, FloatType, RGBAFormat, LinearEncoding, RedFormat, LinearFilter, DataUtils } from 'three';\nimport { unzlibSync } from 'fflate';\n\n/**\n * OpenEXR loader currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\n *\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation, so I have preserved their copyright notices.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n\nclass EXRLoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n  parse(buffer) {\n    const USHORT_RANGE = 1 << 16;\n    const BITMAP_SIZE = USHORT_RANGE >> 3;\n    const HUF_ENCBITS = 16; // literal (value) bit length\n\n    const HUF_DECBITS = 14; // decoding bit size (>= 8)\n\n    const HUF_ENCSIZE = (1 << HUF_ENCBITS) + 1; // encoding table size\n\n    const HUF_DECSIZE = 1 << HUF_DECBITS; // decoding table size\n\n    const HUF_DECMASK = HUF_DECSIZE - 1;\n    const NBITS = 16;\n    const A_OFFSET = 1 << NBITS - 1;\n    const MOD_MASK = (1 << NBITS) - 1;\n    const SHORT_ZEROCODE_RUN = 59;\n    const LONG_ZEROCODE_RUN = 63;\n    const SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n    const ULONG_SIZE = 8;\n    const FLOAT32_SIZE = 4;\n    const INT32_SIZE = 4;\n    const INT16_SIZE = 2;\n    const INT8_SIZE = 1;\n    const STATIC_HUFFMAN = 0;\n    const DEFLATE = 1;\n    const UNKNOWN = 0;\n    const LOSSY_DCT = 1;\n    const RLE = 2;\n    const logBase = Math.pow(2.7182818, 2.2);\n    function reverseLutFromBitmap(bitmap, lut) {\n      var k = 0;\n      for (var i = 0; i < USHORT_RANGE; ++i) {\n        if (i == 0 || bitmap[i >> 3] & 1 << (i & 7)) {\n          lut[k++] = i;\n        }\n      }\n      var n = k - 1;\n      while (k < USHORT_RANGE) lut[k++] = 0;\n      return n;\n    }\n    function hufClearDecTable(hdec) {\n      for (var i = 0; i < HUF_DECSIZE; i++) {\n        hdec[i] = {};\n        hdec[i].len = 0;\n        hdec[i].lit = 0;\n        hdec[i].p = null;\n      }\n    }\n    const getBitsReturn = {\n      l: 0,\n      c: 0,\n      lc: 0\n    };\n    function getBits(nBits, c, lc, uInt8Array, inOffset) {\n      while (lc < nBits) {\n        c = c << 8 | parseUint8Array(uInt8Array, inOffset);\n        lc += 8;\n      }\n      lc -= nBits;\n      getBitsReturn.l = c >> lc & (1 << nBits) - 1;\n      getBitsReturn.c = c;\n      getBitsReturn.lc = lc;\n    }\n    const hufTableBuffer = new Array(59);\n    function hufCanonicalCodeTable(hcode) {\n      for (var i = 0; i <= 58; ++i) hufTableBuffer[i] = 0;\n      for (var i = 0; i < HUF_ENCSIZE; ++i) hufTableBuffer[hcode[i]] += 1;\n      var c = 0;\n      for (var i = 58; i > 0; --i) {\n        var nc = c + hufTableBuffer[i] >> 1;\n        hufTableBuffer[i] = c;\n        c = nc;\n      }\n      for (var i = 0; i < HUF_ENCSIZE; ++i) {\n        var l = hcode[i];\n        if (l > 0) hcode[i] = l | hufTableBuffer[l]++ << 6;\n      }\n    }\n    function hufUnpackEncTable(uInt8Array, inDataView, inOffset, ni, im, iM, hcode) {\n      var p = inOffset;\n      var c = 0;\n      var lc = 0;\n      for (; im <= iM; im++) {\n        if (p.value - inOffset.value > ni) return false;\n        getBits(6, c, lc, uInt8Array, p);\n        var l = getBitsReturn.l;\n        c = getBitsReturn.c;\n        lc = getBitsReturn.lc;\n        hcode[im] = l;\n        if (l == LONG_ZEROCODE_RUN) {\n          if (p.value - inOffset.value > ni) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n          getBits(8, c, lc, uInt8Array, p);\n          var zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\n          c = getBitsReturn.c;\n          lc = getBitsReturn.lc;\n          if (im + zerun > iM + 1) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n          while (zerun--) hcode[im++] = 0;\n          im--;\n        } else if (l >= SHORT_ZEROCODE_RUN) {\n          var zerun = l - SHORT_ZEROCODE_RUN + 2;\n          if (im + zerun > iM + 1) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n          while (zerun--) hcode[im++] = 0;\n          im--;\n        }\n      }\n      hufCanonicalCodeTable(hcode);\n    }\n    function hufLength(code) {\n      return code & 63;\n    }\n    function hufCode(code) {\n      return code >> 6;\n    }\n    function hufBuildDecTable(hcode, im, iM, hdecod) {\n      for (; im <= iM; im++) {\n        var c = hufCode(hcode[im]);\n        var l = hufLength(hcode[im]);\n        if (c >> l) {\n          throw 'Invalid table entry';\n        }\n        if (l > HUF_DECBITS) {\n          var pl = hdecod[c >> l - HUF_DECBITS];\n          if (pl.len) {\n            throw 'Invalid table entry';\n          }\n          pl.lit++;\n          if (pl.p) {\n            var p = pl.p;\n            pl.p = new Array(pl.lit);\n            for (var i = 0; i < pl.lit - 1; ++i) {\n              pl.p[i] = p[i];\n            }\n          } else {\n            pl.p = new Array(1);\n          }\n          pl.p[pl.lit - 1] = im;\n        } else if (l) {\n          var plOffset = 0;\n          for (var i = 1 << HUF_DECBITS - l; i > 0; i--) {\n            var pl = hdecod[(c << HUF_DECBITS - l) + plOffset];\n            if (pl.len || pl.p) {\n              throw 'Invalid table entry';\n            }\n            pl.len = l;\n            pl.lit = im;\n            plOffset++;\n          }\n        }\n      }\n      return true;\n    }\n    const getCharReturn = {\n      c: 0,\n      lc: 0\n    };\n    function getChar(c, lc, uInt8Array, inOffset) {\n      c = c << 8 | parseUint8Array(uInt8Array, inOffset);\n      lc += 8;\n      getCharReturn.c = c;\n      getCharReturn.lc = lc;\n    }\n    const getCodeReturn = {\n      c: 0,\n      lc: 0\n    };\n    function getCode(po, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outBufferOffset, outBufferEndOffset) {\n      if (po == rlc) {\n        if (lc < 8) {\n          getChar(c, lc, uInt8Array, inOffset);\n          c = getCharReturn.c;\n          lc = getCharReturn.lc;\n        }\n        lc -= 8;\n        var cs = c >> lc;\n        var cs = new Uint8Array([cs])[0];\n        if (outBufferOffset.value + cs > outBufferEndOffset) {\n          return false;\n        }\n        var s = outBuffer[outBufferOffset.value - 1];\n        while (cs-- > 0) {\n          outBuffer[outBufferOffset.value++] = s;\n        }\n      } else if (outBufferOffset.value < outBufferEndOffset) {\n        outBuffer[outBufferOffset.value++] = po;\n      } else {\n        return false;\n      }\n      getCodeReturn.c = c;\n      getCodeReturn.lc = lc;\n    }\n    function UInt16(value) {\n      return value & 0xffff;\n    }\n    function Int16(value) {\n      var ref = UInt16(value);\n      return ref > 0x7fff ? ref - 0x10000 : ref;\n    }\n    const wdec14Return = {\n      a: 0,\n      b: 0\n    };\n    function wdec14(l, h) {\n      var ls = Int16(l);\n      var hs = Int16(h);\n      var hi = hs;\n      var ai = ls + (hi & 1) + (hi >> 1);\n      var as = ai;\n      var bs = ai - hi;\n      wdec14Return.a = as;\n      wdec14Return.b = bs;\n    }\n    function wdec16(l, h) {\n      var m = UInt16(l);\n      var d = UInt16(h);\n      var bb = m - (d >> 1) & MOD_MASK;\n      var aa = d + bb - A_OFFSET & MOD_MASK;\n      wdec14Return.a = aa;\n      wdec14Return.b = bb;\n    }\n    function wav2Decode(buffer, j, nx, ox, ny, oy, mx) {\n      var w14 = mx < 1 << 14;\n      var n = nx > ny ? ny : nx;\n      var p = 1;\n      var p2;\n      while (p <= n) p <<= 1;\n      p >>= 1;\n      p2 = p;\n      p >>= 1;\n      while (p >= 1) {\n        var py = 0;\n        var ey = py + oy * (ny - p2);\n        var oy1 = oy * p;\n        var oy2 = oy * p2;\n        var ox1 = ox * p;\n        var ox2 = ox * p2;\n        var i00, i01, i10, i11;\n        for (; py <= ey; py += oy2) {\n          var px = py;\n          var ex = py + ox * (nx - p2);\n          for (; px <= ex; px += ox2) {\n            var p01 = px + ox1;\n            var p10 = px + oy1;\n            var p11 = p10 + ox1;\n            if (w14) {\n              wdec14(buffer[px + j], buffer[p10 + j]);\n              i00 = wdec14Return.a;\n              i10 = wdec14Return.b;\n              wdec14(buffer[p01 + j], buffer[p11 + j]);\n              i01 = wdec14Return.a;\n              i11 = wdec14Return.b;\n              wdec14(i00, i01);\n              buffer[px + j] = wdec14Return.a;\n              buffer[p01 + j] = wdec14Return.b;\n              wdec14(i10, i11);\n              buffer[p10 + j] = wdec14Return.a;\n              buffer[p11 + j] = wdec14Return.b;\n            } else {\n              wdec16(buffer[px + j], buffer[p10 + j]);\n              i00 = wdec14Return.a;\n              i10 = wdec14Return.b;\n              wdec16(buffer[p01 + j], buffer[p11 + j]);\n              i01 = wdec14Return.a;\n              i11 = wdec14Return.b;\n              wdec16(i00, i01);\n              buffer[px + j] = wdec14Return.a;\n              buffer[p01 + j] = wdec14Return.b;\n              wdec16(i10, i11);\n              buffer[p10 + j] = wdec14Return.a;\n              buffer[p11 + j] = wdec14Return.b;\n            }\n          }\n          if (nx & p) {\n            var p10 = px + oy1;\n            if (w14) wdec14(buffer[px + j], buffer[p10 + j]);else wdec16(buffer[px + j], buffer[p10 + j]);\n            i00 = wdec14Return.a;\n            buffer[p10 + j] = wdec14Return.b;\n            buffer[px + j] = i00;\n          }\n        }\n        if (ny & p) {\n          var px = py;\n          var ex = py + ox * (nx - p2);\n          for (; px <= ex; px += ox2) {\n            var p01 = px + ox1;\n            if (w14) wdec14(buffer[px + j], buffer[p01 + j]);else wdec16(buffer[px + j], buffer[p01 + j]);\n            i00 = wdec14Return.a;\n            buffer[p01 + j] = wdec14Return.b;\n            buffer[px + j] = i00;\n          }\n        }\n        p2 = p;\n        p >>= 1;\n      }\n      return py;\n    }\n    function hufDecode(encodingTable, decodingTable, uInt8Array, inDataView, inOffset, ni, rlc, no, outBuffer, outOffset) {\n      var c = 0;\n      var lc = 0;\n      var outBufferEndOffset = no;\n      var inOffsetEnd = Math.trunc(inOffset.value + (ni + 7) / 8);\n      while (inOffset.value < inOffsetEnd) {\n        getChar(c, lc, uInt8Array, inOffset);\n        c = getCharReturn.c;\n        lc = getCharReturn.lc;\n        while (lc >= HUF_DECBITS) {\n          var index = c >> lc - HUF_DECBITS & HUF_DECMASK;\n          var pl = decodingTable[index];\n          if (pl.len) {\n            lc -= pl.len;\n            getCode(pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n            c = getCodeReturn.c;\n            lc = getCodeReturn.lc;\n          } else {\n            if (!pl.p) {\n              throw 'hufDecode issues';\n            }\n            var j;\n            for (j = 0; j < pl.lit; j++) {\n              var l = hufLength(encodingTable[pl.p[j]]);\n              while (lc < l && inOffset.value < inOffsetEnd) {\n                getChar(c, lc, uInt8Array, inOffset);\n                c = getCharReturn.c;\n                lc = getCharReturn.lc;\n              }\n              if (lc >= l) {\n                if (hufCode(encodingTable[pl.p[j]]) == (c >> lc - l & (1 << l) - 1)) {\n                  lc -= l;\n                  getCode(pl.p[j], rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n                  c = getCodeReturn.c;\n                  lc = getCodeReturn.lc;\n                  break;\n                }\n              }\n            }\n            if (j == pl.lit) {\n              throw 'hufDecode issues';\n            }\n          }\n        }\n      }\n      var i = 8 - ni & 7;\n      c >>= i;\n      lc -= i;\n      while (lc > 0) {\n        var pl = decodingTable[c << HUF_DECBITS - lc & HUF_DECMASK];\n        if (pl.len) {\n          lc -= pl.len;\n          getCode(pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n          c = getCodeReturn.c;\n          lc = getCodeReturn.lc;\n        } else {\n          throw 'hufDecode issues';\n        }\n      }\n      return true;\n    }\n    function hufUncompress(uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw) {\n      var outOffset = {\n        value: 0\n      };\n      var initialInOffset = inOffset.value;\n      var im = parseUint32(inDataView, inOffset);\n      var iM = parseUint32(inDataView, inOffset);\n      inOffset.value += 4;\n      var nBits = parseUint32(inDataView, inOffset);\n      inOffset.value += 4;\n      if (im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE) {\n        throw 'Something wrong with HUF_ENCSIZE';\n      }\n      var freq = new Array(HUF_ENCSIZE);\n      var hdec = new Array(HUF_DECSIZE);\n      hufClearDecTable(hdec);\n      var ni = nCompressed - (inOffset.value - initialInOffset);\n      hufUnpackEncTable(uInt8Array, inDataView, inOffset, ni, im, iM, freq);\n      if (nBits > 8 * (nCompressed - (inOffset.value - initialInOffset))) {\n        throw 'Something wrong with hufUncompress';\n      }\n      hufBuildDecTable(freq, im, iM, hdec);\n      hufDecode(freq, hdec, uInt8Array, inDataView, inOffset, nBits, iM, nRaw, outBuffer, outOffset);\n    }\n    function applyLut(lut, data, nData) {\n      for (var i = 0; i < nData; ++i) {\n        data[i] = lut[data[i]];\n      }\n    }\n    function predictor(source) {\n      for (var t = 1; t < source.length; t++) {\n        var d = source[t - 1] + source[t] - 128;\n        source[t] = d;\n      }\n    }\n    function interleaveScalar(source, out) {\n      var t1 = 0;\n      var t2 = Math.floor((source.length + 1) / 2);\n      var s = 0;\n      var stop = source.length - 1;\n      while (true) {\n        if (s > stop) break;\n        out[s++] = source[t1++];\n        if (s > stop) break;\n        out[s++] = source[t2++];\n      }\n    }\n    function decodeRunLength(source) {\n      var size = source.byteLength;\n      var out = new Array();\n      var p = 0;\n      var reader = new DataView(source);\n      while (size > 0) {\n        var l = reader.getInt8(p++);\n        if (l < 0) {\n          var count = -l;\n          size -= count + 1;\n          for (var i = 0; i < count; i++) {\n            out.push(reader.getUint8(p++));\n          }\n        } else {\n          var count = l;\n          size -= 2;\n          var value = reader.getUint8(p++);\n          for (var i = 0; i < count + 1; i++) {\n            out.push(value);\n          }\n        }\n      }\n      return out;\n    }\n    function lossyDctDecode(cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer) {\n      var dataView = new DataView(outBuffer.buffer);\n      var width = channelData[cscSet.idx[0]].width;\n      var height = channelData[cscSet.idx[0]].height;\n      var numComp = 3;\n      var numFullBlocksX = Math.floor(width / 8.0);\n      var numBlocksX = Math.ceil(width / 8.0);\n      var numBlocksY = Math.ceil(height / 8.0);\n      var leftoverX = width - (numBlocksX - 1) * 8;\n      var leftoverY = height - (numBlocksY - 1) * 8;\n      var currAcComp = {\n        value: 0\n      };\n      var currDcComp = new Array(numComp);\n      var dctData = new Array(numComp);\n      var halfZigBlock = new Array(numComp);\n      var rowBlock = new Array(numComp);\n      var rowOffsets = new Array(numComp);\n      for (let comp = 0; comp < numComp; ++comp) {\n        rowOffsets[comp] = rowPtrs[cscSet.idx[comp]];\n        currDcComp[comp] = comp < 1 ? 0 : currDcComp[comp - 1] + numBlocksX * numBlocksY;\n        dctData[comp] = new Float32Array(64);\n        halfZigBlock[comp] = new Uint16Array(64);\n        rowBlock[comp] = new Uint16Array(numBlocksX * 64);\n      }\n      for (let blocky = 0; blocky < numBlocksY; ++blocky) {\n        var maxY = 8;\n        if (blocky == numBlocksY - 1) maxY = leftoverY;\n        var maxX = 8;\n        for (let blockx = 0; blockx < numBlocksX; ++blockx) {\n          if (blockx == numBlocksX - 1) maxX = leftoverX;\n          for (let comp = 0; comp < numComp; ++comp) {\n            halfZigBlock[comp].fill(0); // set block DC component\n\n            halfZigBlock[comp][0] = dcBuffer[currDcComp[comp]++]; // set block AC components\n\n            unRleAC(currAcComp, acBuffer, halfZigBlock[comp]); // UnZigZag block to float\n\n            unZigZag(halfZigBlock[comp], dctData[comp]); // decode float dct\n\n            dctInverse(dctData[comp]);\n          }\n          {\n            csc709Inverse(dctData);\n          }\n          for (let comp = 0; comp < numComp; ++comp) {\n            convertToHalf(dctData[comp], rowBlock[comp], blockx * 64);\n          }\n        } // blockx\n\n        let offset = 0;\n        for (let comp = 0; comp < numComp; ++comp) {\n          const type = channelData[cscSet.idx[comp]].type;\n          for (let y = 8 * blocky; y < 8 * blocky + maxY; ++y) {\n            offset = rowOffsets[comp][y];\n            for (let blockx = 0; blockx < numFullBlocksX; ++blockx) {\n              const src = blockx * 64 + (y & 0x7) * 8;\n              dataView.setUint16(offset + 0 * INT16_SIZE * type, rowBlock[comp][src + 0], true);\n              dataView.setUint16(offset + 1 * INT16_SIZE * type, rowBlock[comp][src + 1], true);\n              dataView.setUint16(offset + 2 * INT16_SIZE * type, rowBlock[comp][src + 2], true);\n              dataView.setUint16(offset + 3 * INT16_SIZE * type, rowBlock[comp][src + 3], true);\n              dataView.setUint16(offset + 4 * INT16_SIZE * type, rowBlock[comp][src + 4], true);\n              dataView.setUint16(offset + 5 * INT16_SIZE * type, rowBlock[comp][src + 5], true);\n              dataView.setUint16(offset + 6 * INT16_SIZE * type, rowBlock[comp][src + 6], true);\n              dataView.setUint16(offset + 7 * INT16_SIZE * type, rowBlock[comp][src + 7], true);\n              offset += 8 * INT16_SIZE * type;\n            }\n          } // handle partial X blocks\n\n          if (numFullBlocksX != numBlocksX) {\n            for (let y = 8 * blocky; y < 8 * blocky + maxY; ++y) {\n              const offset = rowOffsets[comp][y] + 8 * numFullBlocksX * INT16_SIZE * type;\n              const src = numFullBlocksX * 64 + (y & 0x7) * 8;\n              for (let x = 0; x < maxX; ++x) {\n                dataView.setUint16(offset + x * INT16_SIZE * type, rowBlock[comp][src + x], true);\n              }\n            }\n          }\n        } // comp\n      } // blocky\n\n      var halfRow = new Uint16Array(width);\n      var dataView = new DataView(outBuffer.buffer); // convert channels back to float, if needed\n\n      for (var comp = 0; comp < numComp; ++comp) {\n        channelData[cscSet.idx[comp]].decoded = true;\n        var type = channelData[cscSet.idx[comp]].type;\n        if (channelData[comp].type != 2) continue;\n        for (var y = 0; y < height; ++y) {\n          const offset = rowOffsets[comp][y];\n          for (var x = 0; x < width; ++x) {\n            halfRow[x] = dataView.getUint16(offset + x * INT16_SIZE * type, true);\n          }\n          for (var x = 0; x < width; ++x) {\n            dataView.setFloat32(offset + x * INT16_SIZE * type, decodeFloat16(halfRow[x]), true);\n          }\n        }\n      }\n    }\n    function unRleAC(currAcComp, acBuffer, halfZigBlock) {\n      var acValue;\n      var dctComp = 1;\n      while (dctComp < 64) {\n        acValue = acBuffer[currAcComp.value];\n        if (acValue == 0xff00) {\n          dctComp = 64;\n        } else if (acValue >> 8 == 0xff) {\n          dctComp += acValue & 0xff;\n        } else {\n          halfZigBlock[dctComp] = acValue;\n          dctComp++;\n        }\n        currAcComp.value++;\n      }\n    }\n    function unZigZag(src, dst) {\n      dst[0] = decodeFloat16(src[0]);\n      dst[1] = decodeFloat16(src[1]);\n      dst[2] = decodeFloat16(src[5]);\n      dst[3] = decodeFloat16(src[6]);\n      dst[4] = decodeFloat16(src[14]);\n      dst[5] = decodeFloat16(src[15]);\n      dst[6] = decodeFloat16(src[27]);\n      dst[7] = decodeFloat16(src[28]);\n      dst[8] = decodeFloat16(src[2]);\n      dst[9] = decodeFloat16(src[4]);\n      dst[10] = decodeFloat16(src[7]);\n      dst[11] = decodeFloat16(src[13]);\n      dst[12] = decodeFloat16(src[16]);\n      dst[13] = decodeFloat16(src[26]);\n      dst[14] = decodeFloat16(src[29]);\n      dst[15] = decodeFloat16(src[42]);\n      dst[16] = decodeFloat16(src[3]);\n      dst[17] = decodeFloat16(src[8]);\n      dst[18] = decodeFloat16(src[12]);\n      dst[19] = decodeFloat16(src[17]);\n      dst[20] = decodeFloat16(src[25]);\n      dst[21] = decodeFloat16(src[30]);\n      dst[22] = decodeFloat16(src[41]);\n      dst[23] = decodeFloat16(src[43]);\n      dst[24] = decodeFloat16(src[9]);\n      dst[25] = decodeFloat16(src[11]);\n      dst[26] = decodeFloat16(src[18]);\n      dst[27] = decodeFloat16(src[24]);\n      dst[28] = decodeFloat16(src[31]);\n      dst[29] = decodeFloat16(src[40]);\n      dst[30] = decodeFloat16(src[44]);\n      dst[31] = decodeFloat16(src[53]);\n      dst[32] = decodeFloat16(src[10]);\n      dst[33] = decodeFloat16(src[19]);\n      dst[34] = decodeFloat16(src[23]);\n      dst[35] = decodeFloat16(src[32]);\n      dst[36] = decodeFloat16(src[39]);\n      dst[37] = decodeFloat16(src[45]);\n      dst[38] = decodeFloat16(src[52]);\n      dst[39] = decodeFloat16(src[54]);\n      dst[40] = decodeFloat16(src[20]);\n      dst[41] = decodeFloat16(src[22]);\n      dst[42] = decodeFloat16(src[33]);\n      dst[43] = decodeFloat16(src[38]);\n      dst[44] = decodeFloat16(src[46]);\n      dst[45] = decodeFloat16(src[51]);\n      dst[46] = decodeFloat16(src[55]);\n      dst[47] = decodeFloat16(src[60]);\n      dst[48] = decodeFloat16(src[21]);\n      dst[49] = decodeFloat16(src[34]);\n      dst[50] = decodeFloat16(src[37]);\n      dst[51] = decodeFloat16(src[47]);\n      dst[52] = decodeFloat16(src[50]);\n      dst[53] = decodeFloat16(src[56]);\n      dst[54] = decodeFloat16(src[59]);\n      dst[55] = decodeFloat16(src[61]);\n      dst[56] = decodeFloat16(src[35]);\n      dst[57] = decodeFloat16(src[36]);\n      dst[58] = decodeFloat16(src[48]);\n      dst[59] = decodeFloat16(src[49]);\n      dst[60] = decodeFloat16(src[57]);\n      dst[61] = decodeFloat16(src[58]);\n      dst[62] = decodeFloat16(src[62]);\n      dst[63] = decodeFloat16(src[63]);\n    }\n    function dctInverse(data) {\n      const a = 0.5 * Math.cos(3.14159 / 4.0);\n      const b = 0.5 * Math.cos(3.14159 / 16.0);\n      const c = 0.5 * Math.cos(3.14159 / 8.0);\n      const d = 0.5 * Math.cos(3.0 * 3.14159 / 16.0);\n      const e = 0.5 * Math.cos(5.0 * 3.14159 / 16.0);\n      const f = 0.5 * Math.cos(3.0 * 3.14159 / 8.0);\n      const g = 0.5 * Math.cos(7.0 * 3.14159 / 16.0);\n      var alpha = new Array(4);\n      var beta = new Array(4);\n      var theta = new Array(4);\n      var gamma = new Array(4);\n      for (var row = 0; row < 8; ++row) {\n        var rowPtr = row * 8;\n        alpha[0] = c * data[rowPtr + 2];\n        alpha[1] = f * data[rowPtr + 2];\n        alpha[2] = c * data[rowPtr + 6];\n        alpha[3] = f * data[rowPtr + 6];\n        beta[0] = b * data[rowPtr + 1] + d * data[rowPtr + 3] + e * data[rowPtr + 5] + g * data[rowPtr + 7];\n        beta[1] = d * data[rowPtr + 1] - g * data[rowPtr + 3] - b * data[rowPtr + 5] - e * data[rowPtr + 7];\n        beta[2] = e * data[rowPtr + 1] - b * data[rowPtr + 3] + g * data[rowPtr + 5] + d * data[rowPtr + 7];\n        beta[3] = g * data[rowPtr + 1] - e * data[rowPtr + 3] + d * data[rowPtr + 5] - b * data[rowPtr + 7];\n        theta[0] = a * (data[rowPtr + 0] + data[rowPtr + 4]);\n        theta[3] = a * (data[rowPtr + 0] - data[rowPtr + 4]);\n        theta[1] = alpha[0] + alpha[3];\n        theta[2] = alpha[1] - alpha[2];\n        gamma[0] = theta[0] + theta[1];\n        gamma[1] = theta[3] + theta[2];\n        gamma[2] = theta[3] - theta[2];\n        gamma[3] = theta[0] - theta[1];\n        data[rowPtr + 0] = gamma[0] + beta[0];\n        data[rowPtr + 1] = gamma[1] + beta[1];\n        data[rowPtr + 2] = gamma[2] + beta[2];\n        data[rowPtr + 3] = gamma[3] + beta[3];\n        data[rowPtr + 4] = gamma[3] - beta[3];\n        data[rowPtr + 5] = gamma[2] - beta[2];\n        data[rowPtr + 6] = gamma[1] - beta[1];\n        data[rowPtr + 7] = gamma[0] - beta[0];\n      }\n      for (var column = 0; column < 8; ++column) {\n        alpha[0] = c * data[16 + column];\n        alpha[1] = f * data[16 + column];\n        alpha[2] = c * data[48 + column];\n        alpha[3] = f * data[48 + column];\n        beta[0] = b * data[8 + column] + d * data[24 + column] + e * data[40 + column] + g * data[56 + column];\n        beta[1] = d * data[8 + column] - g * data[24 + column] - b * data[40 + column] - e * data[56 + column];\n        beta[2] = e * data[8 + column] - b * data[24 + column] + g * data[40 + column] + d * data[56 + column];\n        beta[3] = g * data[8 + column] - e * data[24 + column] + d * data[40 + column] - b * data[56 + column];\n        theta[0] = a * (data[column] + data[32 + column]);\n        theta[3] = a * (data[column] - data[32 + column]);\n        theta[1] = alpha[0] + alpha[3];\n        theta[2] = alpha[1] - alpha[2];\n        gamma[0] = theta[0] + theta[1];\n        gamma[1] = theta[3] + theta[2];\n        gamma[2] = theta[3] - theta[2];\n        gamma[3] = theta[0] - theta[1];\n        data[0 + column] = gamma[0] + beta[0];\n        data[8 + column] = gamma[1] + beta[1];\n        data[16 + column] = gamma[2] + beta[2];\n        data[24 + column] = gamma[3] + beta[3];\n        data[32 + column] = gamma[3] - beta[3];\n        data[40 + column] = gamma[2] - beta[2];\n        data[48 + column] = gamma[1] - beta[1];\n        data[56 + column] = gamma[0] - beta[0];\n      }\n    }\n    function csc709Inverse(data) {\n      for (var i = 0; i < 64; ++i) {\n        var y = data[0][i];\n        var cb = data[1][i];\n        var cr = data[2][i];\n        data[0][i] = y + 1.5747 * cr;\n        data[1][i] = y - 0.1873 * cb - 0.4682 * cr;\n        data[2][i] = y + 1.8556 * cb;\n      }\n    }\n    function convertToHalf(src, dst, idx) {\n      for (var i = 0; i < 64; ++i) {\n        dst[idx + i] = DataUtils.toHalfFloat(toLinear(src[i]));\n      }\n    }\n    function toLinear(float) {\n      if (float <= 1) {\n        return Math.sign(float) * Math.pow(Math.abs(float), 2.2);\n      } else {\n        return Math.sign(float) * Math.pow(logBase, Math.abs(float) - 1.0);\n      }\n    }\n    function uncompressRAW(info) {\n      return new DataView(info.array.buffer, info.offset.value, info.size);\n    }\n    function uncompressRLE(info) {\n      var compressed = info.viewer.buffer.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = new Uint8Array(decodeRunLength(compressed));\n      var tmpBuffer = new Uint8Array(rawBuffer.length);\n      predictor(rawBuffer); // revert predictor\n\n      interleaveScalar(rawBuffer, tmpBuffer); // interleave pixels\n\n      return new DataView(tmpBuffer.buffer);\n    }\n    function uncompressZIP(info) {\n      var compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = unzlibSync(compressed); // eslint-disable-line no-undef\n\n      var tmpBuffer = new Uint8Array(rawBuffer.length);\n      predictor(rawBuffer); // revert predictor\n\n      interleaveScalar(rawBuffer, tmpBuffer); // interleave pixels\n\n      return new DataView(tmpBuffer.buffer);\n    }\n    function uncompressPIZ(info) {\n      var inDataView = info.viewer;\n      var inOffset = {\n        value: info.offset.value\n      };\n      var outBuffer = new Uint16Array(info.width * info.scanlineBlockSize * (info.channels * info.type));\n      var bitmap = new Uint8Array(BITMAP_SIZE); // Setup channel info\n\n      var outBufferEnd = 0;\n      var pizChannelData = new Array(info.channels);\n      for (var i = 0; i < info.channels; i++) {\n        pizChannelData[i] = {};\n        pizChannelData[i]['start'] = outBufferEnd;\n        pizChannelData[i]['end'] = pizChannelData[i]['start'];\n        pizChannelData[i]['nx'] = info.width;\n        pizChannelData[i]['ny'] = info.lines;\n        pizChannelData[i]['size'] = info.type;\n        outBufferEnd += pizChannelData[i].nx * pizChannelData[i].ny * pizChannelData[i].size;\n      } // Read range compression data\n\n      var minNonZero = parseUint16(inDataView, inOffset);\n      var maxNonZero = parseUint16(inDataView, inOffset);\n      if (maxNonZero >= BITMAP_SIZE) {\n        throw 'Something is wrong with PIZ_COMPRESSION BITMAP_SIZE';\n      }\n      if (minNonZero <= maxNonZero) {\n        for (var i = 0; i < maxNonZero - minNonZero + 1; i++) {\n          bitmap[i + minNonZero] = parseUint8(inDataView, inOffset);\n        }\n      } // Reverse LUT\n\n      var lut = new Uint16Array(USHORT_RANGE);\n      var maxValue = reverseLutFromBitmap(bitmap, lut);\n      var length = parseUint32(inDataView, inOffset); // Huffman decoding\n\n      hufUncompress(info.array, inDataView, inOffset, length, outBuffer, outBufferEnd); // Wavelet decoding\n\n      for (var i = 0; i < info.channels; ++i) {\n        var cd = pizChannelData[i];\n        for (var j = 0; j < pizChannelData[i].size; ++j) {\n          wav2Decode(outBuffer, cd.start + j, cd.nx, cd.size, cd.ny, cd.nx * cd.size, maxValue);\n        }\n      } // Expand the pixel data to their original range\n\n      applyLut(lut, outBuffer, outBufferEnd); // Rearrange the pixel data into the format expected by the caller.\n\n      var tmpOffset = 0;\n      var tmpBuffer = new Uint8Array(outBuffer.buffer.byteLength);\n      for (var y = 0; y < info.lines; y++) {\n        for (var c = 0; c < info.channels; c++) {\n          var cd = pizChannelData[c];\n          var n = cd.nx * cd.size;\n          var cp = new Uint8Array(outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE);\n          tmpBuffer.set(cp, tmpOffset);\n          tmpOffset += n * INT16_SIZE;\n          cd.end += n;\n        }\n      }\n      return new DataView(tmpBuffer.buffer);\n    }\n    function uncompressPXR(info) {\n      var compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = unzlibSync(compressed); // eslint-disable-line no-undef\n\n      const sz = info.lines * info.channels * info.width;\n      const tmpBuffer = info.type == 1 ? new Uint16Array(sz) : new Uint32Array(sz);\n      let tmpBufferEnd = 0;\n      let writePtr = 0;\n      const ptr = new Array(4);\n      for (let y = 0; y < info.lines; y++) {\n        for (let c = 0; c < info.channels; c++) {\n          let pixel = 0;\n          switch (info.type) {\n            case 1:\n              ptr[0] = tmpBufferEnd;\n              ptr[1] = ptr[0] + info.width;\n              tmpBufferEnd = ptr[1] + info.width;\n              for (let j = 0; j < info.width; ++j) {\n                const diff = rawBuffer[ptr[0]++] << 8 | rawBuffer[ptr[1]++];\n                pixel += diff;\n                tmpBuffer[writePtr] = pixel;\n                writePtr++;\n              }\n              break;\n            case 2:\n              ptr[0] = tmpBufferEnd;\n              ptr[1] = ptr[0] + info.width;\n              ptr[2] = ptr[1] + info.width;\n              tmpBufferEnd = ptr[2] + info.width;\n              for (let j = 0; j < info.width; ++j) {\n                const diff = rawBuffer[ptr[0]++] << 24 | rawBuffer[ptr[1]++] << 16 | rawBuffer[ptr[2]++] << 8;\n                pixel += diff;\n                tmpBuffer[writePtr] = pixel;\n                writePtr++;\n              }\n              break;\n          }\n        }\n      }\n      return new DataView(tmpBuffer.buffer);\n    }\n    function uncompressDWA(info) {\n      var inDataView = info.viewer;\n      var inOffset = {\n        value: info.offset.value\n      };\n      var outBuffer = new Uint8Array(info.width * info.lines * (info.channels * info.type * INT16_SIZE)); // Read compression header information\n\n      var dwaHeader = {\n        version: parseInt64(inDataView, inOffset),\n        unknownUncompressedSize: parseInt64(inDataView, inOffset),\n        unknownCompressedSize: parseInt64(inDataView, inOffset),\n        acCompressedSize: parseInt64(inDataView, inOffset),\n        dcCompressedSize: parseInt64(inDataView, inOffset),\n        rleCompressedSize: parseInt64(inDataView, inOffset),\n        rleUncompressedSize: parseInt64(inDataView, inOffset),\n        rleRawSize: parseInt64(inDataView, inOffset),\n        totalAcUncompressedCount: parseInt64(inDataView, inOffset),\n        totalDcUncompressedCount: parseInt64(inDataView, inOffset),\n        acCompression: parseInt64(inDataView, inOffset)\n      };\n      if (dwaHeader.version < 2) {\n        throw 'EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported';\n      } // Read channel ruleset information\n\n      var channelRules = new Array();\n      var ruleSize = parseUint16(inDataView, inOffset) - INT16_SIZE;\n      while (ruleSize > 0) {\n        var name = parseNullTerminatedString(inDataView.buffer, inOffset);\n        var value = parseUint8(inDataView, inOffset);\n        var compression = value >> 2 & 3;\n        var csc = (value >> 4) - 1;\n        var index = new Int8Array([csc])[0];\n        var type = parseUint8(inDataView, inOffset);\n        channelRules.push({\n          name: name,\n          index: index,\n          type: type,\n          compression: compression\n        });\n        ruleSize -= name.length + 3;\n      } // Classify channels\n\n      var channels = EXRHeader.channels;\n      var channelData = new Array(info.channels);\n      for (var i = 0; i < info.channels; ++i) {\n        var cd = channelData[i] = {};\n        var channel = channels[i];\n        cd.name = channel.name;\n        cd.compression = UNKNOWN;\n        cd.decoded = false;\n        cd.type = channel.pixelType;\n        cd.pLinear = channel.pLinear;\n        cd.width = info.width;\n        cd.height = info.lines;\n      }\n      var cscSet = {\n        idx: new Array(3)\n      };\n      for (var offset = 0; offset < info.channels; ++offset) {\n        var cd = channelData[offset];\n        for (var i = 0; i < channelRules.length; ++i) {\n          var rule = channelRules[i];\n          if (cd.name == rule.name) {\n            cd.compression = rule.compression;\n            if (rule.index >= 0) {\n              cscSet.idx[rule.index] = offset;\n            }\n            cd.offset = offset;\n          }\n        }\n      } // Read DCT - AC component data\n\n      if (dwaHeader.acCompressedSize > 0) {\n        switch (dwaHeader.acCompression) {\n          case STATIC_HUFFMAN:\n            var acBuffer = new Uint16Array(dwaHeader.totalAcUncompressedCount);\n            hufUncompress(info.array, inDataView, inOffset, dwaHeader.acCompressedSize, acBuffer, dwaHeader.totalAcUncompressedCount);\n            break;\n          case DEFLATE:\n            var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount);\n            var data = unzlibSync(compressed); // eslint-disable-line no-undef\n\n            var acBuffer = new Uint16Array(data.buffer);\n            inOffset.value += dwaHeader.totalAcUncompressedCount;\n            break;\n        }\n      } // Read DCT - DC component data\n\n      if (dwaHeader.dcCompressedSize > 0) {\n        var zlibInfo = {\n          array: info.array,\n          offset: inOffset,\n          size: dwaHeader.dcCompressedSize\n        };\n        var dcBuffer = new Uint16Array(uncompressZIP(zlibInfo).buffer);\n        inOffset.value += dwaHeader.dcCompressedSize;\n      } // Read RLE compressed data\n\n      if (dwaHeader.rleRawSize > 0) {\n        var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.rleCompressedSize);\n        var data = unzlibSync(compressed); // eslint-disable-line no-undef\n\n        var rleBuffer = decodeRunLength(data.buffer);\n        inOffset.value += dwaHeader.rleCompressedSize;\n      } // Prepare outbuffer data offset\n\n      var outBufferEnd = 0;\n      var rowOffsets = new Array(channelData.length);\n      for (var i = 0; i < rowOffsets.length; ++i) {\n        rowOffsets[i] = new Array();\n      }\n      for (var y = 0; y < info.lines; ++y) {\n        for (var chan = 0; chan < channelData.length; ++chan) {\n          rowOffsets[chan].push(outBufferEnd);\n          outBufferEnd += channelData[chan].width * info.type * INT16_SIZE;\n        }\n      } // Lossy DCT decode RGB channels\n\n      lossyDctDecode(cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer); // Decode other channels\n\n      for (var i = 0; i < channelData.length; ++i) {\n        var cd = channelData[i];\n        if (cd.decoded) continue;\n        switch (cd.compression) {\n          case RLE:\n            var row = 0;\n            var rleOffset = 0;\n            for (var y = 0; y < info.lines; ++y) {\n              var rowOffsetBytes = rowOffsets[i][row];\n              for (var x = 0; x < cd.width; ++x) {\n                for (var byte = 0; byte < INT16_SIZE * cd.type; ++byte) {\n                  outBuffer[rowOffsetBytes++] = rleBuffer[rleOffset + byte * cd.width * cd.height];\n                }\n                rleOffset++;\n              }\n              row++;\n            }\n            break;\n          case LOSSY_DCT: // skip\n\n          default:\n            throw 'EXRLoader.parse: unsupported channel compression';\n        }\n      }\n      return new DataView(outBuffer.buffer);\n    }\n    function parseNullTerminatedString(buffer, offset) {\n      var uintBuffer = new Uint8Array(buffer);\n      var endOffset = 0;\n      while (uintBuffer[offset.value + endOffset] != 0) {\n        endOffset += 1;\n      }\n      var stringValue = new TextDecoder().decode(uintBuffer.slice(offset.value, offset.value + endOffset));\n      offset.value = offset.value + endOffset + 1;\n      return stringValue;\n    }\n    function parseFixedLengthString(buffer, offset, size) {\n      var stringValue = new TextDecoder().decode(new Uint8Array(buffer).slice(offset.value, offset.value + size));\n      offset.value = offset.value + size;\n      return stringValue;\n    }\n    function parseRational(dataView, offset) {\n      var x = parseInt32(dataView, offset);\n      var y = parseUint32(dataView, offset);\n      return [x, y];\n    }\n    function parseTimecode(dataView, offset) {\n      var x = parseUint32(dataView, offset);\n      var y = parseUint32(dataView, offset);\n      return [x, y];\n    }\n    function parseInt32(dataView, offset) {\n      var Int32 = dataView.getInt32(offset.value, true);\n      offset.value = offset.value + INT32_SIZE;\n      return Int32;\n    }\n    function parseUint32(dataView, offset) {\n      var Uint32 = dataView.getUint32(offset.value, true);\n      offset.value = offset.value + INT32_SIZE;\n      return Uint32;\n    }\n    function parseUint8Array(uInt8Array, offset) {\n      var Uint8 = uInt8Array[offset.value];\n      offset.value = offset.value + INT8_SIZE;\n      return Uint8;\n    }\n    function parseUint8(dataView, offset) {\n      var Uint8 = dataView.getUint8(offset.value);\n      offset.value = offset.value + INT8_SIZE;\n      return Uint8;\n    }\n    const parseInt64 = function (dataView, offset) {\n      let int;\n      if ('getBigInt64' in DataView.prototype) {\n        int = Number(dataView.getBigInt64(offset.value, true));\n      } else {\n        int = dataView.getUint32(offset.value + 4, true) + Number(dataView.getUint32(offset.value, true) << 32);\n      }\n      offset.value += ULONG_SIZE;\n      return int;\n    };\n    function parseFloat32(dataView, offset) {\n      var float = dataView.getFloat32(offset.value, true);\n      offset.value += FLOAT32_SIZE;\n      return float;\n    }\n    function decodeFloat32(dataView, offset) {\n      return DataUtils.toHalfFloat(parseFloat32(dataView, offset));\n    } // https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n\n    function decodeFloat16(binary) {\n      var exponent = (binary & 0x7c00) >> 10,\n        fraction = binary & 0x03ff;\n      return (binary >> 15 ? -1 : 1) * (exponent ? exponent === 0x1f ? fraction ? NaN : Infinity : Math.pow(2, exponent - 15) * (1 + fraction / 0x400) : 6.103515625e-5 * (fraction / 0x400));\n    }\n    function parseUint16(dataView, offset) {\n      var Uint16 = dataView.getUint16(offset.value, true);\n      offset.value += INT16_SIZE;\n      return Uint16;\n    }\n    function parseFloat16(buffer, offset) {\n      return decodeFloat16(parseUint16(buffer, offset));\n    }\n    function parseChlist(dataView, buffer, offset, size) {\n      var startOffset = offset.value;\n      var channels = [];\n      while (offset.value < startOffset + size - 1) {\n        var name = parseNullTerminatedString(buffer, offset);\n        var pixelType = parseInt32(dataView, offset);\n        var pLinear = parseUint8(dataView, offset);\n        offset.value += 3; // reserved, three chars\n\n        var xSampling = parseInt32(dataView, offset);\n        var ySampling = parseInt32(dataView, offset);\n        channels.push({\n          name: name,\n          pixelType: pixelType,\n          pLinear: pLinear,\n          xSampling: xSampling,\n          ySampling: ySampling\n        });\n      }\n      offset.value += 1;\n      return channels;\n    }\n    function parseChromaticities(dataView, offset) {\n      var redX = parseFloat32(dataView, offset);\n      var redY = parseFloat32(dataView, offset);\n      var greenX = parseFloat32(dataView, offset);\n      var greenY = parseFloat32(dataView, offset);\n      var blueX = parseFloat32(dataView, offset);\n      var blueY = parseFloat32(dataView, offset);\n      var whiteX = parseFloat32(dataView, offset);\n      var whiteY = parseFloat32(dataView, offset);\n      return {\n        redX: redX,\n        redY: redY,\n        greenX: greenX,\n        greenY: greenY,\n        blueX: blueX,\n        blueY: blueY,\n        whiteX: whiteX,\n        whiteY: whiteY\n      };\n    }\n    function parseCompression(dataView, offset) {\n      var compressionCodes = ['NO_COMPRESSION', 'RLE_COMPRESSION', 'ZIPS_COMPRESSION', 'ZIP_COMPRESSION', 'PIZ_COMPRESSION', 'PXR24_COMPRESSION', 'B44_COMPRESSION', 'B44A_COMPRESSION', 'DWAA_COMPRESSION', 'DWAB_COMPRESSION'];\n      var compression = parseUint8(dataView, offset);\n      return compressionCodes[compression];\n    }\n    function parseBox2i(dataView, offset) {\n      var xMin = parseUint32(dataView, offset);\n      var yMin = parseUint32(dataView, offset);\n      var xMax = parseUint32(dataView, offset);\n      var yMax = parseUint32(dataView, offset);\n      return {\n        xMin: xMin,\n        yMin: yMin,\n        xMax: xMax,\n        yMax: yMax\n      };\n    }\n    function parseLineOrder(dataView, offset) {\n      var lineOrders = ['INCREASING_Y'];\n      var lineOrder = parseUint8(dataView, offset);\n      return lineOrders[lineOrder];\n    }\n    function parseV2f(dataView, offset) {\n      var x = parseFloat32(dataView, offset);\n      var y = parseFloat32(dataView, offset);\n      return [x, y];\n    }\n    function parseV3f(dataView, offset) {\n      var x = parseFloat32(dataView, offset);\n      var y = parseFloat32(dataView, offset);\n      var z = parseFloat32(dataView, offset);\n      return [x, y, z];\n    }\n    function parseValue(dataView, buffer, offset, type, size) {\n      if (type === 'string' || type === 'stringvector' || type === 'iccProfile') {\n        return parseFixedLengthString(buffer, offset, size);\n      } else if (type === 'chlist') {\n        return parseChlist(dataView, buffer, offset, size);\n      } else if (type === 'chromaticities') {\n        return parseChromaticities(dataView, offset);\n      } else if (type === 'compression') {\n        return parseCompression(dataView, offset);\n      } else if (type === 'box2i') {\n        return parseBox2i(dataView, offset);\n      } else if (type === 'lineOrder') {\n        return parseLineOrder(dataView, offset);\n      } else if (type === 'float') {\n        return parseFloat32(dataView, offset);\n      } else if (type === 'v2f') {\n        return parseV2f(dataView, offset);\n      } else if (type === 'v3f') {\n        return parseV3f(dataView, offset);\n      } else if (type === 'int') {\n        return parseInt32(dataView, offset);\n      } else if (type === 'rational') {\n        return parseRational(dataView, offset);\n      } else if (type === 'timecode') {\n        return parseTimecode(dataView, offset);\n      } else if (type === 'preview') {\n        offset.value += size;\n        return 'skipped';\n      } else {\n        offset.value += size;\n        return undefined;\n      }\n    }\n    function parseHeader(dataView, buffer, offset) {\n      const EXRHeader = {};\n      if (dataView.getUint32(0, true) != 20000630) {\n        // magic\n        throw \"THREE.EXRLoader: provided file doesn't appear to be in OpenEXR format.\";\n      }\n      EXRHeader.version = dataView.getUint8(4);\n      const spec = dataView.getUint8(5); // fullMask\n\n      EXRHeader.spec = {\n        singleTile: !!(spec & 2),\n        longName: !!(spec & 4),\n        deepFormat: !!(spec & 8),\n        multiPart: !!(spec & 16)\n      }; // start of header\n\n      offset.value = 8; // start at 8 - after pre-amble\n\n      var keepReading = true;\n      while (keepReading) {\n        var attributeName = parseNullTerminatedString(buffer, offset);\n        if (attributeName == 0) {\n          keepReading = false;\n        } else {\n          var attributeType = parseNullTerminatedString(buffer, offset);\n          var attributeSize = parseUint32(dataView, offset);\n          var attributeValue = parseValue(dataView, buffer, offset, attributeType, attributeSize);\n          if (attributeValue === undefined) {\n            console.warn(`EXRLoader.parse: skipped unknown header attribute type \\'${attributeType}\\'.`);\n          } else {\n            EXRHeader[attributeName] = attributeValue;\n          }\n        }\n      }\n      if (spec != 0) {\n        console.error('EXRHeader:', EXRHeader);\n        throw 'THREE.EXRLoader: provided file is currently unsupported.';\n      }\n      return EXRHeader;\n    }\n    function setupDecoder(EXRHeader, dataView, uInt8Array, offset, outputType) {\n      const EXRDecoder = {\n        size: 0,\n        viewer: dataView,\n        array: uInt8Array,\n        offset: offset,\n        width: EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1,\n        height: EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1,\n        channels: EXRHeader.channels.length,\n        bytesPerLine: null,\n        lines: null,\n        inputSize: null,\n        type: EXRHeader.channels[0].pixelType,\n        uncompress: null,\n        getter: null,\n        format: null,\n        encoding: null\n      };\n      switch (EXRHeader.compression) {\n        case 'NO_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressRAW;\n          break;\n        case 'RLE_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressRLE;\n          break;\n        case 'ZIPS_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressZIP;\n          break;\n        case 'ZIP_COMPRESSION':\n          EXRDecoder.lines = 16;\n          EXRDecoder.uncompress = uncompressZIP;\n          break;\n        case 'PIZ_COMPRESSION':\n          EXRDecoder.lines = 32;\n          EXRDecoder.uncompress = uncompressPIZ;\n          break;\n        case 'PXR24_COMPRESSION':\n          EXRDecoder.lines = 16;\n          EXRDecoder.uncompress = uncompressPXR;\n          break;\n        case 'DWAA_COMPRESSION':\n          EXRDecoder.lines = 32;\n          EXRDecoder.uncompress = uncompressDWA;\n          break;\n        case 'DWAB_COMPRESSION':\n          EXRDecoder.lines = 256;\n          EXRDecoder.uncompress = uncompressDWA;\n          break;\n        default:\n          throw 'EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported';\n      }\n      EXRDecoder.scanlineBlockSize = EXRDecoder.lines;\n      if (EXRDecoder.type == 1) {\n        // half\n        switch (outputType) {\n          case FloatType:\n            EXRDecoder.getter = parseFloat16;\n            EXRDecoder.inputSize = INT16_SIZE;\n            break;\n          case HalfFloatType:\n            EXRDecoder.getter = parseUint16;\n            EXRDecoder.inputSize = INT16_SIZE;\n            break;\n        }\n      } else if (EXRDecoder.type == 2) {\n        // float\n        switch (outputType) {\n          case FloatType:\n            EXRDecoder.getter = parseFloat32;\n            EXRDecoder.inputSize = FLOAT32_SIZE;\n            break;\n          case HalfFloatType:\n            EXRDecoder.getter = decodeFloat32;\n            EXRDecoder.inputSize = FLOAT32_SIZE;\n        }\n      } else {\n        throw 'EXRLoader.parse: unsupported pixelType ' + EXRDecoder.type + ' for ' + EXRHeader.compression + '.';\n      }\n      EXRDecoder.blockCount = (EXRHeader.dataWindow.yMax + 1) / EXRDecoder.scanlineBlockSize;\n      for (var i = 0; i < EXRDecoder.blockCount; i++) parseInt64(dataView, offset); // scanlineOffset\n      // we should be passed the scanline offset table, ready to start reading pixel data.\n      // RGB images will be converted to RGBA format, preventing software emulation in select devices.\n\n      EXRDecoder.outputChannels = EXRDecoder.channels == 3 ? 4 : EXRDecoder.channels;\n      const size = EXRDecoder.width * EXRDecoder.height * EXRDecoder.outputChannels;\n      switch (outputType) {\n        case FloatType:\n          EXRDecoder.byteArray = new Float32Array(size); // Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n\n          if (EXRDecoder.channels < EXRDecoder.outputChannels) EXRDecoder.byteArray.fill(1, 0, size);\n          break;\n        case HalfFloatType:\n          EXRDecoder.byteArray = new Uint16Array(size);\n          if (EXRDecoder.channels < EXRDecoder.outputChannels) EXRDecoder.byteArray.fill(0x3c00, 0, size); // Uint16Array holds half float data, 0x3C00 is 1\n\n          break;\n        default:\n          console.error('THREE.EXRLoader: unsupported type: ', outputType);\n          break;\n      }\n      EXRDecoder.bytesPerLine = EXRDecoder.width * EXRDecoder.inputSize * EXRDecoder.channels;\n      if (EXRDecoder.outputChannels == 4) {\n        EXRDecoder.format = RGBAFormat;\n        EXRDecoder.encoding = LinearEncoding;\n      } else {\n        EXRDecoder.format = RedFormat;\n        EXRDecoder.encoding = LinearEncoding;\n      }\n      return EXRDecoder;\n    } // start parsing file [START]\n\n    const bufferDataView = new DataView(buffer);\n    const uInt8Array = new Uint8Array(buffer);\n    const offset = {\n      value: 0\n    }; // get header information and validate format.\n\n    const EXRHeader = parseHeader(bufferDataView, buffer, offset); // get input compression information and prepare decoding.\n\n    const EXRDecoder = setupDecoder(EXRHeader, bufferDataView, uInt8Array, offset, this.type);\n    const tmpOffset = {\n      value: 0\n    };\n    const channelOffsets = {\n      R: 0,\n      G: 1,\n      B: 2,\n      A: 3,\n      Y: 0\n    };\n    for (let scanlineBlockIdx = 0; scanlineBlockIdx < EXRDecoder.height / EXRDecoder.scanlineBlockSize; scanlineBlockIdx++) {\n      const line = parseUint32(bufferDataView, offset); // line_no\n\n      EXRDecoder.size = parseUint32(bufferDataView, offset); // data_len\n\n      EXRDecoder.lines = line + EXRDecoder.scanlineBlockSize > EXRDecoder.height ? EXRDecoder.height - line : EXRDecoder.scanlineBlockSize;\n      const isCompressed = EXRDecoder.size < EXRDecoder.lines * EXRDecoder.bytesPerLine;\n      const viewer = isCompressed ? EXRDecoder.uncompress(EXRDecoder) : uncompressRAW(EXRDecoder);\n      offset.value += EXRDecoder.size;\n      for (let line_y = 0; line_y < EXRDecoder.scanlineBlockSize; line_y++) {\n        const true_y = line_y + scanlineBlockIdx * EXRDecoder.scanlineBlockSize;\n        if (true_y >= EXRDecoder.height) break;\n        for (let channelID = 0; channelID < EXRDecoder.channels; channelID++) {\n          const cOff = channelOffsets[EXRHeader.channels[channelID].name];\n          for (let x = 0; x < EXRDecoder.width; x++) {\n            tmpOffset.value = (line_y * (EXRDecoder.channels * EXRDecoder.width) + channelID * EXRDecoder.width + x) * EXRDecoder.inputSize;\n            const outIndex = (EXRDecoder.height - 1 - true_y) * (EXRDecoder.width * EXRDecoder.outputChannels) + x * EXRDecoder.outputChannels + cOff;\n            EXRDecoder.byteArray[outIndex] = EXRDecoder.getter(viewer, tmpOffset);\n          }\n        }\n      }\n    }\n    return {\n      header: EXRHeader,\n      width: EXRDecoder.width,\n      height: EXRDecoder.height,\n      data: EXRDecoder.byteArray,\n      format: EXRDecoder.format,\n      encoding: EXRDecoder.encoding,\n      type: this.type\n    };\n  }\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      texture.encoding = texData.encoding;\n      texture.minFilter = LinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.flipY = false;\n      if (onLoad) onLoad(texture, texData);\n    }\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n}\nexport { EXRLoader };","map":{"version":3,"names":["DataTextureLoader","HalfFloatType","FloatType","RGBAFormat","LinearEncoding","RedFormat","LinearFilter","DataUtils","unzlibSync","EXRLoader","constructor","manager","type","parse","buffer","USHORT_RANGE","BITMAP_SIZE","HUF_ENCBITS","HUF_DECBITS","HUF_ENCSIZE","HUF_DECSIZE","HUF_DECMASK","NBITS","A_OFFSET","MOD_MASK","SHORT_ZEROCODE_RUN","LONG_ZEROCODE_RUN","SHORTEST_LONG_RUN","ULONG_SIZE","FLOAT32_SIZE","INT32_SIZE","INT16_SIZE","INT8_SIZE","STATIC_HUFFMAN","DEFLATE","UNKNOWN","LOSSY_DCT","RLE","logBase","Math","pow","reverseLutFromBitmap","bitmap","lut","k","i","n","hufClearDecTable","hdec","len","lit","p","getBitsReturn","l","c","lc","getBits","nBits","uInt8Array","inOffset","parseUint8Array","hufTableBuffer","Array","hufCanonicalCodeTable","hcode","nc","hufUnpackEncTable","inDataView","ni","im","iM","value","zerun","hufLength","code","hufCode","hufBuildDecTable","hdecod","pl","plOffset","getCharReturn","getChar","getCodeReturn","getCode","po","rlc","outBuffer","outBufferOffset","outBufferEndOffset","cs","Uint8Array","s","UInt16","Int16","ref","wdec14Return","a","b","wdec14","h","ls","hs","hi","ai","as","bs","wdec16","m","d","bb","aa","wav2Decode","j","nx","ox","ny","oy","mx","w14","p2","py","ey","oy1","oy2","ox1","ox2","i00","i01","i10","i11","px","ex","p01","p10","p11","hufDecode","encodingTable","decodingTable","no","outOffset","inOffsetEnd","trunc","index","hufUncompress","nCompressed","nRaw","initialInOffset","parseUint32","freq","applyLut","data","nData","predictor","source","t","length","interleaveScalar","out","t1","t2","floor","stop","decodeRunLength","size","byteLength","reader","DataView","getInt8","count","push","getUint8","lossyDctDecode","cscSet","rowPtrs","channelData","acBuffer","dcBuffer","dataView","width","idx","height","numComp","numFullBlocksX","numBlocksX","ceil","numBlocksY","leftoverX","leftoverY","currAcComp","currDcComp","dctData","halfZigBlock","rowBlock","rowOffsets","comp","Float32Array","Uint16Array","blocky","maxY","maxX","blockx","fill","unRleAC","unZigZag","dctInverse","csc709Inverse","convertToHalf","offset","y","src","setUint16","x","halfRow","decoded","getUint16","setFloat32","decodeFloat16","acValue","dctComp","dst","cos","e","f","g","alpha","beta","theta","gamma","row","rowPtr","column","cb","cr","toHalfFloat","toLinear","float","sign","abs","uncompressRAW","info","array","uncompressRLE","compressed","viewer","slice","rawBuffer","tmpBuffer","uncompressZIP","uncompressPIZ","scanlineBlockSize","channels","outBufferEnd","pizChannelData","lines","minNonZero","parseUint16","maxNonZero","parseUint8","maxValue","cd","start","tmpOffset","cp","end","set","uncompressPXR","sz","Uint32Array","tmpBufferEnd","writePtr","ptr","pixel","diff","uncompressDWA","dwaHeader","version","parseInt64","unknownUncompressedSize","unknownCompressedSize","acCompressedSize","dcCompressedSize","rleCompressedSize","rleUncompressedSize","rleRawSize","totalAcUncompressedCount","totalDcUncompressedCount","acCompression","EXRHeader","compression","channelRules","ruleSize","name","parseNullTerminatedString","csc","Int8Array","channel","pixelType","pLinear","rule","zlibInfo","rleBuffer","chan","rleOffset","rowOffsetBytes","byte","uintBuffer","endOffset","stringValue","TextDecoder","decode","parseFixedLengthString","parseRational","parseInt32","parseTimecode","Int32","getInt32","Uint32","getUint32","Uint8","int","prototype","Number","getBigInt64","parseFloat32","getFloat32","decodeFloat32","binary","exponent","fraction","NaN","Infinity","Uint16","parseFloat16","parseChlist","startOffset","xSampling","ySampling","parseChromaticities","redX","redY","greenX","greenY","blueX","blueY","whiteX","whiteY","parseCompression","compressionCodes","parseBox2i","xMin","yMin","xMax","yMax","parseLineOrder","lineOrders","lineOrder","parseV2f","parseV3f","z","parseValue","undefined","parseHeader","spec","singleTile","longName","deepFormat","multiPart","keepReading","attributeName","attributeType","attributeSize","attributeValue","console","warn","error","setupDecoder","outputType","EXRDecoder","dataWindow","bytesPerLine","inputSize","uncompress","getter","format","encoding","blockCount","outputChannels","byteArray","bufferDataView","channelOffsets","R","G","B","A","Y","scanlineBlockIdx","line","isCompressed","line_y","true_y","channelID","cOff","outIndex","header","setDataType","load","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","minFilter","magFilter","generateMipmaps","flipY"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/loaders/EXRLoader.js"],"sourcesContent":["import { DataTextureLoader, HalfFloatType, FloatType, RGBAFormat, LinearEncoding, RedFormat, LinearFilter, DataUtils } from 'three';\nimport { unzlibSync } from 'fflate';\n\n/**\n * OpenEXR loader currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\n *\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation, so I have preserved their copyright notices.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n\nclass EXRLoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n\n  parse(buffer) {\n    const USHORT_RANGE = 1 << 16;\n    const BITMAP_SIZE = USHORT_RANGE >> 3;\n    const HUF_ENCBITS = 16; // literal (value) bit length\n\n    const HUF_DECBITS = 14; // decoding bit size (>= 8)\n\n    const HUF_ENCSIZE = (1 << HUF_ENCBITS) + 1; // encoding table size\n\n    const HUF_DECSIZE = 1 << HUF_DECBITS; // decoding table size\n\n    const HUF_DECMASK = HUF_DECSIZE - 1;\n    const NBITS = 16;\n    const A_OFFSET = 1 << NBITS - 1;\n    const MOD_MASK = (1 << NBITS) - 1;\n    const SHORT_ZEROCODE_RUN = 59;\n    const LONG_ZEROCODE_RUN = 63;\n    const SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n    const ULONG_SIZE = 8;\n    const FLOAT32_SIZE = 4;\n    const INT32_SIZE = 4;\n    const INT16_SIZE = 2;\n    const INT8_SIZE = 1;\n    const STATIC_HUFFMAN = 0;\n    const DEFLATE = 1;\n    const UNKNOWN = 0;\n    const LOSSY_DCT = 1;\n    const RLE = 2;\n    const logBase = Math.pow(2.7182818, 2.2);\n\n    function reverseLutFromBitmap(bitmap, lut) {\n      var k = 0;\n\n      for (var i = 0; i < USHORT_RANGE; ++i) {\n        if (i == 0 || bitmap[i >> 3] & 1 << (i & 7)) {\n          lut[k++] = i;\n        }\n      }\n\n      var n = k - 1;\n\n      while (k < USHORT_RANGE) lut[k++] = 0;\n\n      return n;\n    }\n\n    function hufClearDecTable(hdec) {\n      for (var i = 0; i < HUF_DECSIZE; i++) {\n        hdec[i] = {};\n        hdec[i].len = 0;\n        hdec[i].lit = 0;\n        hdec[i].p = null;\n      }\n    }\n\n    const getBitsReturn = {\n      l: 0,\n      c: 0,\n      lc: 0\n    };\n\n    function getBits(nBits, c, lc, uInt8Array, inOffset) {\n      while (lc < nBits) {\n        c = c << 8 | parseUint8Array(uInt8Array, inOffset);\n        lc += 8;\n      }\n\n      lc -= nBits;\n      getBitsReturn.l = c >> lc & (1 << nBits) - 1;\n      getBitsReturn.c = c;\n      getBitsReturn.lc = lc;\n    }\n\n    const hufTableBuffer = new Array(59);\n\n    function hufCanonicalCodeTable(hcode) {\n      for (var i = 0; i <= 58; ++i) hufTableBuffer[i] = 0;\n\n      for (var i = 0; i < HUF_ENCSIZE; ++i) hufTableBuffer[hcode[i]] += 1;\n\n      var c = 0;\n\n      for (var i = 58; i > 0; --i) {\n        var nc = c + hufTableBuffer[i] >> 1;\n        hufTableBuffer[i] = c;\n        c = nc;\n      }\n\n      for (var i = 0; i < HUF_ENCSIZE; ++i) {\n        var l = hcode[i];\n        if (l > 0) hcode[i] = l | hufTableBuffer[l]++ << 6;\n      }\n    }\n\n    function hufUnpackEncTable(uInt8Array, inDataView, inOffset, ni, im, iM, hcode) {\n      var p = inOffset;\n      var c = 0;\n      var lc = 0;\n\n      for (; im <= iM; im++) {\n        if (p.value - inOffset.value > ni) return false;\n        getBits(6, c, lc, uInt8Array, p);\n        var l = getBitsReturn.l;\n        c = getBitsReturn.c;\n        lc = getBitsReturn.lc;\n        hcode[im] = l;\n\n        if (l == LONG_ZEROCODE_RUN) {\n          if (p.value - inOffset.value > ni) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n\n          getBits(8, c, lc, uInt8Array, p);\n          var zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\n          c = getBitsReturn.c;\n          lc = getBitsReturn.lc;\n\n          if (im + zerun > iM + 1) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n\n          while (zerun--) hcode[im++] = 0;\n\n          im--;\n        } else if (l >= SHORT_ZEROCODE_RUN) {\n          var zerun = l - SHORT_ZEROCODE_RUN + 2;\n\n          if (im + zerun > iM + 1) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n\n          while (zerun--) hcode[im++] = 0;\n\n          im--;\n        }\n      }\n\n      hufCanonicalCodeTable(hcode);\n    }\n\n    function hufLength(code) {\n      return code & 63;\n    }\n\n    function hufCode(code) {\n      return code >> 6;\n    }\n\n    function hufBuildDecTable(hcode, im, iM, hdecod) {\n      for (; im <= iM; im++) {\n        var c = hufCode(hcode[im]);\n        var l = hufLength(hcode[im]);\n\n        if (c >> l) {\n          throw 'Invalid table entry';\n        }\n\n        if (l > HUF_DECBITS) {\n          var pl = hdecod[c >> l - HUF_DECBITS];\n\n          if (pl.len) {\n            throw 'Invalid table entry';\n          }\n\n          pl.lit++;\n\n          if (pl.p) {\n            var p = pl.p;\n            pl.p = new Array(pl.lit);\n\n            for (var i = 0; i < pl.lit - 1; ++i) {\n              pl.p[i] = p[i];\n            }\n          } else {\n            pl.p = new Array(1);\n          }\n\n          pl.p[pl.lit - 1] = im;\n        } else if (l) {\n          var plOffset = 0;\n\n          for (var i = 1 << HUF_DECBITS - l; i > 0; i--) {\n            var pl = hdecod[(c << HUF_DECBITS - l) + plOffset];\n\n            if (pl.len || pl.p) {\n              throw 'Invalid table entry';\n            }\n\n            pl.len = l;\n            pl.lit = im;\n            plOffset++;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    const getCharReturn = {\n      c: 0,\n      lc: 0\n    };\n\n    function getChar(c, lc, uInt8Array, inOffset) {\n      c = c << 8 | parseUint8Array(uInt8Array, inOffset);\n      lc += 8;\n      getCharReturn.c = c;\n      getCharReturn.lc = lc;\n    }\n\n    const getCodeReturn = {\n      c: 0,\n      lc: 0\n    };\n\n    function getCode(po, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outBufferOffset, outBufferEndOffset) {\n      if (po == rlc) {\n        if (lc < 8) {\n          getChar(c, lc, uInt8Array, inOffset);\n          c = getCharReturn.c;\n          lc = getCharReturn.lc;\n        }\n\n        lc -= 8;\n        var cs = c >> lc;\n        var cs = new Uint8Array([cs])[0];\n\n        if (outBufferOffset.value + cs > outBufferEndOffset) {\n          return false;\n        }\n\n        var s = outBuffer[outBufferOffset.value - 1];\n\n        while (cs-- > 0) {\n          outBuffer[outBufferOffset.value++] = s;\n        }\n      } else if (outBufferOffset.value < outBufferEndOffset) {\n        outBuffer[outBufferOffset.value++] = po;\n      } else {\n        return false;\n      }\n\n      getCodeReturn.c = c;\n      getCodeReturn.lc = lc;\n    }\n\n    function UInt16(value) {\n      return value & 0xffff;\n    }\n\n    function Int16(value) {\n      var ref = UInt16(value);\n      return ref > 0x7fff ? ref - 0x10000 : ref;\n    }\n\n    const wdec14Return = {\n      a: 0,\n      b: 0\n    };\n\n    function wdec14(l, h) {\n      var ls = Int16(l);\n      var hs = Int16(h);\n      var hi = hs;\n      var ai = ls + (hi & 1) + (hi >> 1);\n      var as = ai;\n      var bs = ai - hi;\n      wdec14Return.a = as;\n      wdec14Return.b = bs;\n    }\n\n    function wdec16(l, h) {\n      var m = UInt16(l);\n      var d = UInt16(h);\n      var bb = m - (d >> 1) & MOD_MASK;\n      var aa = d + bb - A_OFFSET & MOD_MASK;\n      wdec14Return.a = aa;\n      wdec14Return.b = bb;\n    }\n\n    function wav2Decode(buffer, j, nx, ox, ny, oy, mx) {\n      var w14 = mx < 1 << 14;\n      var n = nx > ny ? ny : nx;\n      var p = 1;\n      var p2;\n\n      while (p <= n) p <<= 1;\n\n      p >>= 1;\n      p2 = p;\n      p >>= 1;\n\n      while (p >= 1) {\n        var py = 0;\n        var ey = py + oy * (ny - p2);\n        var oy1 = oy * p;\n        var oy2 = oy * p2;\n        var ox1 = ox * p;\n        var ox2 = ox * p2;\n        var i00, i01, i10, i11;\n\n        for (; py <= ey; py += oy2) {\n          var px = py;\n          var ex = py + ox * (nx - p2);\n\n          for (; px <= ex; px += ox2) {\n            var p01 = px + ox1;\n            var p10 = px + oy1;\n            var p11 = p10 + ox1;\n\n            if (w14) {\n              wdec14(buffer[px + j], buffer[p10 + j]);\n              i00 = wdec14Return.a;\n              i10 = wdec14Return.b;\n              wdec14(buffer[p01 + j], buffer[p11 + j]);\n              i01 = wdec14Return.a;\n              i11 = wdec14Return.b;\n              wdec14(i00, i01);\n              buffer[px + j] = wdec14Return.a;\n              buffer[p01 + j] = wdec14Return.b;\n              wdec14(i10, i11);\n              buffer[p10 + j] = wdec14Return.a;\n              buffer[p11 + j] = wdec14Return.b;\n            } else {\n              wdec16(buffer[px + j], buffer[p10 + j]);\n              i00 = wdec14Return.a;\n              i10 = wdec14Return.b;\n              wdec16(buffer[p01 + j], buffer[p11 + j]);\n              i01 = wdec14Return.a;\n              i11 = wdec14Return.b;\n              wdec16(i00, i01);\n              buffer[px + j] = wdec14Return.a;\n              buffer[p01 + j] = wdec14Return.b;\n              wdec16(i10, i11);\n              buffer[p10 + j] = wdec14Return.a;\n              buffer[p11 + j] = wdec14Return.b;\n            }\n          }\n\n          if (nx & p) {\n            var p10 = px + oy1;\n            if (w14) wdec14(buffer[px + j], buffer[p10 + j]);else wdec16(buffer[px + j], buffer[p10 + j]);\n            i00 = wdec14Return.a;\n            buffer[p10 + j] = wdec14Return.b;\n            buffer[px + j] = i00;\n          }\n        }\n\n        if (ny & p) {\n          var px = py;\n          var ex = py + ox * (nx - p2);\n\n          for (; px <= ex; px += ox2) {\n            var p01 = px + ox1;\n            if (w14) wdec14(buffer[px + j], buffer[p01 + j]);else wdec16(buffer[px + j], buffer[p01 + j]);\n            i00 = wdec14Return.a;\n            buffer[p01 + j] = wdec14Return.b;\n            buffer[px + j] = i00;\n          }\n        }\n\n        p2 = p;\n        p >>= 1;\n      }\n\n      return py;\n    }\n\n    function hufDecode(encodingTable, decodingTable, uInt8Array, inDataView, inOffset, ni, rlc, no, outBuffer, outOffset) {\n      var c = 0;\n      var lc = 0;\n      var outBufferEndOffset = no;\n      var inOffsetEnd = Math.trunc(inOffset.value + (ni + 7) / 8);\n\n      while (inOffset.value < inOffsetEnd) {\n        getChar(c, lc, uInt8Array, inOffset);\n        c = getCharReturn.c;\n        lc = getCharReturn.lc;\n\n        while (lc >= HUF_DECBITS) {\n          var index = c >> lc - HUF_DECBITS & HUF_DECMASK;\n          var pl = decodingTable[index];\n\n          if (pl.len) {\n            lc -= pl.len;\n            getCode(pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n            c = getCodeReturn.c;\n            lc = getCodeReturn.lc;\n          } else {\n            if (!pl.p) {\n              throw 'hufDecode issues';\n            }\n\n            var j;\n\n            for (j = 0; j < pl.lit; j++) {\n              var l = hufLength(encodingTable[pl.p[j]]);\n\n              while (lc < l && inOffset.value < inOffsetEnd) {\n                getChar(c, lc, uInt8Array, inOffset);\n                c = getCharReturn.c;\n                lc = getCharReturn.lc;\n              }\n\n              if (lc >= l) {\n                if (hufCode(encodingTable[pl.p[j]]) == (c >> lc - l & (1 << l) - 1)) {\n                  lc -= l;\n                  getCode(pl.p[j], rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n                  c = getCodeReturn.c;\n                  lc = getCodeReturn.lc;\n                  break;\n                }\n              }\n            }\n\n            if (j == pl.lit) {\n              throw 'hufDecode issues';\n            }\n          }\n        }\n      }\n\n      var i = 8 - ni & 7;\n      c >>= i;\n      lc -= i;\n\n      while (lc > 0) {\n        var pl = decodingTable[c << HUF_DECBITS - lc & HUF_DECMASK];\n\n        if (pl.len) {\n          lc -= pl.len;\n          getCode(pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n          c = getCodeReturn.c;\n          lc = getCodeReturn.lc;\n        } else {\n          throw 'hufDecode issues';\n        }\n      }\n\n      return true;\n    }\n\n    function hufUncompress(uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw) {\n      var outOffset = {\n        value: 0\n      };\n      var initialInOffset = inOffset.value;\n      var im = parseUint32(inDataView, inOffset);\n      var iM = parseUint32(inDataView, inOffset);\n      inOffset.value += 4;\n      var nBits = parseUint32(inDataView, inOffset);\n      inOffset.value += 4;\n\n      if (im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE) {\n        throw 'Something wrong with HUF_ENCSIZE';\n      }\n\n      var freq = new Array(HUF_ENCSIZE);\n      var hdec = new Array(HUF_DECSIZE);\n      hufClearDecTable(hdec);\n      var ni = nCompressed - (inOffset.value - initialInOffset);\n      hufUnpackEncTable(uInt8Array, inDataView, inOffset, ni, im, iM, freq);\n\n      if (nBits > 8 * (nCompressed - (inOffset.value - initialInOffset))) {\n        throw 'Something wrong with hufUncompress';\n      }\n\n      hufBuildDecTable(freq, im, iM, hdec);\n      hufDecode(freq, hdec, uInt8Array, inDataView, inOffset, nBits, iM, nRaw, outBuffer, outOffset);\n    }\n\n    function applyLut(lut, data, nData) {\n      for (var i = 0; i < nData; ++i) {\n        data[i] = lut[data[i]];\n      }\n    }\n\n    function predictor(source) {\n      for (var t = 1; t < source.length; t++) {\n        var d = source[t - 1] + source[t] - 128;\n        source[t] = d;\n      }\n    }\n\n    function interleaveScalar(source, out) {\n      var t1 = 0;\n      var t2 = Math.floor((source.length + 1) / 2);\n      var s = 0;\n      var stop = source.length - 1;\n\n      while (true) {\n        if (s > stop) break;\n        out[s++] = source[t1++];\n        if (s > stop) break;\n        out[s++] = source[t2++];\n      }\n    }\n\n    function decodeRunLength(source) {\n      var size = source.byteLength;\n      var out = new Array();\n      var p = 0;\n      var reader = new DataView(source);\n\n      while (size > 0) {\n        var l = reader.getInt8(p++);\n\n        if (l < 0) {\n          var count = -l;\n          size -= count + 1;\n\n          for (var i = 0; i < count; i++) {\n            out.push(reader.getUint8(p++));\n          }\n        } else {\n          var count = l;\n          size -= 2;\n          var value = reader.getUint8(p++);\n\n          for (var i = 0; i < count + 1; i++) {\n            out.push(value);\n          }\n        }\n      }\n\n      return out;\n    }\n\n    function lossyDctDecode(cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer) {\n      var dataView = new DataView(outBuffer.buffer);\n      var width = channelData[cscSet.idx[0]].width;\n      var height = channelData[cscSet.idx[0]].height;\n      var numComp = 3;\n      var numFullBlocksX = Math.floor(width / 8.0);\n      var numBlocksX = Math.ceil(width / 8.0);\n      var numBlocksY = Math.ceil(height / 8.0);\n      var leftoverX = width - (numBlocksX - 1) * 8;\n      var leftoverY = height - (numBlocksY - 1) * 8;\n      var currAcComp = {\n        value: 0\n      };\n      var currDcComp = new Array(numComp);\n      var dctData = new Array(numComp);\n      var halfZigBlock = new Array(numComp);\n      var rowBlock = new Array(numComp);\n      var rowOffsets = new Array(numComp);\n\n      for (let comp = 0; comp < numComp; ++comp) {\n        rowOffsets[comp] = rowPtrs[cscSet.idx[comp]];\n        currDcComp[comp] = comp < 1 ? 0 : currDcComp[comp - 1] + numBlocksX * numBlocksY;\n        dctData[comp] = new Float32Array(64);\n        halfZigBlock[comp] = new Uint16Array(64);\n        rowBlock[comp] = new Uint16Array(numBlocksX * 64);\n      }\n\n      for (let blocky = 0; blocky < numBlocksY; ++blocky) {\n        var maxY = 8;\n        if (blocky == numBlocksY - 1) maxY = leftoverY;\n        var maxX = 8;\n\n        for (let blockx = 0; blockx < numBlocksX; ++blockx) {\n          if (blockx == numBlocksX - 1) maxX = leftoverX;\n\n          for (let comp = 0; comp < numComp; ++comp) {\n            halfZigBlock[comp].fill(0); // set block DC component\n\n            halfZigBlock[comp][0] = dcBuffer[currDcComp[comp]++]; // set block AC components\n\n            unRleAC(currAcComp, acBuffer, halfZigBlock[comp]); // UnZigZag block to float\n\n            unZigZag(halfZigBlock[comp], dctData[comp]); // decode float dct\n\n            dctInverse(dctData[comp]);\n          }\n\n          {\n            csc709Inverse(dctData);\n          }\n\n          for (let comp = 0; comp < numComp; ++comp) {\n            convertToHalf(dctData[comp], rowBlock[comp], blockx * 64);\n          }\n        } // blockx\n\n\n        let offset = 0;\n\n        for (let comp = 0; comp < numComp; ++comp) {\n          const type = channelData[cscSet.idx[comp]].type;\n\n          for (let y = 8 * blocky; y < 8 * blocky + maxY; ++y) {\n            offset = rowOffsets[comp][y];\n\n            for (let blockx = 0; blockx < numFullBlocksX; ++blockx) {\n              const src = blockx * 64 + (y & 0x7) * 8;\n              dataView.setUint16(offset + 0 * INT16_SIZE * type, rowBlock[comp][src + 0], true);\n              dataView.setUint16(offset + 1 * INT16_SIZE * type, rowBlock[comp][src + 1], true);\n              dataView.setUint16(offset + 2 * INT16_SIZE * type, rowBlock[comp][src + 2], true);\n              dataView.setUint16(offset + 3 * INT16_SIZE * type, rowBlock[comp][src + 3], true);\n              dataView.setUint16(offset + 4 * INT16_SIZE * type, rowBlock[comp][src + 4], true);\n              dataView.setUint16(offset + 5 * INT16_SIZE * type, rowBlock[comp][src + 5], true);\n              dataView.setUint16(offset + 6 * INT16_SIZE * type, rowBlock[comp][src + 6], true);\n              dataView.setUint16(offset + 7 * INT16_SIZE * type, rowBlock[comp][src + 7], true);\n              offset += 8 * INT16_SIZE * type;\n            }\n          } // handle partial X blocks\n\n\n          if (numFullBlocksX != numBlocksX) {\n            for (let y = 8 * blocky; y < 8 * blocky + maxY; ++y) {\n              const offset = rowOffsets[comp][y] + 8 * numFullBlocksX * INT16_SIZE * type;\n              const src = numFullBlocksX * 64 + (y & 0x7) * 8;\n\n              for (let x = 0; x < maxX; ++x) {\n                dataView.setUint16(offset + x * INT16_SIZE * type, rowBlock[comp][src + x], true);\n              }\n            }\n          }\n        } // comp\n\n      } // blocky\n\n\n      var halfRow = new Uint16Array(width);\n      var dataView = new DataView(outBuffer.buffer); // convert channels back to float, if needed\n\n      for (var comp = 0; comp < numComp; ++comp) {\n        channelData[cscSet.idx[comp]].decoded = true;\n        var type = channelData[cscSet.idx[comp]].type;\n        if (channelData[comp].type != 2) continue;\n\n        for (var y = 0; y < height; ++y) {\n          const offset = rowOffsets[comp][y];\n\n          for (var x = 0; x < width; ++x) {\n            halfRow[x] = dataView.getUint16(offset + x * INT16_SIZE * type, true);\n          }\n\n          for (var x = 0; x < width; ++x) {\n            dataView.setFloat32(offset + x * INT16_SIZE * type, decodeFloat16(halfRow[x]), true);\n          }\n        }\n      }\n    }\n\n    function unRleAC(currAcComp, acBuffer, halfZigBlock) {\n      var acValue;\n      var dctComp = 1;\n\n      while (dctComp < 64) {\n        acValue = acBuffer[currAcComp.value];\n\n        if (acValue == 0xff00) {\n          dctComp = 64;\n        } else if (acValue >> 8 == 0xff) {\n          dctComp += acValue & 0xff;\n        } else {\n          halfZigBlock[dctComp] = acValue;\n          dctComp++;\n        }\n\n        currAcComp.value++;\n      }\n    }\n\n    function unZigZag(src, dst) {\n      dst[0] = decodeFloat16(src[0]);\n      dst[1] = decodeFloat16(src[1]);\n      dst[2] = decodeFloat16(src[5]);\n      dst[3] = decodeFloat16(src[6]);\n      dst[4] = decodeFloat16(src[14]);\n      dst[5] = decodeFloat16(src[15]);\n      dst[6] = decodeFloat16(src[27]);\n      dst[7] = decodeFloat16(src[28]);\n      dst[8] = decodeFloat16(src[2]);\n      dst[9] = decodeFloat16(src[4]);\n      dst[10] = decodeFloat16(src[7]);\n      dst[11] = decodeFloat16(src[13]);\n      dst[12] = decodeFloat16(src[16]);\n      dst[13] = decodeFloat16(src[26]);\n      dst[14] = decodeFloat16(src[29]);\n      dst[15] = decodeFloat16(src[42]);\n      dst[16] = decodeFloat16(src[3]);\n      dst[17] = decodeFloat16(src[8]);\n      dst[18] = decodeFloat16(src[12]);\n      dst[19] = decodeFloat16(src[17]);\n      dst[20] = decodeFloat16(src[25]);\n      dst[21] = decodeFloat16(src[30]);\n      dst[22] = decodeFloat16(src[41]);\n      dst[23] = decodeFloat16(src[43]);\n      dst[24] = decodeFloat16(src[9]);\n      dst[25] = decodeFloat16(src[11]);\n      dst[26] = decodeFloat16(src[18]);\n      dst[27] = decodeFloat16(src[24]);\n      dst[28] = decodeFloat16(src[31]);\n      dst[29] = decodeFloat16(src[40]);\n      dst[30] = decodeFloat16(src[44]);\n      dst[31] = decodeFloat16(src[53]);\n      dst[32] = decodeFloat16(src[10]);\n      dst[33] = decodeFloat16(src[19]);\n      dst[34] = decodeFloat16(src[23]);\n      dst[35] = decodeFloat16(src[32]);\n      dst[36] = decodeFloat16(src[39]);\n      dst[37] = decodeFloat16(src[45]);\n      dst[38] = decodeFloat16(src[52]);\n      dst[39] = decodeFloat16(src[54]);\n      dst[40] = decodeFloat16(src[20]);\n      dst[41] = decodeFloat16(src[22]);\n      dst[42] = decodeFloat16(src[33]);\n      dst[43] = decodeFloat16(src[38]);\n      dst[44] = decodeFloat16(src[46]);\n      dst[45] = decodeFloat16(src[51]);\n      dst[46] = decodeFloat16(src[55]);\n      dst[47] = decodeFloat16(src[60]);\n      dst[48] = decodeFloat16(src[21]);\n      dst[49] = decodeFloat16(src[34]);\n      dst[50] = decodeFloat16(src[37]);\n      dst[51] = decodeFloat16(src[47]);\n      dst[52] = decodeFloat16(src[50]);\n      dst[53] = decodeFloat16(src[56]);\n      dst[54] = decodeFloat16(src[59]);\n      dst[55] = decodeFloat16(src[61]);\n      dst[56] = decodeFloat16(src[35]);\n      dst[57] = decodeFloat16(src[36]);\n      dst[58] = decodeFloat16(src[48]);\n      dst[59] = decodeFloat16(src[49]);\n      dst[60] = decodeFloat16(src[57]);\n      dst[61] = decodeFloat16(src[58]);\n      dst[62] = decodeFloat16(src[62]);\n      dst[63] = decodeFloat16(src[63]);\n    }\n\n    function dctInverse(data) {\n      const a = 0.5 * Math.cos(3.14159 / 4.0);\n      const b = 0.5 * Math.cos(3.14159 / 16.0);\n      const c = 0.5 * Math.cos(3.14159 / 8.0);\n      const d = 0.5 * Math.cos(3.0 * 3.14159 / 16.0);\n      const e = 0.5 * Math.cos(5.0 * 3.14159 / 16.0);\n      const f = 0.5 * Math.cos(3.0 * 3.14159 / 8.0);\n      const g = 0.5 * Math.cos(7.0 * 3.14159 / 16.0);\n      var alpha = new Array(4);\n      var beta = new Array(4);\n      var theta = new Array(4);\n      var gamma = new Array(4);\n\n      for (var row = 0; row < 8; ++row) {\n        var rowPtr = row * 8;\n        alpha[0] = c * data[rowPtr + 2];\n        alpha[1] = f * data[rowPtr + 2];\n        alpha[2] = c * data[rowPtr + 6];\n        alpha[3] = f * data[rowPtr + 6];\n        beta[0] = b * data[rowPtr + 1] + d * data[rowPtr + 3] + e * data[rowPtr + 5] + g * data[rowPtr + 7];\n        beta[1] = d * data[rowPtr + 1] - g * data[rowPtr + 3] - b * data[rowPtr + 5] - e * data[rowPtr + 7];\n        beta[2] = e * data[rowPtr + 1] - b * data[rowPtr + 3] + g * data[rowPtr + 5] + d * data[rowPtr + 7];\n        beta[3] = g * data[rowPtr + 1] - e * data[rowPtr + 3] + d * data[rowPtr + 5] - b * data[rowPtr + 7];\n        theta[0] = a * (data[rowPtr + 0] + data[rowPtr + 4]);\n        theta[3] = a * (data[rowPtr + 0] - data[rowPtr + 4]);\n        theta[1] = alpha[0] + alpha[3];\n        theta[2] = alpha[1] - alpha[2];\n        gamma[0] = theta[0] + theta[1];\n        gamma[1] = theta[3] + theta[2];\n        gamma[2] = theta[3] - theta[2];\n        gamma[3] = theta[0] - theta[1];\n        data[rowPtr + 0] = gamma[0] + beta[0];\n        data[rowPtr + 1] = gamma[1] + beta[1];\n        data[rowPtr + 2] = gamma[2] + beta[2];\n        data[rowPtr + 3] = gamma[3] + beta[3];\n        data[rowPtr + 4] = gamma[3] - beta[3];\n        data[rowPtr + 5] = gamma[2] - beta[2];\n        data[rowPtr + 6] = gamma[1] - beta[1];\n        data[rowPtr + 7] = gamma[0] - beta[0];\n      }\n\n      for (var column = 0; column < 8; ++column) {\n        alpha[0] = c * data[16 + column];\n        alpha[1] = f * data[16 + column];\n        alpha[2] = c * data[48 + column];\n        alpha[3] = f * data[48 + column];\n        beta[0] = b * data[8 + column] + d * data[24 + column] + e * data[40 + column] + g * data[56 + column];\n        beta[1] = d * data[8 + column] - g * data[24 + column] - b * data[40 + column] - e * data[56 + column];\n        beta[2] = e * data[8 + column] - b * data[24 + column] + g * data[40 + column] + d * data[56 + column];\n        beta[3] = g * data[8 + column] - e * data[24 + column] + d * data[40 + column] - b * data[56 + column];\n        theta[0] = a * (data[column] + data[32 + column]);\n        theta[3] = a * (data[column] - data[32 + column]);\n        theta[1] = alpha[0] + alpha[3];\n        theta[2] = alpha[1] - alpha[2];\n        gamma[0] = theta[0] + theta[1];\n        gamma[1] = theta[3] + theta[2];\n        gamma[2] = theta[3] - theta[2];\n        gamma[3] = theta[0] - theta[1];\n        data[0 + column] = gamma[0] + beta[0];\n        data[8 + column] = gamma[1] + beta[1];\n        data[16 + column] = gamma[2] + beta[2];\n        data[24 + column] = gamma[3] + beta[3];\n        data[32 + column] = gamma[3] - beta[3];\n        data[40 + column] = gamma[2] - beta[2];\n        data[48 + column] = gamma[1] - beta[1];\n        data[56 + column] = gamma[0] - beta[0];\n      }\n    }\n\n    function csc709Inverse(data) {\n      for (var i = 0; i < 64; ++i) {\n        var y = data[0][i];\n        var cb = data[1][i];\n        var cr = data[2][i];\n        data[0][i] = y + 1.5747 * cr;\n        data[1][i] = y - 0.1873 * cb - 0.4682 * cr;\n        data[2][i] = y + 1.8556 * cb;\n      }\n    }\n\n    function convertToHalf(src, dst, idx) {\n      for (var i = 0; i < 64; ++i) {\n        dst[idx + i] = DataUtils.toHalfFloat(toLinear(src[i]));\n      }\n    }\n\n    function toLinear(float) {\n      if (float <= 1) {\n        return Math.sign(float) * Math.pow(Math.abs(float), 2.2);\n      } else {\n        return Math.sign(float) * Math.pow(logBase, Math.abs(float) - 1.0);\n      }\n    }\n\n    function uncompressRAW(info) {\n      return new DataView(info.array.buffer, info.offset.value, info.size);\n    }\n\n    function uncompressRLE(info) {\n      var compressed = info.viewer.buffer.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = new Uint8Array(decodeRunLength(compressed));\n      var tmpBuffer = new Uint8Array(rawBuffer.length);\n      predictor(rawBuffer); // revert predictor\n\n      interleaveScalar(rawBuffer, tmpBuffer); // interleave pixels\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressZIP(info) {\n      var compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = unzlibSync(compressed); // eslint-disable-line no-undef\n\n      var tmpBuffer = new Uint8Array(rawBuffer.length);\n      predictor(rawBuffer); // revert predictor\n\n      interleaveScalar(rawBuffer, tmpBuffer); // interleave pixels\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressPIZ(info) {\n      var inDataView = info.viewer;\n      var inOffset = {\n        value: info.offset.value\n      };\n      var outBuffer = new Uint16Array(info.width * info.scanlineBlockSize * (info.channels * info.type));\n      var bitmap = new Uint8Array(BITMAP_SIZE); // Setup channel info\n\n      var outBufferEnd = 0;\n      var pizChannelData = new Array(info.channels);\n\n      for (var i = 0; i < info.channels; i++) {\n        pizChannelData[i] = {};\n        pizChannelData[i]['start'] = outBufferEnd;\n        pizChannelData[i]['end'] = pizChannelData[i]['start'];\n        pizChannelData[i]['nx'] = info.width;\n        pizChannelData[i]['ny'] = info.lines;\n        pizChannelData[i]['size'] = info.type;\n        outBufferEnd += pizChannelData[i].nx * pizChannelData[i].ny * pizChannelData[i].size;\n      } // Read range compression data\n\n\n      var minNonZero = parseUint16(inDataView, inOffset);\n      var maxNonZero = parseUint16(inDataView, inOffset);\n\n      if (maxNonZero >= BITMAP_SIZE) {\n        throw 'Something is wrong with PIZ_COMPRESSION BITMAP_SIZE';\n      }\n\n      if (minNonZero <= maxNonZero) {\n        for (var i = 0; i < maxNonZero - minNonZero + 1; i++) {\n          bitmap[i + minNonZero] = parseUint8(inDataView, inOffset);\n        }\n      } // Reverse LUT\n\n\n      var lut = new Uint16Array(USHORT_RANGE);\n      var maxValue = reverseLutFromBitmap(bitmap, lut);\n      var length = parseUint32(inDataView, inOffset); // Huffman decoding\n\n      hufUncompress(info.array, inDataView, inOffset, length, outBuffer, outBufferEnd); // Wavelet decoding\n\n      for (var i = 0; i < info.channels; ++i) {\n        var cd = pizChannelData[i];\n\n        for (var j = 0; j < pizChannelData[i].size; ++j) {\n          wav2Decode(outBuffer, cd.start + j, cd.nx, cd.size, cd.ny, cd.nx * cd.size, maxValue);\n        }\n      } // Expand the pixel data to their original range\n\n\n      applyLut(lut, outBuffer, outBufferEnd); // Rearrange the pixel data into the format expected by the caller.\n\n      var tmpOffset = 0;\n      var tmpBuffer = new Uint8Array(outBuffer.buffer.byteLength);\n\n      for (var y = 0; y < info.lines; y++) {\n        for (var c = 0; c < info.channels; c++) {\n          var cd = pizChannelData[c];\n          var n = cd.nx * cd.size;\n          var cp = new Uint8Array(outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE);\n          tmpBuffer.set(cp, tmpOffset);\n          tmpOffset += n * INT16_SIZE;\n          cd.end += n;\n        }\n      }\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressPXR(info) {\n      var compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = unzlibSync(compressed); // eslint-disable-line no-undef\n\n      const sz = info.lines * info.channels * info.width;\n      const tmpBuffer = info.type == 1 ? new Uint16Array(sz) : new Uint32Array(sz);\n      let tmpBufferEnd = 0;\n      let writePtr = 0;\n      const ptr = new Array(4);\n\n      for (let y = 0; y < info.lines; y++) {\n        for (let c = 0; c < info.channels; c++) {\n          let pixel = 0;\n\n          switch (info.type) {\n            case 1:\n              ptr[0] = tmpBufferEnd;\n              ptr[1] = ptr[0] + info.width;\n              tmpBufferEnd = ptr[1] + info.width;\n\n              for (let j = 0; j < info.width; ++j) {\n                const diff = rawBuffer[ptr[0]++] << 8 | rawBuffer[ptr[1]++];\n                pixel += diff;\n                tmpBuffer[writePtr] = pixel;\n                writePtr++;\n              }\n\n              break;\n\n            case 2:\n              ptr[0] = tmpBufferEnd;\n              ptr[1] = ptr[0] + info.width;\n              ptr[2] = ptr[1] + info.width;\n              tmpBufferEnd = ptr[2] + info.width;\n\n              for (let j = 0; j < info.width; ++j) {\n                const diff = rawBuffer[ptr[0]++] << 24 | rawBuffer[ptr[1]++] << 16 | rawBuffer[ptr[2]++] << 8;\n                pixel += diff;\n                tmpBuffer[writePtr] = pixel;\n                writePtr++;\n              }\n\n              break;\n          }\n        }\n      }\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressDWA(info) {\n      var inDataView = info.viewer;\n      var inOffset = {\n        value: info.offset.value\n      };\n      var outBuffer = new Uint8Array(info.width * info.lines * (info.channels * info.type * INT16_SIZE)); // Read compression header information\n\n      var dwaHeader = {\n        version: parseInt64(inDataView, inOffset),\n        unknownUncompressedSize: parseInt64(inDataView, inOffset),\n        unknownCompressedSize: parseInt64(inDataView, inOffset),\n        acCompressedSize: parseInt64(inDataView, inOffset),\n        dcCompressedSize: parseInt64(inDataView, inOffset),\n        rleCompressedSize: parseInt64(inDataView, inOffset),\n        rleUncompressedSize: parseInt64(inDataView, inOffset),\n        rleRawSize: parseInt64(inDataView, inOffset),\n        totalAcUncompressedCount: parseInt64(inDataView, inOffset),\n        totalDcUncompressedCount: parseInt64(inDataView, inOffset),\n        acCompression: parseInt64(inDataView, inOffset)\n      };\n\n      if (dwaHeader.version < 2) {\n        throw 'EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported';\n      } // Read channel ruleset information\n\n\n      var channelRules = new Array();\n      var ruleSize = parseUint16(inDataView, inOffset) - INT16_SIZE;\n\n      while (ruleSize > 0) {\n        var name = parseNullTerminatedString(inDataView.buffer, inOffset);\n        var value = parseUint8(inDataView, inOffset);\n        var compression = value >> 2 & 3;\n        var csc = (value >> 4) - 1;\n        var index = new Int8Array([csc])[0];\n        var type = parseUint8(inDataView, inOffset);\n        channelRules.push({\n          name: name,\n          index: index,\n          type: type,\n          compression: compression\n        });\n        ruleSize -= name.length + 3;\n      } // Classify channels\n\n\n      var channels = EXRHeader.channels;\n      var channelData = new Array(info.channels);\n\n      for (var i = 0; i < info.channels; ++i) {\n        var cd = channelData[i] = {};\n        var channel = channels[i];\n        cd.name = channel.name;\n        cd.compression = UNKNOWN;\n        cd.decoded = false;\n        cd.type = channel.pixelType;\n        cd.pLinear = channel.pLinear;\n        cd.width = info.width;\n        cd.height = info.lines;\n      }\n\n      var cscSet = {\n        idx: new Array(3)\n      };\n\n      for (var offset = 0; offset < info.channels; ++offset) {\n        var cd = channelData[offset];\n\n        for (var i = 0; i < channelRules.length; ++i) {\n          var rule = channelRules[i];\n\n          if (cd.name == rule.name) {\n            cd.compression = rule.compression;\n\n            if (rule.index >= 0) {\n              cscSet.idx[rule.index] = offset;\n            }\n\n            cd.offset = offset;\n          }\n        }\n      } // Read DCT - AC component data\n\n\n      if (dwaHeader.acCompressedSize > 0) {\n        switch (dwaHeader.acCompression) {\n          case STATIC_HUFFMAN:\n            var acBuffer = new Uint16Array(dwaHeader.totalAcUncompressedCount);\n            hufUncompress(info.array, inDataView, inOffset, dwaHeader.acCompressedSize, acBuffer, dwaHeader.totalAcUncompressedCount);\n            break;\n\n          case DEFLATE:\n            var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount);\n            var data = unzlibSync(compressed); // eslint-disable-line no-undef\n\n            var acBuffer = new Uint16Array(data.buffer);\n            inOffset.value += dwaHeader.totalAcUncompressedCount;\n            break;\n        }\n      } // Read DCT - DC component data\n\n\n      if (dwaHeader.dcCompressedSize > 0) {\n        var zlibInfo = {\n          array: info.array,\n          offset: inOffset,\n          size: dwaHeader.dcCompressedSize\n        };\n        var dcBuffer = new Uint16Array(uncompressZIP(zlibInfo).buffer);\n        inOffset.value += dwaHeader.dcCompressedSize;\n      } // Read RLE compressed data\n\n\n      if (dwaHeader.rleRawSize > 0) {\n        var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.rleCompressedSize);\n        var data = unzlibSync(compressed); // eslint-disable-line no-undef\n\n        var rleBuffer = decodeRunLength(data.buffer);\n        inOffset.value += dwaHeader.rleCompressedSize;\n      } // Prepare outbuffer data offset\n\n\n      var outBufferEnd = 0;\n      var rowOffsets = new Array(channelData.length);\n\n      for (var i = 0; i < rowOffsets.length; ++i) {\n        rowOffsets[i] = new Array();\n      }\n\n      for (var y = 0; y < info.lines; ++y) {\n        for (var chan = 0; chan < channelData.length; ++chan) {\n          rowOffsets[chan].push(outBufferEnd);\n          outBufferEnd += channelData[chan].width * info.type * INT16_SIZE;\n        }\n      } // Lossy DCT decode RGB channels\n\n\n      lossyDctDecode(cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer); // Decode other channels\n\n      for (var i = 0; i < channelData.length; ++i) {\n        var cd = channelData[i];\n        if (cd.decoded) continue;\n\n        switch (cd.compression) {\n          case RLE:\n            var row = 0;\n            var rleOffset = 0;\n\n            for (var y = 0; y < info.lines; ++y) {\n              var rowOffsetBytes = rowOffsets[i][row];\n\n              for (var x = 0; x < cd.width; ++x) {\n                for (var byte = 0; byte < INT16_SIZE * cd.type; ++byte) {\n                  outBuffer[rowOffsetBytes++] = rleBuffer[rleOffset + byte * cd.width * cd.height];\n                }\n\n                rleOffset++;\n              }\n\n              row++;\n            }\n\n            break;\n\n          case LOSSY_DCT: // skip\n\n          default:\n            throw 'EXRLoader.parse: unsupported channel compression';\n        }\n      }\n\n      return new DataView(outBuffer.buffer);\n    }\n\n    function parseNullTerminatedString(buffer, offset) {\n      var uintBuffer = new Uint8Array(buffer);\n      var endOffset = 0;\n\n      while (uintBuffer[offset.value + endOffset] != 0) {\n        endOffset += 1;\n      }\n\n      var stringValue = new TextDecoder().decode(uintBuffer.slice(offset.value, offset.value + endOffset));\n      offset.value = offset.value + endOffset + 1;\n      return stringValue;\n    }\n\n    function parseFixedLengthString(buffer, offset, size) {\n      var stringValue = new TextDecoder().decode(new Uint8Array(buffer).slice(offset.value, offset.value + size));\n      offset.value = offset.value + size;\n      return stringValue;\n    }\n\n    function parseRational(dataView, offset) {\n      var x = parseInt32(dataView, offset);\n      var y = parseUint32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseTimecode(dataView, offset) {\n      var x = parseUint32(dataView, offset);\n      var y = parseUint32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseInt32(dataView, offset) {\n      var Int32 = dataView.getInt32(offset.value, true);\n      offset.value = offset.value + INT32_SIZE;\n      return Int32;\n    }\n\n    function parseUint32(dataView, offset) {\n      var Uint32 = dataView.getUint32(offset.value, true);\n      offset.value = offset.value + INT32_SIZE;\n      return Uint32;\n    }\n\n    function parseUint8Array(uInt8Array, offset) {\n      var Uint8 = uInt8Array[offset.value];\n      offset.value = offset.value + INT8_SIZE;\n      return Uint8;\n    }\n\n    function parseUint8(dataView, offset) {\n      var Uint8 = dataView.getUint8(offset.value);\n      offset.value = offset.value + INT8_SIZE;\n      return Uint8;\n    }\n\n    const parseInt64 = function (dataView, offset) {\n      let int;\n\n      if ('getBigInt64' in DataView.prototype) {\n        int = Number(dataView.getBigInt64(offset.value, true));\n      } else {\n        int = dataView.getUint32(offset.value + 4, true) + Number(dataView.getUint32(offset.value, true) << 32);\n      }\n\n      offset.value += ULONG_SIZE;\n      return int;\n    };\n\n    function parseFloat32(dataView, offset) {\n      var float = dataView.getFloat32(offset.value, true);\n      offset.value += FLOAT32_SIZE;\n      return float;\n    }\n\n    function decodeFloat32(dataView, offset) {\n      return DataUtils.toHalfFloat(parseFloat32(dataView, offset));\n    } // https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n\n\n    function decodeFloat16(binary) {\n      var exponent = (binary & 0x7c00) >> 10,\n          fraction = binary & 0x03ff;\n      return (binary >> 15 ? -1 : 1) * (exponent ? exponent === 0x1f ? fraction ? NaN : Infinity : Math.pow(2, exponent - 15) * (1 + fraction / 0x400) : 6.103515625e-5 * (fraction / 0x400));\n    }\n\n    function parseUint16(dataView, offset) {\n      var Uint16 = dataView.getUint16(offset.value, true);\n      offset.value += INT16_SIZE;\n      return Uint16;\n    }\n\n    function parseFloat16(buffer, offset) {\n      return decodeFloat16(parseUint16(buffer, offset));\n    }\n\n    function parseChlist(dataView, buffer, offset, size) {\n      var startOffset = offset.value;\n      var channels = [];\n\n      while (offset.value < startOffset + size - 1) {\n        var name = parseNullTerminatedString(buffer, offset);\n        var pixelType = parseInt32(dataView, offset);\n        var pLinear = parseUint8(dataView, offset);\n        offset.value += 3; // reserved, three chars\n\n        var xSampling = parseInt32(dataView, offset);\n        var ySampling = parseInt32(dataView, offset);\n        channels.push({\n          name: name,\n          pixelType: pixelType,\n          pLinear: pLinear,\n          xSampling: xSampling,\n          ySampling: ySampling\n        });\n      }\n\n      offset.value += 1;\n      return channels;\n    }\n\n    function parseChromaticities(dataView, offset) {\n      var redX = parseFloat32(dataView, offset);\n      var redY = parseFloat32(dataView, offset);\n      var greenX = parseFloat32(dataView, offset);\n      var greenY = parseFloat32(dataView, offset);\n      var blueX = parseFloat32(dataView, offset);\n      var blueY = parseFloat32(dataView, offset);\n      var whiteX = parseFloat32(dataView, offset);\n      var whiteY = parseFloat32(dataView, offset);\n      return {\n        redX: redX,\n        redY: redY,\n        greenX: greenX,\n        greenY: greenY,\n        blueX: blueX,\n        blueY: blueY,\n        whiteX: whiteX,\n        whiteY: whiteY\n      };\n    }\n\n    function parseCompression(dataView, offset) {\n      var compressionCodes = ['NO_COMPRESSION', 'RLE_COMPRESSION', 'ZIPS_COMPRESSION', 'ZIP_COMPRESSION', 'PIZ_COMPRESSION', 'PXR24_COMPRESSION', 'B44_COMPRESSION', 'B44A_COMPRESSION', 'DWAA_COMPRESSION', 'DWAB_COMPRESSION'];\n      var compression = parseUint8(dataView, offset);\n      return compressionCodes[compression];\n    }\n\n    function parseBox2i(dataView, offset) {\n      var xMin = parseUint32(dataView, offset);\n      var yMin = parseUint32(dataView, offset);\n      var xMax = parseUint32(dataView, offset);\n      var yMax = parseUint32(dataView, offset);\n      return {\n        xMin: xMin,\n        yMin: yMin,\n        xMax: xMax,\n        yMax: yMax\n      };\n    }\n\n    function parseLineOrder(dataView, offset) {\n      var lineOrders = ['INCREASING_Y'];\n      var lineOrder = parseUint8(dataView, offset);\n      return lineOrders[lineOrder];\n    }\n\n    function parseV2f(dataView, offset) {\n      var x = parseFloat32(dataView, offset);\n      var y = parseFloat32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseV3f(dataView, offset) {\n      var x = parseFloat32(dataView, offset);\n      var y = parseFloat32(dataView, offset);\n      var z = parseFloat32(dataView, offset);\n      return [x, y, z];\n    }\n\n    function parseValue(dataView, buffer, offset, type, size) {\n      if (type === 'string' || type === 'stringvector' || type === 'iccProfile') {\n        return parseFixedLengthString(buffer, offset, size);\n      } else if (type === 'chlist') {\n        return parseChlist(dataView, buffer, offset, size);\n      } else if (type === 'chromaticities') {\n        return parseChromaticities(dataView, offset);\n      } else if (type === 'compression') {\n        return parseCompression(dataView, offset);\n      } else if (type === 'box2i') {\n        return parseBox2i(dataView, offset);\n      } else if (type === 'lineOrder') {\n        return parseLineOrder(dataView, offset);\n      } else if (type === 'float') {\n        return parseFloat32(dataView, offset);\n      } else if (type === 'v2f') {\n        return parseV2f(dataView, offset);\n      } else if (type === 'v3f') {\n        return parseV3f(dataView, offset);\n      } else if (type === 'int') {\n        return parseInt32(dataView, offset);\n      } else if (type === 'rational') {\n        return parseRational(dataView, offset);\n      } else if (type === 'timecode') {\n        return parseTimecode(dataView, offset);\n      } else if (type === 'preview') {\n        offset.value += size;\n        return 'skipped';\n      } else {\n        offset.value += size;\n        return undefined;\n      }\n    }\n\n    function parseHeader(dataView, buffer, offset) {\n      const EXRHeader = {};\n\n      if (dataView.getUint32(0, true) != 20000630) {\n        // magic\n        throw \"THREE.EXRLoader: provided file doesn't appear to be in OpenEXR format.\";\n      }\n\n      EXRHeader.version = dataView.getUint8(4);\n      const spec = dataView.getUint8(5); // fullMask\n\n      EXRHeader.spec = {\n        singleTile: !!(spec & 2),\n        longName: !!(spec & 4),\n        deepFormat: !!(spec & 8),\n        multiPart: !!(spec & 16)\n      }; // start of header\n\n      offset.value = 8; // start at 8 - after pre-amble\n\n      var keepReading = true;\n\n      while (keepReading) {\n        var attributeName = parseNullTerminatedString(buffer, offset);\n\n        if (attributeName == 0) {\n          keepReading = false;\n        } else {\n          var attributeType = parseNullTerminatedString(buffer, offset);\n          var attributeSize = parseUint32(dataView, offset);\n          var attributeValue = parseValue(dataView, buffer, offset, attributeType, attributeSize);\n\n          if (attributeValue === undefined) {\n            console.warn(`EXRLoader.parse: skipped unknown header attribute type \\'${attributeType}\\'.`);\n          } else {\n            EXRHeader[attributeName] = attributeValue;\n          }\n        }\n      }\n\n      if (spec != 0) {\n        console.error('EXRHeader:', EXRHeader);\n        throw 'THREE.EXRLoader: provided file is currently unsupported.';\n      }\n\n      return EXRHeader;\n    }\n\n    function setupDecoder(EXRHeader, dataView, uInt8Array, offset, outputType) {\n      const EXRDecoder = {\n        size: 0,\n        viewer: dataView,\n        array: uInt8Array,\n        offset: offset,\n        width: EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1,\n        height: EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1,\n        channels: EXRHeader.channels.length,\n        bytesPerLine: null,\n        lines: null,\n        inputSize: null,\n        type: EXRHeader.channels[0].pixelType,\n        uncompress: null,\n        getter: null,\n        format: null,\n        encoding: null\n      };\n\n      switch (EXRHeader.compression) {\n        case 'NO_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressRAW;\n          break;\n\n        case 'RLE_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressRLE;\n          break;\n\n        case 'ZIPS_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressZIP;\n          break;\n\n        case 'ZIP_COMPRESSION':\n          EXRDecoder.lines = 16;\n          EXRDecoder.uncompress = uncompressZIP;\n          break;\n\n        case 'PIZ_COMPRESSION':\n          EXRDecoder.lines = 32;\n          EXRDecoder.uncompress = uncompressPIZ;\n          break;\n\n        case 'PXR24_COMPRESSION':\n          EXRDecoder.lines = 16;\n          EXRDecoder.uncompress = uncompressPXR;\n          break;\n\n        case 'DWAA_COMPRESSION':\n          EXRDecoder.lines = 32;\n          EXRDecoder.uncompress = uncompressDWA;\n          break;\n\n        case 'DWAB_COMPRESSION':\n          EXRDecoder.lines = 256;\n          EXRDecoder.uncompress = uncompressDWA;\n          break;\n\n        default:\n          throw 'EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported';\n      }\n\n      EXRDecoder.scanlineBlockSize = EXRDecoder.lines;\n\n      if (EXRDecoder.type == 1) {\n        // half\n        switch (outputType) {\n          case FloatType:\n            EXRDecoder.getter = parseFloat16;\n            EXRDecoder.inputSize = INT16_SIZE;\n            break;\n\n          case HalfFloatType:\n            EXRDecoder.getter = parseUint16;\n            EXRDecoder.inputSize = INT16_SIZE;\n            break;\n        }\n      } else if (EXRDecoder.type == 2) {\n        // float\n        switch (outputType) {\n          case FloatType:\n            EXRDecoder.getter = parseFloat32;\n            EXRDecoder.inputSize = FLOAT32_SIZE;\n            break;\n\n          case HalfFloatType:\n            EXRDecoder.getter = decodeFloat32;\n            EXRDecoder.inputSize = FLOAT32_SIZE;\n        }\n      } else {\n        throw 'EXRLoader.parse: unsupported pixelType ' + EXRDecoder.type + ' for ' + EXRHeader.compression + '.';\n      }\n\n      EXRDecoder.blockCount = (EXRHeader.dataWindow.yMax + 1) / EXRDecoder.scanlineBlockSize;\n\n      for (var i = 0; i < EXRDecoder.blockCount; i++) parseInt64(dataView, offset); // scanlineOffset\n      // we should be passed the scanline offset table, ready to start reading pixel data.\n      // RGB images will be converted to RGBA format, preventing software emulation in select devices.\n\n\n      EXRDecoder.outputChannels = EXRDecoder.channels == 3 ? 4 : EXRDecoder.channels;\n      const size = EXRDecoder.width * EXRDecoder.height * EXRDecoder.outputChannels;\n\n      switch (outputType) {\n        case FloatType:\n          EXRDecoder.byteArray = new Float32Array(size); // Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n\n          if (EXRDecoder.channels < EXRDecoder.outputChannels) EXRDecoder.byteArray.fill(1, 0, size);\n          break;\n\n        case HalfFloatType:\n          EXRDecoder.byteArray = new Uint16Array(size);\n          if (EXRDecoder.channels < EXRDecoder.outputChannels) EXRDecoder.byteArray.fill(0x3c00, 0, size); // Uint16Array holds half float data, 0x3C00 is 1\n\n          break;\n\n        default:\n          console.error('THREE.EXRLoader: unsupported type: ', outputType);\n          break;\n      }\n\n      EXRDecoder.bytesPerLine = EXRDecoder.width * EXRDecoder.inputSize * EXRDecoder.channels;\n\n      if (EXRDecoder.outputChannels == 4) {\n        EXRDecoder.format = RGBAFormat;\n        EXRDecoder.encoding = LinearEncoding;\n      } else {\n        EXRDecoder.format = RedFormat;\n        EXRDecoder.encoding = LinearEncoding;\n      }\n\n      return EXRDecoder;\n    } // start parsing file [START]\n\n\n    const bufferDataView = new DataView(buffer);\n    const uInt8Array = new Uint8Array(buffer);\n    const offset = {\n      value: 0\n    }; // get header information and validate format.\n\n    const EXRHeader = parseHeader(bufferDataView, buffer, offset); // get input compression information and prepare decoding.\n\n    const EXRDecoder = setupDecoder(EXRHeader, bufferDataView, uInt8Array, offset, this.type);\n    const tmpOffset = {\n      value: 0\n    };\n    const channelOffsets = {\n      R: 0,\n      G: 1,\n      B: 2,\n      A: 3,\n      Y: 0\n    };\n\n    for (let scanlineBlockIdx = 0; scanlineBlockIdx < EXRDecoder.height / EXRDecoder.scanlineBlockSize; scanlineBlockIdx++) {\n      const line = parseUint32(bufferDataView, offset); // line_no\n\n      EXRDecoder.size = parseUint32(bufferDataView, offset); // data_len\n\n      EXRDecoder.lines = line + EXRDecoder.scanlineBlockSize > EXRDecoder.height ? EXRDecoder.height - line : EXRDecoder.scanlineBlockSize;\n      const isCompressed = EXRDecoder.size < EXRDecoder.lines * EXRDecoder.bytesPerLine;\n      const viewer = isCompressed ? EXRDecoder.uncompress(EXRDecoder) : uncompressRAW(EXRDecoder);\n      offset.value += EXRDecoder.size;\n\n      for (let line_y = 0; line_y < EXRDecoder.scanlineBlockSize; line_y++) {\n        const true_y = line_y + scanlineBlockIdx * EXRDecoder.scanlineBlockSize;\n        if (true_y >= EXRDecoder.height) break;\n\n        for (let channelID = 0; channelID < EXRDecoder.channels; channelID++) {\n          const cOff = channelOffsets[EXRHeader.channels[channelID].name];\n\n          for (let x = 0; x < EXRDecoder.width; x++) {\n            tmpOffset.value = (line_y * (EXRDecoder.channels * EXRDecoder.width) + channelID * EXRDecoder.width + x) * EXRDecoder.inputSize;\n            const outIndex = (EXRDecoder.height - 1 - true_y) * (EXRDecoder.width * EXRDecoder.outputChannels) + x * EXRDecoder.outputChannels + cOff;\n            EXRDecoder.byteArray[outIndex] = EXRDecoder.getter(viewer, tmpOffset);\n          }\n        }\n      }\n    }\n\n    return {\n      header: EXRHeader,\n      width: EXRDecoder.width,\n      height: EXRDecoder.height,\n      data: EXRDecoder.byteArray,\n      format: EXRDecoder.format,\n      encoding: EXRDecoder.encoding,\n      type: this.type\n    };\n  }\n\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      texture.encoding = texData.encoding;\n      texture.minFilter = LinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.flipY = false;\n      if (onLoad) onLoad(texture, texData);\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n\n}\n\nexport { EXRLoader };\n"],"mappings":"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,CAAC,CAAC;MAC9BU,GAAG,CAAC,CAAC,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,CAAC,CAAC,CAAC;MAC9BU,GAAG,CAAC,CAAC,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,CAAC,CAAC,CAAC;MAC9BU,GAAG,CAAC,CAAC,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,CAAC,CAAC,CAAC;MAC9BU,GAAG,CAAC,CAAC,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAC/BU,GAAG,CAAC,CAAC,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAC/BU,GAAG,CAAC,CAAC,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAC/BU,GAAG,CAAC,CAAC,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAC/BU,GAAG,CAAC,CAAC,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,CAAC,CAAC,CAAC;MAC9BU,GAAG,CAAC,CAAC,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,CAAC,CAAC,CAAC;MAC9BU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,CAAC,CAAC,CAAC;MAC/BU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,CAAC,CAAC,CAAC;MAC/BU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,CAAC,CAAC,CAAC;MAC/BU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,CAAC,CAAC,CAAC;MAC/BU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;MAChCU,GAAG,CAAC,EAAE,CAAC,GAAGH,aAAa,CAACP,GAAG,CAAC,EAAE,CAAC,CAAC;M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"},"metadata":{},"sourceType":"module","externalDependencies":[]}