import _createClass from "@babel/runtime/helpers/esm/createClass";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/* eslint-disable class-methods-use-this */
import defaultMoment from 'moment';
import BaseAdapterMoment from '@date-io/moment';
// From https://momentjs.com/docs/#/displaying/format/
var formatTokenMap = {
  // Year
  Y: 'year',
  YY: 'year',
  YYYY: 'year',
  // Month
  M: 'month',
  MM: 'month',
  MMM: {
    sectionType: 'month',
    contentType: 'letter'
  },
  MMMM: {
    sectionType: 'month',
    contentType: 'letter'
  },
  // Day of the month
  D: 'day',
  DD: 'day',
  Do: 'day',
  // Day of the week
  E: 'weekDay',
  e: 'weekDay',
  d: 'weekDay',
  dd: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  ddd: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  dddd: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  // Meridiem
  A: 'meridiem',
  a: 'meridiem',
  // Hours
  H: 'hours',
  HH: 'hours',
  h: 'hours',
  hh: 'hours',
  k: 'hours',
  kk: 'hours',
  // Minutes
  m: 'minutes',
  mm: 'minutes',
  // Seconds
  s: 'seconds',
  ss: 'seconds'
};
export var AdapterMoment = /*#__PURE__*/function (_BaseAdapterMoment) {
  _inherits(AdapterMoment, _BaseAdapterMoment);
  var _super = _createSuper(AdapterMoment);
  function AdapterMoment() {
    var _this;
    _classCallCheck(this, AdapterMoment);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.isMUIAdapter = true;
    _this.formatTokenMap = formatTokenMap;
    _this.escapedCharacters = {
      start: '[',
      end: ']'
    };
    /**
     * The current getFormatHelperText method uses an outdated format parsing logic.
     * We should use this one in the future to support all localized formats.
     */
    _this.expandFormat = function (format) {
      // @see https://github.com/moment/moment/blob/develop/src/lib/format/format.js#L6
      var localFormattingTokens = /(\[[^[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})|./g;
      return format.match(localFormattingTokens).map(function (token) {
        var firstCharacter = token[0];
        if (firstCharacter === 'L' || firstCharacter === ';') {
          return defaultMoment.localeData(_this.getCurrentLocaleCode()).longDateFormat(token);
        }
        return token;
      }).join('');
    };
    _this.getCurrentLocaleCode = function () {
      return _this.locale || defaultMoment.locale();
    };
    // Redefined here just to show how it can be written using expandFormat
    _this.getFormatHelperText = function (format) {
      return _this.expandFormat(format).replace(/a/gi, '(a|p)m').toLocaleLowerCase();
    };
    _this.getWeekNumber = function (date) {
      return date.week();
    };
    _this.getWeekdays = function () {
      return defaultMoment.weekdaysShort(true);
    };
    _this.is12HourCycleInCurrentLocale = function () {
      return /A|a/.test(defaultMoment.localeData(_this.getCurrentLocaleCode()).longDateFormat('LT'));
    };
    return _this;
  }
  return _createClass(AdapterMoment);
}(BaseAdapterMoment);