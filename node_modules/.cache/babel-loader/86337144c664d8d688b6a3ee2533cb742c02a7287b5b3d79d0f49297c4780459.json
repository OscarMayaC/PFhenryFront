{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, Vector3, Quaternion, Matrix4, MeshBasicMaterial, Scene, TextureLoader, Euler, MathUtils, AnimationClip, VectorKeyframeTrack, QuaternionKeyframeTrack, MeshLambertMaterial, MeshPhongMaterial, Vector2, DoubleSide, FrontSide, PerspectiveCamera, OrthographicCamera, Color, AmbientLight, SpotLight, PointLight, DirectionalLight, BufferGeometry, Float32BufferAttribute, Skeleton, Bone, Group, LineBasicMaterial, SkinnedMesh, Mesh, Line, LineSegments, RepeatWrapping, ClampToEdgeWrapping } from 'three';\nimport { TGALoader } from './TGALoader.js';\nclass ColladaLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(text, path) {\n    function getElementsByTagName(xml, name) {\n      // Non recursive xml.getElementsByTagName() ...\n      const array = [];\n      const childNodes = xml.childNodes;\n      for (let i = 0, l = childNodes.length; i < l; i++) {\n        const child = childNodes[i];\n        if (child.nodeName === name) {\n          array.push(child);\n        }\n      }\n      return array;\n    }\n    function parseStrings(text) {\n      if (text.length === 0) return [];\n      const parts = text.trim().split(/\\s+/);\n      const array = new Array(parts.length);\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parts[i];\n      }\n      return array;\n    }\n    function parseFloats(text) {\n      if (text.length === 0) return [];\n      const parts = text.trim().split(/\\s+/);\n      const array = new Array(parts.length);\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseFloat(parts[i]);\n      }\n      return array;\n    }\n    function parseInts(text) {\n      if (text.length === 0) return [];\n      const parts = text.trim().split(/\\s+/);\n      const array = new Array(parts.length);\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseInt(parts[i]);\n      }\n      return array;\n    }\n    function parseId(text) {\n      return text.substring(1);\n    }\n    function generateId() {\n      return 'three_default_' + count++;\n    }\n    function isEmpty(object) {\n      return Object.keys(object).length === 0;\n    } // asset\n\n    function parseAsset(xml) {\n      return {\n        unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n        upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n      };\n    }\n    function parseAssetUnit(xml) {\n      if (xml !== undefined && xml.hasAttribute('meter') === true) {\n        return parseFloat(xml.getAttribute('meter'));\n      } else {\n        return 1; // default 1 meter\n      }\n    }\n\n    function parseAssetUpAxis(xml) {\n      return xml !== undefined ? xml.textContent : 'Y_UP';\n    } // library\n\n    function parseLibrary(xml, libraryName, nodeName, parser) {\n      const library = getElementsByTagName(xml, libraryName)[0];\n      if (library !== undefined) {\n        const elements = getElementsByTagName(library, nodeName);\n        for (let i = 0; i < elements.length; i++) {\n          parser(elements[i]);\n        }\n      }\n    }\n    function buildLibrary(data, builder) {\n      for (const name in data) {\n        const object = data[name];\n        object.build = builder(data[name]);\n      }\n    } // get\n\n    function getBuild(data, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data);\n      return data.build;\n    } // animation\n\n    function parseAnimation(xml) {\n      const data = {\n        sources: {},\n        samplers: {},\n        channels: {}\n      };\n      let hasChildren = false;\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        let id;\n        switch (child.nodeName) {\n          case 'source':\n            id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n          case 'sampler':\n            id = child.getAttribute('id');\n            data.samplers[id] = parseAnimationSampler(child);\n            break;\n          case 'channel':\n            id = child.getAttribute('target');\n            data.channels[id] = parseAnimationChannel(child);\n            break;\n          case 'animation':\n            // hierarchy of related animations\n            parseAnimation(child);\n            hasChildren = true;\n            break;\n          default:\n            console.log(child);\n        }\n      }\n      if (hasChildren === false) {\n        // since 'id' attributes can be optional, it's necessary to generate a UUID for unqiue assignment\n        library.animations[xml.getAttribute('id') || MathUtils.generateUUID()] = data;\n      }\n    }\n    function parseAnimationSampler(xml) {\n      const data = {\n        inputs: {}\n      };\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'input':\n            const id = parseId(child.getAttribute('source'));\n            const semantic = child.getAttribute('semantic');\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n      return data;\n    }\n    function parseAnimationChannel(xml) {\n      const data = {};\n      const target = xml.getAttribute('target'); // parsing SID Addressing Syntax\n\n      let parts = target.split('/');\n      const id = parts.shift();\n      let sid = parts.shift(); // check selection syntax\n\n      const arraySyntax = sid.indexOf('(') !== -1;\n      const memberSyntax = sid.indexOf('.') !== -1;\n      if (memberSyntax) {\n        //  member selection access\n        parts = sid.split('.');\n        sid = parts.shift();\n        data.member = parts.shift();\n      } else if (arraySyntax) {\n        // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n        const indices = sid.split('(');\n        sid = indices.shift();\n        for (let i = 0; i < indices.length; i++) {\n          indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n        }\n        data.indices = indices;\n      }\n      data.id = id;\n      data.sid = sid;\n      data.arraySyntax = arraySyntax;\n      data.memberSyntax = memberSyntax;\n      data.sampler = parseId(xml.getAttribute('source'));\n      return data;\n    }\n    function buildAnimation(data) {\n      const tracks = [];\n      const channels = data.channels;\n      const samplers = data.samplers;\n      const sources = data.sources;\n      for (const target in channels) {\n        if (channels.hasOwnProperty(target)) {\n          const channel = channels[target];\n          const sampler = samplers[channel.sampler];\n          const inputId = sampler.inputs.INPUT;\n          const outputId = sampler.inputs.OUTPUT;\n          const inputSource = sources[inputId];\n          const outputSource = sources[outputId];\n          const animation = buildAnimationChannel(channel, inputSource, outputSource);\n          createKeyframeTracks(animation, tracks);\n        }\n      }\n      return tracks;\n    }\n    function getAnimation(id) {\n      return getBuild(library.animations[id], buildAnimation);\n    }\n    function buildAnimationChannel(channel, inputSource, outputSource) {\n      const node = library.nodes[channel.id];\n      const object3D = getNode(node.id);\n      const transform = node.transforms[channel.sid];\n      const defaultMatrix = node.matrix.clone().transpose();\n      let time, stride;\n      let i, il, j, jl;\n      const data = {}; // the collada spec allows the animation of data in various ways.\n      // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n      switch (transform) {\n        case 'matrix':\n          for (i = 0, il = inputSource.array.length; i < il; i++) {\n            time = inputSource.array[i];\n            stride = i * outputSource.stride;\n            if (data[time] === undefined) data[time] = {};\n            if (channel.arraySyntax === true) {\n              const value = outputSource.array[stride];\n              const index = channel.indices[0] + 4 * channel.indices[1];\n              data[time][index] = value;\n            } else {\n              for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                data[time][j] = outputSource.array[stride + j];\n              }\n            }\n          }\n          break;\n        case 'translate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n        case 'rotate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n        case 'scale':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n      }\n      const keyframes = prepareAnimationData(data, defaultMatrix);\n      const animation = {\n        name: object3D.uuid,\n        keyframes: keyframes\n      };\n      return animation;\n    }\n    function prepareAnimationData(data, defaultMatrix) {\n      const keyframes = []; // transfer data into a sortable array\n\n      for (const time in data) {\n        keyframes.push({\n          time: parseFloat(time),\n          value: data[time]\n        });\n      } // ensure keyframes are sorted by time\n\n      keyframes.sort(ascending); // now we clean up all animation data, so we can use them for keyframe tracks\n\n      for (let i = 0; i < 16; i++) {\n        transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n      }\n      return keyframes; // array sort function\n\n      function ascending(a, b) {\n        return a.time - b.time;\n      }\n    }\n    const position = new Vector3();\n    const scale = new Vector3();\n    const quaternion = new Quaternion();\n    function createKeyframeTracks(animation, tracks) {\n      const keyframes = animation.keyframes;\n      const name = animation.name;\n      const times = [];\n      const positionData = [];\n      const quaternionData = [];\n      const scaleData = [];\n      for (let i = 0, l = keyframes.length; i < l; i++) {\n        const keyframe = keyframes[i];\n        const time = keyframe.time;\n        const value = keyframe.value;\n        matrix.fromArray(value).transpose();\n        matrix.decompose(position, quaternion, scale);\n        times.push(time);\n        positionData.push(position.x, position.y, position.z);\n        quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n        scaleData.push(scale.x, scale.y, scale.z);\n      }\n      if (positionData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.position', times, positionData));\n      if (quaternionData.length > 0) {\n        tracks.push(new QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n      }\n      if (scaleData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.scale', times, scaleData));\n      return tracks;\n    }\n    function transformAnimationData(keyframes, property, defaultValue) {\n      let keyframe;\n      let empty = true;\n      let i, l; // check, if values of a property are missing in our keyframes\n\n      for (i = 0, l = keyframes.length; i < l; i++) {\n        keyframe = keyframes[i];\n        if (keyframe.value[property] === undefined) {\n          keyframe.value[property] = null; // mark as missing\n        } else {\n          empty = false;\n        }\n      }\n      if (empty === true) {\n        // no values at all, so we set a default value\n        for (i = 0, l = keyframes.length; i < l; i++) {\n          keyframe = keyframes[i];\n          keyframe.value[property] = defaultValue;\n        }\n      } else {\n        // filling gaps\n        createMissingKeyframes(keyframes, property);\n      }\n    }\n    function createMissingKeyframes(keyframes, property) {\n      let prev, next;\n      for (let i = 0, l = keyframes.length; i < l; i++) {\n        const keyframe = keyframes[i];\n        if (keyframe.value[property] === null) {\n          prev = getPrev(keyframes, i, property);\n          next = getNext(keyframes, i, property);\n          if (prev === null) {\n            keyframe.value[property] = next.value[property];\n            continue;\n          }\n          if (next === null) {\n            keyframe.value[property] = prev.value[property];\n            continue;\n          }\n          interpolate(keyframe, prev, next, property);\n        }\n      }\n    }\n    function getPrev(keyframes, i, property) {\n      while (i >= 0) {\n        const keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i--;\n      }\n      return null;\n    }\n    function getNext(keyframes, i, property) {\n      while (i < keyframes.length) {\n        const keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i++;\n      }\n      return null;\n    }\n    function interpolate(key, prev, next, property) {\n      if (next.time - prev.time === 0) {\n        key.value[property] = prev.value[property];\n        return;\n      }\n      key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n    } // animation clips\n\n    function parseAnimationClip(xml) {\n      const data = {\n        name: xml.getAttribute('id') || 'default',\n        start: parseFloat(xml.getAttribute('start') || 0),\n        end: parseFloat(xml.getAttribute('end') || 0),\n        animations: []\n      };\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'instance_animation':\n            data.animations.push(parseId(child.getAttribute('url')));\n            break;\n        }\n      }\n      library.clips[xml.getAttribute('id')] = data;\n    }\n    function buildAnimationClip(data) {\n      const tracks = [];\n      const name = data.name;\n      const duration = data.end - data.start || -1;\n      const animations = data.animations;\n      for (let i = 0, il = animations.length; i < il; i++) {\n        const animationTracks = getAnimation(animations[i]);\n        for (let j = 0, jl = animationTracks.length; j < jl; j++) {\n          tracks.push(animationTracks[j]);\n        }\n      }\n      return new AnimationClip(name, duration, tracks);\n    }\n    function getAnimationClip(id) {\n      return getBuild(library.clips[id], buildAnimationClip);\n    } // controller\n\n    function parseController(xml) {\n      const data = {};\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'skin':\n            // there is exactly one skin per controller\n            data.id = parseId(child.getAttribute('source'));\n            data.skin = parseSkin(child);\n            break;\n          case 'morph':\n            data.id = parseId(child.getAttribute('source'));\n            console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n            break;\n        }\n      }\n      library.controllers[xml.getAttribute('id')] = data;\n    }\n    function parseSkin(xml) {\n      const data = {\n        sources: {}\n      };\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'bind_shape_matrix':\n            data.bindShapeMatrix = parseFloats(child.textContent);\n            break;\n          case 'source':\n            const id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n          case 'joints':\n            data.joints = parseJoints(child);\n            break;\n          case 'vertex_weights':\n            data.vertexWeights = parseVertexWeights(child);\n            break;\n        }\n      }\n      return data;\n    }\n    function parseJoints(xml) {\n      const data = {\n        inputs: {}\n      };\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'input':\n            const semantic = child.getAttribute('semantic');\n            const id = parseId(child.getAttribute('source'));\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n      return data;\n    }\n    function parseVertexWeights(xml) {\n      const data = {\n        inputs: {}\n      };\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'input':\n            const semantic = child.getAttribute('semantic');\n            const id = parseId(child.getAttribute('source'));\n            const offset = parseInt(child.getAttribute('offset'));\n            data.inputs[semantic] = {\n              id: id,\n              offset: offset\n            };\n            break;\n          case 'vcount':\n            data.vcount = parseInts(child.textContent);\n            break;\n          case 'v':\n            data.v = parseInts(child.textContent);\n            break;\n        }\n      }\n      return data;\n    }\n    function buildController(data) {\n      const build = {\n        id: data.id\n      };\n      const geometry = library.geometries[build.id];\n      if (data.skin !== undefined) {\n        build.skin = buildSkin(data.skin); // we enhance the 'sources' property of the corresponding geometry with our skin data\n\n        geometry.sources.skinIndices = build.skin.indices;\n        geometry.sources.skinWeights = build.skin.weights;\n      }\n      return build;\n    }\n    function buildSkin(data) {\n      const BONE_LIMIT = 4;\n      const build = {\n        joints: [],\n        // this must be an array to preserve the joint order\n        indices: {\n          array: [],\n          stride: BONE_LIMIT\n        },\n        weights: {\n          array: [],\n          stride: BONE_LIMIT\n        }\n      };\n      const sources = data.sources;\n      const vertexWeights = data.vertexWeights;\n      const vcount = vertexWeights.vcount;\n      const v = vertexWeights.v;\n      const jointOffset = vertexWeights.inputs.JOINT.offset;\n      const weightOffset = vertexWeights.inputs.WEIGHT.offset;\n      const jointSource = data.sources[data.joints.inputs.JOINT];\n      const inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n      const weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n      let stride = 0;\n      let i, j, l; // procces skin data for each vertex\n\n      for (i = 0, l = vcount.length; i < l; i++) {\n        const jointCount = vcount[i]; // this is the amount of joints that affect a single vertex\n\n        const vertexSkinData = [];\n        for (j = 0; j < jointCount; j++) {\n          const skinIndex = v[stride + jointOffset];\n          const weightId = v[stride + weightOffset];\n          const skinWeight = weights[weightId];\n          vertexSkinData.push({\n            index: skinIndex,\n            weight: skinWeight\n          });\n          stride += 2;\n        } // we sort the joints in descending order based on the weights.\n        // this ensures, we only procced the most important joints of the vertex\n\n        vertexSkinData.sort(descending); // now we provide for each vertex a set of four index and weight values.\n        // the order of the skin data matches the order of vertices\n\n        for (j = 0; j < BONE_LIMIT; j++) {\n          const d = vertexSkinData[j];\n          if (d !== undefined) {\n            build.indices.array.push(d.index);\n            build.weights.array.push(d.weight);\n          } else {\n            build.indices.array.push(0);\n            build.weights.array.push(0);\n          }\n        }\n      } // setup bind matrix\n\n      if (data.bindShapeMatrix) {\n        build.bindMatrix = new Matrix4().fromArray(data.bindShapeMatrix).transpose();\n      } else {\n        build.bindMatrix = new Matrix4().identity();\n      } // process bones and inverse bind matrix data\n\n      for (i = 0, l = jointSource.array.length; i < l; i++) {\n        const name = jointSource.array[i];\n        const boneInverse = new Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n        build.joints.push({\n          name: name,\n          boneInverse: boneInverse\n        });\n      }\n      return build; // array sort function\n\n      function descending(a, b) {\n        return b.weight - a.weight;\n      }\n    }\n    function getController(id) {\n      return getBuild(library.controllers[id], buildController);\n    } // image\n\n    function parseImage(xml) {\n      const data = {\n        init_from: getElementsByTagName(xml, 'init_from')[0].textContent\n      };\n      library.images[xml.getAttribute('id')] = data;\n    }\n    function buildImage(data) {\n      if (data.build !== undefined) return data.build;\n      return data.init_from;\n    }\n    function getImage(id) {\n      const data = library.images[id];\n      if (data !== undefined) {\n        return getBuild(data, buildImage);\n      }\n      console.warn(\"THREE.ColladaLoader: Couldn't find image with ID:\", id);\n      return null;\n    } // effect\n\n    function parseEffect(xml) {\n      const data = {};\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'profile_COMMON':\n            data.profile = parseEffectProfileCOMMON(child);\n            break;\n        }\n      }\n      library.effects[xml.getAttribute('id')] = data;\n    }\n    function parseEffectProfileCOMMON(xml) {\n      const data = {\n        surfaces: {},\n        samplers: {}\n      };\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'newparam':\n            parseEffectNewparam(child, data);\n            break;\n          case 'technique':\n            data.technique = parseEffectTechnique(child);\n            break;\n          case 'extra':\n            data.extra = parseEffectExtra(child);\n            break;\n        }\n      }\n      return data;\n    }\n    function parseEffectNewparam(xml, data) {\n      const sid = xml.getAttribute('sid');\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'surface':\n            data.surfaces[sid] = parseEffectSurface(child);\n            break;\n          case 'sampler2D':\n            data.samplers[sid] = parseEffectSampler(child);\n            break;\n        }\n      }\n    }\n    function parseEffectSurface(xml) {\n      const data = {};\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'init_from':\n            data.init_from = child.textContent;\n            break;\n        }\n      }\n      return data;\n    }\n    function parseEffectSampler(xml) {\n      const data = {};\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'source':\n            data.source = child.textContent;\n            break;\n        }\n      }\n      return data;\n    }\n    function parseEffectTechnique(xml) {\n      const data = {};\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'constant':\n          case 'lambert':\n          case 'blinn':\n          case 'phong':\n            data.type = child.nodeName;\n            data.parameters = parseEffectParameters(child);\n            break;\n          case 'extra':\n            data.extra = parseEffectExtra(child);\n            break;\n        }\n      }\n      return data;\n    }\n    function parseEffectParameters(xml) {\n      const data = {};\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'emission':\n          case 'diffuse':\n          case 'specular':\n          case 'bump':\n          case 'ambient':\n          case 'shininess':\n          case 'transparency':\n            data[child.nodeName] = parseEffectParameter(child);\n            break;\n          case 'transparent':\n            data[child.nodeName] = {\n              opaque: child.hasAttribute('opaque') ? child.getAttribute('opaque') : 'A_ONE',\n              data: parseEffectParameter(child)\n            };\n            break;\n        }\n      }\n      return data;\n    }\n    function parseEffectParameter(xml) {\n      const data = {};\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'color':\n            data[child.nodeName] = parseFloats(child.textContent);\n            break;\n          case 'float':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n          case 'texture':\n            data[child.nodeName] = {\n              id: child.getAttribute('texture'),\n              extra: parseEffectParameterTexture(child)\n            };\n            break;\n        }\n      }\n      return data;\n    }\n    function parseEffectParameterTexture(xml) {\n      const data = {\n        technique: {}\n      };\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'extra':\n            parseEffectParameterTextureExtra(child, data);\n            break;\n        }\n      }\n      return data;\n    }\n    function parseEffectParameterTextureExtra(xml, data) {\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'technique':\n            parseEffectParameterTextureExtraTechnique(child, data);\n            break;\n        }\n      }\n    }\n    function parseEffectParameterTextureExtraTechnique(xml, data) {\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'repeatU':\n          case 'repeatV':\n          case 'offsetU':\n          case 'offsetV':\n            data.technique[child.nodeName] = parseFloat(child.textContent);\n            break;\n          case 'wrapU':\n          case 'wrapV':\n            // some files have values for wrapU/wrapV which become NaN via parseInt\n            if (child.textContent.toUpperCase() === 'TRUE') {\n              data.technique[child.nodeName] = 1;\n            } else if (child.textContent.toUpperCase() === 'FALSE') {\n              data.technique[child.nodeName] = 0;\n            } else {\n              data.technique[child.nodeName] = parseInt(child.textContent);\n            }\n            break;\n          case 'bump':\n            data[child.nodeName] = parseEffectExtraTechniqueBump(child);\n            break;\n        }\n      }\n    }\n    function parseEffectExtra(xml) {\n      const data = {};\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'technique':\n            data.technique = parseEffectExtraTechnique(child);\n            break;\n        }\n      }\n      return data;\n    }\n    function parseEffectExtraTechnique(xml) {\n      const data = {};\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'double_sided':\n            data[child.nodeName] = parseInt(child.textContent);\n            break;\n          case 'bump':\n            data[child.nodeName] = parseEffectExtraTechniqueBump(child);\n            break;\n        }\n      }\n      return data;\n    }\n    function parseEffectExtraTechniqueBump(xml) {\n      var data = {};\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'texture':\n            data[child.nodeName] = {\n              id: child.getAttribute('texture'),\n              texcoord: child.getAttribute('texcoord'),\n              extra: parseEffectParameterTexture(child)\n            };\n            break;\n        }\n      }\n      return data;\n    }\n    function buildEffect(data) {\n      return data;\n    }\n    function getEffect(id) {\n      return getBuild(library.effects[id], buildEffect);\n    } // material\n\n    function parseMaterial(xml) {\n      const data = {\n        name: xml.getAttribute('name')\n      };\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'instance_effect':\n            data.url = parseId(child.getAttribute('url'));\n            break;\n        }\n      }\n      library.materials[xml.getAttribute('id')] = data;\n    }\n    function getTextureLoader(image) {\n      let loader;\n      let extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2); // http://www.jstips.co/en/javascript/get-file-extension/\n\n      extension = extension.toLowerCase();\n      switch (extension) {\n        case 'tga':\n          loader = tgaLoader;\n          break;\n        default:\n          loader = textureLoader;\n      }\n      return loader;\n    }\n    function buildMaterial(data) {\n      const effect = getEffect(data.url);\n      const technique = effect.profile.technique;\n      let material;\n      switch (technique.type) {\n        case 'phong':\n        case 'blinn':\n          material = new MeshPhongMaterial();\n          break;\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n        default:\n          material = new MeshBasicMaterial();\n          break;\n      }\n      material.name = data.name || '';\n      function getTexture(textureObject) {\n        const sampler = effect.profile.samplers[textureObject.id];\n        let image = null; // get image\n\n        if (sampler !== undefined) {\n          const surface = effect.profile.surfaces[sampler.source];\n          image = getImage(surface.init_from);\n        } else {\n          console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n          image = getImage(textureObject.id);\n        } // create texture if image is avaiable\n\n        if (image !== null) {\n          const loader = getTextureLoader(image);\n          if (loader !== undefined) {\n            const texture = loader.load(image);\n            const extra = textureObject.extra;\n            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {\n              const technique = extra.technique;\n              texture.wrapS = technique.wrapU ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.wrapT = technique.wrapV ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);\n              texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);\n            } else {\n              texture.wrapS = RepeatWrapping;\n              texture.wrapT = RepeatWrapping;\n            }\n            return texture;\n          } else {\n            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n            return null;\n          }\n        } else {\n          console.warn(\"THREE.ColladaLoader: Couldn't create texture with ID:\", textureObject.id);\n          return null;\n        }\n      }\n      const parameters = technique.parameters;\n      for (const key in parameters) {\n        const parameter = parameters[key];\n        switch (key) {\n          case 'diffuse':\n            if (parameter.color) material.color.fromArray(parameter.color);\n            if (parameter.texture) material.map = getTexture(parameter.texture);\n            break;\n          case 'specular':\n            if (parameter.color && material.specular) material.specular.fromArray(parameter.color);\n            if (parameter.texture) material.specularMap = getTexture(parameter.texture);\n            break;\n          case 'bump':\n            if (parameter.texture) material.normalMap = getTexture(parameter.texture);\n            break;\n          case 'ambient':\n            if (parameter.texture) material.lightMap = getTexture(parameter.texture);\n            break;\n          case 'shininess':\n            if (parameter.float && material.shininess) material.shininess = parameter.float;\n            break;\n          case 'emission':\n            if (parameter.color && material.emissive) material.emissive.fromArray(parameter.color);\n            if (parameter.texture) material.emissiveMap = getTexture(parameter.texture);\n            break;\n        }\n      } //\n\n      let transparent = parameters['transparent'];\n      let transparency = parameters['transparency']; // <transparency> does not exist but <transparent>\n\n      if (transparency === undefined && transparent) {\n        transparency = {\n          float: 1\n        };\n      } // <transparent> does not exist but <transparency>\n\n      if (transparent === undefined && transparency) {\n        transparent = {\n          opaque: 'A_ONE',\n          data: {\n            color: [1, 1, 1, 1]\n          }\n        };\n      }\n      if (transparent && transparency) {\n        // handle case if a texture exists but no color\n        if (transparent.data.texture) {\n          // we do not set an alpha map (see #13792)\n          material.transparent = true;\n        } else {\n          const color = transparent.data.color;\n          switch (transparent.opaque) {\n            case 'A_ONE':\n              material.opacity = color[3] * transparency.float;\n              break;\n            case 'RGB_ZERO':\n              material.opacity = 1 - color[0] * transparency.float;\n              break;\n            case 'A_ZERO':\n              material.opacity = 1 - color[3] * transparency.float;\n              break;\n            case 'RGB_ONE':\n              material.opacity = color[0] * transparency.float;\n              break;\n            default:\n              console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n          }\n          if (material.opacity < 1) material.transparent = true;\n        }\n      } //\n\n      if (technique.extra !== undefined && technique.extra.technique !== undefined) {\n        const techniques = technique.extra.technique;\n        for (const k in techniques) {\n          const v = techniques[k];\n          switch (k) {\n            case 'double_sided':\n              material.side = v === 1 ? DoubleSide : FrontSide;\n              break;\n            case 'bump':\n              material.normalMap = getTexture(v.texture);\n              material.normalScale = new Vector2(1, 1);\n              break;\n          }\n        }\n      }\n      return material;\n    }\n    function getMaterial(id) {\n      return getBuild(library.materials[id], buildMaterial);\n    } // camera\n\n    function parseCamera(xml) {\n      const data = {\n        name: xml.getAttribute('name')\n      };\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'optics':\n            data.optics = parseCameraOptics(child);\n            break;\n        }\n      }\n      library.cameras[xml.getAttribute('id')] = data;\n    }\n    function parseCameraOptics(xml) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        switch (child.nodeName) {\n          case 'technique_common':\n            return parseCameraTechnique(child);\n        }\n      }\n      return {};\n    }\n    function parseCameraTechnique(xml) {\n      const data = {};\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        switch (child.nodeName) {\n          case 'perspective':\n          case 'orthographic':\n            data.technique = child.nodeName;\n            data.parameters = parseCameraParameters(child);\n            break;\n        }\n      }\n      return data;\n    }\n    function parseCameraParameters(xml) {\n      const data = {};\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        switch (child.nodeName) {\n          case 'xfov':\n          case 'yfov':\n          case 'xmag':\n          case 'ymag':\n          case 'znear':\n          case 'zfar':\n          case 'aspect_ratio':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n        }\n      }\n      return data;\n    }\n    function buildCamera(data) {\n      let camera;\n      switch (data.optics.technique) {\n        case 'perspective':\n          camera = new PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n        case 'orthographic':\n          let ymag = data.optics.parameters.ymag;\n          let xmag = data.optics.parameters.xmag;\n          const aspectRatio = data.optics.parameters.aspect_ratio;\n          xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n          ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n          xmag *= 0.5;\n          ymag *= 0.5;\n          camera = new OrthographicCamera(-xmag, xmag, ymag, -ymag,\n          // left, right, top, bottom\n          data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n        default:\n          camera = new PerspectiveCamera();\n          break;\n      }\n      camera.name = data.name || '';\n      return camera;\n    }\n    function getCamera(id) {\n      const data = library.cameras[id];\n      if (data !== undefined) {\n        return getBuild(data, buildCamera);\n      }\n      console.warn(\"THREE.ColladaLoader: Couldn't find camera with ID:\", id);\n      return null;\n    } // light\n\n    function parseLight(xml) {\n      let data = {};\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'technique_common':\n            data = parseLightTechnique(child);\n            break;\n        }\n      }\n      library.lights[xml.getAttribute('id')] = data;\n    }\n    function parseLightTechnique(xml) {\n      const data = {};\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'directional':\n          case 'point':\n          case 'spot':\n          case 'ambient':\n            data.technique = child.nodeName;\n            data.parameters = parseLightParameters(child);\n        }\n      }\n      return data;\n    }\n    function parseLightParameters(xml) {\n      const data = {};\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'color':\n            const array = parseFloats(child.textContent);\n            data.color = new Color().fromArray(array);\n            break;\n          case 'falloff_angle':\n            data.falloffAngle = parseFloat(child.textContent);\n            break;\n          case 'quadratic_attenuation':\n            const f = parseFloat(child.textContent);\n            data.distance = f ? Math.sqrt(1 / f) : 0;\n            break;\n        }\n      }\n      return data;\n    }\n    function buildLight(data) {\n      let light;\n      switch (data.technique) {\n        case 'directional':\n          light = new DirectionalLight();\n          break;\n        case 'point':\n          light = new PointLight();\n          break;\n        case 'spot':\n          light = new SpotLight();\n          break;\n        case 'ambient':\n          light = new AmbientLight();\n          break;\n      }\n      if (data.parameters.color) light.color.copy(data.parameters.color);\n      if (data.parameters.distance) light.distance = data.parameters.distance;\n      return light;\n    }\n    function getLight(id) {\n      const data = library.lights[id];\n      if (data !== undefined) {\n        return getBuild(data, buildLight);\n      }\n      console.warn(\"THREE.ColladaLoader: Couldn't find light with ID:\", id);\n      return null;\n    } // geometry\n\n    function parseGeometry(xml) {\n      const data = {\n        name: xml.getAttribute('name'),\n        sources: {},\n        vertices: {},\n        primitives: []\n      };\n      const mesh = getElementsByTagName(xml, 'mesh')[0]; // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\n      if (mesh === undefined) return;\n      for (let i = 0; i < mesh.childNodes.length; i++) {\n        const child = mesh.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        const id = child.getAttribute('id');\n        switch (child.nodeName) {\n          case 'source':\n            data.sources[id] = parseSource(child);\n            break;\n          case 'vertices':\n            // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n            data.vertices = parseGeometryVertices(child);\n            break;\n          case 'polygons':\n            console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n            break;\n          case 'lines':\n          case 'linestrips':\n          case 'polylist':\n          case 'triangles':\n            data.primitives.push(parseGeometryPrimitive(child));\n            break;\n          default:\n            console.log(child);\n        }\n      }\n      library.geometries[xml.getAttribute('id')] = data;\n    }\n    function parseSource(xml) {\n      const data = {\n        array: [],\n        stride: 3\n      };\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'float_array':\n            data.array = parseFloats(child.textContent);\n            break;\n          case 'Name_array':\n            data.array = parseStrings(child.textContent);\n            break;\n          case 'technique_common':\n            const accessor = getElementsByTagName(child, 'accessor')[0];\n            if (accessor !== undefined) {\n              data.stride = parseInt(accessor.getAttribute('stride'));\n            }\n            break;\n        }\n      }\n      return data;\n    }\n    function parseGeometryVertices(xml) {\n      const data = {};\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n      }\n      return data;\n    }\n    function parseGeometryPrimitive(xml) {\n      const primitive = {\n        type: xml.nodeName,\n        material: xml.getAttribute('material'),\n        count: parseInt(xml.getAttribute('count')),\n        inputs: {},\n        stride: 0,\n        hasUV: false\n      };\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'input':\n            const id = parseId(child.getAttribute('source'));\n            const semantic = child.getAttribute('semantic');\n            const offset = parseInt(child.getAttribute('offset'));\n            const set = parseInt(child.getAttribute('set'));\n            const inputname = set > 0 ? semantic + set : semantic;\n            primitive.inputs[inputname] = {\n              id: id,\n              offset: offset\n            };\n            primitive.stride = Math.max(primitive.stride, offset + 1);\n            if (semantic === 'TEXCOORD') primitive.hasUV = true;\n            break;\n          case 'vcount':\n            primitive.vcount = parseInts(child.textContent);\n            break;\n          case 'p':\n            primitive.p = parseInts(child.textContent);\n            break;\n        }\n      }\n      return primitive;\n    }\n    function groupPrimitives(primitives) {\n      const build = {};\n      for (let i = 0; i < primitives.length; i++) {\n        const primitive = primitives[i];\n        if (build[primitive.type] === undefined) build[primitive.type] = [];\n        build[primitive.type].push(primitive);\n      }\n      return build;\n    }\n    function checkUVCoordinates(primitives) {\n      let count = 0;\n      for (let i = 0, l = primitives.length; i < l; i++) {\n        const primitive = primitives[i];\n        if (primitive.hasUV === true) {\n          count++;\n        }\n      }\n      if (count > 0 && count < primitives.length) {\n        primitives.uvsNeedsFix = true;\n      }\n    }\n    function buildGeometry(data) {\n      const build = {};\n      const sources = data.sources;\n      const vertices = data.vertices;\n      const primitives = data.primitives;\n      if (primitives.length === 0) return {}; // our goal is to create one buffer geometry for a single type of primitives\n      // first, we group all primitives by their type\n\n      const groupedPrimitives = groupPrimitives(primitives);\n      for (const type in groupedPrimitives) {\n        const primitiveType = groupedPrimitives[type]; // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n        checkUVCoordinates(primitiveType); // third, create a buffer geometry for each type of primitives\n\n        build[type] = buildGeometryType(primitiveType, sources, vertices);\n      }\n      return build;\n    }\n    function buildGeometryType(primitives, sources, vertices) {\n      const build = {};\n      const position = {\n        array: [],\n        stride: 0\n      };\n      const normal = {\n        array: [],\n        stride: 0\n      };\n      const uv = {\n        array: [],\n        stride: 0\n      };\n      const uv2 = {\n        array: [],\n        stride: 0\n      };\n      const color = {\n        array: [],\n        stride: 0\n      };\n      const skinIndex = {\n        array: [],\n        stride: 4\n      };\n      const skinWeight = {\n        array: [],\n        stride: 4\n      };\n      const geometry = new BufferGeometry();\n      const materialKeys = [];\n      let start = 0;\n      for (let p = 0; p < primitives.length; p++) {\n        const primitive = primitives[p];\n        const inputs = primitive.inputs; // groups\n\n        let count = 0;\n        switch (primitive.type) {\n          case 'lines':\n          case 'linestrips':\n            count = primitive.count * 2;\n            break;\n          case 'triangles':\n            count = primitive.count * 3;\n            break;\n          case 'polylist':\n            for (let g = 0; g < primitive.count; g++) {\n              const vc = primitive.vcount[g];\n              switch (vc) {\n                case 3:\n                  count += 3; // single triangle\n\n                  break;\n                case 4:\n                  count += 6; // quad, subdivided into two triangles\n\n                  break;\n                default:\n                  count += (vc - 2) * 3; // polylist with more than four vertices\n\n                  break;\n              }\n            }\n            break;\n          default:\n            console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n        }\n        geometry.addGroup(start, count, p);\n        start += count; // material\n\n        if (primitive.material) {\n          materialKeys.push(primitive.material);\n        } // geometry data\n\n        for (const name in inputs) {\n          const input = inputs[name];\n          switch (name) {\n            case 'VERTEX':\n              for (const key in vertices) {\n                const id = vertices[key];\n                switch (key) {\n                  case 'POSITION':\n                    const prevLength = position.array.length;\n                    buildGeometryData(primitive, sources[id], input.offset, position.array);\n                    position.stride = sources[id].stride;\n                    if (sources.skinWeights && sources.skinIndices) {\n                      buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                      buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                    } // see #3803\n\n                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                      const count = (position.array.length - prevLength) / position.stride;\n                      for (let i = 0; i < count; i++) {\n                        // fill missing uv coordinates\n                        uv.array.push(0, 0);\n                      }\n                    }\n                    break;\n                  case 'NORMAL':\n                    buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                    normal.stride = sources[id].stride;\n                    break;\n                  case 'COLOR':\n                    buildGeometryData(primitive, sources[id], input.offset, color.array);\n                    color.stride = sources[id].stride;\n                    break;\n                  case 'TEXCOORD':\n                    buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                    uv.stride = sources[id].stride;\n                    break;\n                  case 'TEXCOORD1':\n                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                    uv.stride = sources[id].stride;\n                    break;\n                  default:\n                    console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                }\n              }\n              break;\n            case 'NORMAL':\n              buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n              normal.stride = sources[input.id].stride;\n              break;\n            case 'COLOR':\n              buildGeometryData(primitive, sources[input.id], input.offset, color.array);\n              color.stride = sources[input.id].stride;\n              break;\n            case 'TEXCOORD':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n              uv.stride = sources[input.id].stride;\n              break;\n            case 'TEXCOORD1':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n              uv2.stride = sources[input.id].stride;\n              break;\n          }\n        }\n      } // build geometry\n\n      if (position.array.length > 0) {\n        geometry.setAttribute('position', new Float32BufferAttribute(position.array, position.stride));\n      }\n      if (normal.array.length > 0) {\n        geometry.setAttribute('normal', new Float32BufferAttribute(normal.array, normal.stride));\n      }\n      if (color.array.length > 0) geometry.setAttribute('color', new Float32BufferAttribute(color.array, color.stride));\n      if (uv.array.length > 0) geometry.setAttribute('uv', new Float32BufferAttribute(uv.array, uv.stride));\n      if (uv2.array.length > 0) geometry.setAttribute('uv2', new Float32BufferAttribute(uv2.array, uv2.stride));\n      if (skinIndex.array.length > 0) {\n        geometry.setAttribute('skinIndex', new Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n      }\n      if (skinWeight.array.length > 0) {\n        geometry.setAttribute('skinWeight', new Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n      }\n      build.data = geometry;\n      build.type = primitives[0].type;\n      build.materialKeys = materialKeys;\n      return build;\n    }\n    function buildGeometryData(primitive, source, offset, array) {\n      const indices = primitive.p;\n      const stride = primitive.stride;\n      const vcount = primitive.vcount;\n      function pushVector(i) {\n        let index = indices[i + offset] * sourceStride;\n        const length = index + sourceStride;\n        for (; index < length; index++) {\n          array.push(sourceArray[index]);\n        }\n      }\n      const sourceArray = source.array;\n      const sourceStride = source.stride;\n      if (primitive.vcount !== undefined) {\n        let index = 0;\n        for (let i = 0, l = vcount.length; i < l; i++) {\n          const count = vcount[i];\n          if (count === 4) {\n            const a = index + stride * 0;\n            const b = index + stride * 1;\n            const c = index + stride * 2;\n            const d = index + stride * 3;\n            pushVector(a);\n            pushVector(b);\n            pushVector(d);\n            pushVector(b);\n            pushVector(c);\n            pushVector(d);\n          } else if (count === 3) {\n            const a = index + stride * 0;\n            const b = index + stride * 1;\n            const c = index + stride * 2;\n            pushVector(a);\n            pushVector(b);\n            pushVector(c);\n          } else if (count > 4) {\n            for (let k = 1, kl = count - 2; k <= kl; k++) {\n              const a = index + stride * 0;\n              const b = index + stride * k;\n              const c = index + stride * (k + 1);\n              pushVector(a);\n              pushVector(b);\n              pushVector(c);\n            }\n          }\n          index += stride * count;\n        }\n      } else {\n        for (let i = 0, l = indices.length; i < l; i += stride) {\n          pushVector(i);\n        }\n      }\n    }\n    function getGeometry(id) {\n      return getBuild(library.geometries[id], buildGeometry);\n    } // kinematics\n\n    function parseKinematicsModel(xml) {\n      const data = {\n        name: xml.getAttribute('name') || '',\n        joints: {},\n        links: []\n      };\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'technique_common':\n            parseKinematicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n      library.kinematicsModels[xml.getAttribute('id')] = data;\n    }\n    function buildKinematicsModel(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n    function getKinematicsModel(id) {\n      return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n    }\n    function parseKinematicsTechniqueCommon(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'joint':\n            data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n            break;\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n        }\n      }\n    }\n    function parseKinematicsJoint(xml) {\n      let data;\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'prismatic':\n          case 'revolute':\n            data = parseKinematicsJointParameter(child);\n            break;\n        }\n      }\n      return data;\n    }\n    function parseKinematicsJointParameter(xml) {\n      const data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        axis: new Vector3(),\n        limits: {\n          min: 0,\n          max: 0\n        },\n        type: xml.nodeName,\n        static: false,\n        zeroPosition: 0,\n        middlePosition: 0\n      };\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'axis':\n            const array = parseFloats(child.textContent);\n            data.axis.fromArray(array);\n            break;\n          case 'limits':\n            const max = child.getElementsByTagName('max')[0];\n            const min = child.getElementsByTagName('min')[0];\n            data.limits.max = parseFloat(max.textContent);\n            data.limits.min = parseFloat(min.textContent);\n            break;\n        }\n      } // if min is equal to or greater than max, consider the joint static\n\n      if (data.limits.min >= data.limits.max) {\n        data.static = true;\n      } // calculate middle position\n\n      data.middlePosition = (data.limits.min + data.limits.max) / 2.0;\n      return data;\n    }\n    function parseKinematicsLink(xml) {\n      const data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        attachments: [],\n        transforms: []\n      };\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'attachment_full':\n            data.attachments.push(parseKinematicsAttachment(child));\n            break;\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n      return data;\n    }\n    function parseKinematicsAttachment(xml) {\n      const data = {\n        joint: xml.getAttribute('joint').split('/').pop(),\n        transforms: [],\n        links: []\n      };\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n      return data;\n    }\n    function parseKinematicsTransform(xml) {\n      const data = {\n        type: xml.nodeName\n      };\n      const array = parseFloats(xml.textContent);\n      switch (data.type) {\n        case 'matrix':\n          data.obj = new Matrix4();\n          data.obj.fromArray(array).transpose();\n          break;\n        case 'translate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          break;\n        case 'rotate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          data.angle = MathUtils.degToRad(array[3]);\n          break;\n      }\n      return data;\n    } // physics\n\n    function parsePhysicsModel(xml) {\n      const data = {\n        name: xml.getAttribute('name') || '',\n        rigidBodies: {}\n      };\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'rigid_body':\n            data.rigidBodies[child.getAttribute('name')] = {};\n            parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n            break;\n        }\n      }\n      library.physicsModels[xml.getAttribute('id')] = data;\n    }\n    function parsePhysicsRigidBody(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'technique_common':\n            parsePhysicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n    }\n    function parsePhysicsTechniqueCommon(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'inertia':\n            data.inertia = parseFloats(child.textContent);\n            break;\n          case 'mass':\n            data.mass = parseFloats(child.textContent)[0];\n            break;\n        }\n      }\n    } // scene\n\n    function parseKinematicsScene(xml) {\n      const data = {\n        bindJointAxis: []\n      };\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'bind_joint_axis':\n            data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n            break;\n        }\n      }\n      library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n    }\n    function parseKinematicsBindJointAxis(xml) {\n      const data = {\n        target: xml.getAttribute('target').split('/').pop()\n      };\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        switch (child.nodeName) {\n          case 'axis':\n            const param = child.getElementsByTagName('param')[0];\n            data.axis = param.textContent;\n            const tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n            data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n            break;\n        }\n      }\n      return data;\n    }\n    function buildKinematicsScene(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n    function getKinematicsScene(id) {\n      return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n    }\n    function setupKinematics() {\n      const kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n      const kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n      const visualSceneId = Object.keys(library.visualScenes)[0];\n      if (kinematicsModelId === undefined || kinematicsSceneId === undefined) return;\n      const kinematicsModel = getKinematicsModel(kinematicsModelId);\n      const kinematicsScene = getKinematicsScene(kinematicsSceneId);\n      const visualScene = getVisualScene(visualSceneId);\n      const bindJointAxis = kinematicsScene.bindJointAxis;\n      const jointMap = {};\n      for (let i = 0, l = bindJointAxis.length; i < l; i++) {\n        const axis = bindJointAxis[i]; // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n        const targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n        if (targetElement) {\n          // get the parent of the transform element\n          const parentVisualElement = targetElement.parentElement; // connect the joint of the kinematics model with the element in the visual scene\n\n          connect(axis.jointIndex, parentVisualElement);\n        }\n      }\n      function connect(jointIndex, visualElement) {\n        const visualElementName = visualElement.getAttribute('name');\n        const joint = kinematicsModel.joints[jointIndex];\n        visualScene.traverse(function (object) {\n          if (object.name === visualElementName) {\n            jointMap[jointIndex] = {\n              object: object,\n              transforms: buildTransformList(visualElement),\n              joint: joint,\n              position: joint.zeroPosition\n            };\n          }\n        });\n      }\n      const m0 = new Matrix4();\n      kinematics = {\n        joints: kinematicsModel && kinematicsModel.joints,\n        getJointValue: function (jointIndex) {\n          const jointData = jointMap[jointIndex];\n          if (jointData) {\n            return jointData.position;\n          } else {\n            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + \" doesn't exist.\");\n          }\n        },\n        setJointValue: function (jointIndex, value) {\n          const jointData = jointMap[jointIndex];\n          if (jointData) {\n            const joint = jointData.joint;\n            if (value > joint.limits.max || value < joint.limits.min) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n            } else if (joint.static) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n            } else {\n              const object = jointData.object;\n              const axis = joint.axis;\n              const transforms = jointData.transforms;\n              matrix.identity(); // each update, we have to apply all transforms in the correct order\n\n              for (let i = 0; i < transforms.length; i++) {\n                const transform = transforms[i]; // if there is a connection of the transform node with a joint, apply the joint value\n\n                if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                  switch (joint.type) {\n                    case 'revolute':\n                      matrix.multiply(m0.makeRotationAxis(axis, MathUtils.degToRad(value)));\n                      break;\n                    case 'prismatic':\n                      matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));\n                      break;\n                    default:\n                      console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                      break;\n                  }\n                } else {\n                  switch (transform.type) {\n                    case 'matrix':\n                      matrix.multiply(transform.obj);\n                      break;\n                    case 'translate':\n                      matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                      break;\n                    case 'scale':\n                      matrix.scale(transform.obj);\n                      break;\n                    case 'rotate':\n                      matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                      break;\n                  }\n                }\n              }\n              object.matrix.copy(matrix);\n              object.matrix.decompose(object.position, object.quaternion, object.scale);\n              jointMap[jointIndex].position = value;\n            }\n          } else {\n            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n          }\n        }\n      };\n    }\n    function buildTransformList(node) {\n      const transforms = [];\n      const xml = collada.querySelector('[id=\"' + node.id + '\"]');\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        let array, vector;\n        switch (child.nodeName) {\n          case 'matrix':\n            array = parseFloats(child.textContent);\n            const matrix = new Matrix4().fromArray(array).transpose();\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: matrix\n            });\n            break;\n          case 'translate':\n          case 'scale':\n            array = parseFloats(child.textContent);\n            vector = new Vector3().fromArray(array);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector\n            });\n            break;\n          case 'rotate':\n            array = parseFloats(child.textContent);\n            vector = new Vector3().fromArray(array);\n            const angle = MathUtils.degToRad(array[3]);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector,\n              angle: angle\n            });\n            break;\n        }\n      }\n      return transforms;\n    } // nodes\n\n    function prepareNodes(xml) {\n      const elements = xml.getElementsByTagName('node'); // ensure all node elements have id attributes\n\n      for (let i = 0; i < elements.length; i++) {\n        const element = elements[i];\n        if (element.hasAttribute('id') === false) {\n          element.setAttribute('id', generateId());\n        }\n      }\n    }\n    const matrix = new Matrix4();\n    const vector = new Vector3();\n    function parseNode(xml) {\n      const data = {\n        name: xml.getAttribute('name') || '',\n        type: xml.getAttribute('type'),\n        id: xml.getAttribute('id'),\n        sid: xml.getAttribute('sid'),\n        matrix: new Matrix4(),\n        nodes: [],\n        instanceCameras: [],\n        instanceControllers: [],\n        instanceLights: [],\n        instanceGeometries: [],\n        instanceNodes: [],\n        transforms: {}\n      };\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        let array;\n        switch (child.nodeName) {\n          case 'node':\n            data.nodes.push(child.getAttribute('id'));\n            parseNode(child);\n            break;\n          case 'instance_camera':\n            data.instanceCameras.push(parseId(child.getAttribute('url')));\n            break;\n          case 'instance_controller':\n            data.instanceControllers.push(parseNodeInstance(child));\n            break;\n          case 'instance_light':\n            data.instanceLights.push(parseId(child.getAttribute('url')));\n            break;\n          case 'instance_geometry':\n            data.instanceGeometries.push(parseNodeInstance(child));\n            break;\n          case 'instance_node':\n            data.instanceNodes.push(parseId(child.getAttribute('url')));\n            break;\n          case 'matrix':\n            array = parseFloats(child.textContent);\n            data.matrix.multiply(matrix.fromArray(array).transpose());\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n          case 'translate':\n            array = parseFloats(child.textContent);\n            vector.fromArray(array);\n            data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n          case 'rotate':\n            array = parseFloats(child.textContent);\n            const angle = MathUtils.degToRad(array[3]);\n            data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n          case 'scale':\n            array = parseFloats(child.textContent);\n            data.matrix.scale(vector.fromArray(array));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n          case 'extra':\n            break;\n          default:\n            console.log(child);\n        }\n      }\n      if (hasNode(data.id)) {\n        console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n      } else {\n        library.nodes[data.id] = data;\n      }\n      return data;\n    }\n    function parseNodeInstance(xml) {\n      const data = {\n        id: parseId(xml.getAttribute('url')),\n        materials: {},\n        skeletons: []\n      };\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        switch (child.nodeName) {\n          case 'bind_material':\n            const instances = child.getElementsByTagName('instance_material');\n            for (let j = 0; j < instances.length; j++) {\n              const instance = instances[j];\n              const symbol = instance.getAttribute('symbol');\n              const target = instance.getAttribute('target');\n              data.materials[symbol] = parseId(target);\n            }\n            break;\n          case 'skeleton':\n            data.skeletons.push(parseId(child.textContent));\n            break;\n        }\n      }\n      return data;\n    }\n    function buildSkeleton(skeletons, joints) {\n      const boneData = [];\n      const sortedBoneData = [];\n      let i, j, data; // a skeleton can have multiple root bones. collada expresses this\n      // situtation with multiple \"skeleton\" tags per controller instance\n\n      for (i = 0; i < skeletons.length; i++) {\n        const skeleton = skeletons[i];\n        let root;\n        if (hasNode(skeleton)) {\n          root = getNode(skeleton);\n          buildBoneHierarchy(root, joints, boneData);\n        } else if (hasVisualScene(skeleton)) {\n          // handle case where the skeleton refers to the visual scene (#13335)\n          const visualScene = library.visualScenes[skeleton];\n          const children = visualScene.children;\n          for (let j = 0; j < children.length; j++) {\n            const child = children[j];\n            if (child.type === 'JOINT') {\n              const root = getNode(child.id);\n              buildBoneHierarchy(root, joints, boneData);\n            }\n          }\n        } else {\n          console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n        }\n      } // sort bone data (the order is defined in the corresponding controller)\n\n      for (i = 0; i < joints.length; i++) {\n        for (j = 0; j < boneData.length; j++) {\n          data = boneData[j];\n          if (data.bone.name === joints[i].name) {\n            sortedBoneData[i] = data;\n            data.processed = true;\n            break;\n          }\n        }\n      } // add unprocessed bone data at the end of the list\n\n      for (i = 0; i < boneData.length; i++) {\n        data = boneData[i];\n        if (data.processed === false) {\n          sortedBoneData.push(data);\n          data.processed = true;\n        }\n      } // setup arrays for skeleton creation\n\n      const bones = [];\n      const boneInverses = [];\n      for (i = 0; i < sortedBoneData.length; i++) {\n        data = sortedBoneData[i];\n        bones.push(data.bone);\n        boneInverses.push(data.boneInverse);\n      }\n      return new Skeleton(bones, boneInverses);\n    }\n    function buildBoneHierarchy(root, joints, boneData) {\n      // setup bone data from visual scene\n      root.traverse(function (object) {\n        if (object.isBone === true) {\n          let boneInverse; // retrieve the boneInverse from the controller data\n\n          for (let i = 0; i < joints.length; i++) {\n            const joint = joints[i];\n            if (joint.name === object.name) {\n              boneInverse = joint.boneInverse;\n              break;\n            }\n          }\n          if (boneInverse === undefined) {\n            // Unfortunately, there can be joints in the visual scene that are not part of the\n            // corresponding controller. In this case, we have to create a dummy boneInverse matrix\n            // for the respective bone. This bone won't affect any vertices, because there are no skin indices\n            // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n            // ensure a correct animation of the model.\n            boneInverse = new Matrix4();\n          }\n          boneData.push({\n            bone: object,\n            boneInverse: boneInverse,\n            processed: false\n          });\n        }\n      });\n    }\n    function buildNode(data) {\n      const objects = [];\n      const matrix = data.matrix;\n      const nodes = data.nodes;\n      const type = data.type;\n      const instanceCameras = data.instanceCameras;\n      const instanceControllers = data.instanceControllers;\n      const instanceLights = data.instanceLights;\n      const instanceGeometries = data.instanceGeometries;\n      const instanceNodes = data.instanceNodes; // nodes\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        objects.push(getNode(nodes[i]));\n      } // instance cameras\n\n      for (let i = 0, l = instanceCameras.length; i < l; i++) {\n        const instanceCamera = getCamera(instanceCameras[i]);\n        if (instanceCamera !== null) {\n          objects.push(instanceCamera.clone());\n        }\n      } // instance controllers\n\n      for (let i = 0, l = instanceControllers.length; i < l; i++) {\n        const instance = instanceControllers[i];\n        const controller = getController(instance.id);\n        const geometries = getGeometry(controller.id);\n        const newObjects = buildObjects(geometries, instance.materials);\n        const skeletons = instance.skeletons;\n        const joints = controller.skin.joints;\n        const skeleton = buildSkeleton(skeletons, joints);\n        for (let j = 0, jl = newObjects.length; j < jl; j++) {\n          const object = newObjects[j];\n          if (object.isSkinnedMesh) {\n            object.bind(skeleton, controller.skin.bindMatrix);\n            object.normalizeSkinWeights();\n          }\n          objects.push(object);\n        }\n      } // instance lights\n\n      for (let i = 0, l = instanceLights.length; i < l; i++) {\n        const instanceLight = getLight(instanceLights[i]);\n        if (instanceLight !== null) {\n          objects.push(instanceLight.clone());\n        }\n      } // instance geometries\n\n      for (let i = 0, l = instanceGeometries.length; i < l; i++) {\n        const instance = instanceGeometries[i]; // a single geometry instance in collada can lead to multiple object3Ds.\n        // this is the case when primitives are combined like triangles and lines\n\n        const geometries = getGeometry(instance.id);\n        const newObjects = buildObjects(geometries, instance.materials);\n        for (let j = 0, jl = newObjects.length; j < jl; j++) {\n          objects.push(newObjects[j]);\n        }\n      } // instance nodes\n\n      for (let i = 0, l = instanceNodes.length; i < l; i++) {\n        objects.push(getNode(instanceNodes[i]).clone());\n      }\n      let object;\n      if (nodes.length === 0 && objects.length === 1) {\n        object = objects[0];\n      } else {\n        object = type === 'JOINT' ? new Bone() : new Group();\n        for (let i = 0; i < objects.length; i++) {\n          object.add(objects[i]);\n        }\n      }\n      object.name = type === 'JOINT' ? data.sid : data.name;\n      object.matrix.copy(matrix);\n      object.matrix.decompose(object.position, object.quaternion, object.scale);\n      return object;\n    }\n    const fallbackMaterial = new MeshBasicMaterial({\n      color: 0xff00ff\n    });\n    function resolveMaterialBinding(keys, instanceMaterials) {\n      const materials = [];\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const id = instanceMaterials[keys[i]];\n        if (id === undefined) {\n          console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n          materials.push(fallbackMaterial);\n        } else {\n          materials.push(getMaterial(id));\n        }\n      }\n      return materials;\n    }\n    function buildObjects(geometries, instanceMaterials) {\n      const objects = [];\n      for (const type in geometries) {\n        const geometry = geometries[type];\n        const materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials); // handle case if no materials are defined\n\n        if (materials.length === 0) {\n          if (type === 'lines' || type === 'linestrips') {\n            materials.push(new LineBasicMaterial());\n          } else {\n            materials.push(new MeshPhongMaterial());\n          }\n        } // regard skinning\n\n        const skinning = geometry.data.attributes.skinIndex !== undefined; // choose between a single or multi materials (material array)\n\n        const material = materials.length === 1 ? materials[0] : materials; // now create a specific 3D object\n\n        let object;\n        switch (type) {\n          case 'lines':\n            object = new LineSegments(geometry.data, material);\n            break;\n          case 'linestrips':\n            object = new Line(geometry.data, material);\n            break;\n          case 'triangles':\n          case 'polylist':\n            if (skinning) {\n              object = new SkinnedMesh(geometry.data, material);\n            } else {\n              object = new Mesh(geometry.data, material);\n            }\n            break;\n        }\n        objects.push(object);\n      }\n      return objects;\n    }\n    function hasNode(id) {\n      return library.nodes[id] !== undefined;\n    }\n    function getNode(id) {\n      return getBuild(library.nodes[id], buildNode);\n    } // visual scenes\n\n    function parseVisualScene(xml) {\n      const data = {\n        name: xml.getAttribute('name'),\n        children: []\n      };\n      prepareNodes(xml);\n      const elements = getElementsByTagName(xml, 'node');\n      for (let i = 0; i < elements.length; i++) {\n        data.children.push(parseNode(elements[i]));\n      }\n      library.visualScenes[xml.getAttribute('id')] = data;\n    }\n    function buildVisualScene(data) {\n      const group = new Group();\n      group.name = data.name;\n      const children = data.children;\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        group.add(getNode(child.id));\n      }\n      return group;\n    }\n    function hasVisualScene(id) {\n      return library.visualScenes[id] !== undefined;\n    }\n    function getVisualScene(id) {\n      return getBuild(library.visualScenes[id], buildVisualScene);\n    } // scenes\n\n    function parseScene(xml) {\n      const instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n      return getVisualScene(parseId(instance.getAttribute('url')));\n    }\n    function setupAnimations() {\n      const clips = library.clips;\n      if (isEmpty(clips) === true) {\n        if (isEmpty(library.animations) === false) {\n          // if there are animations but no clips, we create a default clip for playback\n          const tracks = [];\n          for (const id in library.animations) {\n            const animationTracks = getAnimation(id);\n            for (let i = 0, l = animationTracks.length; i < l; i++) {\n              tracks.push(animationTracks[i]);\n            }\n          }\n          animations.push(new AnimationClip('default', -1, tracks));\n        }\n      } else {\n        for (const id in clips) {\n          animations.push(getAnimationClip(id));\n        }\n      }\n    } // convert the parser error element into text with each child elements text\n    // separated by new lines.\n\n    function parserErrorToText(parserError) {\n      let result = '';\n      const stack = [parserError];\n      while (stack.length) {\n        const node = stack.shift();\n        if (node.nodeType === Node.TEXT_NODE) {\n          result += node.textContent;\n        } else {\n          result += '\\n';\n          stack.push.apply(stack, node.childNodes);\n        }\n      }\n      return result.trim();\n    }\n    if (text.length === 0) {\n      return {\n        scene: new Scene()\n      };\n    }\n    const xml = new DOMParser().parseFromString(text, 'application/xml');\n    const collada = getElementsByTagName(xml, 'COLLADA')[0];\n    const parserError = xml.getElementsByTagName('parsererror')[0];\n    if (parserError !== undefined) {\n      // Chrome will return parser error with a div in it\n      const errorElement = getElementsByTagName(parserError, 'div')[0];\n      let errorText;\n      if (errorElement) {\n        errorText = errorElement.textContent;\n      } else {\n        errorText = parserErrorToText(parserError);\n      }\n      console.error('THREE.ColladaLoader: Failed to parse collada file.\\n', errorText);\n      return null;\n    } // metadata\n\n    const version = collada.getAttribute('version');\n    console.log('THREE.ColladaLoader: File version', version);\n    const asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n    const textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    let tgaLoader;\n    if (TGALoader) {\n      tgaLoader = new TGALoader(this.manager);\n      tgaLoader.setPath(this.resourcePath || path);\n    } //\n\n    const animations = [];\n    let kinematics = {};\n    let count = 0; //\n\n    const library = {\n      animations: {},\n      clips: {},\n      controllers: {},\n      images: {},\n      effects: {},\n      materials: {},\n      cameras: {},\n      lights: {},\n      geometries: {},\n      nodes: {},\n      visualScenes: {},\n      kinematicsModels: {},\n      physicsModels: {},\n      kinematicsScenes: {}\n    };\n    parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n    parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n    parseLibrary(collada, 'library_controllers', 'controller', parseController);\n    parseLibrary(collada, 'library_images', 'image', parseImage);\n    parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n    parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n    parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n    parseLibrary(collada, 'library_lights', 'light', parseLight);\n    parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n    parseLibrary(collada, 'library_nodes', 'node', parseNode);\n    parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n    parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n    parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n    parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n    buildLibrary(library.animations, buildAnimation);\n    buildLibrary(library.clips, buildAnimationClip);\n    buildLibrary(library.controllers, buildController);\n    buildLibrary(library.images, buildImage);\n    buildLibrary(library.effects, buildEffect);\n    buildLibrary(library.materials, buildMaterial);\n    buildLibrary(library.cameras, buildCamera);\n    buildLibrary(library.lights, buildLight);\n    buildLibrary(library.geometries, buildGeometry);\n    buildLibrary(library.visualScenes, buildVisualScene);\n    setupAnimations();\n    setupKinematics();\n    const scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n    scene.animations = animations;\n    if (asset.upAxis === 'Z_UP') {\n      scene.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    }\n    scene.scale.multiplyScalar(asset.unit);\n    return {\n      get animations() {\n        console.warn('THREE.ColladaLoader: Please access animations over scene.animations now.');\n        return animations;\n      },\n      kinematics: kinematics,\n      library: library,\n      scene: scene\n    };\n  }\n}\nexport { ColladaLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","Vector3","Quaternion","Matrix4","MeshBasicMaterial","Scene","TextureLoader","Euler","MathUtils","AnimationClip","VectorKeyframeTrack","QuaternionKeyframeTrack","MeshLambertMaterial","MeshPhongMaterial","Vector2","DoubleSide","FrontSide","PerspectiveCamera","OrthographicCamera","Color","AmbientLight","SpotLight","PointLight","DirectionalLight","BufferGeometry","Float32BufferAttribute","Skeleton","Bone","Group","LineBasicMaterial","SkinnedMesh","Mesh","Line","LineSegments","RepeatWrapping","ClampToEdgeWrapping","TGALoader","ColladaLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","getElementsByTagName","xml","name","array","childNodes","i","l","length","child","nodeName","push","parseStrings","parts","trim","split","Array","parseFloats","parseFloat","parseInts","parseInt","parseId","substring","generateId","count","isEmpty","object","Object","keys","parseAsset","unit","parseAssetUnit","upAxis","parseAssetUpAxis","undefined","hasAttribute","getAttribute","textContent","parseLibrary","libraryName","parser","library","elements","buildLibrary","data","builder","build","getBuild","parseAnimation","sources","samplers","channels","hasChildren","nodeType","id","parseSource","parseAnimationSampler","parseAnimationChannel","log","animations","generateUUID","inputs","semantic","target","shift","sid","arraySyntax","indexOf","memberSyntax","member","indices","replace","sampler","buildAnimation","tracks","hasOwnProperty","channel","inputId","INPUT","outputId","OUTPUT","inputSource","outputSource","animation","buildAnimationChannel","createKeyframeTracks","getAnimation","node","nodes","object3D","getNode","transform","transforms","defaultMatrix","matrix","clone","transpose","time","stride","il","j","jl","value","index","warn","keyframes","prepareAnimationData","uuid","sort","ascending","transformAnimationData","a","b","position","scale","quaternion","times","positionData","quaternionData","scaleData","keyframe","fromArray","decompose","x","y","z","w","property","defaultValue","empty","createMissingKeyframes","prev","next","getPrev","getNext","interpolate","key","parseAnimationClip","start","end","clips","buildAnimationClip","duration","animationTracks","getAnimationClip","parseController","skin","parseSkin","controllers","bindShapeMatrix","joints","parseJoints","vertexWeights","parseVertexWeights","offset","vcount","v","buildController","geometry","geometries","buildSkin","skinIndices","skinWeights","weights","BONE_LIMIT","jointOffset","JOINT","weightOffset","WEIGHT","jointSource","inverseSource","INV_BIND_MATRIX","jointCount","vertexSkinData","skinIndex","weightId","skinWeight","weight","descending","d","bindMatrix","identity","boneInverse","getController","parseImage","init_from","images","buildImage","getImage","parseEffect","profile","parseEffectProfileCOMMON","effects","surfaces","parseEffectNewparam","technique","parseEffectTechnique","extra","parseEffectExtra","parseEffectSurface","parseEffectSampler","source","type","parameters","parseEffectParameters","parseEffectParameter","opaque","parseEffectParameterTexture","parseEffectParameterTextureExtra","parseEffectParameterTextureExtraTechnique","toUpperCase","parseEffectExtraTechniqueBump","parseEffectExtraTechnique","texcoord","buildEffect","getEffect","parseMaterial","materials","getTextureLoader","image","extension","slice","lastIndexOf","toLowerCase","tgaLoader","textureLoader","buildMaterial","effect","material","getTexture","textureObject","surface","texture","wrapS","wrapU","wrapT","wrapV","set","offsetU","offsetV","repeat","repeatU","repeatV","parameter","color","map","specular","specularMap","normalMap","lightMap","float","shininess","emissive","emissiveMap","transparent","transparency","opacity","techniques","k","side","normalScale","getMaterial","parseCamera","optics","parseCameraOptics","cameras","parseCameraTechnique","parseCameraParameters","buildCamera","camera","yfov","aspect_ratio","znear","zfar","ymag","xmag","aspectRatio","getCamera","parseLight","parseLightTechnique","lights","parseLightParameters","falloffAngle","f","distance","Math","sqrt","buildLight","light","copy","getLight","parseGeometry","vertices","primitives","mesh","parseGeometryVertices","parseGeometryPrimitive","accessor","primitive","hasUV","inputname","max","p","groupPrimitives","checkUVCoordinates","uvsNeedsFix","buildGeometry","groupedPrimitives","primitiveType","buildGeometryType","normal","uv","uv2","materialKeys","g","vc","addGroup","input","prevLength","buildGeometryData","setAttribute","pushVector","sourceStride","sourceArray","c","kl","getGeometry","parseKinematicsModel","links","parseKinematicsTechniqueCommon","kinematicsModels","buildKinematicsModel","getKinematicsModel","parseKinematicsJoint","parseKinematicsLink","parseKinematicsJointParameter","axis","limits","min","static","zeroPosition","middlePosition","attachments","parseKinematicsAttachment","parseKinematicsTransform","joint","pop","obj","angle","degToRad","parsePhysicsModel","rigidBodies","parsePhysicsRigidBody","physicsModels","parsePhysicsTechniqueCommon","inertia","mass","parseKinematicsScene","bindJointAxis","parseKinematicsBindJointAxis","kinematicsScenes","param","tmpJointIndex","jointIndex","substr","buildKinematicsScene","getKinematicsScene","setupKinematics","kinematicsModelId","kinematicsSceneId","visualSceneId","visualScenes","kinematicsModel","kinematicsScene","visualScene","getVisualScene","jointMap","targetElement","collada","querySelector","parentVisualElement","parentElement","connect","visualElement","visualElementName","traverse","buildTransformList","m0","kinematics","getJointValue","jointData","setJointValue","multiply","makeRotationAxis","makeTranslation","vector","prepareNodes","element","parseNode","instanceCameras","instanceControllers","instanceLights","instanceGeometries","instanceNodes","parseNodeInstance","hasNode","skeletons","instances","instance","symbol","buildSkeleton","boneData","sortedBoneData","skeleton","root","buildBoneHierarchy","hasVisualScene","children","bone","processed","bones","boneInverses","isBone","buildNode","objects","instanceCamera","controller","newObjects","buildObjects","isSkinnedMesh","bind","normalizeSkinWeights","instanceLight","add","fallbackMaterial","resolveMaterialBinding","instanceMaterials","skinning","attributes","parseVisualScene","buildVisualScene","group","parseScene","setupAnimations","parserErrorToText","parserError","result","stack","Node","TEXT_NODE","apply","scene","DOMParser","parseFromString","errorElement","errorText","version","asset","resourcePath","setCrossOrigin","crossOrigin","setFromEuler","PI","multiplyScalar"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/loaders/ColladaLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, Vector3, Quaternion, Matrix4, MeshBasicMaterial, Scene, TextureLoader, Euler, MathUtils, AnimationClip, VectorKeyframeTrack, QuaternionKeyframeTrack, MeshLambertMaterial, MeshPhongMaterial, Vector2, DoubleSide, FrontSide, PerspectiveCamera, OrthographicCamera, Color, AmbientLight, SpotLight, PointLight, DirectionalLight, BufferGeometry, Float32BufferAttribute, Skeleton, Bone, Group, LineBasicMaterial, SkinnedMesh, Mesh, Line, LineSegments, RepeatWrapping, ClampToEdgeWrapping } from 'three';\nimport { TGALoader } from './TGALoader.js';\n\nclass ColladaLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(text, path) {\n    function getElementsByTagName(xml, name) {\n      // Non recursive xml.getElementsByTagName() ...\n      const array = [];\n      const childNodes = xml.childNodes;\n\n      for (let i = 0, l = childNodes.length; i < l; i++) {\n        const child = childNodes[i];\n\n        if (child.nodeName === name) {\n          array.push(child);\n        }\n      }\n\n      return array;\n    }\n\n    function parseStrings(text) {\n      if (text.length === 0) return [];\n      const parts = text.trim().split(/\\s+/);\n      const array = new Array(parts.length);\n\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parts[i];\n      }\n\n      return array;\n    }\n\n    function parseFloats(text) {\n      if (text.length === 0) return [];\n      const parts = text.trim().split(/\\s+/);\n      const array = new Array(parts.length);\n\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseFloat(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseInts(text) {\n      if (text.length === 0) return [];\n      const parts = text.trim().split(/\\s+/);\n      const array = new Array(parts.length);\n\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseInt(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseId(text) {\n      return text.substring(1);\n    }\n\n    function generateId() {\n      return 'three_default_' + count++;\n    }\n\n    function isEmpty(object) {\n      return Object.keys(object).length === 0;\n    } // asset\n\n\n    function parseAsset(xml) {\n      return {\n        unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n        upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n      };\n    }\n\n    function parseAssetUnit(xml) {\n      if (xml !== undefined && xml.hasAttribute('meter') === true) {\n        return parseFloat(xml.getAttribute('meter'));\n      } else {\n        return 1; // default 1 meter\n      }\n    }\n\n    function parseAssetUpAxis(xml) {\n      return xml !== undefined ? xml.textContent : 'Y_UP';\n    } // library\n\n\n    function parseLibrary(xml, libraryName, nodeName, parser) {\n      const library = getElementsByTagName(xml, libraryName)[0];\n\n      if (library !== undefined) {\n        const elements = getElementsByTagName(library, nodeName);\n\n        for (let i = 0; i < elements.length; i++) {\n          parser(elements[i]);\n        }\n      }\n    }\n\n    function buildLibrary(data, builder) {\n      for (const name in data) {\n        const object = data[name];\n        object.build = builder(data[name]);\n      }\n    } // get\n\n\n    function getBuild(data, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data);\n      return data.build;\n    } // animation\n\n\n    function parseAnimation(xml) {\n      const data = {\n        sources: {},\n        samplers: {},\n        channels: {}\n      };\n      let hasChildren = false;\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        let id;\n\n        switch (child.nodeName) {\n          case 'source':\n            id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'sampler':\n            id = child.getAttribute('id');\n            data.samplers[id] = parseAnimationSampler(child);\n            break;\n\n          case 'channel':\n            id = child.getAttribute('target');\n            data.channels[id] = parseAnimationChannel(child);\n            break;\n\n          case 'animation':\n            // hierarchy of related animations\n            parseAnimation(child);\n            hasChildren = true;\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasChildren === false) {\n        // since 'id' attributes can be optional, it's necessary to generate a UUID for unqiue assignment\n        library.animations[xml.getAttribute('id') || MathUtils.generateUUID()] = data;\n      }\n    }\n\n    function parseAnimationSampler(xml) {\n      const data = {\n        inputs: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            const id = parseId(child.getAttribute('source'));\n            const semantic = child.getAttribute('semantic');\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseAnimationChannel(xml) {\n      const data = {};\n      const target = xml.getAttribute('target'); // parsing SID Addressing Syntax\n\n      let parts = target.split('/');\n      const id = parts.shift();\n      let sid = parts.shift(); // check selection syntax\n\n      const arraySyntax = sid.indexOf('(') !== -1;\n      const memberSyntax = sid.indexOf('.') !== -1;\n\n      if (memberSyntax) {\n        //  member selection access\n        parts = sid.split('.');\n        sid = parts.shift();\n        data.member = parts.shift();\n      } else if (arraySyntax) {\n        // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n        const indices = sid.split('(');\n        sid = indices.shift();\n\n        for (let i = 0; i < indices.length; i++) {\n          indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n        }\n\n        data.indices = indices;\n      }\n\n      data.id = id;\n      data.sid = sid;\n      data.arraySyntax = arraySyntax;\n      data.memberSyntax = memberSyntax;\n      data.sampler = parseId(xml.getAttribute('source'));\n      return data;\n    }\n\n    function buildAnimation(data) {\n      const tracks = [];\n      const channels = data.channels;\n      const samplers = data.samplers;\n      const sources = data.sources;\n\n      for (const target in channels) {\n        if (channels.hasOwnProperty(target)) {\n          const channel = channels[target];\n          const sampler = samplers[channel.sampler];\n          const inputId = sampler.inputs.INPUT;\n          const outputId = sampler.inputs.OUTPUT;\n          const inputSource = sources[inputId];\n          const outputSource = sources[outputId];\n          const animation = buildAnimationChannel(channel, inputSource, outputSource);\n          createKeyframeTracks(animation, tracks);\n        }\n      }\n\n      return tracks;\n    }\n\n    function getAnimation(id) {\n      return getBuild(library.animations[id], buildAnimation);\n    }\n\n    function buildAnimationChannel(channel, inputSource, outputSource) {\n      const node = library.nodes[channel.id];\n      const object3D = getNode(node.id);\n      const transform = node.transforms[channel.sid];\n      const defaultMatrix = node.matrix.clone().transpose();\n      let time, stride;\n      let i, il, j, jl;\n      const data = {}; // the collada spec allows the animation of data in various ways.\n      // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n      switch (transform) {\n        case 'matrix':\n          for (i = 0, il = inputSource.array.length; i < il; i++) {\n            time = inputSource.array[i];\n            stride = i * outputSource.stride;\n            if (data[time] === undefined) data[time] = {};\n\n            if (channel.arraySyntax === true) {\n              const value = outputSource.array[stride];\n              const index = channel.indices[0] + 4 * channel.indices[1];\n              data[time][index] = value;\n            } else {\n              for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                data[time][j] = outputSource.array[stride + j];\n              }\n            }\n          }\n\n          break;\n\n        case 'translate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'rotate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'scale':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n      }\n\n      const keyframes = prepareAnimationData(data, defaultMatrix);\n      const animation = {\n        name: object3D.uuid,\n        keyframes: keyframes\n      };\n      return animation;\n    }\n\n    function prepareAnimationData(data, defaultMatrix) {\n      const keyframes = []; // transfer data into a sortable array\n\n      for (const time in data) {\n        keyframes.push({\n          time: parseFloat(time),\n          value: data[time]\n        });\n      } // ensure keyframes are sorted by time\n\n\n      keyframes.sort(ascending); // now we clean up all animation data, so we can use them for keyframe tracks\n\n      for (let i = 0; i < 16; i++) {\n        transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n      }\n\n      return keyframes; // array sort function\n\n      function ascending(a, b) {\n        return a.time - b.time;\n      }\n    }\n\n    const position = new Vector3();\n    const scale = new Vector3();\n    const quaternion = new Quaternion();\n\n    function createKeyframeTracks(animation, tracks) {\n      const keyframes = animation.keyframes;\n      const name = animation.name;\n      const times = [];\n      const positionData = [];\n      const quaternionData = [];\n      const scaleData = [];\n\n      for (let i = 0, l = keyframes.length; i < l; i++) {\n        const keyframe = keyframes[i];\n        const time = keyframe.time;\n        const value = keyframe.value;\n        matrix.fromArray(value).transpose();\n        matrix.decompose(position, quaternion, scale);\n        times.push(time);\n        positionData.push(position.x, position.y, position.z);\n        quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n        scaleData.push(scale.x, scale.y, scale.z);\n      }\n\n      if (positionData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.position', times, positionData));\n\n      if (quaternionData.length > 0) {\n        tracks.push(new QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n      }\n\n      if (scaleData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.scale', times, scaleData));\n      return tracks;\n    }\n\n    function transformAnimationData(keyframes, property, defaultValue) {\n      let keyframe;\n      let empty = true;\n      let i, l; // check, if values of a property are missing in our keyframes\n\n      for (i = 0, l = keyframes.length; i < l; i++) {\n        keyframe = keyframes[i];\n\n        if (keyframe.value[property] === undefined) {\n          keyframe.value[property] = null; // mark as missing\n        } else {\n          empty = false;\n        }\n      }\n\n      if (empty === true) {\n        // no values at all, so we set a default value\n        for (i = 0, l = keyframes.length; i < l; i++) {\n          keyframe = keyframes[i];\n          keyframe.value[property] = defaultValue;\n        }\n      } else {\n        // filling gaps\n        createMissingKeyframes(keyframes, property);\n      }\n    }\n\n    function createMissingKeyframes(keyframes, property) {\n      let prev, next;\n\n      for (let i = 0, l = keyframes.length; i < l; i++) {\n        const keyframe = keyframes[i];\n\n        if (keyframe.value[property] === null) {\n          prev = getPrev(keyframes, i, property);\n          next = getNext(keyframes, i, property);\n\n          if (prev === null) {\n            keyframe.value[property] = next.value[property];\n            continue;\n          }\n\n          if (next === null) {\n            keyframe.value[property] = prev.value[property];\n            continue;\n          }\n\n          interpolate(keyframe, prev, next, property);\n        }\n      }\n    }\n\n    function getPrev(keyframes, i, property) {\n      while (i >= 0) {\n        const keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i--;\n      }\n\n      return null;\n    }\n\n    function getNext(keyframes, i, property) {\n      while (i < keyframes.length) {\n        const keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i++;\n      }\n\n      return null;\n    }\n\n    function interpolate(key, prev, next, property) {\n      if (next.time - prev.time === 0) {\n        key.value[property] = prev.value[property];\n        return;\n      }\n\n      key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n    } // animation clips\n\n\n    function parseAnimationClip(xml) {\n      const data = {\n        name: xml.getAttribute('id') || 'default',\n        start: parseFloat(xml.getAttribute('start') || 0),\n        end: parseFloat(xml.getAttribute('end') || 0),\n        animations: []\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_animation':\n            data.animations.push(parseId(child.getAttribute('url')));\n            break;\n        }\n      }\n\n      library.clips[xml.getAttribute('id')] = data;\n    }\n\n    function buildAnimationClip(data) {\n      const tracks = [];\n      const name = data.name;\n      const duration = data.end - data.start || -1;\n      const animations = data.animations;\n\n      for (let i = 0, il = animations.length; i < il; i++) {\n        const animationTracks = getAnimation(animations[i]);\n\n        for (let j = 0, jl = animationTracks.length; j < jl; j++) {\n          tracks.push(animationTracks[j]);\n        }\n      }\n\n      return new AnimationClip(name, duration, tracks);\n    }\n\n    function getAnimationClip(id) {\n      return getBuild(library.clips[id], buildAnimationClip);\n    } // controller\n\n\n    function parseController(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'skin':\n            // there is exactly one skin per controller\n            data.id = parseId(child.getAttribute('source'));\n            data.skin = parseSkin(child);\n            break;\n\n          case 'morph':\n            data.id = parseId(child.getAttribute('source'));\n            console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n            break;\n        }\n      }\n\n      library.controllers[xml.getAttribute('id')] = data;\n    }\n\n    function parseSkin(xml) {\n      const data = {\n        sources: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_shape_matrix':\n            data.bindShapeMatrix = parseFloats(child.textContent);\n            break;\n\n          case 'source':\n            const id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'joints':\n            data.joints = parseJoints(child);\n            break;\n\n          case 'vertex_weights':\n            data.vertexWeights = parseVertexWeights(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseJoints(xml) {\n      const data = {\n        inputs: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            const semantic = child.getAttribute('semantic');\n            const id = parseId(child.getAttribute('source'));\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseVertexWeights(xml) {\n      const data = {\n        inputs: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            const semantic = child.getAttribute('semantic');\n            const id = parseId(child.getAttribute('source'));\n            const offset = parseInt(child.getAttribute('offset'));\n            data.inputs[semantic] = {\n              id: id,\n              offset: offset\n            };\n            break;\n\n          case 'vcount':\n            data.vcount = parseInts(child.textContent);\n            break;\n\n          case 'v':\n            data.v = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildController(data) {\n      const build = {\n        id: data.id\n      };\n      const geometry = library.geometries[build.id];\n\n      if (data.skin !== undefined) {\n        build.skin = buildSkin(data.skin); // we enhance the 'sources' property of the corresponding geometry with our skin data\n\n        geometry.sources.skinIndices = build.skin.indices;\n        geometry.sources.skinWeights = build.skin.weights;\n      }\n\n      return build;\n    }\n\n    function buildSkin(data) {\n      const BONE_LIMIT = 4;\n      const build = {\n        joints: [],\n        // this must be an array to preserve the joint order\n        indices: {\n          array: [],\n          stride: BONE_LIMIT\n        },\n        weights: {\n          array: [],\n          stride: BONE_LIMIT\n        }\n      };\n      const sources = data.sources;\n      const vertexWeights = data.vertexWeights;\n      const vcount = vertexWeights.vcount;\n      const v = vertexWeights.v;\n      const jointOffset = vertexWeights.inputs.JOINT.offset;\n      const weightOffset = vertexWeights.inputs.WEIGHT.offset;\n      const jointSource = data.sources[data.joints.inputs.JOINT];\n      const inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n      const weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n      let stride = 0;\n      let i, j, l; // procces skin data for each vertex\n\n      for (i = 0, l = vcount.length; i < l; i++) {\n        const jointCount = vcount[i]; // this is the amount of joints that affect a single vertex\n\n        const vertexSkinData = [];\n\n        for (j = 0; j < jointCount; j++) {\n          const skinIndex = v[stride + jointOffset];\n          const weightId = v[stride + weightOffset];\n          const skinWeight = weights[weightId];\n          vertexSkinData.push({\n            index: skinIndex,\n            weight: skinWeight\n          });\n          stride += 2;\n        } // we sort the joints in descending order based on the weights.\n        // this ensures, we only procced the most important joints of the vertex\n\n\n        vertexSkinData.sort(descending); // now we provide for each vertex a set of four index and weight values.\n        // the order of the skin data matches the order of vertices\n\n        for (j = 0; j < BONE_LIMIT; j++) {\n          const d = vertexSkinData[j];\n\n          if (d !== undefined) {\n            build.indices.array.push(d.index);\n            build.weights.array.push(d.weight);\n          } else {\n            build.indices.array.push(0);\n            build.weights.array.push(0);\n          }\n        }\n      } // setup bind matrix\n\n\n      if (data.bindShapeMatrix) {\n        build.bindMatrix = new Matrix4().fromArray(data.bindShapeMatrix).transpose();\n      } else {\n        build.bindMatrix = new Matrix4().identity();\n      } // process bones and inverse bind matrix data\n\n\n      for (i = 0, l = jointSource.array.length; i < l; i++) {\n        const name = jointSource.array[i];\n        const boneInverse = new Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n        build.joints.push({\n          name: name,\n          boneInverse: boneInverse\n        });\n      }\n\n      return build; // array sort function\n\n      function descending(a, b) {\n        return b.weight - a.weight;\n      }\n    }\n\n    function getController(id) {\n      return getBuild(library.controllers[id], buildController);\n    } // image\n\n\n    function parseImage(xml) {\n      const data = {\n        init_from: getElementsByTagName(xml, 'init_from')[0].textContent\n      };\n      library.images[xml.getAttribute('id')] = data;\n    }\n\n    function buildImage(data) {\n      if (data.build !== undefined) return data.build;\n      return data.init_from;\n    }\n\n    function getImage(id) {\n      const data = library.images[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildImage);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find image with ID:\", id);\n      return null;\n    } // effect\n\n\n    function parseEffect(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'profile_COMMON':\n            data.profile = parseEffectProfileCOMMON(child);\n            break;\n        }\n      }\n\n      library.effects[xml.getAttribute('id')] = data;\n    }\n\n    function parseEffectProfileCOMMON(xml) {\n      const data = {\n        surfaces: {},\n        samplers: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'newparam':\n            parseEffectNewparam(child, data);\n            break;\n\n          case 'technique':\n            data.technique = parseEffectTechnique(child);\n            break;\n\n          case 'extra':\n            data.extra = parseEffectExtra(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectNewparam(xml, data) {\n      const sid = xml.getAttribute('sid');\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'surface':\n            data.surfaces[sid] = parseEffectSurface(child);\n            break;\n\n          case 'sampler2D':\n            data.samplers[sid] = parseEffectSampler(child);\n            break;\n        }\n      }\n    }\n\n    function parseEffectSurface(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'init_from':\n            data.init_from = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectSampler(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'source':\n            data.source = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectTechnique(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'constant':\n          case 'lambert':\n          case 'blinn':\n          case 'phong':\n            data.type = child.nodeName;\n            data.parameters = parseEffectParameters(child);\n            break;\n\n          case 'extra':\n            data.extra = parseEffectExtra(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameters(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'emission':\n          case 'diffuse':\n          case 'specular':\n          case 'bump':\n          case 'ambient':\n          case 'shininess':\n          case 'transparency':\n            data[child.nodeName] = parseEffectParameter(child);\n            break;\n\n          case 'transparent':\n            data[child.nodeName] = {\n              opaque: child.hasAttribute('opaque') ? child.getAttribute('opaque') : 'A_ONE',\n              data: parseEffectParameter(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameter(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            data[child.nodeName] = parseFloats(child.textContent);\n            break;\n\n          case 'float':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'texture':\n            data[child.nodeName] = {\n              id: child.getAttribute('texture'),\n              extra: parseEffectParameterTexture(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTexture(xml) {\n      const data = {\n        technique: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'extra':\n            parseEffectParameterTextureExtra(child, data);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTextureExtra(xml, data) {\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            parseEffectParameterTextureExtraTechnique(child, data);\n            break;\n        }\n      }\n    }\n\n    function parseEffectParameterTextureExtraTechnique(xml, data) {\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'repeatU':\n          case 'repeatV':\n          case 'offsetU':\n          case 'offsetV':\n            data.technique[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'wrapU':\n          case 'wrapV':\n            // some files have values for wrapU/wrapV which become NaN via parseInt\n            if (child.textContent.toUpperCase() === 'TRUE') {\n              data.technique[child.nodeName] = 1;\n            } else if (child.textContent.toUpperCase() === 'FALSE') {\n              data.technique[child.nodeName] = 0;\n            } else {\n              data.technique[child.nodeName] = parseInt(child.textContent);\n            }\n\n            break;\n\n          case 'bump':\n            data[child.nodeName] = parseEffectExtraTechniqueBump(child);\n            break;\n        }\n      }\n    }\n\n    function parseEffectExtra(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            data.technique = parseEffectExtraTechnique(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectExtraTechnique(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'double_sided':\n            data[child.nodeName] = parseInt(child.textContent);\n            break;\n\n          case 'bump':\n            data[child.nodeName] = parseEffectExtraTechniqueBump(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectExtraTechniqueBump(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'texture':\n            data[child.nodeName] = {\n              id: child.getAttribute('texture'),\n              texcoord: child.getAttribute('texcoord'),\n              extra: parseEffectParameterTexture(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildEffect(data) {\n      return data;\n    }\n\n    function getEffect(id) {\n      return getBuild(library.effects[id], buildEffect);\n    } // material\n\n\n    function parseMaterial(xml) {\n      const data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_effect':\n            data.url = parseId(child.getAttribute('url'));\n            break;\n        }\n      }\n\n      library.materials[xml.getAttribute('id')] = data;\n    }\n\n    function getTextureLoader(image) {\n      let loader;\n      let extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2); // http://www.jstips.co/en/javascript/get-file-extension/\n\n      extension = extension.toLowerCase();\n\n      switch (extension) {\n        case 'tga':\n          loader = tgaLoader;\n          break;\n\n        default:\n          loader = textureLoader;\n      }\n\n      return loader;\n    }\n\n    function buildMaterial(data) {\n      const effect = getEffect(data.url);\n      const technique = effect.profile.technique;\n      let material;\n\n      switch (technique.type) {\n        case 'phong':\n        case 'blinn':\n          material = new MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n\n        default:\n          material = new MeshBasicMaterial();\n          break;\n      }\n\n      material.name = data.name || '';\n\n      function getTexture(textureObject) {\n        const sampler = effect.profile.samplers[textureObject.id];\n        let image = null; // get image\n\n        if (sampler !== undefined) {\n          const surface = effect.profile.surfaces[sampler.source];\n          image = getImage(surface.init_from);\n        } else {\n          console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n          image = getImage(textureObject.id);\n        } // create texture if image is avaiable\n\n\n        if (image !== null) {\n          const loader = getTextureLoader(image);\n\n          if (loader !== undefined) {\n            const texture = loader.load(image);\n            const extra = textureObject.extra;\n\n            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {\n              const technique = extra.technique;\n              texture.wrapS = technique.wrapU ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.wrapT = technique.wrapV ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);\n              texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);\n            } else {\n              texture.wrapS = RepeatWrapping;\n              texture.wrapT = RepeatWrapping;\n            }\n\n            return texture;\n          } else {\n            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n            return null;\n          }\n        } else {\n          console.warn(\"THREE.ColladaLoader: Couldn't create texture with ID:\", textureObject.id);\n          return null;\n        }\n      }\n\n      const parameters = technique.parameters;\n\n      for (const key in parameters) {\n        const parameter = parameters[key];\n\n        switch (key) {\n          case 'diffuse':\n            if (parameter.color) material.color.fromArray(parameter.color);\n            if (parameter.texture) material.map = getTexture(parameter.texture);\n            break;\n\n          case 'specular':\n            if (parameter.color && material.specular) material.specular.fromArray(parameter.color);\n            if (parameter.texture) material.specularMap = getTexture(parameter.texture);\n            break;\n\n          case 'bump':\n            if (parameter.texture) material.normalMap = getTexture(parameter.texture);\n            break;\n\n          case 'ambient':\n            if (parameter.texture) material.lightMap = getTexture(parameter.texture);\n            break;\n\n          case 'shininess':\n            if (parameter.float && material.shininess) material.shininess = parameter.float;\n            break;\n\n          case 'emission':\n            if (parameter.color && material.emissive) material.emissive.fromArray(parameter.color);\n            if (parameter.texture) material.emissiveMap = getTexture(parameter.texture);\n            break;\n        }\n      } //\n\n\n      let transparent = parameters['transparent'];\n      let transparency = parameters['transparency']; // <transparency> does not exist but <transparent>\n\n      if (transparency === undefined && transparent) {\n        transparency = {\n          float: 1\n        };\n      } // <transparent> does not exist but <transparency>\n\n\n      if (transparent === undefined && transparency) {\n        transparent = {\n          opaque: 'A_ONE',\n          data: {\n            color: [1, 1, 1, 1]\n          }\n        };\n      }\n\n      if (transparent && transparency) {\n        // handle case if a texture exists but no color\n        if (transparent.data.texture) {\n          // we do not set an alpha map (see #13792)\n          material.transparent = true;\n        } else {\n          const color = transparent.data.color;\n\n          switch (transparent.opaque) {\n            case 'A_ONE':\n              material.opacity = color[3] * transparency.float;\n              break;\n\n            case 'RGB_ZERO':\n              material.opacity = 1 - color[0] * transparency.float;\n              break;\n\n            case 'A_ZERO':\n              material.opacity = 1 - color[3] * transparency.float;\n              break;\n\n            case 'RGB_ONE':\n              material.opacity = color[0] * transparency.float;\n              break;\n\n            default:\n              console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n          }\n\n          if (material.opacity < 1) material.transparent = true;\n        }\n      } //\n\n\n      if (technique.extra !== undefined && technique.extra.technique !== undefined) {\n        const techniques = technique.extra.technique;\n\n        for (const k in techniques) {\n          const v = techniques[k];\n\n          switch (k) {\n            case 'double_sided':\n              material.side = v === 1 ? DoubleSide : FrontSide;\n              break;\n\n            case 'bump':\n              material.normalMap = getTexture(v.texture);\n              material.normalScale = new Vector2(1, 1);\n              break;\n          }\n        }\n      }\n\n      return material;\n    }\n\n    function getMaterial(id) {\n      return getBuild(library.materials[id], buildMaterial);\n    } // camera\n\n\n    function parseCamera(xml) {\n      const data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'optics':\n            data.optics = parseCameraOptics(child);\n            break;\n        }\n      }\n\n      library.cameras[xml.getAttribute('id')] = data;\n    }\n\n    function parseCameraOptics(xml) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            return parseCameraTechnique(child);\n        }\n      }\n\n      return {};\n    }\n\n    function parseCameraTechnique(xml) {\n      const data = {};\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'perspective':\n          case 'orthographic':\n            data.technique = child.nodeName;\n            data.parameters = parseCameraParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseCameraParameters(xml) {\n      const data = {};\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'xfov':\n          case 'yfov':\n          case 'xmag':\n          case 'ymag':\n          case 'znear':\n          case 'zfar':\n          case 'aspect_ratio':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildCamera(data) {\n      let camera;\n\n      switch (data.optics.technique) {\n        case 'perspective':\n          camera = new PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        case 'orthographic':\n          let ymag = data.optics.parameters.ymag;\n          let xmag = data.optics.parameters.xmag;\n          const aspectRatio = data.optics.parameters.aspect_ratio;\n          xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n          ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n          xmag *= 0.5;\n          ymag *= 0.5;\n          camera = new OrthographicCamera(-xmag, xmag, ymag, -ymag, // left, right, top, bottom\n          data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        default:\n          camera = new PerspectiveCamera();\n          break;\n      }\n\n      camera.name = data.name || '';\n      return camera;\n    }\n\n    function getCamera(id) {\n      const data = library.cameras[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildCamera);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find camera with ID:\", id);\n      return null;\n    } // light\n\n\n    function parseLight(xml) {\n      let data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            data = parseLightTechnique(child);\n            break;\n        }\n      }\n\n      library.lights[xml.getAttribute('id')] = data;\n    }\n\n    function parseLightTechnique(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'directional':\n          case 'point':\n          case 'spot':\n          case 'ambient':\n            data.technique = child.nodeName;\n            data.parameters = parseLightParameters(child);\n        }\n      }\n\n      return data;\n    }\n\n    function parseLightParameters(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            const array = parseFloats(child.textContent);\n            data.color = new Color().fromArray(array);\n            break;\n\n          case 'falloff_angle':\n            data.falloffAngle = parseFloat(child.textContent);\n            break;\n\n          case 'quadratic_attenuation':\n            const f = parseFloat(child.textContent);\n            data.distance = f ? Math.sqrt(1 / f) : 0;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildLight(data) {\n      let light;\n\n      switch (data.technique) {\n        case 'directional':\n          light = new DirectionalLight();\n          break;\n\n        case 'point':\n          light = new PointLight();\n          break;\n\n        case 'spot':\n          light = new SpotLight();\n          break;\n\n        case 'ambient':\n          light = new AmbientLight();\n          break;\n      }\n\n      if (data.parameters.color) light.color.copy(data.parameters.color);\n      if (data.parameters.distance) light.distance = data.parameters.distance;\n      return light;\n    }\n\n    function getLight(id) {\n      const data = library.lights[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildLight);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find light with ID:\", id);\n      return null;\n    } // geometry\n\n\n    function parseGeometry(xml) {\n      const data = {\n        name: xml.getAttribute('name'),\n        sources: {},\n        vertices: {},\n        primitives: []\n      };\n      const mesh = getElementsByTagName(xml, 'mesh')[0]; // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\n      if (mesh === undefined) return;\n\n      for (let i = 0; i < mesh.childNodes.length; i++) {\n        const child = mesh.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        const id = child.getAttribute('id');\n\n        switch (child.nodeName) {\n          case 'source':\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'vertices':\n            // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n            data.vertices = parseGeometryVertices(child);\n            break;\n\n          case 'polygons':\n            console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n            break;\n\n          case 'lines':\n          case 'linestrips':\n          case 'polylist':\n          case 'triangles':\n            data.primitives.push(parseGeometryPrimitive(child));\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      library.geometries[xml.getAttribute('id')] = data;\n    }\n\n    function parseSource(xml) {\n      const data = {\n        array: [],\n        stride: 3\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'float_array':\n            data.array = parseFloats(child.textContent);\n            break;\n\n          case 'Name_array':\n            data.array = parseStrings(child.textContent);\n            break;\n\n          case 'technique_common':\n            const accessor = getElementsByTagName(child, 'accessor')[0];\n\n            if (accessor !== undefined) {\n              data.stride = parseInt(accessor.getAttribute('stride'));\n            }\n\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseGeometryVertices(xml) {\n      const data = {};\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n      }\n\n      return data;\n    }\n\n    function parseGeometryPrimitive(xml) {\n      const primitive = {\n        type: xml.nodeName,\n        material: xml.getAttribute('material'),\n        count: parseInt(xml.getAttribute('count')),\n        inputs: {},\n        stride: 0,\n        hasUV: false\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            const id = parseId(child.getAttribute('source'));\n            const semantic = child.getAttribute('semantic');\n            const offset = parseInt(child.getAttribute('offset'));\n            const set = parseInt(child.getAttribute('set'));\n            const inputname = set > 0 ? semantic + set : semantic;\n            primitive.inputs[inputname] = {\n              id: id,\n              offset: offset\n            };\n            primitive.stride = Math.max(primitive.stride, offset + 1);\n            if (semantic === 'TEXCOORD') primitive.hasUV = true;\n            break;\n\n          case 'vcount':\n            primitive.vcount = parseInts(child.textContent);\n            break;\n\n          case 'p':\n            primitive.p = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return primitive;\n    }\n\n    function groupPrimitives(primitives) {\n      const build = {};\n\n      for (let i = 0; i < primitives.length; i++) {\n        const primitive = primitives[i];\n        if (build[primitive.type] === undefined) build[primitive.type] = [];\n        build[primitive.type].push(primitive);\n      }\n\n      return build;\n    }\n\n    function checkUVCoordinates(primitives) {\n      let count = 0;\n\n      for (let i = 0, l = primitives.length; i < l; i++) {\n        const primitive = primitives[i];\n\n        if (primitive.hasUV === true) {\n          count++;\n        }\n      }\n\n      if (count > 0 && count < primitives.length) {\n        primitives.uvsNeedsFix = true;\n      }\n    }\n\n    function buildGeometry(data) {\n      const build = {};\n      const sources = data.sources;\n      const vertices = data.vertices;\n      const primitives = data.primitives;\n      if (primitives.length === 0) return {}; // our goal is to create one buffer geometry for a single type of primitives\n      // first, we group all primitives by their type\n\n      const groupedPrimitives = groupPrimitives(primitives);\n\n      for (const type in groupedPrimitives) {\n        const primitiveType = groupedPrimitives[type]; // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n        checkUVCoordinates(primitiveType); // third, create a buffer geometry for each type of primitives\n\n        build[type] = buildGeometryType(primitiveType, sources, vertices);\n      }\n\n      return build;\n    }\n\n    function buildGeometryType(primitives, sources, vertices) {\n      const build = {};\n      const position = {\n        array: [],\n        stride: 0\n      };\n      const normal = {\n        array: [],\n        stride: 0\n      };\n      const uv = {\n        array: [],\n        stride: 0\n      };\n      const uv2 = {\n        array: [],\n        stride: 0\n      };\n      const color = {\n        array: [],\n        stride: 0\n      };\n      const skinIndex = {\n        array: [],\n        stride: 4\n      };\n      const skinWeight = {\n        array: [],\n        stride: 4\n      };\n      const geometry = new BufferGeometry();\n      const materialKeys = [];\n      let start = 0;\n\n      for (let p = 0; p < primitives.length; p++) {\n        const primitive = primitives[p];\n        const inputs = primitive.inputs; // groups\n\n        let count = 0;\n\n        switch (primitive.type) {\n          case 'lines':\n          case 'linestrips':\n            count = primitive.count * 2;\n            break;\n\n          case 'triangles':\n            count = primitive.count * 3;\n            break;\n\n          case 'polylist':\n            for (let g = 0; g < primitive.count; g++) {\n              const vc = primitive.vcount[g];\n\n              switch (vc) {\n                case 3:\n                  count += 3; // single triangle\n\n                  break;\n\n                case 4:\n                  count += 6; // quad, subdivided into two triangles\n\n                  break;\n\n                default:\n                  count += (vc - 2) * 3; // polylist with more than four vertices\n\n                  break;\n              }\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n        }\n\n        geometry.addGroup(start, count, p);\n        start += count; // material\n\n        if (primitive.material) {\n          materialKeys.push(primitive.material);\n        } // geometry data\n\n\n        for (const name in inputs) {\n          const input = inputs[name];\n\n          switch (name) {\n            case 'VERTEX':\n              for (const key in vertices) {\n                const id = vertices[key];\n\n                switch (key) {\n                  case 'POSITION':\n                    const prevLength = position.array.length;\n                    buildGeometryData(primitive, sources[id], input.offset, position.array);\n                    position.stride = sources[id].stride;\n\n                    if (sources.skinWeights && sources.skinIndices) {\n                      buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                      buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                    } // see #3803\n\n\n                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                      const count = (position.array.length - prevLength) / position.stride;\n\n                      for (let i = 0; i < count; i++) {\n                        // fill missing uv coordinates\n                        uv.array.push(0, 0);\n                      }\n                    }\n\n                    break;\n\n                  case 'NORMAL':\n                    buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                    normal.stride = sources[id].stride;\n                    break;\n\n                  case 'COLOR':\n                    buildGeometryData(primitive, sources[id], input.offset, color.array);\n                    color.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD':\n                    buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD1':\n                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  default:\n                    console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                }\n              }\n\n              break;\n\n            case 'NORMAL':\n              buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n              normal.stride = sources[input.id].stride;\n              break;\n\n            case 'COLOR':\n              buildGeometryData(primitive, sources[input.id], input.offset, color.array);\n              color.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n              uv.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD1':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n              uv2.stride = sources[input.id].stride;\n              break;\n          }\n        }\n      } // build geometry\n\n\n      if (position.array.length > 0) {\n        geometry.setAttribute('position', new Float32BufferAttribute(position.array, position.stride));\n      }\n\n      if (normal.array.length > 0) {\n        geometry.setAttribute('normal', new Float32BufferAttribute(normal.array, normal.stride));\n      }\n\n      if (color.array.length > 0) geometry.setAttribute('color', new Float32BufferAttribute(color.array, color.stride));\n      if (uv.array.length > 0) geometry.setAttribute('uv', new Float32BufferAttribute(uv.array, uv.stride));\n      if (uv2.array.length > 0) geometry.setAttribute('uv2', new Float32BufferAttribute(uv2.array, uv2.stride));\n\n      if (skinIndex.array.length > 0) {\n        geometry.setAttribute('skinIndex', new Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n      }\n\n      if (skinWeight.array.length > 0) {\n        geometry.setAttribute('skinWeight', new Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n      }\n\n      build.data = geometry;\n      build.type = primitives[0].type;\n      build.materialKeys = materialKeys;\n      return build;\n    }\n\n    function buildGeometryData(primitive, source, offset, array) {\n      const indices = primitive.p;\n      const stride = primitive.stride;\n      const vcount = primitive.vcount;\n\n      function pushVector(i) {\n        let index = indices[i + offset] * sourceStride;\n        const length = index + sourceStride;\n\n        for (; index < length; index++) {\n          array.push(sourceArray[index]);\n        }\n      }\n\n      const sourceArray = source.array;\n      const sourceStride = source.stride;\n\n      if (primitive.vcount !== undefined) {\n        let index = 0;\n\n        for (let i = 0, l = vcount.length; i < l; i++) {\n          const count = vcount[i];\n\n          if (count === 4) {\n            const a = index + stride * 0;\n            const b = index + stride * 1;\n            const c = index + stride * 2;\n            const d = index + stride * 3;\n            pushVector(a);\n            pushVector(b);\n            pushVector(d);\n            pushVector(b);\n            pushVector(c);\n            pushVector(d);\n          } else if (count === 3) {\n            const a = index + stride * 0;\n            const b = index + stride * 1;\n            const c = index + stride * 2;\n            pushVector(a);\n            pushVector(b);\n            pushVector(c);\n          } else if (count > 4) {\n            for (let k = 1, kl = count - 2; k <= kl; k++) {\n              const a = index + stride * 0;\n              const b = index + stride * k;\n              const c = index + stride * (k + 1);\n              pushVector(a);\n              pushVector(b);\n              pushVector(c);\n            }\n          }\n\n          index += stride * count;\n        }\n      } else {\n        for (let i = 0, l = indices.length; i < l; i += stride) {\n          pushVector(i);\n        }\n      }\n    }\n\n    function getGeometry(id) {\n      return getBuild(library.geometries[id], buildGeometry);\n    } // kinematics\n\n\n    function parseKinematicsModel(xml) {\n      const data = {\n        name: xml.getAttribute('name') || '',\n        joints: {},\n        links: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parseKinematicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n\n      library.kinematicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function buildKinematicsModel(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsModel(id) {\n      return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n    }\n\n    function parseKinematicsTechniqueCommon(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'joint':\n            data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n            break;\n\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n        }\n      }\n    }\n\n    function parseKinematicsJoint(xml) {\n      let data;\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'prismatic':\n          case 'revolute':\n            data = parseKinematicsJointParameter(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsJointParameter(xml) {\n      const data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        axis: new Vector3(),\n        limits: {\n          min: 0,\n          max: 0\n        },\n        type: xml.nodeName,\n        static: false,\n        zeroPosition: 0,\n        middlePosition: 0\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            const array = parseFloats(child.textContent);\n            data.axis.fromArray(array);\n            break;\n\n          case 'limits':\n            const max = child.getElementsByTagName('max')[0];\n            const min = child.getElementsByTagName('min')[0];\n            data.limits.max = parseFloat(max.textContent);\n            data.limits.min = parseFloat(min.textContent);\n            break;\n        }\n      } // if min is equal to or greater than max, consider the joint static\n\n\n      if (data.limits.min >= data.limits.max) {\n        data.static = true;\n      } // calculate middle position\n\n\n      data.middlePosition = (data.limits.min + data.limits.max) / 2.0;\n      return data;\n    }\n\n    function parseKinematicsLink(xml) {\n      const data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        attachments: [],\n        transforms: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'attachment_full':\n            data.attachments.push(parseKinematicsAttachment(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsAttachment(xml) {\n      const data = {\n        joint: xml.getAttribute('joint').split('/').pop(),\n        transforms: [],\n        links: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsTransform(xml) {\n      const data = {\n        type: xml.nodeName\n      };\n      const array = parseFloats(xml.textContent);\n\n      switch (data.type) {\n        case 'matrix':\n          data.obj = new Matrix4();\n          data.obj.fromArray(array).transpose();\n          break;\n\n        case 'translate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          break;\n\n        case 'rotate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          data.angle = MathUtils.degToRad(array[3]);\n          break;\n      }\n\n      return data;\n    } // physics\n\n\n    function parsePhysicsModel(xml) {\n      const data = {\n        name: xml.getAttribute('name') || '',\n        rigidBodies: {}\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'rigid_body':\n            data.rigidBodies[child.getAttribute('name')] = {};\n            parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n            break;\n        }\n      }\n\n      library.physicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function parsePhysicsRigidBody(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parsePhysicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n    }\n\n    function parsePhysicsTechniqueCommon(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'inertia':\n            data.inertia = parseFloats(child.textContent);\n            break;\n\n          case 'mass':\n            data.mass = parseFloats(child.textContent)[0];\n            break;\n        }\n      }\n    } // scene\n\n\n    function parseKinematicsScene(xml) {\n      const data = {\n        bindJointAxis: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_joint_axis':\n            data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n            break;\n        }\n      }\n\n      library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n    }\n\n    function parseKinematicsBindJointAxis(xml) {\n      const data = {\n        target: xml.getAttribute('target').split('/').pop()\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            const param = child.getElementsByTagName('param')[0];\n            data.axis = param.textContent;\n            const tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n            data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildKinematicsScene(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsScene(id) {\n      return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n    }\n\n    function setupKinematics() {\n      const kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n      const kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n      const visualSceneId = Object.keys(library.visualScenes)[0];\n      if (kinematicsModelId === undefined || kinematicsSceneId === undefined) return;\n      const kinematicsModel = getKinematicsModel(kinematicsModelId);\n      const kinematicsScene = getKinematicsScene(kinematicsSceneId);\n      const visualScene = getVisualScene(visualSceneId);\n      const bindJointAxis = kinematicsScene.bindJointAxis;\n      const jointMap = {};\n\n      for (let i = 0, l = bindJointAxis.length; i < l; i++) {\n        const axis = bindJointAxis[i]; // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n        const targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n\n        if (targetElement) {\n          // get the parent of the transform element\n          const parentVisualElement = targetElement.parentElement; // connect the joint of the kinematics model with the element in the visual scene\n\n          connect(axis.jointIndex, parentVisualElement);\n        }\n      }\n\n      function connect(jointIndex, visualElement) {\n        const visualElementName = visualElement.getAttribute('name');\n        const joint = kinematicsModel.joints[jointIndex];\n        visualScene.traverse(function (object) {\n          if (object.name === visualElementName) {\n            jointMap[jointIndex] = {\n              object: object,\n              transforms: buildTransformList(visualElement),\n              joint: joint,\n              position: joint.zeroPosition\n            };\n          }\n        });\n      }\n\n      const m0 = new Matrix4();\n      kinematics = {\n        joints: kinematicsModel && kinematicsModel.joints,\n        getJointValue: function (jointIndex) {\n          const jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            return jointData.position;\n          } else {\n            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + \" doesn't exist.\");\n          }\n        },\n        setJointValue: function (jointIndex, value) {\n          const jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            const joint = jointData.joint;\n\n            if (value > joint.limits.max || value < joint.limits.min) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n            } else if (joint.static) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n            } else {\n              const object = jointData.object;\n              const axis = joint.axis;\n              const transforms = jointData.transforms;\n              matrix.identity(); // each update, we have to apply all transforms in the correct order\n\n              for (let i = 0; i < transforms.length; i++) {\n                const transform = transforms[i]; // if there is a connection of the transform node with a joint, apply the joint value\n\n                if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                  switch (joint.type) {\n                    case 'revolute':\n                      matrix.multiply(m0.makeRotationAxis(axis, MathUtils.degToRad(value)));\n                      break;\n\n                    case 'prismatic':\n                      matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));\n                      break;\n\n                    default:\n                      console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                      break;\n                  }\n                } else {\n                  switch (transform.type) {\n                    case 'matrix':\n                      matrix.multiply(transform.obj);\n                      break;\n\n                    case 'translate':\n                      matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                      break;\n\n                    case 'scale':\n                      matrix.scale(transform.obj);\n                      break;\n\n                    case 'rotate':\n                      matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                      break;\n                  }\n                }\n              }\n\n              object.matrix.copy(matrix);\n              object.matrix.decompose(object.position, object.quaternion, object.scale);\n              jointMap[jointIndex].position = value;\n            }\n          } else {\n            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n          }\n        }\n      };\n    }\n\n    function buildTransformList(node) {\n      const transforms = [];\n      const xml = collada.querySelector('[id=\"' + node.id + '\"]');\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        let array, vector;\n\n        switch (child.nodeName) {\n          case 'matrix':\n            array = parseFloats(child.textContent);\n            const matrix = new Matrix4().fromArray(array).transpose();\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: matrix\n            });\n            break;\n\n          case 'translate':\n          case 'scale':\n            array = parseFloats(child.textContent);\n            vector = new Vector3().fromArray(array);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector\n            });\n            break;\n\n          case 'rotate':\n            array = parseFloats(child.textContent);\n            vector = new Vector3().fromArray(array);\n            const angle = MathUtils.degToRad(array[3]);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector,\n              angle: angle\n            });\n            break;\n        }\n      }\n\n      return transforms;\n    } // nodes\n\n\n    function prepareNodes(xml) {\n      const elements = xml.getElementsByTagName('node'); // ensure all node elements have id attributes\n\n      for (let i = 0; i < elements.length; i++) {\n        const element = elements[i];\n\n        if (element.hasAttribute('id') === false) {\n          element.setAttribute('id', generateId());\n        }\n      }\n    }\n\n    const matrix = new Matrix4();\n    const vector = new Vector3();\n\n    function parseNode(xml) {\n      const data = {\n        name: xml.getAttribute('name') || '',\n        type: xml.getAttribute('type'),\n        id: xml.getAttribute('id'),\n        sid: xml.getAttribute('sid'),\n        matrix: new Matrix4(),\n        nodes: [],\n        instanceCameras: [],\n        instanceControllers: [],\n        instanceLights: [],\n        instanceGeometries: [],\n        instanceNodes: [],\n        transforms: {}\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        let array;\n\n        switch (child.nodeName) {\n          case 'node':\n            data.nodes.push(child.getAttribute('id'));\n            parseNode(child);\n            break;\n\n          case 'instance_camera':\n            data.instanceCameras.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_controller':\n            data.instanceControllers.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_light':\n            data.instanceLights.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_geometry':\n            data.instanceGeometries.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_node':\n            data.instanceNodes.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'matrix':\n            array = parseFloats(child.textContent);\n            data.matrix.multiply(matrix.fromArray(array).transpose());\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'translate':\n            array = parseFloats(child.textContent);\n            vector.fromArray(array);\n            data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'rotate':\n            array = parseFloats(child.textContent);\n            const angle = MathUtils.degToRad(array[3]);\n            data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'scale':\n            array = parseFloats(child.textContent);\n            data.matrix.scale(vector.fromArray(array));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'extra':\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasNode(data.id)) {\n        console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n      } else {\n        library.nodes[data.id] = data;\n      }\n\n      return data;\n    }\n\n    function parseNodeInstance(xml) {\n      const data = {\n        id: parseId(xml.getAttribute('url')),\n        materials: {},\n        skeletons: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'bind_material':\n            const instances = child.getElementsByTagName('instance_material');\n\n            for (let j = 0; j < instances.length; j++) {\n              const instance = instances[j];\n              const symbol = instance.getAttribute('symbol');\n              const target = instance.getAttribute('target');\n              data.materials[symbol] = parseId(target);\n            }\n\n            break;\n\n          case 'skeleton':\n            data.skeletons.push(parseId(child.textContent));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildSkeleton(skeletons, joints) {\n      const boneData = [];\n      const sortedBoneData = [];\n      let i, j, data; // a skeleton can have multiple root bones. collada expresses this\n      // situtation with multiple \"skeleton\" tags per controller instance\n\n      for (i = 0; i < skeletons.length; i++) {\n        const skeleton = skeletons[i];\n        let root;\n\n        if (hasNode(skeleton)) {\n          root = getNode(skeleton);\n          buildBoneHierarchy(root, joints, boneData);\n        } else if (hasVisualScene(skeleton)) {\n          // handle case where the skeleton refers to the visual scene (#13335)\n          const visualScene = library.visualScenes[skeleton];\n          const children = visualScene.children;\n\n          for (let j = 0; j < children.length; j++) {\n            const child = children[j];\n\n            if (child.type === 'JOINT') {\n              const root = getNode(child.id);\n              buildBoneHierarchy(root, joints, boneData);\n            }\n          }\n        } else {\n          console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n        }\n      } // sort bone data (the order is defined in the corresponding controller)\n\n\n      for (i = 0; i < joints.length; i++) {\n        for (j = 0; j < boneData.length; j++) {\n          data = boneData[j];\n\n          if (data.bone.name === joints[i].name) {\n            sortedBoneData[i] = data;\n            data.processed = true;\n            break;\n          }\n        }\n      } // add unprocessed bone data at the end of the list\n\n\n      for (i = 0; i < boneData.length; i++) {\n        data = boneData[i];\n\n        if (data.processed === false) {\n          sortedBoneData.push(data);\n          data.processed = true;\n        }\n      } // setup arrays for skeleton creation\n\n\n      const bones = [];\n      const boneInverses = [];\n\n      for (i = 0; i < sortedBoneData.length; i++) {\n        data = sortedBoneData[i];\n        bones.push(data.bone);\n        boneInverses.push(data.boneInverse);\n      }\n\n      return new Skeleton(bones, boneInverses);\n    }\n\n    function buildBoneHierarchy(root, joints, boneData) {\n      // setup bone data from visual scene\n      root.traverse(function (object) {\n        if (object.isBone === true) {\n          let boneInverse; // retrieve the boneInverse from the controller data\n\n          for (let i = 0; i < joints.length; i++) {\n            const joint = joints[i];\n\n            if (joint.name === object.name) {\n              boneInverse = joint.boneInverse;\n              break;\n            }\n          }\n\n          if (boneInverse === undefined) {\n            // Unfortunately, there can be joints in the visual scene that are not part of the\n            // corresponding controller. In this case, we have to create a dummy boneInverse matrix\n            // for the respective bone. This bone won't affect any vertices, because there are no skin indices\n            // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n            // ensure a correct animation of the model.\n            boneInverse = new Matrix4();\n          }\n\n          boneData.push({\n            bone: object,\n            boneInverse: boneInverse,\n            processed: false\n          });\n        }\n      });\n    }\n\n    function buildNode(data) {\n      const objects = [];\n      const matrix = data.matrix;\n      const nodes = data.nodes;\n      const type = data.type;\n      const instanceCameras = data.instanceCameras;\n      const instanceControllers = data.instanceControllers;\n      const instanceLights = data.instanceLights;\n      const instanceGeometries = data.instanceGeometries;\n      const instanceNodes = data.instanceNodes; // nodes\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        objects.push(getNode(nodes[i]));\n      } // instance cameras\n\n\n      for (let i = 0, l = instanceCameras.length; i < l; i++) {\n        const instanceCamera = getCamera(instanceCameras[i]);\n\n        if (instanceCamera !== null) {\n          objects.push(instanceCamera.clone());\n        }\n      } // instance controllers\n\n\n      for (let i = 0, l = instanceControllers.length; i < l; i++) {\n        const instance = instanceControllers[i];\n        const controller = getController(instance.id);\n        const geometries = getGeometry(controller.id);\n        const newObjects = buildObjects(geometries, instance.materials);\n        const skeletons = instance.skeletons;\n        const joints = controller.skin.joints;\n        const skeleton = buildSkeleton(skeletons, joints);\n\n        for (let j = 0, jl = newObjects.length; j < jl; j++) {\n          const object = newObjects[j];\n\n          if (object.isSkinnedMesh) {\n            object.bind(skeleton, controller.skin.bindMatrix);\n            object.normalizeSkinWeights();\n          }\n\n          objects.push(object);\n        }\n      } // instance lights\n\n\n      for (let i = 0, l = instanceLights.length; i < l; i++) {\n        const instanceLight = getLight(instanceLights[i]);\n\n        if (instanceLight !== null) {\n          objects.push(instanceLight.clone());\n        }\n      } // instance geometries\n\n\n      for (let i = 0, l = instanceGeometries.length; i < l; i++) {\n        const instance = instanceGeometries[i]; // a single geometry instance in collada can lead to multiple object3Ds.\n        // this is the case when primitives are combined like triangles and lines\n\n        const geometries = getGeometry(instance.id);\n        const newObjects = buildObjects(geometries, instance.materials);\n\n        for (let j = 0, jl = newObjects.length; j < jl; j++) {\n          objects.push(newObjects[j]);\n        }\n      } // instance nodes\n\n\n      for (let i = 0, l = instanceNodes.length; i < l; i++) {\n        objects.push(getNode(instanceNodes[i]).clone());\n      }\n\n      let object;\n\n      if (nodes.length === 0 && objects.length === 1) {\n        object = objects[0];\n      } else {\n        object = type === 'JOINT' ? new Bone() : new Group();\n\n        for (let i = 0; i < objects.length; i++) {\n          object.add(objects[i]);\n        }\n      }\n\n      object.name = type === 'JOINT' ? data.sid : data.name;\n      object.matrix.copy(matrix);\n      object.matrix.decompose(object.position, object.quaternion, object.scale);\n      return object;\n    }\n\n    const fallbackMaterial = new MeshBasicMaterial({\n      color: 0xff00ff\n    });\n\n    function resolveMaterialBinding(keys, instanceMaterials) {\n      const materials = [];\n\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const id = instanceMaterials[keys[i]];\n\n        if (id === undefined) {\n          console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n          materials.push(fallbackMaterial);\n        } else {\n          materials.push(getMaterial(id));\n        }\n      }\n\n      return materials;\n    }\n\n    function buildObjects(geometries, instanceMaterials) {\n      const objects = [];\n\n      for (const type in geometries) {\n        const geometry = geometries[type];\n        const materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials); // handle case if no materials are defined\n\n        if (materials.length === 0) {\n          if (type === 'lines' || type === 'linestrips') {\n            materials.push(new LineBasicMaterial());\n          } else {\n            materials.push(new MeshPhongMaterial());\n          }\n        } // regard skinning\n\n\n        const skinning = geometry.data.attributes.skinIndex !== undefined; // choose between a single or multi materials (material array)\n\n        const material = materials.length === 1 ? materials[0] : materials; // now create a specific 3D object\n\n        let object;\n\n        switch (type) {\n          case 'lines':\n            object = new LineSegments(geometry.data, material);\n            break;\n\n          case 'linestrips':\n            object = new Line(geometry.data, material);\n            break;\n\n          case 'triangles':\n          case 'polylist':\n            if (skinning) {\n              object = new SkinnedMesh(geometry.data, material);\n            } else {\n              object = new Mesh(geometry.data, material);\n            }\n\n            break;\n        }\n\n        objects.push(object);\n      }\n\n      return objects;\n    }\n\n    function hasNode(id) {\n      return library.nodes[id] !== undefined;\n    }\n\n    function getNode(id) {\n      return getBuild(library.nodes[id], buildNode);\n    } // visual scenes\n\n\n    function parseVisualScene(xml) {\n      const data = {\n        name: xml.getAttribute('name'),\n        children: []\n      };\n      prepareNodes(xml);\n      const elements = getElementsByTagName(xml, 'node');\n\n      for (let i = 0; i < elements.length; i++) {\n        data.children.push(parseNode(elements[i]));\n      }\n\n      library.visualScenes[xml.getAttribute('id')] = data;\n    }\n\n    function buildVisualScene(data) {\n      const group = new Group();\n      group.name = data.name;\n      const children = data.children;\n\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        group.add(getNode(child.id));\n      }\n\n      return group;\n    }\n\n    function hasVisualScene(id) {\n      return library.visualScenes[id] !== undefined;\n    }\n\n    function getVisualScene(id) {\n      return getBuild(library.visualScenes[id], buildVisualScene);\n    } // scenes\n\n\n    function parseScene(xml) {\n      const instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n      return getVisualScene(parseId(instance.getAttribute('url')));\n    }\n\n    function setupAnimations() {\n      const clips = library.clips;\n\n      if (isEmpty(clips) === true) {\n        if (isEmpty(library.animations) === false) {\n          // if there are animations but no clips, we create a default clip for playback\n          const tracks = [];\n\n          for (const id in library.animations) {\n            const animationTracks = getAnimation(id);\n\n            for (let i = 0, l = animationTracks.length; i < l; i++) {\n              tracks.push(animationTracks[i]);\n            }\n          }\n\n          animations.push(new AnimationClip('default', -1, tracks));\n        }\n      } else {\n        for (const id in clips) {\n          animations.push(getAnimationClip(id));\n        }\n      }\n    } // convert the parser error element into text with each child elements text\n    // separated by new lines.\n\n\n    function parserErrorToText(parserError) {\n      let result = '';\n      const stack = [parserError];\n\n      while (stack.length) {\n        const node = stack.shift();\n\n        if (node.nodeType === Node.TEXT_NODE) {\n          result += node.textContent;\n        } else {\n          result += '\\n';\n          stack.push.apply(stack, node.childNodes);\n        }\n      }\n\n      return result.trim();\n    }\n\n    if (text.length === 0) {\n      return {\n        scene: new Scene()\n      };\n    }\n\n    const xml = new DOMParser().parseFromString(text, 'application/xml');\n    const collada = getElementsByTagName(xml, 'COLLADA')[0];\n    const parserError = xml.getElementsByTagName('parsererror')[0];\n\n    if (parserError !== undefined) {\n      // Chrome will return parser error with a div in it\n      const errorElement = getElementsByTagName(parserError, 'div')[0];\n      let errorText;\n\n      if (errorElement) {\n        errorText = errorElement.textContent;\n      } else {\n        errorText = parserErrorToText(parserError);\n      }\n\n      console.error('THREE.ColladaLoader: Failed to parse collada file.\\n', errorText);\n      return null;\n    } // metadata\n\n\n    const version = collada.getAttribute('version');\n    console.log('THREE.ColladaLoader: File version', version);\n    const asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n    const textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    let tgaLoader;\n\n    if (TGALoader) {\n      tgaLoader = new TGALoader(this.manager);\n      tgaLoader.setPath(this.resourcePath || path);\n    } //\n\n\n    const animations = [];\n    let kinematics = {};\n    let count = 0; //\n\n    const library = {\n      animations: {},\n      clips: {},\n      controllers: {},\n      images: {},\n      effects: {},\n      materials: {},\n      cameras: {},\n      lights: {},\n      geometries: {},\n      nodes: {},\n      visualScenes: {},\n      kinematicsModels: {},\n      physicsModels: {},\n      kinematicsScenes: {}\n    };\n    parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n    parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n    parseLibrary(collada, 'library_controllers', 'controller', parseController);\n    parseLibrary(collada, 'library_images', 'image', parseImage);\n    parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n    parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n    parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n    parseLibrary(collada, 'library_lights', 'light', parseLight);\n    parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n    parseLibrary(collada, 'library_nodes', 'node', parseNode);\n    parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n    parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n    parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n    parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n    buildLibrary(library.animations, buildAnimation);\n    buildLibrary(library.clips, buildAnimationClip);\n    buildLibrary(library.controllers, buildController);\n    buildLibrary(library.images, buildImage);\n    buildLibrary(library.effects, buildEffect);\n    buildLibrary(library.materials, buildMaterial);\n    buildLibrary(library.cameras, buildCamera);\n    buildLibrary(library.lights, buildLight);\n    buildLibrary(library.geometries, buildGeometry);\n    buildLibrary(library.visualScenes, buildVisualScene);\n    setupAnimations();\n    setupKinematics();\n    const scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n    scene.animations = animations;\n\n    if (asset.upAxis === 'Z_UP') {\n      scene.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    }\n\n    scene.scale.multiplyScalar(asset.unit);\n    return {\n      get animations() {\n        console.warn('THREE.ColladaLoader: Please access animations over scene.animations now.');\n        return animations;\n      },\n\n      kinematics: kinematics,\n      library: library,\n      scene: scene\n    };\n  }\n\n}\n\nexport { ColladaLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}