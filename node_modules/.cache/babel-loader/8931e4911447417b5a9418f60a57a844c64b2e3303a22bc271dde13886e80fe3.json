{"ast":null,"code":"import { Mesh, PlaneGeometry, OrthographicCamera, MathUtils, WebGLRenderTarget, Vector2, RawShaderMaterial, NoBlending } from 'three';\n\n/**\n * This class generates custom mipmaps for a roughness map by encoding the lost variation in the\n * normal map mip levels as increased roughness in the corresponding roughness mip levels. This\n * helps with rendering accuracy for MeshStandardMaterial, and also helps with anti-aliasing when\n * using PMREM. If the normal map is larger than the roughness map, the roughness map will be\n * enlarged to match the dimensions of the normal map.\n */\n\nvar _mipmapMaterial = _getMipmapMaterial();\nvar _mesh = new Mesh(new PlaneGeometry(2, 2), _mipmapMaterial);\nvar _flatCamera = new OrthographicCamera(0, 1, 0, 1, 0, 1);\nvar _tempTarget = null;\nvar _renderer = null;\nfunction RoughnessMipmapper(renderer) {\n  _renderer = renderer;\n  _renderer.compile(_mesh, _flatCamera);\n}\nRoughnessMipmapper.prototype = {\n  constructor: RoughnessMipmapper,\n  generateMipmaps: function (material) {\n    if ('roughnessMap' in material === false) return;\n    var {\n      roughnessMap,\n      normalMap\n    } = material;\n    if (roughnessMap === null || normalMap === null || !roughnessMap.generateMipmaps || material.userData.roughnessUpdated) {\n      return;\n    }\n    material.userData.roughnessUpdated = true;\n    var width = Math.max(roughnessMap.image.width, normalMap.image.width);\n    var height = Math.max(roughnessMap.image.height, normalMap.image.height);\n    if (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height)) return;\n    var oldTarget = _renderer.getRenderTarget();\n    var autoClear = _renderer.autoClear;\n    _renderer.autoClear = false;\n    if (_tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height) {\n      if (_tempTarget !== null) _tempTarget.dispose();\n      _tempTarget = new WebGLRenderTarget(width, height, {\n        depthBuffer: false\n      });\n      _tempTarget.scissorTest = true;\n    }\n    if (width !== roughnessMap.image.width || height !== roughnessMap.image.height) {\n      var params = {\n        wrapS: roughnessMap.wrapS,\n        wrapT: roughnessMap.wrapT,\n        magFilter: roughnessMap.magFilter,\n        minFilter: roughnessMap.minFilter,\n        depthBuffer: false\n      };\n      var newRoughnessTarget = new WebGLRenderTarget(width, height, params);\n      newRoughnessTarget.texture.generateMipmaps = true; // Setting the render target causes the memory to be allocated.\n\n      _renderer.setRenderTarget(newRoughnessTarget);\n      material.roughnessMap = newRoughnessTarget.texture;\n      if (material.metalnessMap == roughnessMap) material.metalnessMap = material.roughnessMap;\n      if (material.aoMap == roughnessMap) material.aoMap = material.roughnessMap;\n    }\n    _mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;\n    _mipmapMaterial.uniforms.normalMap.value = normalMap;\n    var position = new Vector2(0, 0);\n    var texelSize = _mipmapMaterial.uniforms.texelSize.value;\n    for (let mip = 0; width >= 1 && height >= 1; ++mip, width /= 2, height /= 2) {\n      // Rendering to a mip level is not allowed in webGL1. Instead we must set\n      // up a secondary texture to write the result to, then copy it back to the\n      // proper mipmap level.\n      texelSize.set(1.0 / width, 1.0 / height);\n      if (mip == 0) texelSize.set(0.0, 0.0);\n      _tempTarget.viewport.set(position.x, position.y, width, height);\n      _tempTarget.scissor.set(position.x, position.y, width, height);\n      _renderer.setRenderTarget(_tempTarget);\n      _renderer.render(_mesh, _flatCamera);\n      _renderer.copyFramebufferToTexture(position, material.roughnessMap, mip);\n      _mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;\n    }\n    if (roughnessMap !== material.roughnessMap) roughnessMap.dispose();\n    _renderer.setRenderTarget(oldTarget);\n    _renderer.autoClear = autoClear;\n  },\n  dispose: function () {\n    _mipmapMaterial.dispose();\n    _mesh.geometry.dispose();\n    if (_tempTarget != null) _tempTarget.dispose();\n  }\n};\nfunction _getMipmapMaterial() {\n  var shaderMaterial = new RawShaderMaterial({\n    uniforms: {\n      roughnessMap: {\n        value: null\n      },\n      normalMap: {\n        value: null\n      },\n      texelSize: {\n        value: new Vector2(1, 1)\n      }\n    },\n    vertexShader: /* glsl */\n    `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\tvUv = uv;\n\n\t\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t\t}\n\t\t`,\n    fragmentShader: /* glsl */\n    `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tuniform sampler2D roughnessMap;\n\t\t\tuniform sampler2D normalMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\n\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tfloat roughnessToVariance( float roughness ) {\n\n\t\t\t\tfloat variance = 0.0;\n\n\t\t\t\tif ( roughness >= r1 ) {\n\n\t\t\t\t\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\n\n\t\t\t\t} else if ( roughness >= r4 ) {\n\n\t\t\t\t\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\n\n\t\t\t\t} else if ( roughness >= r5 ) {\n\n\t\t\t\t\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfloat roughness2 = roughness * roughness;\n\n\t\t\t\t\tvariance = 1.79 * roughness2 * roughness2;\n\n\t\t\t\t}\n\n\t\t\t\treturn variance;\n\n\t\t\t}\n\n\t\t\tfloat varianceToRoughness( float variance ) {\n\n\t\t\t\tfloat roughness = 0.0;\n\n\t\t\t\tif ( variance >= v1 ) {\n\n\t\t\t\t\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\n\n\t\t\t\t} else if ( variance >= v4 ) {\n\n\t\t\t\t\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\n\n\t\t\t\t} else if ( variance >= v5 ) {\n\n\t\t\t\t\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\n\n\t\t\t\t}\n\n\t\t\t\treturn roughness;\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\n\n\t\t\t\tif ( texelSize.x == 0.0 ) return;\n\n\t\t\t\tfloat roughness = gl_FragColor.g;\n\n\t\t\t\tfloat variance = roughnessToVariance( roughness );\n\n\t\t\t\tvec3 avgNormal;\n\n\t\t\t\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\n\n\t\t\t\t\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\n\n\t\t\t\t\t\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\n\n\t\t\t\t\t\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvariance += 1.0 - 0.25 * length( avgNormal );\n\n\t\t\t\tgl_FragColor.g = varianceToRoughness( variance );\n\n\t\t\t}\n\t\t`,\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false\n  });\n  shaderMaterial.type = 'RoughnessMipmapper';\n  return shaderMaterial;\n}\nexport { RoughnessMipmapper };","map":{"version":3,"names":["Mesh","PlaneGeometry","OrthographicCamera","MathUtils","WebGLRenderTarget","Vector2","RawShaderMaterial","NoBlending","_mipmapMaterial","_getMipmapMaterial","_mesh","_flatCamera","_tempTarget","_renderer","RoughnessMipmapper","renderer","compile","prototype","constructor","generateMipmaps","material","roughnessMap","normalMap","userData","roughnessUpdated","width","Math","max","image","height","isPowerOfTwo","oldTarget","getRenderTarget","autoClear","dispose","depthBuffer","scissorTest","params","wrapS","wrapT","magFilter","minFilter","newRoughnessTarget","texture","setRenderTarget","metalnessMap","aoMap","uniforms","value","position","texelSize","mip","set","viewport","x","y","scissor","render","copyFramebufferToTexture","geometry","shaderMaterial","vertexShader","fragmentShader","blending","depthTest","depthWrite","type"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/utils/RoughnessMipmapper.js"],"sourcesContent":["import { Mesh, PlaneGeometry, OrthographicCamera, MathUtils, WebGLRenderTarget, Vector2, RawShaderMaterial, NoBlending } from 'three';\n\n/**\n * This class generates custom mipmaps for a roughness map by encoding the lost variation in the\n * normal map mip levels as increased roughness in the corresponding roughness mip levels. This\n * helps with rendering accuracy for MeshStandardMaterial, and also helps with anti-aliasing when\n * using PMREM. If the normal map is larger than the roughness map, the roughness map will be\n * enlarged to match the dimensions of the normal map.\n */\n\nvar _mipmapMaterial = _getMipmapMaterial();\n\nvar _mesh = new Mesh(new PlaneGeometry(2, 2), _mipmapMaterial);\n\nvar _flatCamera = new OrthographicCamera(0, 1, 0, 1, 0, 1);\n\nvar _tempTarget = null;\nvar _renderer = null;\n\nfunction RoughnessMipmapper(renderer) {\n  _renderer = renderer;\n\n  _renderer.compile(_mesh, _flatCamera);\n}\n\nRoughnessMipmapper.prototype = {\n  constructor: RoughnessMipmapper,\n  generateMipmaps: function (material) {\n    if ('roughnessMap' in material === false) return;\n    var {\n      roughnessMap,\n      normalMap\n    } = material;\n\n    if (roughnessMap === null || normalMap === null || !roughnessMap.generateMipmaps || material.userData.roughnessUpdated) {\n      return;\n    }\n\n    material.userData.roughnessUpdated = true;\n    var width = Math.max(roughnessMap.image.width, normalMap.image.width);\n    var height = Math.max(roughnessMap.image.height, normalMap.image.height);\n    if (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height)) return;\n\n    var oldTarget = _renderer.getRenderTarget();\n\n    var autoClear = _renderer.autoClear;\n    _renderer.autoClear = false;\n\n    if (_tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height) {\n      if (_tempTarget !== null) _tempTarget.dispose();\n      _tempTarget = new WebGLRenderTarget(width, height, {\n        depthBuffer: false\n      });\n      _tempTarget.scissorTest = true;\n    }\n\n    if (width !== roughnessMap.image.width || height !== roughnessMap.image.height) {\n      var params = {\n        wrapS: roughnessMap.wrapS,\n        wrapT: roughnessMap.wrapT,\n        magFilter: roughnessMap.magFilter,\n        minFilter: roughnessMap.minFilter,\n        depthBuffer: false\n      };\n      var newRoughnessTarget = new WebGLRenderTarget(width, height, params);\n      newRoughnessTarget.texture.generateMipmaps = true; // Setting the render target causes the memory to be allocated.\n\n      _renderer.setRenderTarget(newRoughnessTarget);\n\n      material.roughnessMap = newRoughnessTarget.texture;\n      if (material.metalnessMap == roughnessMap) material.metalnessMap = material.roughnessMap;\n      if (material.aoMap == roughnessMap) material.aoMap = material.roughnessMap;\n    }\n\n    _mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;\n    _mipmapMaterial.uniforms.normalMap.value = normalMap;\n    var position = new Vector2(0, 0);\n    var texelSize = _mipmapMaterial.uniforms.texelSize.value;\n\n    for (let mip = 0; width >= 1 && height >= 1; ++mip, width /= 2, height /= 2) {\n      // Rendering to a mip level is not allowed in webGL1. Instead we must set\n      // up a secondary texture to write the result to, then copy it back to the\n      // proper mipmap level.\n      texelSize.set(1.0 / width, 1.0 / height);\n      if (mip == 0) texelSize.set(0.0, 0.0);\n\n      _tempTarget.viewport.set(position.x, position.y, width, height);\n\n      _tempTarget.scissor.set(position.x, position.y, width, height);\n\n      _renderer.setRenderTarget(_tempTarget);\n\n      _renderer.render(_mesh, _flatCamera);\n\n      _renderer.copyFramebufferToTexture(position, material.roughnessMap, mip);\n\n      _mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;\n    }\n\n    if (roughnessMap !== material.roughnessMap) roughnessMap.dispose();\n\n    _renderer.setRenderTarget(oldTarget);\n\n    _renderer.autoClear = autoClear;\n  },\n  dispose: function () {\n    _mipmapMaterial.dispose();\n\n    _mesh.geometry.dispose();\n\n    if (_tempTarget != null) _tempTarget.dispose();\n  }\n};\n\nfunction _getMipmapMaterial() {\n  var shaderMaterial = new RawShaderMaterial({\n    uniforms: {\n      roughnessMap: {\n        value: null\n      },\n      normalMap: {\n        value: null\n      },\n      texelSize: {\n        value: new Vector2(1, 1)\n      }\n    },\n    vertexShader:\n    /* glsl */\n    `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\tvUv = uv;\n\n\t\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t\t}\n\t\t`,\n    fragmentShader:\n    /* glsl */\n    `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tuniform sampler2D roughnessMap;\n\t\t\tuniform sampler2D normalMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\n\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tfloat roughnessToVariance( float roughness ) {\n\n\t\t\t\tfloat variance = 0.0;\n\n\t\t\t\tif ( roughness >= r1 ) {\n\n\t\t\t\t\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\n\n\t\t\t\t} else if ( roughness >= r4 ) {\n\n\t\t\t\t\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\n\n\t\t\t\t} else if ( roughness >= r5 ) {\n\n\t\t\t\t\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfloat roughness2 = roughness * roughness;\n\n\t\t\t\t\tvariance = 1.79 * roughness2 * roughness2;\n\n\t\t\t\t}\n\n\t\t\t\treturn variance;\n\n\t\t\t}\n\n\t\t\tfloat varianceToRoughness( float variance ) {\n\n\t\t\t\tfloat roughness = 0.0;\n\n\t\t\t\tif ( variance >= v1 ) {\n\n\t\t\t\t\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\n\n\t\t\t\t} else if ( variance >= v4 ) {\n\n\t\t\t\t\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\n\n\t\t\t\t} else if ( variance >= v5 ) {\n\n\t\t\t\t\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\n\n\t\t\t\t}\n\n\t\t\t\treturn roughness;\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\n\n\t\t\t\tif ( texelSize.x == 0.0 ) return;\n\n\t\t\t\tfloat roughness = gl_FragColor.g;\n\n\t\t\t\tfloat variance = roughnessToVariance( roughness );\n\n\t\t\t\tvec3 avgNormal;\n\n\t\t\t\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\n\n\t\t\t\t\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\n\n\t\t\t\t\t\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\n\n\t\t\t\t\t\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvariance += 1.0 - 0.25 * length( avgNormal );\n\n\t\t\t\tgl_FragColor.g = varianceToRoughness( variance );\n\n\t\t\t}\n\t\t`,\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false\n  });\n  shaderMaterial.type = 'RoughnessMipmapper';\n  return shaderMaterial;\n}\n\nexport { RoughnessMipmapper };\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,aAAa,EAAEC,kBAAkB,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,OAAO,EAAEC,iBAAiB,EAAEC,UAAU,QAAQ,OAAO;;AAErI;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,eAAe,GAAGC,kBAAkB,EAAE;AAE1C,IAAIC,KAAK,GAAG,IAAIV,IAAI,CAAC,IAAIC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEO,eAAe,CAAC;AAE9D,IAAIG,WAAW,GAAG,IAAIT,kBAAkB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAE1D,IAAIU,WAAW,GAAG,IAAI;AACtB,IAAIC,SAAS,GAAG,IAAI;AAEpB,SAASC,kBAAkBA,CAACC,QAAQ,EAAE;EACpCF,SAAS,GAAGE,QAAQ;EAEpBF,SAAS,CAACG,OAAO,CAACN,KAAK,EAAEC,WAAW,CAAC;AACvC;AAEAG,kBAAkB,CAACG,SAAS,GAAG;EAC7BC,WAAW,EAAEJ,kBAAkB;EAC/BK,eAAe,EAAE,SAAAA,CAAUC,QAAQ,EAAE;IACnC,IAAI,cAAc,IAAIA,QAAQ,KAAK,KAAK,EAAE;IAC1C,IAAI;MACFC,YAAY;MACZC;IACF,CAAC,GAAGF,QAAQ;IAEZ,IAAIC,YAAY,KAAK,IAAI,IAAIC,SAAS,KAAK,IAAI,IAAI,CAACD,YAAY,CAACF,eAAe,IAAIC,QAAQ,CAACG,QAAQ,CAACC,gBAAgB,EAAE;MACtH;IACF;IAEAJ,QAAQ,CAACG,QAAQ,CAACC,gBAAgB,GAAG,IAAI;IACzC,IAAIC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACN,YAAY,CAACO,KAAK,CAACH,KAAK,EAAEH,SAAS,CAACM,KAAK,CAACH,KAAK,CAAC;IACrE,IAAII,MAAM,GAAGH,IAAI,CAACC,GAAG,CAACN,YAAY,CAACO,KAAK,CAACC,MAAM,EAAEP,SAAS,CAACM,KAAK,CAACC,MAAM,CAAC;IACxE,IAAI,CAAC1B,SAAS,CAAC2B,YAAY,CAACL,KAAK,CAAC,IAAI,CAACtB,SAAS,CAAC2B,YAAY,CAACD,MAAM,CAAC,EAAE;IAEvE,IAAIE,SAAS,GAAGlB,SAAS,CAACmB,eAAe,EAAE;IAE3C,IAAIC,SAAS,GAAGpB,SAAS,CAACoB,SAAS;IACnCpB,SAAS,CAACoB,SAAS,GAAG,KAAK;IAE3B,IAAIrB,WAAW,KAAK,IAAI,IAAIA,WAAW,CAACa,KAAK,KAAKA,KAAK,IAAIb,WAAW,CAACiB,MAAM,KAAKA,MAAM,EAAE;MACxF,IAAIjB,WAAW,KAAK,IAAI,EAAEA,WAAW,CAACsB,OAAO,EAAE;MAC/CtB,WAAW,GAAG,IAAIR,iBAAiB,CAACqB,KAAK,EAAEI,MAAM,EAAE;QACjDM,WAAW,EAAE;MACf,CAAC,CAAC;MACFvB,WAAW,CAACwB,WAAW,GAAG,IAAI;IAChC;IAEA,IAAIX,KAAK,KAAKJ,YAAY,CAACO,KAAK,CAACH,KAAK,IAAII,MAAM,KAAKR,YAAY,CAACO,KAAK,CAACC,MAAM,EAAE;MAC9E,IAAIQ,MAAM,GAAG;QACXC,KAAK,EAAEjB,YAAY,CAACiB,KAAK;QACzBC,KAAK,EAAElB,YAAY,CAACkB,KAAK;QACzBC,SAAS,EAAEnB,YAAY,CAACmB,SAAS;QACjCC,SAAS,EAAEpB,YAAY,CAACoB,SAAS;QACjCN,WAAW,EAAE;MACf,CAAC;MACD,IAAIO,kBAAkB,GAAG,IAAItC,iBAAiB,CAACqB,KAAK,EAAEI,MAAM,EAAEQ,MAAM,CAAC;MACrEK,kBAAkB,CAACC,OAAO,CAACxB,eAAe,GAAG,IAAI,CAAC,CAAC;;MAEnDN,SAAS,CAAC+B,eAAe,CAACF,kBAAkB,CAAC;MAE7CtB,QAAQ,CAACC,YAAY,GAAGqB,kBAAkB,CAACC,OAAO;MAClD,IAAIvB,QAAQ,CAACyB,YAAY,IAAIxB,YAAY,EAAED,QAAQ,CAACyB,YAAY,GAAGzB,QAAQ,CAACC,YAAY;MACxF,IAAID,QAAQ,CAAC0B,KAAK,IAAIzB,YAAY,EAAED,QAAQ,CAAC0B,KAAK,GAAG1B,QAAQ,CAACC,YAAY;IAC5E;IAEAb,eAAe,CAACuC,QAAQ,CAAC1B,YAAY,CAAC2B,KAAK,GAAG3B,YAAY;IAC1Db,eAAe,CAACuC,QAAQ,CAACzB,SAAS,CAAC0B,KAAK,GAAG1B,SAAS;IACpD,IAAI2B,QAAQ,GAAG,IAAI5C,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;IAChC,IAAI6C,SAAS,GAAG1C,eAAe,CAACuC,QAAQ,CAACG,SAAS,CAACF,KAAK;IAExD,KAAK,IAAIG,GAAG,GAAG,CAAC,EAAE1B,KAAK,IAAI,CAAC,IAAII,MAAM,IAAI,CAAC,EAAE,EAAEsB,GAAG,EAAE1B,KAAK,IAAI,CAAC,EAAEI,MAAM,IAAI,CAAC,EAAE;MAC3E;MACA;MACA;MACAqB,SAAS,CAACE,GAAG,CAAC,GAAG,GAAG3B,KAAK,EAAE,GAAG,GAAGI,MAAM,CAAC;MACxC,IAAIsB,GAAG,IAAI,CAAC,EAAED,SAAS,CAACE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;MAErCxC,WAAW,CAACyC,QAAQ,CAACD,GAAG,CAACH,QAAQ,CAACK,CAAC,EAAEL,QAAQ,CAACM,CAAC,EAAE9B,KAAK,EAAEI,MAAM,CAAC;MAE/DjB,WAAW,CAAC4C,OAAO,CAACJ,GAAG,CAACH,QAAQ,CAACK,CAAC,EAAEL,QAAQ,CAACM,CAAC,EAAE9B,KAAK,EAAEI,MAAM,CAAC;MAE9DhB,SAAS,CAAC+B,eAAe,CAAChC,WAAW,CAAC;MAEtCC,SAAS,CAAC4C,MAAM,CAAC/C,KAAK,EAAEC,WAAW,CAAC;MAEpCE,SAAS,CAAC6C,wBAAwB,CAACT,QAAQ,EAAE7B,QAAQ,CAACC,YAAY,EAAE8B,GAAG,CAAC;MAExE3C,eAAe,CAACuC,QAAQ,CAAC1B,YAAY,CAAC2B,KAAK,GAAG5B,QAAQ,CAACC,YAAY;IACrE;IAEA,IAAIA,YAAY,KAAKD,QAAQ,CAACC,YAAY,EAAEA,YAAY,CAACa,OAAO,EAAE;IAElErB,SAAS,CAAC+B,eAAe,CAACb,SAAS,CAAC;IAEpClB,SAAS,CAACoB,SAAS,GAAGA,SAAS;EACjC,CAAC;EACDC,OAAO,EAAE,SAAAA,CAAA,EAAY;IACnB1B,eAAe,CAAC0B,OAAO,EAAE;IAEzBxB,KAAK,CAACiD,QAAQ,CAACzB,OAAO,EAAE;IAExB,IAAItB,WAAW,IAAI,IAAI,EAAEA,WAAW,CAACsB,OAAO,EAAE;EAChD;AACF,CAAC;AAED,SAASzB,kBAAkBA,CAAA,EAAG;EAC5B,IAAImD,cAAc,GAAG,IAAItD,iBAAiB,CAAC;IACzCyC,QAAQ,EAAE;MACR1B,YAAY,EAAE;QACZ2B,KAAK,EAAE;MACT,CAAC;MACD1B,SAAS,EAAE;QACT0B,KAAK,EAAE;MACT,CAAC;MACDE,SAAS,EAAE;QACTF,KAAK,EAAE,IAAI3C,OAAO,CAAC,CAAC,EAAE,CAAC;MACzB;IACF,CAAC;IACDwD,YAAY,EACZ;IACC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;IACCC,cAAc,EACdxD,UAAU;IACpByD,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE;EACd,CAAC,CAAC;EACFL,cAAc,CAACM,IAAI,GAAG,oBAAoB;EAC1C,OAAON,cAAc;AACvB;AAEA,SAAS9C,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}