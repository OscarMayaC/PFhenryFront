{"version":3,"file":"functions.modern.js","sources":["../src/center.ts","../src/colorspace.ts","../src/dedup.ts","../src/utils.ts","../src/inspect.ts","../src/instance.ts","../src/metal-rough.ts","../src/prune.ts","../src/partition.ts","../src/quantize.ts","../src/resample.ts","../src/reorder.ts","../src/sequence.ts","../src/tangents.ts","../src/texture-resize.ts","../src/unweld.ts","../src/weld.ts"],"sourcesContent":["import { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { bounds } from '@gltf-transform/core';\n\nconst NAME = 'center';\n\n/** Options for the {@link center} function. */\nexport interface CenterOptions {\n\t/** Location on the model to be considered the pivot, and recentered at the origin. */\n\tpivot?: 'center' | 'above' | 'below' | vec3;\n}\n\nconst CENTER_DEFAULTS: Required<CenterOptions> = {pivot: 'center'};\n\n/**\n * Centers the {@link Scene} at the origin, or above/below it. Transformations from animation,\n * skinning, and morph targets are not taken into account.\n *\n * Example:\n *\n * ```ts\n * await document.transform(center({pivot: 'below'}));\n * ```\n */\nexport function center (_options: CenterOptions = CENTER_DEFAULTS): Transform {\n\tconst options = {...CENTER_DEFAULTS, ..._options} as Required<CenterOptions>;\n\n\treturn (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst isAnimated = root.listAnimations().length > 0 || root.listSkins().length > 0;\n\n\t\tdoc.getRoot().listScenes().forEach((scene, index) => {\n\t\t\tlogger.debug(`${NAME}: Scene ${index + 1} / ${root.listScenes().length}.`);\n\n\t\t\tlet pivot: vec3;\n\t\t\tif (typeof options.pivot === 'string') {\n\t\t\t\tconst bbox = bounds(scene);\n\t\t\t\tpivot = [\n\t\t\t\t\t(bbox.max[0] - bbox.min[0]) / 2 + bbox.min[0],\n\t\t\t\t\t(bbox.max[1] - bbox.min[1]) / 2 + bbox.min[1],\n\t\t\t\t\t(bbox.max[2] - bbox.min[2]) / 2 + bbox.min[2],\n\t\t\t\t];\n\t\t\t\tif (options.pivot === 'above') pivot[1] = bbox.max[1];\n\t\t\t\tif (options.pivot === 'below') pivot[1] = bbox.min[1];\n\t\t\t} else {\n\t\t\t\tpivot = options.pivot as vec3;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Pivot \"${pivot.join(', ')}\".`);\n\n\t\t\tconst offset: vec3 = [-1 * pivot[0], -1 * pivot[1], -1 * pivot[2]];\n\n\t\t\tif (isAnimated) {\n\t\t\t\tlogger.debug(`${NAME}: Model contains animation or skin. Adding a wrapper node.`);\n\t\t\t\tconst offsetNode = doc.createNode('Pivot').setTranslation(offset);\n\t\t\t\tscene.listChildren().forEach((child) => offsetNode.addChild(child));\n\t\t\t\tscene.addChild(offsetNode);\n\t\t\t} else {\n\t\t\t\tlogger.debug(`${NAME}: Skipping wrapper, offsetting all root nodes.`);\n\t\t\t\tscene.listChildren().forEach((child) => {\n\t\t\t\t\tconst t = child.getTranslation();\n\t\t\t\t\tchild.setTranslation([\n\t\t\t\t\t\tt[0] + offset[0],\n\t\t\t\t\t\tt[1] + offset[1],\n\t\t\t\t\t\tt[2] + offset[2],\n\t\t\t\t\t]);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t};\n\n}\n","import { Accessor, Document, Primitive, Transform, vec3 } from '@gltf-transform/core';\n\nconst NAME = 'colorspace';\n\n/** Options for the {@link colorspace} function. */\nexport interface ColorspaceOptions {\n\t/** Must be `\"sRGB\"`. Required. */\n    inputEncoding: string;\n}\n\n/**\n * Vertex color colorspace correction. The glTF format requires vertex colors to be stored\n * as linear values, and this function provides a way to correct vertex colors that are\n * (incorrectly) sRGB.\n */\nexport function colorspace (options: ColorspaceOptions): Transform {\n\n\treturn (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.inputEncoding === 'linear') {\n\t\t\tlogger.info(`${NAME}: Vertex colors already linear. Skipping conversion.`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.inputEncoding !== 'sRGB') {\n\t\t\tlogger.error(\n\t\t\t\t`${NAME}: Unknown input encoding \"${options.inputEncoding}\" – should be \"sRGB\" or `\n\t\t\t\t+ '\"linear\". Skipping conversion.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst converted = new Set<Accessor>();\n\n\t\t// Source: THREE.Color\n\t\tfunction sRGBToLinear( c: number ): number {\n\n\t\t\treturn ( c < 0.04045 )\n\t\t\t\t? c * 0.0773993808\n\t\t\t\t: Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t\t}\n\n\t\tfunction updatePrimitive(primitive: Primitive): void {\n\t\t\tconst color = [0, 0, 0] as vec3;\n\t\t\tlet attribute: Accessor | null;\n\t\t\tfor (let i = 0; (attribute = primitive.getAttribute(`COLOR_${i}`)); i++) {\n\t\t\t\tif (converted.has(attribute)) continue;\n\n\t\t\t\tfor (let j = 0; j < attribute.getCount(); j++) {\n\t\t\t\t\tattribute.getElement(j, color);\n\t\t\t\t\tcolor[0] = sRGBToLinear(color[0]);\n\t\t\t\t\tcolor[1] = sRGBToLinear(color[1]);\n\t\t\t\t\tcolor[2] = sRGBToLinear(color[2]);\n\t\t\t\t\tattribute.setElement(j, color);\n\t\t\t\t}\n\n\t\t\t\tconverted.add(attribute);\n\t\t\t}\n\t\t}\n\n\t\tdoc.getRoot()\n\t\t\t.listMeshes()\n\t\t\t.forEach((mesh) => mesh.listPrimitives().forEach(updatePrimitive));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t};\n\n}\n","import { Accessor, BufferUtils, Document, Logger, Mesh, PropertyType, Root, Texture, Transform } from '@gltf-transform/core';\n\nconst NAME = 'dedup';\n\n\n\nexport interface DedupOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes: string[];\n}\n\nconst DEDUP_DEFAULTS: Required<DedupOptions> = {\n\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.MESH, PropertyType.TEXTURE],\n};\n\n/**\n * Removes duplicate {@link Accessor}, {@link Mesh}, and {@link Texture} properties. Based on a\n * [gist by mattdesl](https://gist.github.com/mattdesl/aea40285e2d73916b6b9101b36d84da8).\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listMeshes(); // → [Mesh, Mesh, Mesh]\n *\n * await document.transform(dedup({propertyTypes: [PropertyType.MESH]}));\n *\n * document.getRoot().listMeshes(); // → [Mesh]\n * ```\n */\nexport const dedup = function (_options: DedupOptions = DEDUP_DEFAULTS): Transform {\n\tconst options = {...DEDUP_DEFAULTS, ..._options} as Required<DedupOptions>;\n\n\tconst propertyTypes = new Set(options.propertyTypes);\n\tfor (const propertyType of options.propertyTypes) {\n\t\tif (!DEDUP_DEFAULTS.propertyTypes.includes(propertyType)) {\n\t\t\tthrow new Error(`${NAME}: Unsupported deduplication on type \"${propertyType}\".`);\n\t\t}\n\t}\n\n\treturn (doc: Document): void =>  {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) dedupAccessors(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.MESH)) dedupMeshes(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) dedupImages(logger, doc);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t};\n\n};\n\nfunction dedupAccessors(logger: Logger, doc: Document): void {\n\t// Find all accessors used for mesh data.\n\tconst indicesAccessors: Set<Accessor> = new Set();\n\tconst attributeAccessors: Set<Accessor> = new Set();\n\n\tconst meshes = doc.getRoot().listMeshes();\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => (attributeAccessors.add(accessor)));\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices) indicesAccessors.add(indices);\n\t\t});\n\t});\n\n\t// Find duplicate mesh accessors.\n\tfunction detectDuplicates(accessors: Accessor[]): Map<Accessor, Accessor> {\n\t\tconst duplicateAccessors: Map<Accessor, Accessor> = new Map();\n\n\t\tfor (let i = 0; i < accessors.length; i++) {\n\t\t\tconst a = accessors[i];\n\t\t\tconst aData = a.getArray()!.slice().buffer;\n\n\t\t\tif (duplicateAccessors.has(a)) continue;\n\n\t\t\tfor (let j = 0; j < accessors.length; j++) {\n\t\t\t\tconst b = accessors[j];\n\n\t\t\t\tif (a === b) continue;\n\t\t\t\tif (duplicateAccessors.has(b)) continue;\n\n\t\t\t\tif (a.getType() !== b.getType()) continue;\n\t\t\t\tif (a.getComponentType() !== b.getComponentType()) continue;\n\t\t\t\tif (a.getCount() !== b.getCount()) continue;\n\t\t\t\tif (a.getNormalized() !== b.getNormalized()) continue;\n\t\t\t\tif (BufferUtils.equals(aData, b.getArray()!.slice().buffer)) {\n\t\t\t\t\tduplicateAccessors.set(b, a);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn duplicateAccessors;\n\t}\n\n\tconst duplicateIndices = detectDuplicates(Array.from(indicesAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateIndices.size} duplicates among ${indicesAccessors.size} indices.`\n\t);\n\n\tconst duplicateAttributes = detectDuplicates(Array.from(attributeAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateAttributes.size} duplicates among ${attributeAccessors.size}`\n\t\t+ ' attributes.'\n\t);\n\n\t// Dissolve duplicates.\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => {\n\t\t\t\tif (duplicateAttributes.has(accessor)) {\n\t\t\t\t\tprimitive.swap(accessor, duplicateAttributes.get(accessor) as Accessor);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices && duplicateIndices.has(indices)) {\n\t\t\t\tprimitive.swap(indices, duplicateIndices.get(indices) as Accessor);\n\t\t\t}\n\t\t});\n\t});\n\tArray.from(duplicateIndices.keys()).forEach((indices) => indices.dispose());\n\tArray.from(duplicateAttributes.keys()).forEach((attribute) => attribute.dispose());\n}\n\nfunction dedupMeshes(logger: Logger, doc: Document): void {\n\tconst root = doc.getRoot();\n\n\t// Create Accessor -> ID lookup table.\n\tconst accessorIndices = new Map<Accessor, number>();\n\troot.listAccessors().forEach((accessor, index) => {\n\t\taccessorIndices.set(accessor, index);\n\t});\n\n\t// For each mesh, create a hashkey.\n\tconst numMeshes = root.listMeshes().length;\n\tconst uniqueMeshes = new Map<string, Mesh>();\n\tfor (const src of root.listMeshes()) {\n\t\t// For each mesh, create a hashkey.\n\t\tconst srcKeyItems = [];\n\t\tfor (const prim of src.listPrimitives()) {\n\t\t\tconst primKeyItems = [];\n\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\tprimKeyItems.push(semantic + ':' + accessorIndices.get(attribute));\n\t\t\t}\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (indices) {\n\t\t\t\tprimKeyItems.push('indices:' + accessorIndices.get(indices));\n\t\t\t}\n\t\t\tsrcKeyItems.push(primKeyItems.join(','));\n\t\t}\n\n\t\t// If another mesh exists with the same key, replace all instances with that, and dispose\n\t\t// of the duplicate. If not, just cache it.\n\t\tconst meshKey = srcKeyItems.join(';');\n\t\tif (uniqueMeshes.has(meshKey)) {\n\t\t\tconst targetMesh = uniqueMeshes.get(meshKey)!;\n\t\t\tsrc.listParents().forEach((parent) => {\n\t\t\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\t\t\tparent.swap(src, targetMesh);\n\t\t\t\t}\n\t\t\t});\n\t\t\tsrc.dispose();\n\t\t} else {\n\t\t\tuniqueMeshes.set(meshKey, src);\n\t\t}\n\t}\n\n\tlogger.debug(\n\t\t`${NAME}: Found ${numMeshes - uniqueMeshes.size} duplicates among ${numMeshes} meshes.`\n\t);\n}\n\nfunction dedupImages(logger: Logger, doc: Document): void {\n\tconst root = doc.getRoot();\n\tconst textures = root.listTextures();\n\tconst duplicates: Map<Texture, Texture> = new Map();\n\n\tfor (let i = 0; i < textures.length; i++) {\n\t\tconst a = textures[i];\n\t\tconst aData = a.getImage();\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = 0; j < textures.length; j++) {\n\t\t\tconst b = textures[j];\n\t\t\tconst bData = b.getImage();\n\n\t\t\tif (a === b) continue;\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// URIs are intentionally not compared.\n\t\t\tif (a.getMimeType() !== b.getMimeType()) continue;\n\n\t\t\tconst aSize = a.getSize();\n\t\t\tconst bSize = b.getSize();\n\t\t\tif (!aSize || !bSize) continue;\n\t\t\tif (aSize[0] !== bSize[0]) continue;\n\t\t\tif (aSize[1] !== bSize[1]) continue;\n\t\t\tif (!aData || !bData) continue;\n\t\t\tif (BufferUtils.equals(aData, bData)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicates.size} duplicates among ${root.listTextures().length} textures.`\n\t);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n","import { NdArray } from 'ndarray';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport { Primitive, Texture } from '@gltf-transform/core';\n\n/** Maps pixels from source to target textures, with a per-pixel callback. */\nexport async function rewriteTexture(\n\t\tsource: Texture,\n\t\ttarget: Texture,\n\t\tfn: (pixels: NdArray, i: number, j: number) => void): Promise<Texture|null> {\n\n\tif (!source) return null;\n\n\tconst srcImage = source.getImage();\n\tif (!srcImage) return null;\n\n\tconst pixels = await getPixels(new Uint8Array(srcImage), source.getMimeType());\n\n\tfor(let i = 0; i < pixels.shape[0]; ++i) {\n\t\tfor(let j = 0; j < pixels.shape[1]; ++j) {\n\t\t\tfn(pixels, i, j);\n\t\t}\n\t}\n\n\tconst dstImage = (await savePixels(pixels, 'image/png')).buffer;\n\treturn target.setImage(dstImage).setMimeType('image/png');\n}\n\nexport function getGLPrimitiveCount(prim: Primitive): number {\n\tconst indices = prim.getIndices();\n\tconst position = prim.getAttribute('POSITION')!;\n\n\t// Reference: https://www.khronos.org/opengl/wiki/Primitive\n\tswitch (prim.getMode()) {\n\t\tcase Primitive.Mode.POINTS:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINES:\n\t\t\treturn indices\n\t\t\t\t? indices.getCount() / 2\n\t\t\t\t: position.getCount() / 2;\n\t\tcase Primitive.Mode.LINE_LOOP:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINE_STRIP:\n\t\t\treturn position.getCount() - 1;\n\t\tcase Primitive.Mode.TRIANGLES:\n\t\t\treturn indices\n\t\t\t\t? indices.getCount() / 3\n\t\t\t\t: position.getCount() / 3;\n\t\tcase Primitive.Mode.TRIANGLE_STRIP:\n\t\tcase Primitive.Mode.TRIANGLE_FAN:\n\t\t\treturn position.getCount() - 2;\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected mode: ' + prim.getMode());\n\t}\n}\n\nexport class SetMap<K, V> {\n\tprivate _map = new Map<K, Set<V>>();\n\tpublic get size(): number {\n\t\treturn this._map.size;\n\t}\n\tpublic has(k: K): boolean {\n\t\treturn this._map.has(k);\n\t}\n\tpublic add(k: K, v: V): this {\n\t\tlet entry = this._map.get(k);\n\t\tif (!entry) {\n\t\t\tentry = new Set();\n\t\t\tthis._map.set(k, entry);\n\t\t}\n\t\tentry.add(v);\n\t\treturn this;\n\t}\n\tpublic get(k: K): Set<V> {\n\t\treturn this._map.get(k) || new Set();\n\t}\n\tpublic keys(): Iterable<K> {\n\t\treturn this._map.keys();\n\t}\n}\n","import { Accessor, Document, ExtensionProperty, GLTF, ImageUtils, Texture, TypedArray, bounds } from '@gltf-transform/core';\nimport { getGLPrimitiveCount } from './utils';\n\n/** Inspects the contents of a glTF file and returns a JSON report. */\nexport function inspect (doc: Document): InspectReport {\n\treturn {\n\t\tscenes: listScenes(doc),\n\t\tmeshes: listMeshes(doc),\n\t\tmaterials: listMaterials(doc),\n\t\ttextures: listTextures(doc),\n\t\tanimations: listAnimations(doc),\n\t};\n}\n\n/** List scenes. */\nfunction listScenes (doc: Document): InspectPropertyReport<InspectSceneReport> {\n\tconst scenes = doc.getRoot().listScenes().map((scene) => {\n\t\tconst root = scene.listChildren()[0];\n\t\tconst sceneBounds = bounds(scene);\n\t\treturn {\n\t\t\tname: scene.getName(),\n\t\t\trootName: root ? root.getName() : '',\n\t\t\tbboxMin: toPrecision(sceneBounds.min),\n\t\t\tbboxMax: toPrecision(sceneBounds.max),\n\t\t};\n\t});\n\treturn {properties: scenes};\n}\n\n/** List meshes. */\nfunction listMeshes (doc: Document): InspectPropertyReport<InspectMeshReport> {\n\tconst meshes: InspectMeshReport[] = doc.getRoot().listMeshes().map((mesh) => {\n\t\tconst instances = mesh.listParents()\n\t\t\t.filter((parent) => parent.propertyType !== 'Root')\n\t\t\t.length;\n\t\tlet glPrimitives = 0;\n\t\tlet verts = 0;\n\t\tconst semantics = new Set<string>();\n\t\tconst meshIndices = new Set<string>();\n\t\tconst meshAccessors: Set<Accessor> = new Set();\n\n\t\tmesh.listPrimitives().forEach((prim) => {\n\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\tconst attr = prim.getAttribute(semantic)!;\n\t\t\t\tsemantics.add(semantic + ':' + arrayToType(attr.getArray()!));\n\t\t\t\tmeshAccessors.add(attr);\n\t\t\t}\n\t\t\tfor (const targ of prim.listTargets()) {\n\t\t\t\ttarg.listAttributes().forEach((attr) => meshAccessors.add(attr));\n\t\t\t}\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (indices) {\n\t\t\t\tmeshIndices.add(arrayToType(indices.getArray()!));\n\t\t\t\tmeshAccessors.add(indices);\n\t\t\t}\n\t\t\tverts += prim.listAttributes()[0].getCount();\n\t\t\tglPrimitives += getGLPrimitiveCount(prim);\n\t\t});\n\n\t\tlet size = 0;\n\t\tArray.from(meshAccessors).forEach((a) => (size += a.getArray()!.byteLength));\n\n\t\tconst modes = mesh.listPrimitives()\n\t\t\t.map((prim) => MeshPrimitiveModeLabels[prim.getMode()]);\n\n\t\treturn {\n\t\t\tname: mesh.getName(),\n\t\t\tmode: Array.from(new Set(modes)),\n\t\t\tprimitives: mesh.listPrimitives().length,\n\t\t\tglPrimitives: glPrimitives,\n\t\t\tvertices: verts,\n\t\t\tindices: Array.from(meshIndices).sort(),\n\t\t\tattributes: Array.from(semantics).sort(),\n\t\t\tinstances: instances,\n\t\t\tsize: size,\n\t\t};\n\t});\n\n\treturn {properties: meshes};\n}\n\n/** List materials. */\nfunction listMaterials (doc: Document): InspectPropertyReport<InspectMaterialReport> {\n\tconst materials: InspectMaterialReport[] = doc.getRoot().listMaterials().map((material) => {\n\t\tconst instances = material.listParents()\n\t\t\t.filter((parent) => parent.propertyType !== 'Root')\n\t\t\t.length;\n\n\t\t// Find all texture slots attached to this material or its extensions.\n\t\tconst extensions = new Set<ExtensionProperty>(material.listExtensions());\n\t\tconst slots = doc.getGraph().getLinks()\n\t\t\t.filter((link) => {\n\t\t\t\tconst child = link.getChild();\n\t\t\t\tconst parent = link.getParent();\n\t\t\t\tif (child instanceof Texture && parent === material) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (child instanceof Texture\n\t\t\t\t\t\t&& parent instanceof ExtensionProperty\n\t\t\t\t\t\t&& extensions.has(parent)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t})\n\t\t\t.map((link) => link.getName());\n\n\t\treturn {\n\t\t\tname: material.getName(),\n\t\t\tinstances,\n\t\t\ttextures: slots,\n\t\t\talphaMode: material.getAlphaMode(),\n\t\t\tdoubleSided: material.getDoubleSided(),\n\t\t};\n\t});\n\n\treturn {properties: materials};\n}\n\n/** List textures. */\nfunction listTextures (doc: Document): InspectPropertyReport<InspectTextureReport> {\n\tconst textures: InspectTextureReport[] = doc.getRoot().listTextures().map((texture) => {\n\t\tconst instances = texture.listParents()\n\t\t\t.filter((parent) => parent.propertyType !== 'Root')\n\t\t\t.length;\n\n\t\tconst slots = doc.getGraph().listParentLinks(texture)\n\t\t\t.map((link) => link.getName())\n\t\t\t.filter((name) => name !== 'texture');\n\n\t\tconst resolution = ImageUtils.getSize(texture.getImage()!, texture.getMimeType());\n\n\t\treturn {\n\t\t\tname: texture.getName(),\n\t\t\turi: texture.getURI(),\n\t\t\tslots: Array.from(new Set(slots)),\n\t\t\tinstances,\n\t\t\tmimeType: texture.getMimeType(),\n\t\t\tresolution: resolution ? resolution.join('x') : '',\n\t\t\tsize: texture.getImage()!.byteLength,\n\t\t\tgpuSize: ImageUtils.getMemSize(texture.getImage()!, texture.getMimeType()),\n\t\t};\n\t});\n\n\treturn {properties: textures};\n}\n\n/** List animations. */\nfunction listAnimations (doc: Document): InspectPropertyReport<InspectAnimationReport> {\n\tconst animations: InspectAnimationReport[] = doc.getRoot().listAnimations().map((anim) => {\n\t\tlet minTime = Infinity;\n\t\tlet maxTime = -Infinity;\n\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\tconst input = sampler.getInput();\n\t\t\tif (!input) return;\n\t\t\tminTime = Math.min(minTime, input.getMin([])[0]);\n\t\t\tmaxTime = Math.max(maxTime, input.getMax([])[0]);\n\t\t});\n\n\t\tlet size = 0;\n\t\tlet keyframes = 0;\n\t\tconst accessors: Set<Accessor> = new Set();\n\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (!input) return;\n\t\t\tkeyframes += input.getCount();\n\t\t\taccessors.add(input);\n\t\t\tif (!output) return;\n\t\t\taccessors.add(output);\n\t\t});\n\t\tArray.from(accessors).forEach((accessor) => {\n\t\t\tsize += accessor.getArray()!.byteLength;\n\t\t});\n\n\t\treturn {\n\t\t\tname: anim.getName(),\n\t\t\tchannels: anim.listChannels().length,\n\t\t\tsamplers: anim.listSamplers().length,\n\t\t\tduration: Math.round((maxTime - minTime) * 1000) / 1000,\n\t\t\tkeyframes: keyframes,\n\t\t\tsize: size,\n\t\t};\n\t});\n\n\treturn {properties: animations};\n}\n\nexport interface InspectReport {\n\tscenes: InspectPropertyReport<InspectSceneReport>;\n\tmeshes: InspectPropertyReport<InspectMeshReport>;\n\tmaterials: InspectPropertyReport<InspectMaterialReport>;\n\ttextures: InspectPropertyReport<InspectTextureReport>;\n\tanimations: InspectPropertyReport<InspectAnimationReport>;\n}\n\nexport interface InspectPropertyReport<T> {\n\tproperties: T[];\n\terrors?: string[];\n\twarnings?: string[];\n}\n\nexport interface InspectSceneReport {\n\tname: string;\n\trootName: string;\n\tbboxMin: number[];\n\tbboxMax: number[];\n}\n\nexport interface InspectMeshReport {\n\tname: string;\n\tprimitives: number;\n\tmode: string[];\n\tvertices: number;\n\tglPrimitives: number;\n\tindices: string[];\n\tattributes: string[];\n\tinstances: number;\n\tsize: number;\n}\n\nexport interface InspectMaterialReport {\n\tname: string;\n\tinstances: number;\n\ttextures: string[];\n\talphaMode: GLTF.MaterialAlphaMode;\n\tdoubleSided: boolean;\n}\n\nexport interface InspectTextureReport {\n\tname: string;\n\turi: string;\n\tslots: string[];\n\tinstances: number;\n\tmimeType: string;\n\tresolution: string;\n\tsize: number;\n\tgpuSize: number | null;\n}\n\nexport interface InspectAnimationReport {\n\tname: string;\n\tchannels: number;\n\tsamplers: number;\n\tkeyframes: number;\n\tduration: number;\n\tsize: number;\n}\n\nconst MeshPrimitiveModeLabels = [\n\t'POINTS',\n\t'LINES',\n\t'LINE_LOOP',\n\t'LINE_STRIP',\n\t'TRIANGLES',\n\t'TRIANGLE_STRIP',\n\t'TRIANGLE_FAN',\n];\n\n/** Maps values in a vector to a finite precision. */\nfunction toPrecision(v: number[]): number[] {\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif ((v[i] as number).toFixed) v[i] = Number(v[i].toFixed(5));\n\t}\n\treturn v;\n}\n\nfunction arrayToType(array: TypedArray): string {\n\treturn array.constructor.name.replace('Array', '').toLowerCase();\n}\n","import { Document, Logger, MathUtils, Mesh, Node, Transform, vec3, vec4 } from '@gltf-transform/core';\nimport { InstancedMesh, MeshGPUInstancing } from '@gltf-transform/extensions';\n\nconst NAME = 'instance';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface InstanceOptions {}\n\nconst INSTANCE_DEFAULTS: Required<InstanceOptions> = {};\n\n/**\n * Creates GPU instances (with `EXT_mesh_gpu_instancing`) for shared {@link Mesh} references. No\n * options are currently implemented for this function.\n */\nexport function instance (_options: InstanceOptions = INSTANCE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...INSTANCE_DEFAULTS, ..._options} as Required<InstanceOptions>;\n\n\treturn (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst batchExtension = doc.createExtension(MeshGPUInstancing);\n\n\t\tif (root.listAnimations().length) {\n\t\t\tthrow new Error(`${NAME}: Instancing is not currently supported for animated models.`);\n\t\t}\n\n\t\tlet numBatches = 0;\n\t\tlet numInstances = 0;\n\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t// Gather a one-to-many Mesh/Node mapping, identifying what we can instance.\n\t\t\tconst meshInstances = new Map<Mesh, Set<Node>>();\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst mesh = node.getMesh();\n\t\t\t\tif (!mesh) return;\n\t\t\t\tmeshInstances.set(mesh, (meshInstances.get(mesh) || new Set<Node>()).add(node));\n\t\t\t});\n\n\t\t\t// For each Mesh, create an InstancedMesh and collect transforms.\n\t\t\tconst modifiedNodes = [];\n\t\t\tfor (const mesh of Array.from(meshInstances.keys())) {\n\t\t\t\tconst nodes = Array.from(meshInstances.get(mesh)!);\n\t\t\t\tif (nodes.length < 2) continue;\n\t\t\t\tif (nodes.some((node) => node.getSkin())) continue;\n\n\t\t\t\tconst batch = createBatch(doc, batchExtension, mesh, nodes.length);\n\t\t\t\tconst batchTranslation = batch.getAttribute('TRANSLATION')!;\n\t\t\t\tconst batchRotation = batch.getAttribute('ROTATION')!;\n\t\t\t\tconst batchScale = batch.getAttribute('SCALE')!;\n\n\t\t\t\tconst batchNode = doc.createNode()\n\t\t\t\t\t.setMesh(mesh)\n\t\t\t\t\t.setExtension('EXT_mesh_gpu_instancing', batch);\n\t\t\t\tscene.addChild(batchNode);\n\n\t\t\t\tlet needsTranslation = false;\n\t\t\t\tlet needsRotation = false;\n\t\t\t\tlet needsScale = false;\n\n\t\t\t\t// For each Node, write TRS properties into instance attributes.\n\t\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\t\tlet t: vec3, r: vec4, s: vec3;\n\t\t\t\t\tconst node = nodes[i];\n\n\t\t\t\t\tbatchTranslation.setElement(i, t = node.getWorldTranslation());\n\t\t\t\t\tbatchRotation.setElement(i, r = node.getWorldRotation());\n\t\t\t\t\tbatchScale.setElement(i, s = node.getWorldScale());\n\n\t\t\t\t\tif (!MathUtils.eq(t, [0, 0, 0])) needsTranslation = true;\n\t\t\t\t\tif (!MathUtils.eq(r, [0, 0, 0, 1])) needsRotation = true;\n\t\t\t\t\tif (!MathUtils.eq(s, [1, 1, 1])) needsScale = true;\n\n\t\t\t\t\t// Mark the node for cleanup.\n\t\t\t\t\tnode.setMesh(null);\n\t\t\t\t\tmodifiedNodes.push(node);\n\t\t\t\t}\n\n\t\t\t\tif (!needsTranslation) batchTranslation.dispose();\n\t\t\t\tif (!needsRotation) batchRotation.dispose();\n\t\t\t\tif (!needsScale) batchScale.dispose();\n\n\t\t\t\tpruneUnusedNodes(modifiedNodes, logger);\n\n\t\t\t\tnumBatches++;\n\t\t\t\tnumInstances += nodes.length;\n\t\t\t}\n\t\t}\n\n\t\tif (numBatches > 0) {\n\t\t\tlogger.info(\n\t\t\t\t`${NAME}: Created ${numBatches} batches, with ${numInstances} total instances.`\n\t\t\t);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No meshes with multiple parent nodes were found.`);\n\t\t\tbatchExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t};\n\n}\n\nfunction pruneUnusedNodes(nodes: Node[], logger: Logger): void {\n\tlet node: Node | undefined;\n\tlet unusedNodes = 0;\n\twhile ((node = nodes.pop())) {\n\t\tif (node.listChildren().length\n\t\t\t\t|| node.getCamera()\n\t\t\t\t|| node.getMesh()\n\t\t\t\t|| node.getSkin()\n\t\t\t\t|| node.listExtensions().length) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst nodeParent = node.getParent();\n\t\tif (nodeParent instanceof Node) {\n\t\t\tnodes.push(nodeParent);\n\t\t}\n\t\tnode.dispose();\n\t\tunusedNodes++;\n\t}\n\n\tlogger.debug(`${NAME}: Removed ${unusedNodes} unused nodes.`);\n}\n\nfunction createBatch(\n\t\tdoc: Document,\n\t\tbatchExtension: MeshGPUInstancing,\n\t\tmesh: Mesh,\n\t\tcount: number): InstancedMesh {\n\tconst buffer = mesh.listPrimitives()[0].getAttribute('POSITION')!.getBuffer();\n\n\tconst batchTranslation = doc.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\tconst batchRotation = doc.createAccessor()\n\t\t.setType('VEC4')\n\t\t.setArray(new Float32Array(4 * count))\n\t\t.setBuffer(buffer);\n\tconst batchScale = doc.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\n\treturn batchExtension.createInstancedMesh()\n\t\t.setAttribute('TRANSLATION', batchTranslation)\n\t\t.setAttribute('ROTATION', batchRotation)\n\t\t.setAttribute('SCALE', batchScale);\n}\n","import { Document, Texture, Transform } from '@gltf-transform/core';\nimport { MaterialsIOR, MaterialsPBRSpecularGlossiness, MaterialsSpecular, PBRSpecularGlossiness } from '@gltf-transform/extensions';\nimport { rewriteTexture } from './utils';\n\nconst NAME = 'metalRough';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MetalRoughOptions {}\n\nconst METALROUGH_DEFAULTS: Required<MetalRoughOptions> = {};\n\n/**\n * Convert {@link Material}s from spec/gloss PBR workflow to metal/rough PBR workflow,\n * removing `KHR_materials_pbrSpecularGlossiness` and adding `KHR_materials_ior` and\n * `KHR_materials_specular`. The metal/rough PBR workflow is preferred for most use cases,\n * and is a prerequisite for other advanced PBR extensions provided by glTF.\n *\n * No options are currently implemented for this function.\n */\nexport function metalRough (_options: MetalRoughOptions = METALROUGH_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...METALROUGH_DEFAULTS, ..._options} as Required<MetalRoughOptions>;\n\n\treturn async (doc: Document): Promise<void> => {\n\n\t\tconst logger = doc.getLogger();\n\n\t\tconst extensionName = MaterialsPBRSpecularGlossiness.EXTENSION_NAME;\n\t\tconst extensionsUsed = doc.getRoot().listExtensionsUsed().map((ext) => ext.extensionName);\n\t\tif (!extensionsUsed.includes(extensionName)) {\n\t\t\tlogger.warn(`${NAME}: Extension ${extensionName} not found on given document.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst iorExtension = doc.createExtension(MaterialsIOR) as MaterialsIOR;\n\t\tconst specExtension = doc.createExtension(MaterialsSpecular) as MaterialsSpecular;\n\t\tconst specGlossExtension = doc.createExtension(MaterialsPBRSpecularGlossiness) as\n\t\t\tMaterialsPBRSpecularGlossiness;\n\n\t\tconst inputTextures = new Set<Texture | null>();\n\n\t\tfor (const material of doc.getRoot().listMaterials()) {\n\t\t\tconst specGloss = material.getExtension('KHR_materials_pbrSpecularGlossiness') as\n\t\t\t\tPBRSpecularGlossiness;\n\t\t\tif (!specGloss) continue;\n\n\t\t\t// Create specular extension.\n\t\t\tconst specular = specExtension.createSpecular()\n\t\t\t\t.setSpecularFactor(1.0)\n\t\t\t\t.setSpecularColorFactor(specGloss.getSpecularFactor());\n\n\t\t\t// Stash textures that might become unused, to check and clean up later.\n\t\t\tinputTextures.add(specGloss.getSpecularGlossinessTexture());\n\t\t\tinputTextures.add(material.getBaseColorTexture());\n\t\t\tinputTextures.add(material.getMetallicRoughnessTexture());\n\n\t\t\t// Set up a metal/rough PBR material with IOR=Infinity (or 0), metallic=0. This\n\t\t\t// representation is precise and reliable, but perhaps less convenient for artists\n\t\t\t// than deriving a metalness value. Unfortunately we can't do that without imprecise\n\t\t\t// heuristics, and perhaps user tuning.\n\t\t\t// See: https://github.com/KhronosGroup/glTF/pull/1719#issuecomment-674365677\n\t\t\tmaterial\n\t\t\t\t.setBaseColorFactor(specGloss.getDiffuseFactor())\n\t\t\t\t.setMetallicFactor(0)\n\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t.setExtension('KHR_materials_ior', iorExtension.createIOR().setIOR(1000))\n\t\t\t\t.setExtension('KHR_materials_specular', specular);\n\n\t\t\t// Move diffuse -> baseColor.\n\t\t\tconst diffuseTexture = specGloss.getDiffuseTexture();\n\t\t\tif (diffuseTexture) {\n\t\t\t\tmaterial.setBaseColorTexture(diffuseTexture);\n\t\t\t\tmaterial.getBaseColorTextureInfo()!.copy(specGloss.getDiffuseTextureInfo()!);\n\t\t\t}\n\n\t\t\t// Move specular + gloss -> specular + roughness.\n\t\t\tconst sgTexture = specGloss.getSpecularGlossinessTexture();\n\t\t\tif (sgTexture) {\n\t\t\t\t// specularGlossiness -> specular.\n\t\t\t\tconst sgTextureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\tconst specularTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, specularTexture, (pixels, i, j) => {\n\t\t\t\t\tpixels.set(i, j, 3, 255); // Remove glossiness.\n\t\t\t\t});\n\t\t\t\tspecular.setSpecularTexture(specularTexture);\n\t\t\t\tspecular.setSpecularColorTexture(specularTexture);\n\t\t\t\tspecular.getSpecularTextureInfo()!.copy(sgTextureInfo);\n\t\t\t\tspecular.getSpecularColorTextureInfo()!.copy(sgTextureInfo);\n\n\t\t\t\t// specularGlossiness -> roughness.\n\t\t\t\tconst glossinessFactor = specGloss.getGlossinessFactor();\n\t\t\t\tconst metalRoughTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, metalRoughTexture, (pixels, i, j) => {\n\t\t\t\t\t// Invert glossiness.\n\t\t\t\t\tconst roughness = 255 - Math.round(pixels.get(i, j, 3) * glossinessFactor);\n\t\t\t\t\tpixels.set(i, j, 0, 0);\n\t\t\t\t\tpixels.set(i, j, 1, roughness);\n\t\t\t\t\tpixels.set(i, j, 2, 0);\n\t\t\t\t\tpixels.set(i, j, 3, 255);\n\t\t\t\t});\n\t\t\t\tmaterial.setMetallicRoughnessTexture(metalRoughTexture);\n\t\t\t\tmaterial.getMetallicRoughnessTextureInfo()!.copy(sgTextureInfo);\n\t\t\t} else {\n\t\t\t\tspecular.setSpecularColorFactor(specGloss.getSpecularFactor());\n\t\t\t\tmaterial.setRoughnessFactor(1 - specGloss.getGlossinessFactor());\n\t\t\t}\n\n\t\t\t// Remove KHR_materials_pbrSpecularGlossiness from the material.\n\t\t\tmaterial.setExtension('KHR_materials_pbrSpecularGlossiness', null);\n\t\t}\n\n\t\t// Remove KHR_materials_pbrSpecularGlossiness from the document.\n\t\tspecGlossExtension.dispose();\n\n\t\t// Clean up unused textures.\n\t\tfor (const tex of inputTextures) {\n\t\t\tif (tex && tex.listParents().length === 1) tex.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t};\n\n}\n","import { AnimationChannel, Document, Graph, Property, PropertyType, Root, Transform } from '@gltf-transform/core';\n\nconst NAME = 'prune';\n\nexport interface PruneOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n}\nconst PRUNE_DEFAULTS: Required<PruneOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.NODE,\n\t\tPropertyType.SKIN,\n\t\tPropertyType.MESH,\n\t\tPropertyType.CAMERA,\n\t\tPropertyType.PRIMITIVE,\n\t\tPropertyType.PRIMITIVE_TARGET,\n\t\tPropertyType.ANIMATION,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.BUFFER,\n\t]\n};\n\n/**\n * Removes properties from the file if they are not referenced by a {@link Scene}. Commonly helpful\n * for cleaning up after other operations, e.g. allowing a node to be detached and any unused\n * meshes, materials, or other resources to be removed automatically.\n *\n * Example:\n *\n * ```\n * document.getRoot().listMaterials(); // → [Material, Material]\n *\n * await document.transform(prune());\n *\n * document.getRoot().listMaterials(); // → [Material]\n * ```\n *\n * No options are currently implemented for this function.\n */\nexport const prune = function (_options: PruneOptions = PRUNE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...PRUNE_DEFAULTS, ..._options} as Required<PruneOptions>;\n\tconst propertyTypes = options.propertyTypes;\n\n\treturn (doc: Document): void =>  {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst graph = doc.getGraph();\n\n\t\tconst disposed: Record<string, number> = {};\n\n\t\t// Prune top-down, so that low-level properties like accessors can be removed if the\n\t\t// properties referencing them are removed.\n\n\t\tif (propertyTypes.includes(PropertyType.NODE)) root.listNodes().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.SKIN)) root.listSkins().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.MESH)) root.listMeshes().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.CAMERA)) root.listCameras().forEach(treeShake);\n\n\t\tif (propertyTypes.includes(PropertyType.PRIMITIVE)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE);\n\t\t}\n\t\tif (propertyTypes.includes(PropertyType.PRIMITIVE_TARGET)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE_TARGET);\n\t\t}\n\n\t\t// Pruning animations is a bit more complicated:\n\t\t// (1) Remove channels without target nodes.\n\t\t// (2) Remove animations without channels.\n\t\t// (3) Remove samplers orphaned in the process.\n\t\tif (propertyTypes.includes(PropertyType.ANIMATION)) {\n\t\t\tfor (const anim of root.listAnimations()) {\n\t\t\t\tfor (const channel of anim.listChannels()) {\n\t\t\t\t\tif (!channel.getTargetNode()) {\n\t\t\t\t\t\tchannel.dispose();\n\t\t\t\t\t\tmarkDisposed(channel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!anim.listChannels().length) {\n\t\t\t\t\tconst samplers = anim.listSamplers();\n\t\t\t\t\ttreeShake(anim);\n\t\t\t\t\tsamplers.forEach(treeShake);\n\t\t\t\t} else {\n\t\t\t\t\tanim.listSamplers().forEach(treeShake);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.includes(PropertyType.MATERIAL)) root.listMaterials().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.TEXTURE)) root.listTextures().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.ACCESSOR)) root.listAccessors().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.BUFFER)) root.listBuffers().forEach(treeShake);\n\n\t\t// TODO(bug): This process does not identify unused ExtensionProperty instances. That could\n\t\t// be a future enhancement, either tracking unlinked properties as if they were connected\n\t\t// to the Graph, or iterating over a property list provided by the Extension. Properties in\n\t\t// use by an Extension are correctly preserved, in the meantime.\n\n\t\tif (Object.keys(disposed).length) {\n\t\t\tconst str = Object.keys(disposed).map((t) => `${t} (${disposed[t]})`).join(', ');\n\t\t\tlogger.info(`${NAME}: Removed types... ${str}`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No unused properties found.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t\t//\n\n\t\t/** Disposes of the given property if it is unused. */\n\t\tfunction treeShake(prop: Property): void {\n\t\t\t// Consider a property unused if it has no references from another property, excluding\n\t\t\t// types Root and AnimationChannel.\n\t\t\tconst parents = prop.listParents()\n\t\t\t\t.filter((p) => !(p instanceof Root || p instanceof AnimationChannel));\n\t\t\tif (!parents.length) {\n\t\t\t\tprop.dispose();\n\t\t\t\tmarkDisposed(prop);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * For property types the Root does not maintain references to, we'll need to search the\n\t\t * graph. It's possible that objects may have been constructed without any outbound links,\n\t\t * but since they're not on the graph they don't need to be tree-shaken.\n\t\t */\n\t\tfunction indirectTreeShake(graph: Graph<Property>, propertyType: string): void {\n\t\t\tgraph.getLinks()\n\t\t\t\t.map((link) => link.getParent())\n\t\t\t\t.filter((parent) => parent.propertyType === propertyType)\n\t\t\t\t.forEach(treeShake);\n\t\t}\n\n\t\t/** Records properties disposed by type. */\n\t\tfunction markDisposed(prop: Property): void {\n\t\t\tdisposed[prop.propertyType] = disposed[prop.propertyType] || 0;\n\t\t\tdisposed[prop.propertyType]++;\n\t\t}\n\n\t};\n\n};\n","import { Document, Logger, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune';\n\nconst NAME = 'partition';\n\nexport interface PartitionOptions {\n\tanimations?: boolean | Array<string>;\n\tmeshes?: boolean | Array<string>;\n}\n\nconst PARTITION_DEFAULTS: Required<PartitionOptions> =  {\n\tanimations: true,\n\tmeshes: true,\n};\n\n/**\n * Partitions the binary payload of a glTF file so separate mesh or animation data is in separate\n * `.bin` {@link Buffer}s. This technique may be useful for engines that support lazy-loading\n * specific binary resources as needed over the application lifecycle.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer]\n *\n * await document.transform(partition({meshes: true}));\n *\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n * ```\n */\nconst partition = (_options: PartitionOptions = PARTITION_DEFAULTS): Transform => {\n\n\tconst options = {...PARTITION_DEFAULTS, ..._options} as Required<PartitionOptions>;\n\n\treturn async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.meshes !== false) partitionMeshes(doc, logger, options);\n\t\tif (options.animations !== false) partitionAnimations(doc, logger, options);\n\n\t\tif (!options.meshes && !options.animations) {\n\t\t\tlogger.warn(`${NAME}: Select animations or meshes to create a partition.`);\n\t\t}\n\n\t\tawait doc.transform(prune({propertyTypes: [PropertyType.BUFFER]}));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t};\n\n};\n\nfunction partitionMeshes (doc: Document, logger: Logger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(doc.getRoot().listBuffers().map((b) => b.getURI()));\n\n\tdoc.getRoot().listMeshes()\n\t\t.forEach((mesh, meshIndex) => {\n\t\t\tif (Array.isArray(options.meshes) && !options.meshes.includes(mesh.getName())) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`${NAME}: Skipping mesh #${meshIndex} with name \"${mesh.getName()}\".`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for mesh \"${mesh.getName()}\".`);\n\n\t\t\tconst buffer = doc.createBuffer(mesh.getName())\n\t\t\t\t.setURI(createBufferURI(mesh.getName() || 'mesh', existingURIs));\n\n\t\t\tmesh.listPrimitives()\n\t\t\t\t.forEach((primitive) => {\n\t\t\t\t\tconst indices = primitive.getIndices();\n\t\t\t\t\tif (indices) indices.setBuffer(buffer);\n\t\t\t\t\tprimitive.listAttributes()\n\t\t\t\t\t\t.forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t\tprimitive.listTargets()\n\t\t\t\t\t\t.forEach((primTarget) => {\n\t\t\t\t\t\t\tprimTarget.listAttributes()\n\t\t\t\t\t\t\t\t.forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t});\n}\n\nfunction partitionAnimations (doc: Document, logger: Logger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(doc.getRoot().listBuffers().map((b) => b.getURI()));\n\n\tdoc.getRoot().listAnimations()\n\t\t.forEach((anim, animIndex) => {\n\t\t\tif (Array.isArray(options.animations) && !options.animations.includes(anim.getName())) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`${NAME}: Skipping animation #${animIndex} with name \"${anim.getName()}\".`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for animation \"${anim.getName()}\".`);\n\n\t\t\tconst buffer = doc.createBuffer(anim.getName())\n\t\t\t\t.setURI(createBufferURI(anim.getName() || 'animation', existingURIs));\n\n\t\t\tanim.listSamplers()\n\t\t\t\t.forEach((sampler) => {\n\t\t\t\t\tconst input = sampler.getInput();\n\t\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\t\tif (input) input.setBuffer(buffer);\n\t\t\t\t\tif (output) output.setBuffer(buffer);\n\t\t\t\t});\n\t\t});\n}\n\nfunction createBufferURI (basename: string, existing: Set<string>): string {\n\tlet uri = `${basename}.bin`;\n\tlet i = 1;\n\twhile (existing.has(uri)) uri = `${basename}_${i++}.bin`;\n\treturn uri;\n}\n\nexport { partition };\n","import { Accessor, AnimationChannel, bbox, Document, Logger, mat4, Mesh, Node, Primitive, PrimitiveTarget, PropertyType, Skin, Transform, vec2, vec3, vec4 } from '@gltf-transform/core';\nimport { dedup } from './dedup';\nimport { fromRotationTranslationScale, fromScaling, invert, multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { max, min, scale, transformMat4 } from 'gl-matrix/vec3';\nimport { MeshQuantization } from '@gltf-transform/extensions';\nimport { prune } from './prune';\n\nconst NAME = 'quantize';\n\ntype TypedArrayConstructor = Int8ArrayConstructor\n\t| Int16ArrayConstructor\n\t| Uint8ArrayConstructor\n\t| Uint16ArrayConstructor;\nconst SIGNED_INT = [Int8Array, Int16Array, Int32Array] as TypedArrayConstructor[];\n\nconst { TRANSLATION, ROTATION, SCALE, WEIGHTS } = AnimationChannel.TargetPath;\nconst TRS_CHANNELS = [TRANSLATION, ROTATION, SCALE];\n\n/** Options for the {@link quantize} function. */\nexport interface QuantizeOptions {\n\t/** Pattern (regex) used to filter vertex attribute semantics for quantization. Default: all. */\n\tpattern?: RegExp;\n\t/** Bounds for quantization grid. */\n\tquantizationVolume?: 'mesh' | 'scene';\n\t/** Quantization bits for `POSITION` attributes. */\n\tquantizePosition?: number;\n\t/** Quantization bits for `NORMAL` attributes. */\n\tquantizeNormal?: number;\n\t/** Quantization bits for `TEXCOORD_*` attributes. */\n\tquantizeTexcoord?: number;\n\t/** Quantization bits for `COLOR_*` attributes. */\n\tquantizeColor?: number;\n\t/** Quantization bits for `WEIGHT_*` attributes. */\n\tquantizeWeight?: number;\n\t/** Quantization bits for application-specific (`_*`) attributes. */\n\tquantizeGeneric?: number;\n}\n\nexport const QUANTIZE_DEFAULTS: Required<QuantizeOptions> =  {\n\tpattern: /.*/,\n\tquantizationVolume: 'mesh',\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeTexcoord: 12,\n\tquantizeColor: 8,\n\tquantizeWeight: 8,\n\tquantizeGeneric: 12,\n};\n\n/**\n * References:\n * - https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n * - http://www.aclockworkberry.com/normal-unpacking-quantization-errors/\n * - https://www.mathworks.com/help/dsp/ref/uniformencoder.html\n * - https://oroboro.com/compressed-unit-vectors/\n */\n\n/**\n * Quantizes vertex attributes with `KHR_mesh_quantization`, reducing the size and memory footprint\n * of the file.\n */\nconst quantize = (_options: QuantizeOptions = QUANTIZE_DEFAULTS): Transform => {\n\n\tconst options = {...QUANTIZE_DEFAULTS, ..._options} as Required<QuantizeOptions>;\n\n\treturn async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tdoc.createExtension(MeshQuantization).setRequired(true);\n\n\t\t// Compute vertex position quantization volume.\n\t\tlet nodeTransform: VectorTransform<vec3> | undefined = undefined;\n\t\tif (options.quantizationVolume === 'scene') {\n\t\t\tnodeTransform = getNodeTransform(\n\t\t\t\texpandBounds(root.listMeshes().map(getPositionQuantizationVolume))\n\t\t\t);\n\t\t}\n\n\t\t// Quantize mesh primitives.\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tif (options.quantizationVolume === 'mesh') {\n\t\t\t\tnodeTransform = getNodeTransform(getPositionQuantizationVolume(mesh));\n\t\t\t}\n\n\t\t\tif (nodeTransform && options.pattern.test('POSITION')) {\n\t\t\t\ttransformMeshParents(doc, mesh, nodeTransform);\n\t\t\t}\n\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tquantizePrimitive(doc, prim, nodeTransform!, options);\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tquantizePrimitive(doc, target, nodeTransform!, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait doc.transform(\n\t\t\tprune({propertyTypes: [PropertyType.ACCESSOR, PropertyType.SKIN]}),\n\t\t\tdedup({propertyTypes: [PropertyType.ACCESSOR]}),\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t};\n\n};\n\nfunction quantizePrimitive(\n\t\tdoc: Document,\n\t\tprim: Primitive | PrimitiveTarget,\n\t\tnodeTransform: VectorTransform<vec3>,\n\t\toptions: Required<QuantizeOptions>): void {\n\tconst logger = doc.getLogger();\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (!options.pattern.test(semantic)) continue;\n\n\t\tconst srcAttribute = prim.getAttribute(semantic)!;\n\t\tconst {bits, ctor} = getQuantizationSettings(semantic, srcAttribute, logger, options);\n\n\t\tif (!ctor) continue;\n\t\tif (bits < 8 || bits > 16) throw new Error(`${NAME}: Requires bits = 8–16.`);\n\t\tif (srcAttribute.getComponentSize() <= bits / 8) continue;\n\n\t\tconst dstAttribute = srcAttribute.clone();\n\n\t\t// Remap position data.\n\t\tif (semantic === 'POSITION') {\n\t\t\tconst scale = nodeTransform.scale;\n\t\t\tconst transform: mat4 = [] as unknown as mat4;\n\t\t\t// Morph targets are relative offsets, don't translate them.\n\t\t\tprim instanceof Primitive\n\t\t\t\t? invert(transform, fromTransform(nodeTransform))\n\t\t\t\t: fromScaling(transform, [1 / scale, 1 / scale, 1 / scale]);\n\t\t\tfor (let i = 0, el: vec3 = [0, 0, 0], il = dstAttribute.getCount(); i < il; i++) {\n\t\t\t\tdstAttribute.getElement(i, el);\n\t\t\t\tdstAttribute.setElement(i, transformMat4(el, el, transform) as vec3);\n\t\t\t}\n\t\t}\n\n\t\t// Quantize the vertex attribute.\n\t\tquantizeAttribute(dstAttribute, ctor, bits);\n\t\tprim.swap(srcAttribute, dstAttribute);\n\t}\n\n\t// Normalize skinning weights.\n\tif (prim.getAttribute('WEIGHTS_0')) {\n\t\tnormalizeWeights(prim);\n\t}\n\n\tif (prim instanceof Primitive\n\t\t\t&& prim.getIndices()\n\t\t\t&& prim.listAttributes().length\n\t\t\t&& prim.listAttributes()[0]!.getCount() < 65535) {\n\t\tconst indices = prim.getIndices()!;\n\t\tindices.setArray(new Uint16Array(indices.getArray()!));\n\t}\n}\n\n/** Computes node quantization transforms in local space. */\nfunction getNodeTransform(volume: bbox): VectorTransform<vec3> {\n\tconst {min, max} = volume;\n\n\t// Scaling factor transforms [-1,1] box to the mesh AABB in local space.\n\t// See: https://github.com/donmccurdy/glTF-Transform/issues/328\n\tconst scale = Math.max(\n\t\t(max[0] - min[0]) / 2, // Divide because interval [-1,1] has length 2.\n\t\t(max[1] - min[1]) / 2,\n\t\t(max[2] - min[2]) / 2,\n\t);\n\n\t// Original center of the mesh, in local space.\n\tconst offset: vec3 = [\n\t\tmin[0] + (max[0] - min[0]) / 2,\n\t\tmin[1] + (max[1] - min[1]) / 2,\n\t\tmin[2] + (max[2] - min[2]) / 2,\n\t];\n\n\treturn {offset, scale};\n}\n\n/** Applies corrective scale and offset to nodes referencing a quantized Mesh. */\nfunction transformMeshParents(\n\tdoc: Document,\n\tmesh: Mesh,\n\tnodeTransform: VectorTransform<vec3>\n): void {\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tfor (const parent of mesh.listParents()) {\n\t\tif (parent instanceof Node) {\n\t\t\tconst animChannels = parent.listParents()\n\t\t\t\t.filter((p) => p instanceof AnimationChannel) as AnimationChannel[];\n\t\t\tconst isAnimated = animChannels\n\t\t\t\t.some((channel) => TRS_CHANNELS.includes(channel.getTargetPath()!));\n\t\t\tconst isParentNode = parent.listChildren().length > 0;\n\n\t\t\tif (parent.getSkin()) {\n\t\t\t\tparent.setSkin(transformSkin(parent.getSkin()!, nodeTransform));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet targetNode: Node;\n\t\t\tif (isParentNode || isAnimated) {\n\t\t\t\ttargetNode = doc.createNode('').setMesh(mesh);\n\t\t\t\tparent.addChild(targetNode).setMesh(null);\n\t\t\t\tanimChannels\n\t\t\t\t\t.filter((channel) => channel.getTargetPath() === WEIGHTS)\n\t\t\t\t\t.forEach((channel) => channel.setTargetNode(targetNode));\n\t\t\t} else {\n\t\t\t\ttargetNode = parent;\n\t\t\t}\n\n\t\t\tconst nodeMatrix = targetNode.getMatrix();\n\t\t\tmultiplyMat4(nodeMatrix, nodeMatrix, transformMatrix);\n\t\t\ttargetNode.setMatrix(nodeMatrix);\n\t\t}\n\t}\n}\n\n/** Applies corrective scale and offset to skin IBMs. */\nfunction transformSkin(skin: Skin, nodeTransform: VectorTransform<vec3>): Skin {\n\tskin = skin.clone();\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tconst inverseBindMatrices = skin.getInverseBindMatrices()!.clone();\n\tconst ibm = [] as unknown as mat4;\n\tfor (let i = 0, count = inverseBindMatrices.getCount(); i < count; i++) {\n\t\tinverseBindMatrices.getElement(i, ibm);\n\t\tmultiplyMat4(ibm, ibm, transformMatrix);\n\t\tinverseBindMatrices.setElement(i, ibm);\n\t}\n\treturn skin.setInverseBindMatrices(inverseBindMatrices);\n}\n\n/**\n * Quantizes an attribute to the given parameters.\n *\n * Uniformly remap 32-bit floats to reduced-precision 8- or 16-bit integers, so\n * that there are only 2^N unique values, for N within [8, 16].\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/208\n */\nfunction quantizeAttribute(\n\t\tattribute: Accessor,\n\t\tctor: TypedArrayConstructor,\n\t\tbits: number\n\t): void {\n\n\tconst dstArray = new ctor(attribute.getArray()!.length);\n\n\tconst signBits = SIGNED_INT.includes(ctor) ? 1 : 0;\n\tconst quantBits = bits - signBits;\n\tconst storageBits = ctor.BYTES_PER_ELEMENT * 8 - signBits;\n\n\tconst scale = Math.pow(2, quantBits) - 1;\n\tconst lo = storageBits - quantBits;\n\tconst hi = 2 * quantBits - storageBits;\n\n\tfor (let i = 0, di = 0, el: number[] = []; i < attribute.getCount(); i++) {\n\t\tattribute.getElement(i, el);\n\t\tfor (let j = 0; j < el.length; j++) {\n\t\t\t// Map [0.0 ... 1.0] to [0 ... scale].\n\t\t\tlet value = Math.round(Math.abs(el[j]) * scale);\n\n\t\t\t// Replicate msb to missing lsb.\n\t\t\tvalue = (value << lo) | (value >> hi);\n\n\t\t\t// Restore sign.\n\t\t\tdstArray[di++] = value * Math.sign(el[j]);\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(true);\n}\n\nfunction getQuantizationSettings(\n\t\tsemantic: string,\n\t\tattribute: Accessor,\n\t\tlogger: Logger,\n\t\toptions: Required<QuantizeOptions>): {bits: number; ctor?: TypedArrayConstructor} {\n\n\tconst min = attribute.getMinNormalized([]);\n\tconst max = attribute.getMaxNormalized([]);\n\n\tlet bits: number;\n\tlet ctor: TypedArrayConstructor;\n\n\tif (semantic === 'POSITION') {\n\t\tbits = options.quantizePosition;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic === 'NORMAL' || semantic === 'TANGENT') {\n\t\tbits = options.quantizeNormal;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\tbits = options.quantizeColor;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\tif (min.some(v => v < 0) || max.some(v => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn {bits: -1};\n\t\t}\n\t\tbits = options.quantizeTexcoord;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('JOINTS_')) {\n\t\tbits = Math.max(...attribute.getMax([])) <= 255 ? 8 : 16;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t\tif (attribute.getComponentSize() > bits / 8) {\n\t\t\tattribute.setArray(new ctor(attribute.getArray()!));\n\t\t}\n\t\treturn {bits: -1};\n\t} else if (semantic.startsWith('WEIGHTS_')) {\n\t\tif (min.some(v => v < 0) || max.some(v => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn {bits: -1};\n\t\t}\n\t\tbits = options.quantizeWeight;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('_')) {\n\t\tif (min.some(v => v < -1) || max.some(v => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [-1,1] range.`);\n\t\t\treturn {bits: -1};\n\t\t}\n\t\tbits = options.quantizeGeneric;\n\t\tctor = min.some(v => v < 0)\n\t\t\t? (ctor = bits <= 8 ? Int8Array : Int16Array)\n\t\t\t: (ctor = bits <= 8 ? Uint8Array : Uint16Array);\n\t} else {\n\t\tthrow new Error(`${NAME}: Unexpected semantic, \"${semantic}\".`);\n\t}\n\n\treturn {bits, ctor};\n}\n\nfunction getPositionQuantizationVolume(mesh: Mesh): bbox {\n\tconst positions: Accessor[] = [];\n\tconst relativePositions: Accessor[] = [];\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst attribute = prim.getAttribute('POSITION');\n\t\tif (attribute) positions.push(attribute);\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tconst attribute = target.getAttribute('POSITION');\n\t\t\tif (attribute) relativePositions.push(attribute);\n\t\t}\n\t}\n\n\tif (positions.length === 0) {\n\t\tthrow new Error(`${NAME}: Missing \"POSITION\" attribute.`);\n\t}\n\n\tconst bbox = flatBounds<vec3>(positions, 3);\n\n\t// Morph target quantization volume is computed differently. First, ensure that the origin\n\t// <0, 0, 0> is in the quantization volume. Because we can't offset target positions (they're\n\t// relative deltas), default remapping will only map to a [-2, 2] AABB. Double the bounding box\n\t// to ensure scaling puts them within a [-1, 1] AABB instead.\n\tif (relativePositions.length > 0) {\n\t\tconst {min: relMin, max: relMax} = flatBounds<vec3>(relativePositions, 3);\n\t\tmin(bbox.min, bbox.min, min(relMin, scale(relMin, relMin, 2), [0, 0, 0]));\n\t\tmax(bbox.max, bbox.max, max(relMax, scale(relMax, relMax, 2), [0, 0, 0]));\n\t}\n\n\treturn bbox;\n}\n\n/** Computes total min and max of all Accessors in a list. */\nfunction flatBounds<T = vec2|vec3>(accessors: Accessor[], elementSize: number): ({min: T, max: T}) {\n\tconst min: number[] = new Array(elementSize).fill(Infinity);\n\tconst max: number[] = new Array(elementSize).fill(-Infinity);\n\n\tconst tmpMin: number[] = [];\n\tconst tmpMax: number[] = [];\n\n\tfor (const accessor of accessors) {\n\t\taccessor.getMinNormalized(tmpMin);\n\t\taccessor.getMaxNormalized(tmpMax);\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tmin[i] = Math.min(min[i], tmpMin[i]);\n\t\t\tmax[i] = Math.max(max[i], tmpMax[i]);\n\t\t}\n\t}\n\n\treturn {min, max} as unknown as {min: T, max: T};\n}\n\nfunction expandBounds(bboxes: bbox[]): bbox {\n\tconst result = bboxes[0];\n\tfor (const bbox of bboxes) {\n\t\tmin(result.min, result.min, bbox.min);\n\t\tmax(result.max, result.max, bbox.max);\n\t}\n\treturn result;\n}\n\ninterface VectorTransform<T = vec2|vec3|vec4> {\n\toffset: T;\n\tscale: number;\n}\n\nfunction fromTransform(transform: VectorTransform<vec3>): mat4 {\n\treturn fromRotationTranslationScale(\n\t\t[] as unknown as mat4,\n\t\t[0, 0, 0, 1],\n\t\ttransform.offset,\n\t\t[transform.scale, transform.scale, transform.scale],\n\t) as mat4;\n}\n\nfunction normalizeWeights(prim: Primitive | PrimitiveTarget): void {\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst weightsEl: number[] = [];\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tlet vertexWeightsSum = 0;\n\n\t\tlet leastWeight = Infinity;\n\t\tlet leastIndex = -1;\n\t\tlet leastAttribute: Accessor | null = null;\n\n\t\tlet weights: Accessor | null;\n\t\tlet attributeIndex = 0;\n\n\t\t// Find sum of weights and the joint with the lowest non-zero weight.\n\t\twhile ((weights = prim.getAttribute(`WEIGHTS_${attributeIndex++}`))) {\n\t\t\tweights.getElement(i, weightsEl);\n\t\t\tfor (let j = 0; j < weightsEl.length; j++) {\n\t\t\t\tvertexWeightsSum += weightsEl[j];\n\t\t\t\tif (weightsEl[j] > 0 && weightsEl[j] < leastWeight) {\n\t\t\t\t\tleastAttribute = weights;\n\t\t\t\t\tleastWeight = weightsEl[j];\n\t\t\t\t\tleastIndex = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Normalize by updating least-significant joint weight.\n\t\tif (leastAttribute && vertexWeightsSum !== 1) {\n\t\t\tleastAttribute.getElement(i, weightsEl);\n\t\t\tweightsEl[leastIndex] += 1 - vertexWeightsSum;\n\t\t\tleastAttribute.setElement(i, weightsEl);\n\t\t}\n\t}\n}\n\nexport { quantize };\n","import { Accessor, AnimationSampler, Document, Root, Transform } from '@gltf-transform/core';\n\nconst NAME = 'resample';\n\nexport interface ResampleOptions {tolerance?: number}\n\nconst RESAMPLE_DEFAULTS: Required<ResampleOptions> =  {tolerance: 1e-4};\n\n/**\n * Resample {@link Animation}s, losslessly deduplicating keyframes to reduce file size. Duplicate\n * keyframes are commonly present in animation 'baked' by the authoring software to apply IK\n * constraints or other software-specific features. Based on THREE.KeyframeTrack.optimize().\n *\n * Example: (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n */\nexport const resample = (_options: ResampleOptions = RESAMPLE_DEFAULTS): Transform => {\n\n\tconst options = {...RESAMPLE_DEFAULTS, ..._options} as Required<ResampleOptions>;\n\n\treturn (doc: Document): void => {\n\t\tconst accessorsVisited = new Set<Accessor>();\n\t\tconst accessorsCountPrev = doc.getRoot().listAccessors().length;\n\t\tconst logger = doc.getLogger();\n\n\t\tlet didSkipMorphTargets = false;\n\n\t\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\t\t// Skip morph targets, see https://github.com/donmccurdy/glTF-Transform/issues/290.\n\t\t\tconst morphTargetSamplers = new Set<AnimationSampler>();\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tif (channel.getSampler() && channel.getTargetPath() === 'weights') {\n\t\t\t\t\tmorphTargetSamplers.add(channel.getSampler()!);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\t\tif (morphTargetSamplers.has(sampler)) {\n\t\t\t\t\tdidSkipMorphTargets = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (sampler.getInterpolation() === 'STEP'\n\t\t\t\t\t|| sampler.getInterpolation() === 'LINEAR') {\n\t\t\t\t\taccessorsVisited.add(sampler.getInput()!);\n\t\t\t\t\taccessorsVisited.add(sampler.getOutput()!);\n\t\t\t\t\toptimize(sampler, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const accessor of Array.from(accessorsVisited.values())) {\n\t\t\tconst used = accessor.listParents().some((p) => !(p instanceof Root));\n\t\t\tif (!used) accessor.dispose();\n\t\t}\n\n\t\tif (doc.getRoot().listAccessors().length > accessorsCountPrev) {\n\t\t\tlogger.warn(\n\t\t\t\t`${NAME}: Resampling required copying accessors, some of which may be duplicates.`\n\t\t\t\t+ ' Consider using \"dedup\" to consolidate any duplicates.'\n\t\t\t);\n\t\t}\n\n\t\tif (didSkipMorphTargets) {\n\t\t\tlogger.warn(`${NAME}: Skipped optimizing morph target keyframes, not yet supported.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t};\n\n};\n\nfunction optimize (sampler: AnimationSampler, options: ResampleOptions): void {\n\tconst input = sampler.getInput()!.clone();\n\tconst output = sampler.getOutput()!.clone();\n\n\tconst tolerance = options.tolerance as number;\n\n\tconst lastIndex = input.getCount() - 1;\n\tconst tmp: number[] = [];\n\n\tlet writeIndex = 1;\n\n\tfor (let i = 1; i < lastIndex; ++ i) {\n\t\tconst time = input.getScalar(i);\n\t\tconst timePrev = input.getScalar(i - 1);\n\t\tconst timeNext = input.getScalar(i + 1);\n\t\tconst timeMix = (time - timePrev) / (timeNext - timePrev);\n\n\t\tlet keep = false;\n\n\t\t// Remove unnecessary adjacent keyframes.\n\t\tif (time !== timeNext && (i !== 1 || time !== input.getScalar(0))) {\n\t\t\tfor (let j = 0; j < output.getElementSize(); j++) {\n\t\t\t\tconst value = output.getElement(i, tmp)[j];\n\t\t\t\tconst valuePrev = output.getElement(i - 1, tmp)[j];\n\t\t\t\tconst valueNext = output.getElement(i + 1, tmp)[j];\n\n\t\t\t\tif (sampler.getInterpolation() === 'LINEAR') {\n\t\t\t\t\t// Prune keyframes that are colinear with prev/next keyframes.\n\t\t\t\t\tif (Math.abs(value - lerp(valuePrev, valueNext, timeMix)) > tolerance) {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (sampler.getInterpolation() === 'STEP') {\n\t\t\t\t\t// Prune keyframes that are identical to prev/next keyframes.\n\t\t\t\t\tif (value !== valuePrev || value !== valueNext) {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// In-place compaction.\n\t\tif (keep) {\n\t\t\tif (i !== writeIndex) {\n\t\t\t\tinput.setScalar(writeIndex, input.getScalar(i));\n\t\t\t\toutput.setElement(writeIndex, output.getElement(i, tmp));\n\t\t\t}\n\t\t\twriteIndex++;\n\t\t}\n\n\t}\n\n\t// Flush last keyframe (compaction looks ahead).\n\tif (lastIndex > 0) {\n\t\tinput.setScalar(writeIndex, input.getScalar(lastIndex));\n\t\toutput.setElement(writeIndex, output.getElement(lastIndex, tmp));\n\t\twriteIndex++;\n\t}\n\n\t// If the sampler was optimized, truncate and save the results. If not, clean up.\n\tif (writeIndex !== input.getCount()) {\n\t\tinput.setArray(input.getArray()!.slice(0, writeIndex));\n\t\toutput.setArray(output.getArray()!.slice(0, writeIndex * output.getElementSize()));\n\t\tsampler.setInput(input);\n\t\tsampler.setOutput(output);\n\t} else {\n\t\tinput.dispose();\n\t\toutput.dispose();\n\t}\n}\n\nfunction lerp (v0: number, v1: number, t: number): number {\n    return v0 * (1 - t) + v1 * t;\n}\n","import { Accessor, Document, GLTF, Primitive, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune';\nimport { SetMap } from './utils';\nimport type { MeshoptEncoder } from 'meshoptimizer';\n\nconst NAME = 'reorder';\n\n/** Options for the {@link reorder} function. */\nexport interface ReorderOptions {\n\t/** MeshoptEncoder instance. */\n\tencoder?: typeof MeshoptEncoder,\n\t/**\n\t * Whether the order should be optimal for transmission size (recommended for Web)\n\t * or for GPU rendering performance. Default is 'size'.\n\t */\n\ttarget?: 'size' | 'performance',\n}\n\nconst REORDER_DEFAULTS: Required<Omit<ReorderOptions, 'encoder'>> = {\n\ttarget: 'size',\n};\n\ninterface LayoutPlan {\n\tindicesToMode: Map<Accessor, GLTF.MeshPrimitiveMode>;\n\tindicesToAttributes: SetMap<Accessor, Accessor>;\n\tattributesToPrimitives: SetMap<Accessor, Primitive>;\n}\n\n/**\n * Optimizes {@link Mesh} {@link Primitive Primitives} for locality of reference. Choose whether\n * the order should be optimal for transmission size (recommended for Web) or for GPU rendering\n * performance. Requires a MeshoptEncoder instance from the Meshoptimizer library.\n *\n * Example:\n *\n * ```ts\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder})\n * );\n * ```\n */\nexport function reorder (_options: ReorderOptions = REORDER_DEFAULTS): Transform {\n\tconst options = {...REORDER_DEFAULTS, ..._options} as Required<ReorderOptions>;\n\tconst encoder = options.encoder;\n\n\treturn async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tawait encoder.ready;\n\n\t\tconst plan = preprocessPrimitives(doc);\n\n\t\tfor (const srcIndices of plan.indicesToAttributes.keys()) {\n\t\t\tconst dstIndices = srcIndices.clone();\n\t\t\tlet indicesArray = dstIndices.getArray()!.slice();\n\t\t\tif (!(indicesArray instanceof Uint32Array)) {\n\t\t\t\tindicesArray = new Uint32Array(indicesArray);\n\t\t\t}\n\n\t\t\t// Compute optimal order.\n\t\t\tconst [remap, unique] = encoder.reorderMesh(\n\t\t\t\tindicesArray,\n\t\t\t\tplan.indicesToMode.get(srcIndices) === Primitive.Mode.TRIANGLES,\n\t\t\t\toptions.target === 'size'\n\t\t\t);\n\n\t\t\tdstIndices.setArray(unique <= 65534 ? new Uint16Array(indicesArray) : indicesArray);\n\n\t\t\t// Update affected primitives.\n\t\t\tfor (const srcAttribute of plan.indicesToAttributes.get(srcIndices)) {\n\t\t\t\tconst dstAttribute = srcAttribute.clone();\n\t\t\t\tremapAttribute(dstAttribute, remap, unique);\n\t\t\t\tfor (const prim of plan.attributesToPrimitives.get(srcAttribute)) {\n\t\t\t\t\tif (prim.getIndices() === srcIndices) {\n\t\t\t\t\t\tprim.swap(srcIndices, dstIndices);\n\t\t\t\t\t}\n\t\t\t\t\tif (prim.getIndices() === dstIndices) {\n\t\t\t\t\t\tprim.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\t\t\ttarget.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clean up any attributes left unused by earlier cloning.\n\t\tawait doc.transform(prune({propertyTypes: [PropertyType.ACCESSOR]}));\n\n\t\tif (!plan.indicesToAttributes.size) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found; may need to weld first.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t};\n}\n\nfunction remapAttribute(attribute: Accessor, remap: Uint32Array, dstCount: number) {\n\tconst elementSize = attribute.getElementSize();\n\tconst srcCount = attribute.getCount();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = srcArray.slice(0, dstCount * elementSize);\n\n\tfor (let i = 0; i < srcCount; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[remap[i] * elementSize + j] = srcArray[i * elementSize + j];\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray);\n}\n\n/**\n * Constructs a plan for creating optimal vertex cache order, based on unique\n * index:attribute[] groups. Where different indices are used with the same\n * attributes, we'll end up splitting the primitives to not share attributes,\n * which appears to be consistent with the Meshopt implementation.\n */\nfunction preprocessPrimitives(doc: Document): LayoutPlan {\n\tconst indicesToAttributes = new SetMap<Accessor, Accessor>();\n\tconst indicesToMode = new Map<Accessor, GLTF.MeshPrimitiveMode>();\n\tconst attributesToPrimitives = new SetMap<Accessor, Primitive>();\n\n\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (!indices) continue;\n\n\t\t\tindicesToMode.set(indices, prim.getMode());\n\n\t\t\tfor (const attribute of listAttributes(prim)) {\n\t\t\t\tindicesToAttributes.add(indices, attribute);\n\t\t\t\tattributesToPrimitives.add(attribute, prim);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {indicesToAttributes, indicesToMode, attributesToPrimitives};\n}\n\nfunction listAttributes(prim: Primitive): Accessor[] {\n\tconst accessors: Accessor[] = [];\n\n\tfor (const attribute of prim.listAttributes()) {\n\t\taccessors.push(attribute);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const attribute of target.listAttributes()) {\n\t\t\taccessors.push(attribute);\n\t\t}\n\t}\n\n\treturn Array.from(new Set(accessors));\n}\n","import { Accessor, AnimationChannel, AnimationSampler, Document, Transform } from '@gltf-transform/core';\n\nconst NAME = 'sequence';\n\nexport interface SequenceOptions {\n\t/** Frames per second, where one node is shown each frame. Default 10. */\n\tfps?: number;\n\t/** Pattern (regex) used to filter nodes for the sequence. Required. */\n\tpattern: RegExp;\n\t/** Name of the new animation. */\n\tname?: string;\n\t/** Whether to sort the nodes by name, or use original order. Default true. */\n\tsort?: boolean;\n}\n\nconst SEQUENCE_DEFAULTS: Required<SequenceOptions> = {\n\tname: '',\n\tfps: 10,\n\tpattern: /.*/,\n\tsort: true,\n};\n\n/**\n * Creates an {@link Animation} displaying each of the specified {@link Node}s sequentially.\n */\nexport function sequence (_options: SequenceOptions = SEQUENCE_DEFAULTS): Transform {\n\tconst options = {...SEQUENCE_DEFAULTS, ..._options} as Required<SequenceOptions>;\n\n\treturn (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst fps = options.fps;\n\n\t\t// Collect sequence nodes.\n\t\tconst sequenceNodes = root.listNodes()\n\t\t\t.filter((node) => node.getName().match(options.pattern));\n\n\t\t// Sort by node name.\n\t\tif (options.sort) {\n\t\t\tsequenceNodes.sort((a, b) => a.getName() > b.getName() ? 1 : -1);\n\t\t}\n\n\t\t// Create animation cycling visibility of each node.\n\t\tconst anim = doc.createAnimation(options.name);\n\t\tconst animBuffer = root.listBuffers()[0];\n\t\tsequenceNodes.forEach((node, i) => {\n\t\t\t// Create keyframe tracks that show each node for a single frame.\n\t\t\tlet inputArray;\n\t\t\tlet outputArray;\n\t\t\tif (i === 0) {\n\t\t\t\tinputArray = [i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [1, 1, 1, 0, 0, 0];\n\t\t\t} else if (i === sequenceNodes.length - 1) {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1];\n\t\t\t} else {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1, 0, 0, 0];\n\t\t\t}\n\n\t\t\t// Append channel to animation sequence.\n\t\t\tconst input = doc.createAccessor()\n\t\t\t\t.setArray(new Float32Array(inputArray))\n\t\t\t\t.setBuffer(animBuffer);\n\t\t\tconst output = doc.createAccessor()\n\t\t\t\t.setArray(new Float32Array(outputArray))\n\t\t\t\t.setBuffer(animBuffer)\n\t\t\t\t.setType(Accessor.Type.VEC3);\n\t\t\tconst sampler = doc.createAnimationSampler()\n\t\t\t\t.setInterpolation(AnimationSampler.Interpolation.STEP)\n\t\t\t\t.setInput(input)\n\t\t\t\t.setOutput(output);\n\t\t\tconst channel = doc.createAnimationChannel()\n\t\t\t\t.setTargetNode(node)\n\t\t\t\t.setTargetPath(AnimationChannel.TargetPath.SCALE)\n\t\t\t\t.setSampler(sampler);\n\t\t\tanim.addSampler(sampler).addChannel(channel);\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t};\n\n}\n","import { Accessor, Document, Logger, Primitive, Transform, TypedArray, uuid } from '@gltf-transform/core';\n\nconst NAME = 'tangents';\n\n/** Options for the {@link tangents} function. */\nexport interface TangentsOptions {\n\t/**\n\t * Callback function to generate tangents from position, uv, and normal attributes.\n\t * Generally, users will want to provide the `generateTangents` from the\n\t * [mikktspace](https://github.com/donmccurdy/mikktspace-wasm) library, which is not\n\t * included by default.\n\t */\n\tgenerateTangents?: (pos: Float32Array, norm: Float32Array, uv: Float32Array) => Float32Array,\n\t/** Whether to overwrite existing `TANGENT` attributes. */\n\toverwrite?: boolean,\n}\n\nconst TANGENTS_DEFAULTS: Required<Omit<TangentsOptions, 'generateTangents'>> = {\n\toverwrite: false,\n};\n\n/**\n * Generates MikkTSpace vertex tangents for mesh primitives, which may fix rendering issues\n * occuring with some baked normal maps. Requires access to the [mikktspace](https://github.com/donmccurdy/mikktspace-wasm)\n * WASM package, or equivalent.\n *\n * Example:\n *\n * ```ts\n * import { generateTangents } from 'mikktspace';\n * import { tangents } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \ttangents({generateTangents})\n * );\n * ```\n */\nexport function tangents (_options: TangentsOptions = TANGENTS_DEFAULTS): Transform {\n\tif (!_options.generateTangents) {\n\t\tthrow new Error(`${NAME}: generateTangents callback required — install \"mikktspace\".`);\n\t}\n\n\tconst options = {...TANGENTS_DEFAULTS, ..._options} as Required<TangentsOptions>;\n\n\treturn (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst attributeIDs = new Map<TypedArray, string>();\n\t\tconst tangentCache = new Map<string, Accessor>();\n\t\tlet modified = 0;\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tconst meshName = mesh.getName();\n\t\t\tconst meshPrimitives = mesh.listPrimitives();\n\n\t\t\tfor (let i = 0; i < meshPrimitives.length; i++) {\n\t\t\t\tconst prim = meshPrimitives[i];\n\n\t\t\t\t// Skip primitives for which we can't compute tangents.\n\t\t\t\tif (!filterPrimitive(prim, logger, meshName, i, options.overwrite)) continue;\n\n\t\t\t\tconst texcoordSemantic = getNormalTexcoord(prim);\n\n\t\t\t\t// Nullability conditions checked by filterPrimitive() above.\n\t\t\t\tconst position = prim.getAttribute('POSITION')!.getArray()!;\n\t\t\t\tconst normal = prim.getAttribute('NORMAL')!.getArray()!;\n\t\t\t\tconst texcoord = prim.getAttribute(texcoordSemantic)!.getArray()!;\n\n\t\t\t\t// Compute UUIDs for each attribute.\n\t\t\t\tconst positionID = attributeIDs.get(position) || uuid();\n\t\t\t\tattributeIDs.set(position, positionID);\n\n\t\t\t\tconst normalID = attributeIDs.get(normal) || uuid();\n\t\t\t\tattributeIDs.set(normal, normalID);\n\n\t\t\t\tconst texcoordID = attributeIDs.get(texcoord) || uuid();\n\t\t\t\tattributeIDs.set(texcoord, texcoordID);\n\n\t\t\t\t// Dispose of previous TANGENT accessor if only used by this primitive (and Root).\n\t\t\t\tconst prevTangent = prim.getAttribute('TANGENT');\n\t\t\t\tif (prevTangent && prevTangent.listParents().length === 2) prevTangent.dispose();\n\n\t\t\t\t// If we've already computed tangents for this pos/norm/uv set, reuse them.\n\t\t\t\tconst attributeHash = `${positionID}|${normalID}|${texcoordID}`;\n\t\t\t\tlet tangent = tangentCache.get(attributeHash);\n\t\t\t\tif (tangent) {\n\t\t\t\t\tlogger.debug(`${NAME}: Found cache for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\t\t\t\t\tmodified++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, generate tangents with the 'mikktspace' WASM library.\n\t\t\t\tlogger.debug(`${NAME}: Generating for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\tconst tangentBuffer = prim.getAttribute('POSITION')!.getBuffer();\n\t\t\t\tconst tangentArray = options.generateTangents(\n\t\t\t\t\tposition instanceof Float32Array ? position : new Float32Array(position),\n\t\t\t\t\tnormal instanceof Float32Array ? normal : new Float32Array(normal),\n\t\t\t\t\ttexcoord instanceof Float32Array ? texcoord : new Float32Array(texcoord)\n\t\t\t\t);\n\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/issues/174\n\t\t\t\tfor (let i = 3; i < tangentArray.length; i += 4) tangentArray[i] *= -1;\n\n\t\t\t\ttangent = doc.createAccessor()\n\t\t\t\t\t.setBuffer(tangentBuffer)\n\t\t\t\t\t.setArray(tangentArray)\n\t\t\t\t\t.setType('VEC4');\n\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\n\t\t\t\ttangentCache.set(attributeHash, tangent);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t};\n}\n\nfunction getNormalTexcoord(prim: Primitive): string {\n\tconst material = prim.getMaterial();\n\tif (!material) return 'TEXCOORD_0';\n\n\tconst normalTextureInfo = material.getNormalTextureInfo();\n\tif (!normalTextureInfo) return 'TEXCOORD_0';\n\n\tconst texcoord = normalTextureInfo.getTexCoord();\n\tconst semantic = `TEXCOORD_${texcoord}`;\n\tif (prim.getAttribute(semantic)) return semantic;\n\n\treturn 'TEXCOORD_0';\n}\n\nfunction filterPrimitive(\n\t\tprim: Primitive,\n\t\tlogger: Logger,\n\t\tmeshName: string,\n\t\ti: number,\n\t\toverwrite: boolean): boolean {\n\n\tif (prim.getMode() !== Primitive.Mode.TRIANGLES\n\t\t\t|| !prim.getAttribute('POSITION')\n\t\t\t|| !prim.getAttribute('NORMAL')\n\t\t\t|| !prim.getAttribute('TEXCOORD_0')) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must`\n\t\t\t+ ' have attributes=[POSITION, NORMAL, TEXCOORD_0] and mode=TRIANGLES.'\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getAttribute('TANGENT') && !overwrite) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": TANGENT found.`\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getIndices()) {\n\t\t// TODO(feat): Do this automatically for qualifying primitives.\n\t\tlogger.warn(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must`\n\t\t\t+ ' be unwelded.'\n\t\t);\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","import ndarray from 'ndarray';\nimport { lanczos2, lanczos3 } from 'ndarray-lanczos';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport { Document, Transform, vec2 } from '@gltf-transform/core';\n\nconst NAME = 'textureResize';\n\n/** Options for the {@link textureResize} function. */\nexport interface TextureResizeOptions {\n\t/**\n\t * Maximum width/height to enforce, preserving aspect ratio. For example,\n\t * a 4096x8192 texture, resized with limit [2048, 2048] will be reduced\n\t * to 1024x2048.\n\t */\n\tsize: vec2;\n\t/** Resampling filter method. LANCZOS3 is sharper, LANCZOS2 is smoother. */\n\tfilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to resize, matched to name or URI. */\n\tpattern?: RegExp | null;\n}\n\n/** Resampling filter methods. LANCZOS3 is sharper, LANCZOS2 is smoother. */\nexport enum TextureResizeFilter {\n\t/** Lanczos3 (sharp) */\n\tLANCZOS3 = 'lanczos3',\n\t/** Lanczos2 (smooth) */\n\tLANCZOS2 = 'lanczos2',\n}\n\nexport const TEXTURE_RESIZE_DEFAULTS: TextureResizeOptions = {\n\tsize: [2048, 2048],\n\tfilter: TextureResizeFilter.LANCZOS3,\n\tpattern: null\n};\n\n/**\n * Resize PNG or JPEG {@link Texture Textures}, with {@link https://en.wikipedia.org/wiki/Lanczos_algorithm Lanczos filtering}.\n * Implementation provided by {@link https://github.com/donmccurdy/ndarray-lanczos ndarray-lanczos} package.\n */\nexport function textureResize(_options: TextureResizeOptions = TEXTURE_RESIZE_DEFAULTS): Transform {\n\tconst options = {...TEXTURE_RESIZE_DEFAULTS, ..._options} as Required<TextureResizeOptions>;\n\n\treturn async (doc: Document): Promise<void> => {\n\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const texture of doc.getRoot().listTextures()) {\n\t\t\tconst name = texture.getName();\n\t\t\tconst uri = texture.getURI();\n\t\t\tconst match = !options.pattern\n\t\t\t\t|| options.pattern.test(name)\n\t\t\t\t|| options.pattern.test(uri);\n\t\t\tif (!match) continue;\n\n\t\t\tif (texture.getMimeType() !== 'image/png' && texture.getMimeType() !== 'image/jpeg') {\n\t\t\t\tlogger.warn(`Skipping unsupported texture type, \"${texture.getMimeType()}\".`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst [maxWidth, maxHeight] = options.size;\n\t\t\tconst [srcWidth, srcHeight] = texture.getSize()!;\n\n\t\t\tif (srcWidth <= maxWidth && srcHeight <= maxHeight) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping \"${uri || name}\", within size range.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet dstWidth = srcWidth;\n\t\t\tlet dstHeight = srcHeight;\n\n\t\t\tif (dstWidth > maxWidth) {\n\t\t\t\tdstHeight = Math.floor(dstHeight * (maxWidth / dstWidth));\n\t\t\t\tdstWidth = maxWidth;\n\t\t\t}\n\n\t\t\tif (dstHeight > maxHeight) {\n\t\t\t\tdstWidth = Math.floor(dstWidth * (maxHeight / dstHeight));\n\t\t\t\tdstHeight = maxHeight;\n\t\t\t}\n\n\t\t\tconst srcImage = new Uint8Array(texture.getImage() as ArrayBuffer);\n\t\t\tconst srcPixels = await getPixels(srcImage, texture.getMimeType());\n\t\t\tconst dstPixels = ndarray(\n\t\t\t\tnew Uint8Array(dstWidth * dstHeight * 4), [dstWidth, dstHeight, 4]\n\t\t\t);\n\n\t\t\tlogger.debug(\n\t\t\t\t`${NAME}: Resizing \"${uri || name}\", ${srcPixels.shape} → ${dstPixels.shape}...`\n\t\t\t);\n\n\t\t\ttry {\n\t\t\t\toptions.filter === TextureResizeFilter.LANCZOS3\n\t\t\t\t\t? lanczos3(srcPixels, dstPixels)\n\t\t\t\t\t: lanczos2(srcPixels, dstPixels);\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\tlogger.warn(`${NAME}: Failed to resize \"${uri || name}\": \"${e.message}\".`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttexture.setImage((await savePixels(dstPixels, texture.getMimeType())).buffer);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t};\n\n}\n","import { Accessor, Document, Logger, Transform, TypedArray } from '@gltf-transform/core';\n\nconst NAME = 'unweld';\n\n/** Options for the {@link unweld} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnweldOptions {}\n\nconst UNWELD_DEFAULTS: UnweldOptions = {};\n\n/**\n * De-index {@link Primitive}s, disconnecting any shared vertices. This operation will generally\n * increase the number of vertices in a mesh, but may be helpful for some geometry operations or\n * for creating hard edges.\n *\n * No options are currently implemented for this function.\n */\nexport function unweld (_options: UnweldOptions = UNWELD_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...UNWELD_DEFAULTS, ..._options} as Required<UnweldOptions>;\n\n\treturn (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\t\tconst visited = new Map<Accessor, Map<Accessor, Accessor>>();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (!indices) continue;\n\n\t\t\t\t// Vertex attributes.\n\t\t\t\tfor (const srcAttribute of prim.listAttributes()) {\n\t\t\t\t\tprim.swap(\n\t\t\t\t\t\tsrcAttribute,\n\t\t\t\t\t\tunweldAttribute(srcAttribute, indices, logger, visited)\n\t\t\t\t\t);\n\n\t\t\t\t\t// Clean up.\n\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t}\n\n\t\t\t\t// Morph target vertex attributes.\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tfor (const srcAttribute of target.listAttributes()) {\n\t\t\t\t\t\ttarget.swap(\n\t\t\t\t\t\t\tsrcAttribute,\n\t\t\t\t\t\t\tunweldAttribute(srcAttribute, indices, logger, visited)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Clean up.\n\t\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Clean up.\n\t\t\t\tprim.setIndices(null);\n\t\t\t\tif (indices.listParents().length === 1) indices.dispose();\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t};\n}\n\nfunction unweldAttribute(\n\t\tsrcAttribute: Accessor,\n\t\tindices: Accessor,\n\t\tlogger: Logger,\n\t\tvisited: Map<Accessor, Map<Accessor, Accessor>>): Accessor {\n\tif (visited.has(srcAttribute) && visited.get(srcAttribute)!.has(indices)) {\n\t\tlogger.debug(`${NAME}: Cache hit for reused attribute, \"${srcAttribute.getName()}\".`);\n\t\treturn visited.get(srcAttribute)!.get(indices)!;\n\t}\n\n\tconst dstAttribute = srcAttribute.clone();\n\tconst ArrayCtor = srcAttribute.getArray()!.constructor as\n\t\tnew (len: number) => TypedArray;\n\tdstAttribute.setArray(\n\t\tnew ArrayCtor(indices.getCount() * srcAttribute.getElementSize())\n\t);\n\n\tconst el: number[] = [];\n\tfor (let i = 0; i < indices.getCount(); i++) {\n\t\tdstAttribute.setElement(i, srcAttribute.getElement(indices.getScalar(i), el));\n\t}\n\n\tif (!visited.has(srcAttribute)) visited.set(srcAttribute, new Map());\n\tvisited.get(srcAttribute)!.set(indices, dstAttribute);\n\n\treturn dstAttribute;\n}\n","import { Accessor, Document, Primitive, PrimitiveTarget, Transform, TypedArray } from '@gltf-transform/core';\nimport { getGLPrimitiveCount } from './utils';\n\nconst NAME = 'weld';\n\n/** Options for the {@link weld} function. */\nexport interface WeldOptions {\n\t/** Per-attribute tolerance used when merging similar vertices. */\n\ttolerance?: number\n}\n\nconst WELD_DEFAULTS: Required<WeldOptions> = {tolerance: 1e-4};\n\n/**\n * Index {@link Primitive}s and (optionally) merge similar vertices.\n */\nexport function weld (_options: WeldOptions = WELD_DEFAULTS): Transform {\n\tconst options = {...WELD_DEFAULTS, ..._options} as Required<WeldOptions>;\n\n\treturn (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tif (options.tolerance === 0) {\n\t\t\t\t\tweldOnly(doc, prim);\n\t\t\t\t} else {\n\t\t\t\t\tweldAndMerge(doc, prim, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t};\n}\n\n/**  In-place weld, adds indices without changing number of vertices. */\nfunction weldOnly (doc: Document, prim: Primitive): void {\n\tif (prim.getIndices()) return;\n\tconst attr = prim.listAttributes()[0];\n\tconst numVertices = attr.getCount();\n\tconst buffer = attr.getBuffer();\n\tconst indicesArray = numVertices <= 65534\n\t\t? new Uint16Array(getGLPrimitiveCount(prim) * 3)\n\t\t: new Uint32Array(getGLPrimitiveCount(prim) * 3);\n\tconst indices = doc.createAccessor()\n\t\t.setBuffer(buffer)\n\t\t.setType(Accessor.Type.SCALAR)\n\t\t.setArray(indicesArray);\n\tfor (let i = 0; i < indices.getCount(); i++) indices.setScalar(i, i);\n\tprim.setIndices(indices);\n}\n\n/**\n * Weld and merge, combining vertices that are similar on all vertex attributes. Morph target\n * attributes are not considered when scoring vertex similarity, but are retained when merging.\n */\nfunction weldAndMerge (doc: Document, prim: Primitive, options: Required<WeldOptions>): void {\n\tconst tolerance = Math.max(options.tolerance, Number.EPSILON);\n\tconst decimalShift = Math.log10(1 / tolerance);\n\tconst shiftFactor = Math.pow(10, decimalShift);\n\n\tconst hashToIndex: {[key: string]: number} = {};\n\tconst srcIndices = prim.getIndices();\n\tconst vertexCount = srcIndices\n\t\t? srcIndices.getCount()\n\t\t: prim.listAttributes()[0].getCount();\n\n\t// Prepare storage for new elements of each attribute.\n\tconst dstAttributes = new Map<Accessor, number[][]>();\n\tprim.listAttributes().forEach((attr) => dstAttributes.set(attr, []));\n\tprim.listTargets().forEach((target) => {\n\t\ttarget.listAttributes().forEach((attr) => dstAttributes.set(attr, []));\n\t});\n\n\tconst dstIndicesArray = [];\n\tlet nextIndex = 0;\n\n\t// For each vertex, compute a hash based on its tolerance and merge with any sufficiently\n\t// similar vertices.\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tconst index = srcIndices ? srcIndices.getScalar(i) : i;\n\n\t\tconst hashElements: number[] = [];\n\t\tconst el: number[] = [];\n\t\tfor (const attribute of prim.listAttributes()) {\n\t\t\tfor (let j = 0; j < attribute.getElementSize(); j++) {\n\t\t\t\thashElements.push(~ ~ (attribute.getElement(index, el)[j] * shiftFactor));\n\t\t\t}\n\t\t}\n\n\t\tconst hash = hashElements.join('|');\n\t\tif (hash in hashToIndex) {\n\t\t\tdstIndicesArray.push(hashToIndex[hash]);\n\t\t} else {\n\t\t\tfor (const attr of prim.listAttributes()) {\n\t\t\t\tdstAttributes.get(attr)!.push(attr.getElement(index, []));\n\t\t\t}\n\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\tfor (const attr of target.listAttributes()) {\n\t\t\t\t\tdstAttributes.get(attr)!.push(attr.getElement(index, []));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thashToIndex[hash] = nextIndex;\n\t\t\tdstIndicesArray.push(nextIndex);\n\t\t\tnextIndex++;\n\t\t}\n\t}\n\n\tconst srcVertexCount = prim.listAttributes()[0].getCount();\n\tconst dstVertexCount = dstAttributes.get(prim.getAttribute('POSITION')!)!.length;\n\tdoc.getLogger().debug(`${NAME}: ${srcVertexCount} → ${dstVertexCount} vertices.`);\n\n\t// Update the primitive.\n\tfor (const srcAttr of prim.listAttributes()) {\n\t\tswapAttributes(prim, srcAttr, dstAttributes.get(srcAttr)!);\n\n\t\t// Clean up.\n\t\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const srcAttr of target.listAttributes()) {\n\t\t\tswapAttributes(target, srcAttr, dstAttributes.get(srcAttr)!);\n\n\t\t\t// Clean up.\n\t\t\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n\t\t}\n\t}\n\tif (srcIndices) {\n\t\tconst dstIndicesTypedArray\n\t\t\t= createArrayOfType(srcIndices.getArray()!, dstIndicesArray.length);\n\t\tdstIndicesTypedArray.set(dstIndicesArray);\n\t\tprim.setIndices(srcIndices.clone().setArray(dstIndicesTypedArray));\n\n\t\t// Clean up.\n\t\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\t} else {\n\t\tconst indicesArray = srcVertexCount <= 65534\n\t\t\t? new Uint16Array(dstIndicesArray)\n\t\t\t: new Uint32Array(dstIndicesArray);\n\t\tprim.setIndices(doc.createAccessor().setArray(indicesArray));\n\t}\n}\n\n/** Creates a new TypedArray of the same type as an original, with a new length. */\nfunction createArrayOfType<T extends TypedArray>(array: T, length: number): T {\n\tconst ArrayCtor = array.constructor as new (length: number) => T;\n\treturn new ArrayCtor(length);\n}\n\n/** Replaces an {@link Attribute}, creating a new one with the given elements. */\nfunction swapAttributes(\n\t\tparent: Primitive | PrimitiveTarget,\n\t\tsrcAttr: Accessor,\n\t\tdstAttrElements: number[][]): void {\n\tconst dstAttrArrayLength = dstAttrElements.length * srcAttr.getElementSize();\n\tconst dstAttrArray = createArrayOfType(srcAttr.getArray()!, dstAttrArrayLength);\n\tconst dstAttr = srcAttr.clone().setArray(dstAttrArray);\n\n\tfor (let i = 0; i < dstAttrElements.length; i++) {\n\t\tdstAttr.setElement(i, dstAttrElements[i]);\n\t}\n\n\tparent.swap(srcAttr, dstAttr);\n}\n"],"names":["CENTER_DEFAULTS","pivot","center","_options","options","doc","logger","getLogger","root","getRoot","isAnimated","listAnimations","length","listSkins","listScenes","forEach","scene","index","debug","bbox","bounds","max","min","join","offset","offsetNode","createNode","setTranslation","listChildren","child","addChild","t","getTranslation","colorspace","inputEncoding","info","error","converted","Set","sRGBToLinear","c","Math","pow","updatePrimitive","primitive","color","attribute","i","getAttribute","has","j","getCount","getElement","setElement","add","listMeshes","mesh","listPrimitives","DEDUP_DEFAULTS","propertyTypes","PropertyType","ACCESSOR","MESH","TEXTURE","dedup","propertyType","includes","Error","indicesAccessors","attributeAccessors","meshes","detectDuplicates","accessors","duplicateAccessors","Map","a","aData","getArray","slice","buffer","b","getType","getComponentType","getNormalized","BufferUtils","equals","set","listAttributes","accessor","indices","getIndices","duplicateIndices","Array","from","size","duplicateAttributes","swap","get","keys","dispose","dedupAccessors","accessorIndices","listAccessors","numMeshes","uniqueMeshes","src","srcKeyItems","prim","primKeyItems","semantic","listSemantics","push","meshKey","targetMesh","listParents","parent","ROOT","dedupMeshes","textures","listTextures","duplicates","getImage","bData","getMimeType","aSize","getSize","bSize","entries","dst","property","Root","dedupImages","rewriteTexture","source","target","fn","srcImage","pixels","getPixels","Uint8Array","shape","dstImage","savePixels","setImage","setMimeType","getGLPrimitiveCount","position","getMode","Primitive","Mode","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","SetMap","_map","k","v","entry","this","inspect","scenes","materials","listMaterials","animations","properties","map","sceneBounds","name","getName","rootName","bboxMin","toPrecision","bboxMax","instances","filter","glPrimitives","verts","semantics","meshIndices","meshAccessors","attr","arrayToType","targ","listTargets","byteLength","modes","MeshPrimitiveModeLabels","mode","primitives","vertices","sort","attributes","material","extensions","listExtensions","slots","getGraph","getLinks","link","getChild","getParent","Texture","ExtensionProperty","alphaMode","getAlphaMode","doubleSided","getDoubleSided","texture","listParentLinks","resolution","ImageUtils","uri","getURI","mimeType","gpuSize","getMemSize","anim","minTime","Infinity","maxTime","listSamplers","sampler","input","getInput","getMin","getMax","keyframes","output","getOutput","channels","listChannels","samplers","duration","round","toFixed","Number","array","constructor","replace","toLowerCase","INSTANCE_DEFAULTS","instance","batchExtension","createExtension","MeshGPUInstancing","numBatches","numInstances","meshInstances","traverse","node","getMesh","modifiedNodes","nodes","some","getSkin","batch","createBatch","batchTranslation","batchRotation","batchScale","batchNode","setMesh","setExtension","needsTranslation","needsRotation","needsScale","r","s","getWorldTranslation","getWorldRotation","getWorldScale","MathUtils","eq","pruneUnusedNodes","unusedNodes","pop","getCamera","nodeParent","Node","count","getBuffer","createAccessor","setType","setArray","Float32Array","setBuffer","createInstancedMesh","setAttribute","METALROUGH_DEFAULTS","metalRough","extensionName","MaterialsPBRSpecularGlossiness","EXTENSION_NAME","listExtensionsUsed","ext","warn","iorExtension","MaterialsIOR","specExtension","MaterialsSpecular","specGlossExtension","inputTextures","specGloss","getExtension","specular","createSpecular","setSpecularFactor","setSpecularColorFactor","getSpecularFactor","getSpecularGlossinessTexture","getBaseColorTexture","getMetallicRoughnessTexture","setBaseColorFactor","getDiffuseFactor","setMetallicFactor","setRoughnessFactor","createIOR","setIOR","diffuseTexture","getDiffuseTexture","setBaseColorTexture","getBaseColorTextureInfo","copy","getDiffuseTextureInfo","sgTexture","sgTextureInfo","getSpecularGlossinessTextureInfo","specularTexture","createTexture","setSpecularTexture","setSpecularColorTexture","getSpecularTextureInfo","getSpecularColorTextureInfo","glossinessFactor","getGlossinessFactor","metalRoughTexture","roughness","setMetallicRoughnessTexture","getMetallicRoughnessTextureInfo","tex","PRUNE_DEFAULTS","NODE","SKIN","CAMERA","PRIMITIVE","PRIMITIVE_TARGET","ANIMATION","MATERIAL","BUFFER","prune","graph","disposed","listNodes","treeShake","listCameras","indirectTreeShake","channel","getTargetNode","markDisposed","listBuffers","Object","str","prop","p","AnimationChannel","PARTITION_DEFAULTS","partition","existingURIs","meshIndex","isArray","createBuffer","setURI","createBufferURI","primTarget","partitionMeshes","animIndex","partitionAnimations","transform","basename","existing","SIGNED_INT","Int8Array","Int16Array","Int32Array","TRANSLATION","ROTATION","SCALE","WEIGHTS","TargetPath","TRS_CHANNELS","QUANTIZE_DEFAULTS","pattern","quantizationVolume","quantizePosition","quantizeNormal","quantizeTexcoord","quantizeColor","quantizeWeight","quantizeGeneric","quantize","nodeTransform","MeshQuantization","setRequired","getNodeTransform","bboxes","result","expandBounds","getPositionQuantizationVolume","test","transformMeshParents","quantizePrimitive","srcAttribute","bits","ctor","getQuantizationSettings","getComponentSize","dstAttribute","clone","scale","invert","fromTransform","fromScaling","el","il","transformMat4","quantizeAttribute","vertexCount","weightsEl","weights","vertexWeightsSum","leastWeight","leastIndex","leastAttribute","attributeIndex","normalizeWeights","Uint16Array","volume","transformMatrix","animChannels","getTargetPath","isParentNode","setSkin","transformSkin","targetNode","setTargetNode","nodeMatrix","getMatrix","multiplyMat4","setMatrix","skin","inverseBindMatrices","getInverseBindMatrices","ibm","setInverseBindMatrices","dstArray","signBits","quantBits","storageBits","BYTES_PER_ELEMENT","lo","hi","di","value","abs","sign","setNormalized","getMinNormalized","getMaxNormalized","startsWith","positions","relativePositions","flatBounds","relMin","relMax","elementSize","fill","tmpMin","tmpMax","fromRotationTranslationScale","RESAMPLE_DEFAULTS","tolerance","resample","accessorsVisited","accessorsCountPrev","didSkipMorphTargets","animation","morphTargetSamplers","getSampler","getInterpolation","optimize","values","lastIndex","tmp","writeIndex","time","getScalar","timePrev","timeNext","timeMix","keep","getElementSize","valuePrev","valueNext","setScalar","setInput","setOutput","REORDER_DEFAULTS","reorder","encoder","ready","plan","indicesToAttributes","indicesToMode","attributesToPrimitives","preprocessPrimitives","srcIndices","dstIndices","indicesArray","Uint32Array","remap","unique","reorderMesh","remapAttribute","dstCount","srcCount","srcArray","SEQUENCE_DEFAULTS","fps","sequence","sequenceNodes","match","createAnimation","animBuffer","inputArray","outputArray","Accessor","Type","VEC3","createAnimationSampler","setInterpolation","AnimationSampler","Interpolation","STEP","createAnimationChannel","setTargetPath","setSampler","addSampler","addChannel","TANGENTS_DEFAULTS","overwrite","tangents","generateTangents","attributeIDs","tangentCache","modified","meshName","meshPrimitives","filterPrimitive","texcoordSemantic","getNormalTexcoord","normal","texcoord","positionID","uuid","normalID","texcoordID","prevTangent","attributeHash","tangent","tangentBuffer","tangentArray","getMaterial","normalTextureInfo","getNormalTextureInfo","getTexCoord","NAME","TextureResizeFilter","TEXTURE_RESIZE_DEFAULTS","LANCZOS3","textureResize","maxWidth","maxHeight","srcWidth","srcHeight","dstWidth","dstHeight","floor","srcPixels","dstPixels","ndarray","lanczos3","lanczos2","e","message","UNWELD_DEFAULTS","unweld","visited","unweldAttribute","setIndices","ArrayCtor","WELD_DEFAULTS","weld","weldOnly","weldAndMerge","numVertices","SCALAR","EPSILON","decimalShift","log10","shiftFactor","hashToIndex","dstAttributes","dstIndicesArray","nextIndex","hashElements","hash","srcVertexCount","dstVertexCount","srcAttr","swapAttributes","dstIndicesTypedArray","createArrayOfType","dstAttrElements","dstAttrArrayLength","dstAttrArray","dstAttr"],"mappings":"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"}