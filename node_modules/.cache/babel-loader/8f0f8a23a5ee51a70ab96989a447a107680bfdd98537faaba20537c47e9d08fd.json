{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { InterleavedBufferAttribute, Matrix4, MeshLambertMaterial, MeshBasicMaterial, MeshPhongMaterial, Color, DoubleSide, Mesh } from 'three';\nclass ColladaExporter {\n  constructor() {\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"geometryInfo\", void 0);\n    _defineProperty(this, \"materialMap\", void 0);\n    _defineProperty(this, \"imageMap\", void 0);\n    _defineProperty(this, \"textures\", void 0);\n    _defineProperty(this, \"libraryImages\", void 0);\n    _defineProperty(this, \"libraryGeometries\", void 0);\n    _defineProperty(this, \"libraryEffects\", void 0);\n    _defineProperty(this, \"libraryMaterials\", void 0);\n    _defineProperty(this, \"canvas\", void 0);\n    _defineProperty(this, \"ctx\", void 0);\n    _defineProperty(this, \"transMat\", void 0);\n    _defineProperty(this, \"getFuncs\", ['getX', 'getY', 'getZ', 'getW']);\n    this.options = {\n      version: '1.4.1',\n      author: null,\n      textureDirectory: '',\n      upAxis: 'Y_UP',\n      unitName: null,\n      unitMeter: null\n    };\n    this.geometryInfo = new WeakMap();\n    this.materialMap = new WeakMap();\n    this.imageMap = new WeakMap();\n    this.textures = [];\n    this.libraryImages = [];\n    this.libraryGeometries = [];\n    this.libraryEffects = [];\n    this.libraryMaterials = [];\n    this.canvas = null;\n    this.ctx = null;\n    this.transMat = null;\n  }\n  parse(object, onDone) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.options = {\n      ...this.options,\n      ...options\n    };\n    if (this.options.upAxis.match(/^[XYZ]_UP$/) === null) {\n      console.error('ColladaExporter: Invalid upAxis: valid values are X_UP, Y_UP or Z_UP.');\n      return null;\n    }\n    if (this.options.unitName !== null && this.options.unitMeter === null) {\n      console.error('ColladaExporter: unitMeter needs to be specified if unitName is specified.');\n      return null;\n    }\n    if (this.options.unitMeter !== null && this.options.unitName === null) {\n      console.error('ColladaExporter: unitName needs to be specified if unitMeter is specified.');\n      return null;\n    }\n    if (this.options.textureDirectory !== '') {\n      this.options.textureDirectory = `${this.options.textureDirectory}/`.replace(/\\\\/g, '/').replace(/\\/+/g, '/');\n    }\n    if (this.options.version !== '1.4.1' && this.options.version !== '1.5.0') {\n      console.warn(`ColladaExporter : Version ${this.options.version} not supported for export. Only 1.4.1 and 1.5.0.`);\n      return null;\n    }\n    const libraryVisualScenes = this.processObject(object);\n    const specLink = this.options.version === '1.4.1' ? 'http://www.collada.org/2005/11/COLLADASchema' : 'https://www.khronos.org/collada/';\n    let dae = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>${`<COLLADA xmlns=\"${specLink}\" version=\"${this.options.version}\">`}<asset><contributor><authoring_tool>three.js Collada Exporter</authoring_tool>${this.options.author !== null ? `<author>${this.options.author}</author>` : ''}</contributor>${`<created>${new Date().toISOString()}</created>`}${`<modified>${new Date().toISOString()}</modified>`}<up_axis>Y_UP</up_axis></asset>`;\n    dae += `<library_images>${this.libraryImages.join('')}</library_images>`;\n    dae += `<library_effects>${this.libraryEffects.join('')}</library_effects>`;\n    dae += `<library_materials>${this.libraryMaterials.join('')}</library_materials>`;\n    dae += `<library_geometries>${this.libraryGeometries.join('')}</library_geometries>`;\n    dae += `<library_visual_scenes><visual_scene id=\"Scene\" name=\"scene\">${libraryVisualScenes}</visual_scene></library_visual_scenes>`;\n    dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n    dae += '</COLLADA>';\n    const res = {\n      data: this.format(dae),\n      textures: this.textures\n    };\n    if (typeof onDone === 'function') {\n      requestAnimationFrame(() => onDone(res));\n    }\n    return res;\n  } // Convert the urdf xml into a well-formatted, indented format\n\n  format(urdf) {\n    var _urdf$match$map$join, _urdf$match;\n    const IS_END_TAG = /^<\\//;\n    const IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n    const HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n    const pad = (ch, num) => num > 0 ? ch + pad(ch, num - 1) : '';\n    let tagnum = 0;\n    return (_urdf$match$map$join = (_urdf$match = urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g)) === null || _urdf$match === void 0 ? void 0 : _urdf$match.map(tag => {\n      if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n        tagnum--;\n      }\n      const res = `${pad('  ', tagnum)}${tag}`;\n      if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n        tagnum++;\n      }\n      return res;\n    }).join('\\n')) != null ? _urdf$match$map$join : '';\n  } // Convert an image into a png format for saving\n\n  base64ToBuffer(str) {\n    const b = atob(str);\n    const buf = new Uint8Array(b.length);\n    for (let i = 0, l = buf.length; i < l; i++) {\n      buf[i] = b.charCodeAt(i);\n    }\n    return buf;\n  }\n  imageToData(image, ext) {\n    var _this$ctx;\n    this.canvas = this.canvas || document.createElement('canvas');\n    this.ctx = this.ctx || this.canvas.getContext('2d');\n    this.canvas.width = image.width instanceof SVGAnimatedLength ? 0 : image.width;\n    this.canvas.height = image.height instanceof SVGAnimatedLength ? 0 : image.height;\n    (_this$ctx = this.ctx) === null || _this$ctx === void 0 ? void 0 : _this$ctx.drawImage(image, 0, 0); // Get the base64 encoded data\n\n    const base64data = this.canvas.toDataURL(`image/${ext}`, 1).replace(/^data:image\\/(png|jpg);base64,/, ''); // Convert to a uint8 array\n\n    return this.base64ToBuffer(base64data);\n  } // gets the attribute array. Generate a new array if the attribute is interleaved\n\n  attrBufferToArray(attr) {\n    if (attr instanceof InterleavedBufferAttribute && attr.isInterleavedBufferAttribute) {\n      // use the typed array constructor to save on memory\n      const TypedArrayConstructor = attr.array.constructor; // @ts-expect-error\n\n      const arr = new TypedArrayConstructor(attr.count * attr.itemSize);\n      const size = attr.itemSize;\n      for (let i = 0, l = attr.count; i < l; i++) {\n        for (let j = 0; j < size; j++) {\n          arr[i * size + j] = attr[this.getFuncs[j]](i);\n        }\n      }\n      return arr;\n    } else {\n      return attr.array;\n    }\n  } // Returns an array of the same type starting at the `st` index,\n  // and `ct` length\n\n  subArray(arr, st, ct) {\n    if (Array.isArray(arr)) {\n      return arr.slice(st, st + ct);\n    } else {\n      const TypedArrayConstructor = arr.constructor; // @ts-expect-error\n\n      return new TypedArrayConstructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n    }\n  } // Returns the string for a geometry's attribute\n\n  getAttribute(attr, name, params, type) {\n    const array = this.attrBufferToArray(attr);\n    const res = Array.isArray(array) ? `${`<source id=\"${name}\">` + `<float_array id=\"${name}-array\" count=\"${array.length}\">` + array.join(' ')}</float_array><technique_common>${`<accessor source=\"#${name}-array\" count=\"${Math.floor(array.length / attr.itemSize)}\" stride=\"${attr.itemSize}\">`}${params.map(n => `<param name=\"${n}\" type=\"${type}\" />`).join('')}</accessor></technique_common></source>` : '';\n    return res;\n  } // Returns the string for a node's transform information\n\n  getTransform(o) {\n    // ensure the object's matrix is up to date\n    // before saving the transform\n    o.updateMatrix();\n    this.transMat = this.transMat || new Matrix4();\n    this.transMat.copy(o.matrix);\n    this.transMat.transpose();\n    return `<matrix>${this.transMat.toArray().join(' ')}</matrix>`;\n  } // Process the given piece of geometry into the geometry library\n  // Returns the mesh id\n\n  processGeometry(g) {\n    let info = this.geometryInfo.get(g);\n    if (!info) {\n      // convert the geometry to bufferGeometry if it isn't already\n      const bufferGeometry = g;\n      if (!bufferGeometry.isBufferGeometry) {\n        throw new Error('THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.');\n      }\n      const meshid = `Mesh${this.libraryGeometries.length + 1}`;\n      const indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n      const groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{\n        start: 0,\n        count: indexCount,\n        materialIndex: 0\n      }];\n      const gname = g.name ? ` name=\"${g.name}\"` : '';\n      let gnode = `<geometry id=\"${meshid}\"${gname}><mesh>`; // define the geometry node and the vertices for the geometry\n\n      const posName = `${meshid}-position`;\n      const vertName = `${meshid}-vertices`;\n      gnode += this.getAttribute(bufferGeometry.attributes.position, posName, ['X', 'Y', 'Z'], 'float');\n      gnode += `<vertices id=\"${vertName}\"><input semantic=\"POSITION\" source=\"#${posName}\" /></vertices>`; // NOTE: We're not optimizing the attribute arrays here, so they're all the same length and\n      // can therefore share the same triangle indices. However, MeshLab seems to have trouble opening\n      // models with attributes that share an offset.\n      // MeshLab Bug#424: https://sourceforge.net/p/meshlab/bugs/424/\n      // serialize normals\n\n      let triangleInputs = `<input semantic=\"VERTEX\" source=\"#${vertName}\" offset=\"0\" />`;\n      if ('normal' in bufferGeometry.attributes) {\n        const normName = `${meshid}-normal`;\n        gnode += this.getAttribute(bufferGeometry.attributes.normal, normName, ['X', 'Y', 'Z'], 'float');\n        triangleInputs += `<input semantic=\"NORMAL\" source=\"#${normName}\" offset=\"0\" />`;\n      } // serialize uvs\n\n      if ('uv' in bufferGeometry.attributes) {\n        const uvName = `${meshid}-texcoord`;\n        gnode += this.getAttribute(bufferGeometry.attributes.uv, uvName, ['S', 'T'], 'float');\n        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"0\" />`;\n      } // serialize lightmap uvs\n\n      if ('uv2' in bufferGeometry.attributes) {\n        const uvName = `${meshid}-texcoord2`;\n        gnode += this.getAttribute(bufferGeometry.attributes.uv2, uvName, ['S', 'T'], 'float');\n        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"1\" />`;\n      } // serialize colors\n\n      if ('color' in bufferGeometry.attributes) {\n        const colName = `${meshid}-color`;\n        gnode += this.getAttribute(bufferGeometry.attributes.color, colName, ['X', 'Y', 'Z'], 'uint8');\n        triangleInputs += `<input semantic=\"COLOR\" source=\"#${colName}\" offset=\"0\" />`;\n      }\n      let indexArray = null;\n      if (bufferGeometry.index) {\n        indexArray = this.attrBufferToArray(bufferGeometry.index);\n      } else {\n        indexArray = new Array(indexCount);\n        for (let i = 0, l = indexArray.length; i < l && Array.isArray(indexArray); i++) indexArray[i] = i;\n      }\n      for (let i = 0, l = groups.length; i < l; i++) {\n        const group = groups[i];\n        const subarr = this.subArray(indexArray, group.start, group.count);\n        const polycount = subarr.length / 3;\n        gnode += `<triangles material=\"MESH_MATERIAL_${group.materialIndex}\" count=\"${polycount}\">`;\n        gnode += triangleInputs;\n        gnode += `<p>${subarr.join(' ')}</p>`;\n        gnode += '</triangles>';\n      }\n      gnode += '</mesh></geometry>';\n      this.libraryGeometries.push(gnode);\n      info = {\n        meshid,\n        bufferGeometry\n      };\n      this.geometryInfo.set(g, info);\n    }\n    return info;\n  } // Process the given texture into the image library\n  // Returns the image library\n\n  processTexture(tex) {\n    let texid = this.imageMap.get(tex);\n    if (texid == null) {\n      texid = `image-${this.libraryImages.length + 1}`;\n      const ext = 'png';\n      const name = tex.name || texid;\n      let imageNode = `<image id=\"${texid}\" name=\"${name}\">`;\n      if (this.options.version === '1.5.0') {\n        imageNode += `<init_from><ref>${this.options.textureDirectory}${name}.${ext}</ref></init_from>`;\n      } else {\n        // version image node 1.4.1\n        imageNode += `<init_from>${this.options.textureDirectory}${name}.${ext}</init_from>`;\n      }\n      imageNode += '</image>';\n      this.libraryImages.push(imageNode);\n      this.imageMap.set(tex, texid);\n      this.textures.push({\n        directory: this.options.textureDirectory,\n        name,\n        ext,\n        data: this.imageToData(tex.image, ext),\n        original: tex\n      });\n    }\n    return texid;\n  } // Process the given material into the material and effect libraries\n  // Returns the material id\n\n  processMaterial(m) {\n    let matid = this.materialMap.get(m);\n    if (matid == null) {\n      matid = `Mat${this.libraryEffects.length + 1}`;\n      let type = 'phong';\n      if (m instanceof MeshLambertMaterial) {\n        type = 'lambert';\n      } else if (m instanceof MeshBasicMaterial) {\n        type = 'constant';\n        if (m.map !== null) {\n          // The Collada spec does not support diffuse texture maps with the\n          // constant shader type.\n          // mrdoob/three.js#15469\n          console.warn('ColladaExporter: Texture maps not supported with MeshBasicMaterial.');\n        }\n      }\n      if (m instanceof MeshPhongMaterial) {\n        const emissive = m.emissive ? m.emissive : new Color(0, 0, 0);\n        const diffuse = m.color ? m.color : new Color(0, 0, 0);\n        const specular = m.specular ? m.specular : new Color(1, 1, 1);\n        const shininess = m.shininess || 0;\n        const reflectivity = m.reflectivity || 0; // Do not export and alpha map for the reasons mentioned in issue (#13792)\n        // in three.js alpha maps are black and white, but collada expects the alpha\n        // channel to specify the transparency\n\n        let transparencyNode = '';\n        if (m.transparent) {\n          transparencyNode += `<transparent>${m.map ? '<texture texture=\"diffuse-sampler\"></texture>' : '<float>1</float>'}</transparent>`;\n          if (m.opacity < 1) {\n            transparencyNode += `<transparency><float>${m.opacity}</float></transparency>`;\n          }\n        }\n        const techniqueNode = `${`<technique sid=\"common\"><${type}>`}<emission>${m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"emission\">${emissive.r} ${emissive.g} ${emissive.b} 1</color>`}</emission>${type !== 'constant' ? `<diffuse>${m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"diffuse\">${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color>`}</diffuse>` : ''}${type !== 'constant' ? `<bump>${m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : ''}</bump>` : ''}${type === 'phong' ? `${`<specular><color sid=\"specular\">${specular.r} ${specular.g} ${specular.b} 1</color></specular>`}<shininess>${m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : `<float sid=\"shininess\">${shininess}</float>`}</shininess>` : ''}${`<reflective><color>${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color></reflective>`}${`<reflectivity><float>${reflectivity}</float></reflectivity>`}${transparencyNode}${`</${type}></technique>`}`;\n        const effectnode = `${`<effect id=\"${matid}-effect\">`}<profile_COMMON>${m.map ? `<newparam sid=\"diffuse-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.map)}</init_from>`}</surface></newparam><newparam sid=\"diffuse-sampler\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>` : ''}${m.specularMap ? `<newparam sid=\"specular-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.specularMap)}</init_from>`}</surface></newparam><newparam sid=\"specular-sampler\"><sampler2D><source>specular-surface</source></sampler2D></newparam>` : ''}${m.emissiveMap ? `<newparam sid=\"emissive-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.emissiveMap)}</init_from>`}</surface></newparam><newparam sid=\"emissive-sampler\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>` : ''}${m.normalMap ? `<newparam sid=\"bump-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.normalMap)}</init_from>`}</surface></newparam><newparam sid=\"bump-sampler\"><sampler2D><source>bump-surface</source></sampler2D></newparam>` : ''}${techniqueNode}${m.side === DoubleSide ? '<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>' : ''}</profile_COMMON></effect>`;\n        const materialName = m.name ? ` name=\"${m.name}\"` : '';\n        const materialNode = `<material id=\"${matid}\"${materialName}><instance_effect url=\"#${matid}-effect\" /></material>`;\n        this.libraryMaterials.push(materialNode);\n        this.libraryEffects.push(effectnode);\n        this.materialMap.set(m, matid);\n      }\n    }\n    return matid;\n  } // Recursively process the object into a scene\n\n  processObject(o) {\n    let node = `<node name=\"${o.name}\">`;\n    node += this.getTransform(o);\n    new Mesh();\n    if (o instanceof Mesh && o.isMesh && o.geometry !== null) {\n      // function returns the id associated with the mesh and a \"BufferGeometry\" version\n      // of the geometry in case it's not a geometry.\n      const geomInfo = this.processGeometry(o.geometry);\n      const meshid = geomInfo.meshid;\n      const geometry = geomInfo.bufferGeometry; // ids of the materials to bind to the geometry\n\n      let matids = null;\n      let matidsArray; // get a list of materials to bind to the sub groups of the geometry.\n      // If the amount of subgroups is greater than the materials, than reuse\n      // the materials.\n\n      const mat = o.material || new MeshBasicMaterial();\n      const materials = Array.isArray(mat) ? mat : [mat];\n      if (geometry.groups.length > materials.length) {\n        matidsArray = new Array(geometry.groups.length);\n      } else {\n        matidsArray = new Array(materials.length);\n      }\n      matids = matidsArray.fill(null).map((_, i) => this.processMaterial(materials[i % materials.length]));\n      node += `${`<instance_geometry url=\"#${meshid}\">` + (matids != null ? `<bind_material><technique_common>${matids.map((id, i) => `${`<instance_material symbol=\"MESH_MATERIAL_${i}\" target=\"#${id}\" >`}<bind_vertex_input semantic=\"TEXCOORD\" input_semantic=\"TEXCOORD\" input_set=\"0\" /></instance_material>`).join('')}</technique_common></bind_material>` : '')}</instance_geometry>`;\n    }\n    o.children.forEach(c => node += this.processObject(c));\n    node += '</node>';\n    return node;\n  }\n}\nexport { ColladaExporter };","map":{"version":3,"names":["_defineProperty","InterleavedBufferAttribute","Matrix4","MeshLambertMaterial","MeshBasicMaterial","MeshPhongMaterial","Color","DoubleSide","Mesh","ColladaExporter","constructor","options","version","author","textureDirectory","upAxis","unitName","unitMeter","geometryInfo","WeakMap","materialMap","imageMap","textures","libraryImages","libraryGeometries","libraryEffects","libraryMaterials","canvas","ctx","transMat","parse","object","onDone","arguments","length","undefined","match","console","error","replace","warn","libraryVisualScenes","processObject","specLink","dae","Date","toISOString","join","res","data","format","requestAnimationFrame","urdf","_urdf$match$map$join","_urdf$match","IS_END_TAG","IS_SELF_CLOSING","HAS_TEXT","pad","ch","num","tagnum","map","tag","test","base64ToBuffer","str","b","atob","buf","Uint8Array","i","l","charCodeAt","imageToData","image","ext","_this$ctx","document","createElement","getContext","width","SVGAnimatedLength","height","drawImage","base64data","toDataURL","attrBufferToArray","attr","isInterleavedBufferAttribute","TypedArrayConstructor","array","arr","count","itemSize","size","j","getFuncs","subArray","st","ct","Array","isArray","slice","buffer","BYTES_PER_ELEMENT","getAttribute","name","params","type","Math","floor","n","getTransform","o","updateMatrix","copy","matrix","transpose","toArray","processGeometry","g","info","get","bufferGeometry","isBufferGeometry","Error","meshid","indexCount","index","attributes","position","groups","start","materialIndex","gname","gnode","posName","vertName","triangleInputs","normName","normal","uvName","uv","uv2","colName","color","indexArray","group","subarr","polycount","push","set","processTexture","tex","texid","imageNode","directory","original","processMaterial","m","matid","emissive","diffuse","specular","shininess","reflectivity","transparencyNode","transparent","opacity","techniqueNode","emissiveMap","r","normalMap","specularMap","effectnode","side","materialName","materialNode","node","isMesh","geometry","geomInfo","matids","matidsArray","mat","material","materials","fill","_","id","children","forEach","c"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/exporters/ColladaExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { InterleavedBufferAttribute, Matrix4, MeshLambertMaterial, MeshBasicMaterial, MeshPhongMaterial, Color, DoubleSide, Mesh } from 'three';\n\nclass ColladaExporter {\n  constructor() {\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"geometryInfo\", void 0);\n\n    _defineProperty(this, \"materialMap\", void 0);\n\n    _defineProperty(this, \"imageMap\", void 0);\n\n    _defineProperty(this, \"textures\", void 0);\n\n    _defineProperty(this, \"libraryImages\", void 0);\n\n    _defineProperty(this, \"libraryGeometries\", void 0);\n\n    _defineProperty(this, \"libraryEffects\", void 0);\n\n    _defineProperty(this, \"libraryMaterials\", void 0);\n\n    _defineProperty(this, \"canvas\", void 0);\n\n    _defineProperty(this, \"ctx\", void 0);\n\n    _defineProperty(this, \"transMat\", void 0);\n\n    _defineProperty(this, \"getFuncs\", ['getX', 'getY', 'getZ', 'getW']);\n\n    this.options = {\n      version: '1.4.1',\n      author: null,\n      textureDirectory: '',\n      upAxis: 'Y_UP',\n      unitName: null,\n      unitMeter: null\n    };\n    this.geometryInfo = new WeakMap();\n    this.materialMap = new WeakMap();\n    this.imageMap = new WeakMap();\n    this.textures = [];\n    this.libraryImages = [];\n    this.libraryGeometries = [];\n    this.libraryEffects = [];\n    this.libraryMaterials = [];\n    this.canvas = null;\n    this.ctx = null;\n    this.transMat = null;\n  }\n\n  parse(object, onDone, options = {}) {\n    this.options = { ...this.options,\n      ...options\n    };\n\n    if (this.options.upAxis.match(/^[XYZ]_UP$/) === null) {\n      console.error('ColladaExporter: Invalid upAxis: valid values are X_UP, Y_UP or Z_UP.');\n      return null;\n    }\n\n    if (this.options.unitName !== null && this.options.unitMeter === null) {\n      console.error('ColladaExporter: unitMeter needs to be specified if unitName is specified.');\n      return null;\n    }\n\n    if (this.options.unitMeter !== null && this.options.unitName === null) {\n      console.error('ColladaExporter: unitName needs to be specified if unitMeter is specified.');\n      return null;\n    }\n\n    if (this.options.textureDirectory !== '') {\n      this.options.textureDirectory = `${this.options.textureDirectory}/`.replace(/\\\\/g, '/').replace(/\\/+/g, '/');\n    }\n\n    if (this.options.version !== '1.4.1' && this.options.version !== '1.5.0') {\n      console.warn(`ColladaExporter : Version ${this.options.version} not supported for export. Only 1.4.1 and 1.5.0.`);\n      return null;\n    }\n\n    const libraryVisualScenes = this.processObject(object);\n    const specLink = this.options.version === '1.4.1' ? 'http://www.collada.org/2005/11/COLLADASchema' : 'https://www.khronos.org/collada/';\n    let dae = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>${`<COLLADA xmlns=\"${specLink}\" version=\"${this.options.version}\">`}<asset><contributor><authoring_tool>three.js Collada Exporter</authoring_tool>${this.options.author !== null ? `<author>${this.options.author}</author>` : ''}</contributor>${`<created>${new Date().toISOString()}</created>`}${`<modified>${new Date().toISOString()}</modified>`}<up_axis>Y_UP</up_axis></asset>`;\n    dae += `<library_images>${this.libraryImages.join('')}</library_images>`;\n    dae += `<library_effects>${this.libraryEffects.join('')}</library_effects>`;\n    dae += `<library_materials>${this.libraryMaterials.join('')}</library_materials>`;\n    dae += `<library_geometries>${this.libraryGeometries.join('')}</library_geometries>`;\n    dae += `<library_visual_scenes><visual_scene id=\"Scene\" name=\"scene\">${libraryVisualScenes}</visual_scene></library_visual_scenes>`;\n    dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n    dae += '</COLLADA>';\n    const res = {\n      data: this.format(dae),\n      textures: this.textures\n    };\n\n    if (typeof onDone === 'function') {\n      requestAnimationFrame(() => onDone(res));\n    }\n\n    return res;\n  } // Convert the urdf xml into a well-formatted, indented format\n\n\n  format(urdf) {\n    var _urdf$match$map$join, _urdf$match;\n\n    const IS_END_TAG = /^<\\//;\n    const IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n    const HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n\n    const pad = (ch, num) => num > 0 ? ch + pad(ch, num - 1) : '';\n\n    let tagnum = 0;\n    return (_urdf$match$map$join = (_urdf$match = urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g)) === null || _urdf$match === void 0 ? void 0 : _urdf$match.map(tag => {\n      if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n        tagnum--;\n      }\n\n      const res = `${pad('  ', tagnum)}${tag}`;\n\n      if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n        tagnum++;\n      }\n\n      return res;\n    }).join('\\n')) != null ? _urdf$match$map$join : '';\n  } // Convert an image into a png format for saving\n\n\n  base64ToBuffer(str) {\n    const b = atob(str);\n    const buf = new Uint8Array(b.length);\n\n    for (let i = 0, l = buf.length; i < l; i++) {\n      buf[i] = b.charCodeAt(i);\n    }\n\n    return buf;\n  }\n\n  imageToData(image, ext) {\n    var _this$ctx;\n\n    this.canvas = this.canvas || document.createElement('canvas');\n    this.ctx = this.ctx || this.canvas.getContext('2d');\n    this.canvas.width = image.width instanceof SVGAnimatedLength ? 0 : image.width;\n    this.canvas.height = image.height instanceof SVGAnimatedLength ? 0 : image.height;\n    (_this$ctx = this.ctx) === null || _this$ctx === void 0 ? void 0 : _this$ctx.drawImage(image, 0, 0); // Get the base64 encoded data\n\n    const base64data = this.canvas.toDataURL(`image/${ext}`, 1).replace(/^data:image\\/(png|jpg);base64,/, ''); // Convert to a uint8 array\n\n    return this.base64ToBuffer(base64data);\n  } // gets the attribute array. Generate a new array if the attribute is interleaved\n\n\n  attrBufferToArray(attr) {\n    if (attr instanceof InterleavedBufferAttribute && attr.isInterleavedBufferAttribute) {\n      // use the typed array constructor to save on memory\n      const TypedArrayConstructor = attr.array.constructor; // @ts-expect-error\n\n      const arr = new TypedArrayConstructor(attr.count * attr.itemSize);\n      const size = attr.itemSize;\n\n      for (let i = 0, l = attr.count; i < l; i++) {\n        for (let j = 0; j < size; j++) {\n          arr[i * size + j] = attr[this.getFuncs[j]](i);\n        }\n      }\n\n      return arr;\n    } else {\n      return attr.array;\n    }\n  } // Returns an array of the same type starting at the `st` index,\n  // and `ct` length\n\n\n  subArray(arr, st, ct) {\n    if (Array.isArray(arr)) {\n      return arr.slice(st, st + ct);\n    } else {\n      const TypedArrayConstructor = arr.constructor; // @ts-expect-error\n\n      return new TypedArrayConstructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n    }\n  } // Returns the string for a geometry's attribute\n\n\n  getAttribute(attr, name, params, type) {\n    const array = this.attrBufferToArray(attr);\n    const res = Array.isArray(array) ? `${`<source id=\"${name}\">` + `<float_array id=\"${name}-array\" count=\"${array.length}\">` + array.join(' ')}</float_array><technique_common>${`<accessor source=\"#${name}-array\" count=\"${Math.floor(array.length / attr.itemSize)}\" stride=\"${attr.itemSize}\">`}${params.map(n => `<param name=\"${n}\" type=\"${type}\" />`).join('')}</accessor></technique_common></source>` : '';\n    return res;\n  } // Returns the string for a node's transform information\n\n\n  getTransform(o) {\n    // ensure the object's matrix is up to date\n    // before saving the transform\n    o.updateMatrix();\n    this.transMat = this.transMat || new Matrix4();\n    this.transMat.copy(o.matrix);\n    this.transMat.transpose();\n    return `<matrix>${this.transMat.toArray().join(' ')}</matrix>`;\n  } // Process the given piece of geometry into the geometry library\n  // Returns the mesh id\n\n\n  processGeometry(g) {\n    let info = this.geometryInfo.get(g);\n\n    if (!info) {\n      // convert the geometry to bufferGeometry if it isn't already\n      const bufferGeometry = g;\n\n      if (!bufferGeometry.isBufferGeometry) {\n        throw new Error('THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.');\n      }\n\n      const meshid = `Mesh${this.libraryGeometries.length + 1}`;\n      const indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n      const groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{\n        start: 0,\n        count: indexCount,\n        materialIndex: 0\n      }];\n      const gname = g.name ? ` name=\"${g.name}\"` : '';\n      let gnode = `<geometry id=\"${meshid}\"${gname}><mesh>`; // define the geometry node and the vertices for the geometry\n\n      const posName = `${meshid}-position`;\n      const vertName = `${meshid}-vertices`;\n      gnode += this.getAttribute(bufferGeometry.attributes.position, posName, ['X', 'Y', 'Z'], 'float');\n      gnode += `<vertices id=\"${vertName}\"><input semantic=\"POSITION\" source=\"#${posName}\" /></vertices>`; // NOTE: We're not optimizing the attribute arrays here, so they're all the same length and\n      // can therefore share the same triangle indices. However, MeshLab seems to have trouble opening\n      // models with attributes that share an offset.\n      // MeshLab Bug#424: https://sourceforge.net/p/meshlab/bugs/424/\n      // serialize normals\n\n      let triangleInputs = `<input semantic=\"VERTEX\" source=\"#${vertName}\" offset=\"0\" />`;\n\n      if ('normal' in bufferGeometry.attributes) {\n        const normName = `${meshid}-normal`;\n        gnode += this.getAttribute(bufferGeometry.attributes.normal, normName, ['X', 'Y', 'Z'], 'float');\n        triangleInputs += `<input semantic=\"NORMAL\" source=\"#${normName}\" offset=\"0\" />`;\n      } // serialize uvs\n\n\n      if ('uv' in bufferGeometry.attributes) {\n        const uvName = `${meshid}-texcoord`;\n        gnode += this.getAttribute(bufferGeometry.attributes.uv, uvName, ['S', 'T'], 'float');\n        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"0\" />`;\n      } // serialize lightmap uvs\n\n\n      if ('uv2' in bufferGeometry.attributes) {\n        const uvName = `${meshid}-texcoord2`;\n        gnode += this.getAttribute(bufferGeometry.attributes.uv2, uvName, ['S', 'T'], 'float');\n        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"1\" />`;\n      } // serialize colors\n\n\n      if ('color' in bufferGeometry.attributes) {\n        const colName = `${meshid}-color`;\n        gnode += this.getAttribute(bufferGeometry.attributes.color, colName, ['X', 'Y', 'Z'], 'uint8');\n        triangleInputs += `<input semantic=\"COLOR\" source=\"#${colName}\" offset=\"0\" />`;\n      }\n\n      let indexArray = null;\n\n      if (bufferGeometry.index) {\n        indexArray = this.attrBufferToArray(bufferGeometry.index);\n      } else {\n        indexArray = new Array(indexCount);\n\n        for (let i = 0, l = indexArray.length; i < l && Array.isArray(indexArray); i++) indexArray[i] = i;\n      }\n\n      for (let i = 0, l = groups.length; i < l; i++) {\n        const group = groups[i];\n        const subarr = this.subArray(indexArray, group.start, group.count);\n        const polycount = subarr.length / 3;\n        gnode += `<triangles material=\"MESH_MATERIAL_${group.materialIndex}\" count=\"${polycount}\">`;\n        gnode += triangleInputs;\n        gnode += `<p>${subarr.join(' ')}</p>`;\n        gnode += '</triangles>';\n      }\n\n      gnode += '</mesh></geometry>';\n      this.libraryGeometries.push(gnode);\n      info = {\n        meshid,\n        bufferGeometry\n      };\n      this.geometryInfo.set(g, info);\n    }\n\n    return info;\n  } // Process the given texture into the image library\n  // Returns the image library\n\n\n  processTexture(tex) {\n    let texid = this.imageMap.get(tex);\n\n    if (texid == null) {\n      texid = `image-${this.libraryImages.length + 1}`;\n      const ext = 'png';\n      const name = tex.name || texid;\n      let imageNode = `<image id=\"${texid}\" name=\"${name}\">`;\n\n      if (this.options.version === '1.5.0') {\n        imageNode += `<init_from><ref>${this.options.textureDirectory}${name}.${ext}</ref></init_from>`;\n      } else {\n        // version image node 1.4.1\n        imageNode += `<init_from>${this.options.textureDirectory}${name}.${ext}</init_from>`;\n      }\n\n      imageNode += '</image>';\n      this.libraryImages.push(imageNode);\n      this.imageMap.set(tex, texid);\n      this.textures.push({\n        directory: this.options.textureDirectory,\n        name,\n        ext,\n        data: this.imageToData(tex.image, ext),\n        original: tex\n      });\n    }\n\n    return texid;\n  } // Process the given material into the material and effect libraries\n  // Returns the material id\n\n\n  processMaterial(m) {\n    let matid = this.materialMap.get(m);\n\n    if (matid == null) {\n      matid = `Mat${this.libraryEffects.length + 1}`;\n      let type = 'phong';\n\n      if (m instanceof MeshLambertMaterial) {\n        type = 'lambert';\n      } else if (m instanceof MeshBasicMaterial) {\n        type = 'constant';\n\n        if (m.map !== null) {\n          // The Collada spec does not support diffuse texture maps with the\n          // constant shader type.\n          // mrdoob/three.js#15469\n          console.warn('ColladaExporter: Texture maps not supported with MeshBasicMaterial.');\n        }\n      }\n\n      if (m instanceof MeshPhongMaterial) {\n        const emissive = m.emissive ? m.emissive : new Color(0, 0, 0);\n        const diffuse = m.color ? m.color : new Color(0, 0, 0);\n        const specular = m.specular ? m.specular : new Color(1, 1, 1);\n        const shininess = m.shininess || 0;\n        const reflectivity = m.reflectivity || 0; // Do not export and alpha map for the reasons mentioned in issue (#13792)\n        // in three.js alpha maps are black and white, but collada expects the alpha\n        // channel to specify the transparency\n\n        let transparencyNode = '';\n\n        if (m.transparent) {\n          transparencyNode += `<transparent>${m.map ? '<texture texture=\"diffuse-sampler\"></texture>' : '<float>1</float>'}</transparent>`;\n\n          if (m.opacity < 1) {\n            transparencyNode += `<transparency><float>${m.opacity}</float></transparency>`;\n          }\n        }\n\n        const techniqueNode = `${`<technique sid=\"common\"><${type}>`}<emission>${m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"emission\">${emissive.r} ${emissive.g} ${emissive.b} 1</color>`}</emission>${type !== 'constant' ? `<diffuse>${m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"diffuse\">${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color>`}</diffuse>` : ''}${type !== 'constant' ? `<bump>${m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : ''}</bump>` : ''}${type === 'phong' ? `${`<specular><color sid=\"specular\">${specular.r} ${specular.g} ${specular.b} 1</color></specular>`}<shininess>${m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : `<float sid=\"shininess\">${shininess}</float>`}</shininess>` : ''}${`<reflective><color>${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color></reflective>`}${`<reflectivity><float>${reflectivity}</float></reflectivity>`}${transparencyNode}${`</${type}></technique>`}`;\n        const effectnode = `${`<effect id=\"${matid}-effect\">`}<profile_COMMON>${m.map ? `<newparam sid=\"diffuse-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.map)}</init_from>`}</surface></newparam><newparam sid=\"diffuse-sampler\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>` : ''}${m.specularMap ? `<newparam sid=\"specular-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.specularMap)}</init_from>`}</surface></newparam><newparam sid=\"specular-sampler\"><sampler2D><source>specular-surface</source></sampler2D></newparam>` : ''}${m.emissiveMap ? `<newparam sid=\"emissive-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.emissiveMap)}</init_from>`}</surface></newparam><newparam sid=\"emissive-sampler\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>` : ''}${m.normalMap ? `<newparam sid=\"bump-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.normalMap)}</init_from>`}</surface></newparam><newparam sid=\"bump-sampler\"><sampler2D><source>bump-surface</source></sampler2D></newparam>` : ''}${techniqueNode}${m.side === DoubleSide ? '<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>' : ''}</profile_COMMON></effect>`;\n        const materialName = m.name ? ` name=\"${m.name}\"` : '';\n        const materialNode = `<material id=\"${matid}\"${materialName}><instance_effect url=\"#${matid}-effect\" /></material>`;\n        this.libraryMaterials.push(materialNode);\n        this.libraryEffects.push(effectnode);\n        this.materialMap.set(m, matid);\n      }\n    }\n\n    return matid;\n  } // Recursively process the object into a scene\n\n\n  processObject(o) {\n    let node = `<node name=\"${o.name}\">`;\n    node += this.getTransform(o);\n    new Mesh();\n\n    if (o instanceof Mesh && o.isMesh && o.geometry !== null) {\n      // function returns the id associated with the mesh and a \"BufferGeometry\" version\n      // of the geometry in case it's not a geometry.\n      const geomInfo = this.processGeometry(o.geometry);\n      const meshid = geomInfo.meshid;\n      const geometry = geomInfo.bufferGeometry; // ids of the materials to bind to the geometry\n\n      let matids = null;\n      let matidsArray; // get a list of materials to bind to the sub groups of the geometry.\n      // If the amount of subgroups is greater than the materials, than reuse\n      // the materials.\n\n      const mat = o.material || new MeshBasicMaterial();\n      const materials = Array.isArray(mat) ? mat : [mat];\n\n      if (geometry.groups.length > materials.length) {\n        matidsArray = new Array(geometry.groups.length);\n      } else {\n        matidsArray = new Array(materials.length);\n      }\n\n      matids = matidsArray.fill(null).map((_, i) => this.processMaterial(materials[i % materials.length]));\n      node += `${`<instance_geometry url=\"#${meshid}\">` + (matids != null ? `<bind_material><technique_common>${matids.map((id, i) => `${`<instance_material symbol=\"MESH_MATERIAL_${i}\" target=\"#${id}\" >`}<bind_vertex_input semantic=\"TEXCOORD\" input_semantic=\"TEXCOORD\" input_set=\"0\" /></instance_material>`).join('')}</technique_common></bind_material>` : '')}</instance_geometry>`;\n    }\n\n    o.children.forEach(c => node += this.processObject(c));\n    node += '</node>';\n    return node;\n  }\n\n}\n\nexport { ColladaExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}