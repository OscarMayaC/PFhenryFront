{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { DataTexture, RGBAFormat, FloatType, RepeatWrapping, NearestFilter, Mesh, InstancedMesh, Matrix4, DynamicDrawUsage } from 'three';\n\n// Original src: https://github.com/zz85/threejs-path-flow\nconst CHANNELS = 4;\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 4;\n\n/**\n * Make a new DataTexture to store the descriptions of the curves.\n *\n * @param { number } numberOfCurves the number of curves needed to be described by this texture.\n */\nconst initSplineTexture = function () {\n  let numberOfCurves = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  const dataArray = new Float32Array(TEXTURE_WIDTH * TEXTURE_HEIGHT * numberOfCurves * CHANNELS);\n  const dataTexture = new DataTexture(dataArray, TEXTURE_WIDTH, TEXTURE_HEIGHT * numberOfCurves, RGBAFormat, FloatType);\n  dataTexture.wrapS = RepeatWrapping;\n  dataTexture.wrapT = RepeatWrapping;\n  dataTexture.magFilter = NearestFilter;\n  dataTexture.needsUpdate = true;\n  return dataTexture;\n};\n/**\n * Write the curve description to the data texture\n *\n * @param { DataTexture } texture The DataTexture to write to\n * @param { Curve } splineCurve The curve to describe\n * @param { number } offset Which curve slot to write to\n */\n\nconst updateSplineTexture = function (texture, splineCurve) {\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const numberOfPoints = Math.floor(TEXTURE_WIDTH * (TEXTURE_HEIGHT / 4));\n  splineCurve.arcLengthDivisions = numberOfPoints / 2;\n  splineCurve.updateArcLengths();\n  const points = splineCurve.getSpacedPoints(numberOfPoints);\n  const frenetFrames = splineCurve.computeFrenetFrames(numberOfPoints, true);\n  for (let i = 0; i < numberOfPoints; i++) {\n    const rowOffset = Math.floor(i / TEXTURE_WIDTH);\n    const rowIndex = i % TEXTURE_WIDTH;\n    let pt = points[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 0 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.tangents[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 1 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.normals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 2 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.binormals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 3 + rowOffset + TEXTURE_HEIGHT * offset);\n  }\n  texture.needsUpdate = true;\n};\nconst setTextureValue = (texture, index, x, y, z, o) => {\n  const image = texture.image;\n  const {\n    data\n  } = image;\n  const i = CHANNELS * TEXTURE_WIDTH * o; // Row Offset\n\n  data[index * CHANNELS + i + 0] = x;\n  data[index * CHANNELS + i + 1] = y;\n  data[index * CHANNELS + i + 2] = z;\n  data[index * CHANNELS + i + 3] = 1;\n};\n\n/**\n * Create a new set of uniforms for describing the curve modifier\n *\n * @param { DataTexture } Texture which holds the curve description\n */\nconst getUniforms = splineTexture => ({\n  spineTexture: {\n    value: splineTexture\n  },\n  pathOffset: {\n    type: 'f',\n    value: 0\n  },\n  // time of path curve\n  pathSegment: {\n    type: 'f',\n    value: 1\n  },\n  // fractional length of path\n  spineOffset: {\n    type: 'f',\n    value: 161\n  },\n  spineLength: {\n    type: 'f',\n    value: 400\n  },\n  flow: {\n    type: 'i',\n    value: 1\n  }\n});\nfunction modifyShader(material, uniforms) {\n  let numberOfCurves = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (material.__ok) return;\n  material.__ok = true;\n  material.onBeforeCompile = shader => {\n    if (shader.__modified) return;\n    shader.__modified = true;\n    Object.assign(shader.uniforms, uniforms);\n    const vertexShader = /* glsl */\n    `\n\t\tuniform sampler2D spineTexture;\n\t\tuniform float pathOffset;\n\t\tuniform float pathSegment;\n\t\tuniform float spineOffset;\n\t\tuniform float spineLength;\n\t\tuniform int flow;\n\n\t\tfloat textureLayers = ${TEXTURE_HEIGHT * numberOfCurves}.;\n\t\tfloat textureStacks = ${TEXTURE_HEIGHT / 4}.;\n\n\t\t${shader.vertexShader}\n\t\t` // chunk import moved in front of modified shader below\n    .replace('#include <beginnormal_vertex>', '') // vec3 transformedNormal declaration overriden below\n    .replace('#include <defaultnormal_vertex>', '') // vec3 transformed declaration overriden below\n    .replace('#include <begin_vertex>', '') // shader override\n    .replace(/void\\s*main\\s*\\(\\)\\s*\\{/, /* glsl */\n    `\n        void main() {\n        #include <beginnormal_vertex>\n\n        vec4 worldPos = modelMatrix * vec4(position, 1.);\n\n        bool bend = flow > 0;\n        float xWeight = bend ? 0. : 1.;\n\n        #ifdef USE_INSTANCING\n        float pathOffsetFromInstanceMatrix = instanceMatrix[3][2];\n        float spineLengthFromInstanceMatrix = instanceMatrix[3][0];\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLengthFromInstanceMatrix : 0.;\n        float mt = (spinePortion * pathSegment + pathOffset + pathOffsetFromInstanceMatrix)*textureStacks;\n        #else\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLength : 0.;\n        float mt = (spinePortion * pathSegment + pathOffset)*textureStacks;\n        #endif\n\n        mt = mod(mt, textureStacks);\n        float rowOffset = floor(mt);\n\n        #ifdef USE_INSTANCING\n        rowOffset += instanceMatrix[3][1] * ${TEXTURE_HEIGHT}.;\n        #endif\n\n        vec3 spinePos = texture2D(spineTexture, vec2(mt, (0. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 a =        texture2D(spineTexture, vec2(mt, (1. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 b =        texture2D(spineTexture, vec2(mt, (2. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 c =        texture2D(spineTexture, vec2(mt, (3. + rowOffset + 0.5) / textureLayers)).xyz;\n        mat3 basis = mat3(a, b, c);\n\n        vec3 transformed = basis\n          * vec3(worldPos.x * xWeight, worldPos.y * 1., worldPos.z * 1.)\n          + spinePos;\n\n        vec3 transformedNormal = normalMatrix * (basis * objectNormal);\n\t\t\t`).replace('#include <project_vertex>', /* glsl */\n    `vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;`);\n    shader.vertexShader = vertexShader;\n  };\n}\n/**\n * A helper class for making meshes bend aroudn curves\n */\n\nclass Flow {\n  /**\n   * @param {Mesh} mesh The mesh to clone and modify to bend around the curve\n   * @param {number} numberOfCurves The amount of space that should preallocated for additional curves\n   */\n  constructor(mesh) {\n    let numberOfCurves = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    _defineProperty(this, \"curveArray\", void 0);\n    _defineProperty(this, \"curveLengthArray\", void 0);\n    _defineProperty(this, \"object3D\", void 0);\n    _defineProperty(this, \"splineTexure\", void 0);\n    _defineProperty(this, \"uniforms\", void 0);\n    const obj3D = mesh.clone();\n    const splineTexure = initSplineTexture(numberOfCurves);\n    const uniforms = getUniforms(splineTexure);\n    obj3D.traverse(child => {\n      if (child instanceof Mesh || child instanceof InstancedMesh) {\n        child.material = child.material.clone();\n        modifyShader(child.material, uniforms, numberOfCurves);\n      }\n    });\n    this.curveArray = new Array(numberOfCurves);\n    this.curveLengthArray = new Array(numberOfCurves);\n    this.object3D = obj3D;\n    this.splineTexure = splineTexure;\n    this.uniforms = uniforms;\n  }\n  updateCurve(index, curve) {\n    if (index >= this.curveArray.length) throw Error('Index out of range for Flow');\n    const curveLength = curve.getLength();\n    this.uniforms.spineLength.value = curveLength;\n    this.curveLengthArray[index] = curveLength;\n    this.curveArray[index] = curve;\n    updateSplineTexture(this.splineTexure, curve, index);\n  }\n  moveAlongCurve(amount) {\n    this.uniforms.pathOffset.value += amount;\n  }\n}\nconst matrix = new Matrix4();\n/**\n * A helper class for creating instanced versions of flow, where the instances are placed on the curve.\n */\n\nclass InstancedFlow extends Flow {\n  /**\n   *\n   * @param {number} count The number of instanced elements\n   * @param {number} curveCount The number of curves to preallocate for\n   * @param {Geometry} geometry The geometry to use for the instanced mesh\n   * @param {Material} material The material to use for the instanced mesh\n   */\n  constructor(count, curveCount, geometry, material) {\n    const mesh = new InstancedMesh(geometry, material, count);\n    mesh.instanceMatrix.setUsage(DynamicDrawUsage);\n    super(mesh, curveCount);\n    _defineProperty(this, \"offsets\", void 0);\n    _defineProperty(this, \"whichCurve\", void 0);\n    this.offsets = new Array(count).fill(0);\n    this.whichCurve = new Array(count).fill(0);\n  }\n  /**\n   * The extra information about which curve and curve position is stored in the translation components of the matrix for the instanced objects\n   * This writes that information to the matrix and marks it as needing update.\n   *\n   * @param {number} index of the instanced element to update\n   */\n\n  writeChanges(index) {\n    matrix.makeTranslation(this.curveLengthArray[this.whichCurve[index]], this.whichCurve[index], this.offsets[index]);\n    this.object3D.setMatrixAt(index, matrix);\n    this.object3D.instanceMatrix.needsUpdate = true;\n  }\n  /**\n   * Move an individual element along the curve by a specific amount\n   *\n   * @param {number} index Which element to update\n   * @param {number} offset Move by how much\n   */\n\n  moveIndividualAlongCurve(index, offset) {\n    this.offsets[index] += offset;\n    this.writeChanges(index);\n  }\n  /**\n   * Select which curve to use for an element\n   *\n   * @param {number} index the index of the instanced element to update\n   * @param {number} curveNo the index of the curve it should use\n   */\n\n  setCurve(index, curveNo) {\n    if (isNaN(curveNo)) throw Error('curve index being set is Not a Number (NaN)');\n    this.whichCurve[index] = curveNo;\n    this.writeChanges(index);\n  }\n}\nexport { Flow, InstancedFlow, getUniforms, initSplineTexture, modifyShader, updateSplineTexture };","map":{"version":3,"names":["_defineProperty","DataTexture","RGBAFormat","FloatType","RepeatWrapping","NearestFilter","Mesh","InstancedMesh","Matrix4","DynamicDrawUsage","CHANNELS","TEXTURE_WIDTH","TEXTURE_HEIGHT","initSplineTexture","numberOfCurves","arguments","length","undefined","dataArray","Float32Array","dataTexture","wrapS","wrapT","magFilter","needsUpdate","updateSplineTexture","texture","splineCurve","offset","numberOfPoints","Math","floor","arcLengthDivisions","updateArcLengths","points","getSpacedPoints","frenetFrames","computeFrenetFrames","i","rowOffset","rowIndex","pt","setTextureValue","x","y","z","tangents","normals","binormals","index","o","image","data","getUniforms","splineTexture","spineTexture","value","pathOffset","type","pathSegment","spineOffset","spineLength","flow","modifyShader","material","uniforms","__ok","onBeforeCompile","shader","__modified","Object","assign","vertexShader","replace","Flow","constructor","mesh","obj3D","clone","splineTexure","traverse","child","curveArray","Array","curveLengthArray","object3D","updateCurve","curve","Error","curveLength","getLength","moveAlongCurve","amount","matrix","InstancedFlow","count","curveCount","geometry","instanceMatrix","setUsage","offsets","fill","whichCurve","writeChanges","makeTranslation","setMatrixAt","moveIndividualAlongCurve","setCurve","curveNo","isNaN"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/modifiers/CurveModifier.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { DataTexture, RGBAFormat, FloatType, RepeatWrapping, NearestFilter, Mesh, InstancedMesh, Matrix4, DynamicDrawUsage } from 'three';\n\n// Original src: https://github.com/zz85/threejs-path-flow\nconst CHANNELS = 4;\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 4;\n\n/**\n * Make a new DataTexture to store the descriptions of the curves.\n *\n * @param { number } numberOfCurves the number of curves needed to be described by this texture.\n */\nconst initSplineTexture = (numberOfCurves = 1) => {\n  const dataArray = new Float32Array(TEXTURE_WIDTH * TEXTURE_HEIGHT * numberOfCurves * CHANNELS);\n  const dataTexture = new DataTexture(dataArray, TEXTURE_WIDTH, TEXTURE_HEIGHT * numberOfCurves, RGBAFormat, FloatType);\n  dataTexture.wrapS = RepeatWrapping;\n  dataTexture.wrapT = RepeatWrapping;\n  dataTexture.magFilter = NearestFilter;\n  dataTexture.needsUpdate = true;\n  return dataTexture;\n};\n/**\n * Write the curve description to the data texture\n *\n * @param { DataTexture } texture The DataTexture to write to\n * @param { Curve } splineCurve The curve to describe\n * @param { number } offset Which curve slot to write to\n */\n\nconst updateSplineTexture = (texture, splineCurve, offset = 0) => {\n  const numberOfPoints = Math.floor(TEXTURE_WIDTH * (TEXTURE_HEIGHT / 4));\n  splineCurve.arcLengthDivisions = numberOfPoints / 2;\n  splineCurve.updateArcLengths();\n  const points = splineCurve.getSpacedPoints(numberOfPoints);\n  const frenetFrames = splineCurve.computeFrenetFrames(numberOfPoints, true);\n\n  for (let i = 0; i < numberOfPoints; i++) {\n    const rowOffset = Math.floor(i / TEXTURE_WIDTH);\n    const rowIndex = i % TEXTURE_WIDTH;\n    let pt = points[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 0 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.tangents[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 1 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.normals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 2 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.binormals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 3 + rowOffset + TEXTURE_HEIGHT * offset);\n  }\n\n  texture.needsUpdate = true;\n};\n\nconst setTextureValue = (texture, index, x, y, z, o) => {\n  const image = texture.image;\n  const {\n    data\n  } = image;\n  const i = CHANNELS * TEXTURE_WIDTH * o; // Row Offset\n\n  data[index * CHANNELS + i + 0] = x;\n  data[index * CHANNELS + i + 1] = y;\n  data[index * CHANNELS + i + 2] = z;\n  data[index * CHANNELS + i + 3] = 1;\n};\n\n/**\n * Create a new set of uniforms for describing the curve modifier\n *\n * @param { DataTexture } Texture which holds the curve description\n */\nconst getUniforms = splineTexture => ({\n  spineTexture: {\n    value: splineTexture\n  },\n  pathOffset: {\n    type: 'f',\n    value: 0\n  },\n  // time of path curve\n  pathSegment: {\n    type: 'f',\n    value: 1\n  },\n  // fractional length of path\n  spineOffset: {\n    type: 'f',\n    value: 161\n  },\n  spineLength: {\n    type: 'f',\n    value: 400\n  },\n  flow: {\n    type: 'i',\n    value: 1\n  }\n});\nfunction modifyShader(material, uniforms, numberOfCurves = 1) {\n  if (material.__ok) return;\n  material.__ok = true;\n\n  material.onBeforeCompile = shader => {\n    if (shader.__modified) return;\n    shader.__modified = true;\n    Object.assign(shader.uniforms, uniforms);\n    const vertexShader =\n    /* glsl */\n    `\n\t\tuniform sampler2D spineTexture;\n\t\tuniform float pathOffset;\n\t\tuniform float pathSegment;\n\t\tuniform float spineOffset;\n\t\tuniform float spineLength;\n\t\tuniform int flow;\n\n\t\tfloat textureLayers = ${TEXTURE_HEIGHT * numberOfCurves}.;\n\t\tfloat textureStacks = ${TEXTURE_HEIGHT / 4}.;\n\n\t\t${shader.vertexShader}\n\t\t` // chunk import moved in front of modified shader below\n    .replace('#include <beginnormal_vertex>', '') // vec3 transformedNormal declaration overriden below\n    .replace('#include <defaultnormal_vertex>', '') // vec3 transformed declaration overriden below\n    .replace('#include <begin_vertex>', '') // shader override\n    .replace(/void\\s*main\\s*\\(\\)\\s*\\{/,\n    /* glsl */\n    `\n        void main() {\n        #include <beginnormal_vertex>\n\n        vec4 worldPos = modelMatrix * vec4(position, 1.);\n\n        bool bend = flow > 0;\n        float xWeight = bend ? 0. : 1.;\n\n        #ifdef USE_INSTANCING\n        float pathOffsetFromInstanceMatrix = instanceMatrix[3][2];\n        float spineLengthFromInstanceMatrix = instanceMatrix[3][0];\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLengthFromInstanceMatrix : 0.;\n        float mt = (spinePortion * pathSegment + pathOffset + pathOffsetFromInstanceMatrix)*textureStacks;\n        #else\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLength : 0.;\n        float mt = (spinePortion * pathSegment + pathOffset)*textureStacks;\n        #endif\n\n        mt = mod(mt, textureStacks);\n        float rowOffset = floor(mt);\n\n        #ifdef USE_INSTANCING\n        rowOffset += instanceMatrix[3][1] * ${TEXTURE_HEIGHT}.;\n        #endif\n\n        vec3 spinePos = texture2D(spineTexture, vec2(mt, (0. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 a =        texture2D(spineTexture, vec2(mt, (1. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 b =        texture2D(spineTexture, vec2(mt, (2. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 c =        texture2D(spineTexture, vec2(mt, (3. + rowOffset + 0.5) / textureLayers)).xyz;\n        mat3 basis = mat3(a, b, c);\n\n        vec3 transformed = basis\n          * vec3(worldPos.x * xWeight, worldPos.y * 1., worldPos.z * 1.)\n          + spinePos;\n\n        vec3 transformedNormal = normalMatrix * (basis * objectNormal);\n\t\t\t`).replace('#include <project_vertex>',\n    /* glsl */\n    `vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;`);\n    shader.vertexShader = vertexShader;\n  };\n}\n/**\n * A helper class for making meshes bend aroudn curves\n */\n\nclass Flow {\n  /**\n   * @param {Mesh} mesh The mesh to clone and modify to bend around the curve\n   * @param {number} numberOfCurves The amount of space that should preallocated for additional curves\n   */\n  constructor(mesh, numberOfCurves = 1) {\n    _defineProperty(this, \"curveArray\", void 0);\n\n    _defineProperty(this, \"curveLengthArray\", void 0);\n\n    _defineProperty(this, \"object3D\", void 0);\n\n    _defineProperty(this, \"splineTexure\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    const obj3D = mesh.clone();\n    const splineTexure = initSplineTexture(numberOfCurves);\n    const uniforms = getUniforms(splineTexure);\n    obj3D.traverse(child => {\n      if (child instanceof Mesh || child instanceof InstancedMesh) {\n        child.material = child.material.clone();\n        modifyShader(child.material, uniforms, numberOfCurves);\n      }\n    });\n    this.curveArray = new Array(numberOfCurves);\n    this.curveLengthArray = new Array(numberOfCurves);\n    this.object3D = obj3D;\n    this.splineTexure = splineTexure;\n    this.uniforms = uniforms;\n  }\n\n  updateCurve(index, curve) {\n    if (index >= this.curveArray.length) throw Error('Index out of range for Flow');\n    const curveLength = curve.getLength();\n    this.uniforms.spineLength.value = curveLength;\n    this.curveLengthArray[index] = curveLength;\n    this.curveArray[index] = curve;\n    updateSplineTexture(this.splineTexure, curve, index);\n  }\n\n  moveAlongCurve(amount) {\n    this.uniforms.pathOffset.value += amount;\n  }\n\n}\nconst matrix = new Matrix4();\n/**\n * A helper class for creating instanced versions of flow, where the instances are placed on the curve.\n */\n\nclass InstancedFlow extends Flow {\n  /**\n   *\n   * @param {number} count The number of instanced elements\n   * @param {number} curveCount The number of curves to preallocate for\n   * @param {Geometry} geometry The geometry to use for the instanced mesh\n   * @param {Material} material The material to use for the instanced mesh\n   */\n  constructor(count, curveCount, geometry, material) {\n    const mesh = new InstancedMesh(geometry, material, count);\n    mesh.instanceMatrix.setUsage(DynamicDrawUsage);\n    super(mesh, curveCount);\n\n    _defineProperty(this, \"offsets\", void 0);\n\n    _defineProperty(this, \"whichCurve\", void 0);\n\n    this.offsets = new Array(count).fill(0);\n    this.whichCurve = new Array(count).fill(0);\n  }\n  /**\n   * The extra information about which curve and curve position is stored in the translation components of the matrix for the instanced objects\n   * This writes that information to the matrix and marks it as needing update.\n   *\n   * @param {number} index of the instanced element to update\n   */\n\n\n  writeChanges(index) {\n    matrix.makeTranslation(this.curveLengthArray[this.whichCurve[index]], this.whichCurve[index], this.offsets[index]);\n    this.object3D.setMatrixAt(index, matrix);\n    this.object3D.instanceMatrix.needsUpdate = true;\n  }\n  /**\n   * Move an individual element along the curve by a specific amount\n   *\n   * @param {number} index Which element to update\n   * @param {number} offset Move by how much\n   */\n\n\n  moveIndividualAlongCurve(index, offset) {\n    this.offsets[index] += offset;\n    this.writeChanges(index);\n  }\n  /**\n   * Select which curve to use for an element\n   *\n   * @param {number} index the index of the instanced element to update\n   * @param {number} curveNo the index of the curve it should use\n   */\n\n\n  setCurve(index, curveNo) {\n    if (isNaN(curveNo)) throw Error('curve index being set is Not a Number (NaN)');\n    this.whichCurve[index] = curveNo;\n    this.writeChanges(index);\n  }\n\n}\n\nexport { Flow, InstancedFlow, getUniforms, initSplineTexture, modifyShader, updateSplineTexture };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}