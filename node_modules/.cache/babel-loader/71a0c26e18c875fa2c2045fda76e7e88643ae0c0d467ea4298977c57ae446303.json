{"ast":null,"code":"import { Loader, FileLoader, BufferGeometry, BufferAttribute } from 'three';\n\n/**\n * See https://github.com/kchapelier/PRWM for more informations about this file format\n */\n\nlet bigEndianPlatform = null;\n/**\n * Check if the endianness of the platform is big-endian (most significant bit first)\n * @returns {boolean} True if big-endian, false if little-endian\n */\n\nfunction isBigEndianPlatform() {\n  if (bigEndianPlatform === null) {\n    const buffer = new ArrayBuffer(2),\n      uint8Array = new Uint8Array(buffer),\n      uint16Array = new Uint16Array(buffer);\n    uint8Array[0] = 0xaa; // set first byte\n\n    uint8Array[1] = 0xbb; // set second byte\n\n    bigEndianPlatform = uint16Array[0] === 0xaabb;\n  }\n  return bigEndianPlatform;\n} // match the values defined in the spec to the TypedArray types\n\nconst InvertedEncodingTypes = [null, Float32Array, null, Int8Array, Int16Array, null, Int32Array, Uint8Array, Uint16Array, null, Uint32Array]; // define the method to use on a DataView, corresponding the TypedArray type\n\nconst getMethods = {\n  Uint16Array: 'getUint16',\n  Uint32Array: 'getUint32',\n  Int16Array: 'getInt16',\n  Int32Array: 'getInt32',\n  Float32Array: 'getFloat32',\n  Float64Array: 'getFloat64'\n};\nfunction copyFromBuffer(sourceArrayBuffer, viewType, position, length, fromBigEndian) {\n  const bytesPerElement = viewType.BYTES_PER_ELEMENT;\n  let result;\n  if (fromBigEndian === isBigEndianPlatform() || bytesPerElement === 1) {\n    result = new viewType(sourceArrayBuffer, position, length);\n  } else {\n    const readView = new DataView(sourceArrayBuffer, position, length * bytesPerElement),\n      getMethod = getMethods[viewType.name],\n      littleEndian = !fromBigEndian;\n    result = new viewType(length);\n    for (let i = 0; i < length; i++) {\n      result[i] = readView[getMethod](i * bytesPerElement, littleEndian);\n    }\n  }\n  return result;\n}\nfunction decodePrwm(buffer) {\n  const array = new Uint8Array(buffer),\n    version = array[0];\n  let flags = array[1];\n  const indexedGeometry = !!(flags >> 7 & 0x01),\n    indicesType = flags >> 6 & 0x01,\n    bigEndian = (flags >> 5 & 0x01) === 1,\n    attributesNumber = flags & 0x1f;\n  let valuesNumber = 0,\n    indicesNumber = 0;\n  if (bigEndian) {\n    valuesNumber = (array[2] << 16) + (array[3] << 8) + array[4];\n    indicesNumber = (array[5] << 16) + (array[6] << 8) + array[7];\n  } else {\n    valuesNumber = array[2] + (array[3] << 8) + (array[4] << 16);\n    indicesNumber = array[5] + (array[6] << 8) + (array[7] << 16);\n  }\n  /** PRELIMINARY CHECKS **/\n\n  if (version === 0) {\n    throw new Error('PRWM decoder: Invalid format version: 0');\n  } else if (version !== 1) {\n    throw new Error('PRWM decoder: Unsupported format version: ' + version);\n  }\n  if (!indexedGeometry) {\n    if (indicesType !== 0) {\n      throw new Error('PRWM decoder: Indices type must be set to 0 for non-indexed geometries');\n    } else if (indicesNumber !== 0) {\n      throw new Error('PRWM decoder: Number of indices must be set to 0 for non-indexed geometries');\n    }\n  }\n  /** PARSING **/\n\n  let pos = 8;\n  const attributes = {};\n  for (let i = 0; i < attributesNumber; i++) {\n    let attributeName = '';\n    while (pos < array.length) {\n      const char = array[pos];\n      pos++;\n      if (char === 0) {\n        break;\n      } else {\n        attributeName += String.fromCharCode(char);\n      }\n    }\n    flags = array[pos];\n    const attributeType = flags >> 7 & 0x01;\n    const cardinality = (flags >> 4 & 0x03) + 1;\n    const encodingType = flags & 0x0f;\n    const arrayType = InvertedEncodingTypes[encodingType];\n    pos++; // padding to next multiple of 4\n\n    pos = Math.ceil(pos / 4) * 4;\n    const values = copyFromBuffer(buffer, arrayType, pos, cardinality * valuesNumber, bigEndian);\n    pos += arrayType.BYTES_PER_ELEMENT * cardinality * valuesNumber;\n    attributes[attributeName] = {\n      type: attributeType,\n      cardinality: cardinality,\n      values: values\n    };\n  }\n  pos = Math.ceil(pos / 4) * 4;\n  let indices = null;\n  if (indexedGeometry) {\n    indices = copyFromBuffer(buffer, indicesType === 1 ? Uint32Array : Uint16Array, pos, indicesNumber, bigEndian);\n  }\n  return {\n    version: version,\n    attributes: attributes,\n    indices: indices\n  };\n} // Define the public interface\n\nclass PRWMLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    url = url.replace(/\\*/g, isBigEndianPlatform() ? 'be' : 'le');\n    loader.load(url, function (arrayBuffer) {\n      try {\n        onLoad(scope.parse(arrayBuffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(arrayBuffer) {\n    const data = decodePrwm(arrayBuffer),\n      attributesKey = Object.keys(data.attributes),\n      bufferGeometry = new BufferGeometry();\n    for (let i = 0; i < attributesKey.length; i++) {\n      const attribute = data.attributes[attributesKey[i]];\n      bufferGeometry.setAttribute(attributesKey[i], new BufferAttribute(attribute.values, attribute.cardinality, attribute.normalized));\n    }\n    if (data.indices !== null) {\n      bufferGeometry.setIndex(new BufferAttribute(data.indices, 1));\n    }\n    return bufferGeometry;\n  }\n  static isBigEndianPlatform() {\n    return isBigEndianPlatform();\n  }\n}\nexport { PRWMLoader };","map":{"version":3,"names":["Loader","FileLoader","BufferGeometry","BufferAttribute","bigEndianPlatform","isBigEndianPlatform","buffer","ArrayBuffer","uint8Array","Uint8Array","uint16Array","Uint16Array","InvertedEncodingTypes","Float32Array","Int8Array","Int16Array","Int32Array","Uint32Array","getMethods","Float64Array","copyFromBuffer","sourceArrayBuffer","viewType","position","length","fromBigEndian","bytesPerElement","BYTES_PER_ELEMENT","result","readView","DataView","getMethod","name","littleEndian","i","decodePrwm","array","version","flags","indexedGeometry","indicesType","bigEndian","attributesNumber","valuesNumber","indicesNumber","Error","pos","attributes","attributeName","char","String","fromCharCode","attributeType","cardinality","encodingType","arrayType","Math","ceil","values","type","indices","PRWMLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","replace","arrayBuffer","parse","e","console","error","itemError","data","attributesKey","Object","keys","bufferGeometry","attribute","setAttribute","normalized","setIndex"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/loaders/PRWMLoader.js"],"sourcesContent":["import { Loader, FileLoader, BufferGeometry, BufferAttribute } from 'three';\n\n/**\n * See https://github.com/kchapelier/PRWM for more informations about this file format\n */\n\nlet bigEndianPlatform = null;\n/**\n * Check if the endianness of the platform is big-endian (most significant bit first)\n * @returns {boolean} True if big-endian, false if little-endian\n */\n\nfunction isBigEndianPlatform() {\n  if (bigEndianPlatform === null) {\n    const buffer = new ArrayBuffer(2),\n          uint8Array = new Uint8Array(buffer),\n          uint16Array = new Uint16Array(buffer);\n    uint8Array[0] = 0xaa; // set first byte\n\n    uint8Array[1] = 0xbb; // set second byte\n\n    bigEndianPlatform = uint16Array[0] === 0xaabb;\n  }\n\n  return bigEndianPlatform;\n} // match the values defined in the spec to the TypedArray types\n\n\nconst InvertedEncodingTypes = [null, Float32Array, null, Int8Array, Int16Array, null, Int32Array, Uint8Array, Uint16Array, null, Uint32Array]; // define the method to use on a DataView, corresponding the TypedArray type\n\nconst getMethods = {\n  Uint16Array: 'getUint16',\n  Uint32Array: 'getUint32',\n  Int16Array: 'getInt16',\n  Int32Array: 'getInt32',\n  Float32Array: 'getFloat32',\n  Float64Array: 'getFloat64'\n};\n\nfunction copyFromBuffer(sourceArrayBuffer, viewType, position, length, fromBigEndian) {\n  const bytesPerElement = viewType.BYTES_PER_ELEMENT;\n  let result;\n\n  if (fromBigEndian === isBigEndianPlatform() || bytesPerElement === 1) {\n    result = new viewType(sourceArrayBuffer, position, length);\n  } else {\n    const readView = new DataView(sourceArrayBuffer, position, length * bytesPerElement),\n          getMethod = getMethods[viewType.name],\n          littleEndian = !fromBigEndian;\n    result = new viewType(length);\n\n    for (let i = 0; i < length; i++) {\n      result[i] = readView[getMethod](i * bytesPerElement, littleEndian);\n    }\n  }\n\n  return result;\n}\n\nfunction decodePrwm(buffer) {\n  const array = new Uint8Array(buffer),\n        version = array[0];\n  let flags = array[1];\n  const indexedGeometry = !!(flags >> 7 & 0x01),\n        indicesType = flags >> 6 & 0x01,\n        bigEndian = (flags >> 5 & 0x01) === 1,\n        attributesNumber = flags & 0x1f;\n  let valuesNumber = 0,\n      indicesNumber = 0;\n\n  if (bigEndian) {\n    valuesNumber = (array[2] << 16) + (array[3] << 8) + array[4];\n    indicesNumber = (array[5] << 16) + (array[6] << 8) + array[7];\n  } else {\n    valuesNumber = array[2] + (array[3] << 8) + (array[4] << 16);\n    indicesNumber = array[5] + (array[6] << 8) + (array[7] << 16);\n  }\n  /** PRELIMINARY CHECKS **/\n\n\n  if (version === 0) {\n    throw new Error('PRWM decoder: Invalid format version: 0');\n  } else if (version !== 1) {\n    throw new Error('PRWM decoder: Unsupported format version: ' + version);\n  }\n\n  if (!indexedGeometry) {\n    if (indicesType !== 0) {\n      throw new Error('PRWM decoder: Indices type must be set to 0 for non-indexed geometries');\n    } else if (indicesNumber !== 0) {\n      throw new Error('PRWM decoder: Number of indices must be set to 0 for non-indexed geometries');\n    }\n  }\n  /** PARSING **/\n\n\n  let pos = 8;\n  const attributes = {};\n\n  for (let i = 0; i < attributesNumber; i++) {\n    let attributeName = '';\n\n    while (pos < array.length) {\n      const char = array[pos];\n      pos++;\n\n      if (char === 0) {\n        break;\n      } else {\n        attributeName += String.fromCharCode(char);\n      }\n    }\n\n    flags = array[pos];\n    const attributeType = flags >> 7 & 0x01;\n    const cardinality = (flags >> 4 & 0x03) + 1;\n    const encodingType = flags & 0x0f;\n    const arrayType = InvertedEncodingTypes[encodingType];\n    pos++; // padding to next multiple of 4\n\n    pos = Math.ceil(pos / 4) * 4;\n    const values = copyFromBuffer(buffer, arrayType, pos, cardinality * valuesNumber, bigEndian);\n    pos += arrayType.BYTES_PER_ELEMENT * cardinality * valuesNumber;\n    attributes[attributeName] = {\n      type: attributeType,\n      cardinality: cardinality,\n      values: values\n    };\n  }\n\n  pos = Math.ceil(pos / 4) * 4;\n  let indices = null;\n\n  if (indexedGeometry) {\n    indices = copyFromBuffer(buffer, indicesType === 1 ? Uint32Array : Uint16Array, pos, indicesNumber, bigEndian);\n  }\n\n  return {\n    version: version,\n    attributes: attributes,\n    indices: indices\n  };\n} // Define the public interface\n\n\nclass PRWMLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    url = url.replace(/\\*/g, isBigEndianPlatform() ? 'be' : 'le');\n    loader.load(url, function (arrayBuffer) {\n      try {\n        onLoad(scope.parse(arrayBuffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(arrayBuffer) {\n    const data = decodePrwm(arrayBuffer),\n          attributesKey = Object.keys(data.attributes),\n          bufferGeometry = new BufferGeometry();\n\n    for (let i = 0; i < attributesKey.length; i++) {\n      const attribute = data.attributes[attributesKey[i]];\n      bufferGeometry.setAttribute(attributesKey[i], new BufferAttribute(attribute.values, attribute.cardinality, attribute.normalized));\n    }\n\n    if (data.indices !== null) {\n      bufferGeometry.setIndex(new BufferAttribute(data.indices, 1));\n    }\n\n    return bufferGeometry;\n  }\n\n  static isBigEndianPlatform() {\n    return isBigEndianPlatform();\n  }\n\n}\n\nexport { PRWMLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}