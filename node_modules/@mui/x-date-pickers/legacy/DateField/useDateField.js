import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
var _excluded = ["value", "defaultValue", "format", "onChange", "readOnly", "onError", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear", "minDate", "maxDate", "disableFuture", "disablePast", "selectedSections", "onSelectedSectionsChange", "unstableFieldRef"];
import { singleItemFieldValueManager, singleItemValueManager } from '../internals/utils/valueManagers';
import { useField } from '../internals/hooks/useField';
import { validateDate } from '../internals/hooks/validation/useDateValidation';
import { applyDefaultDate } from '../internals/utils/date-utils';
import { useUtils, useDefaultDates } from '../internals/hooks/useUtils';
var useDefaultizedDateField = function useDefaultizedDateField(props) {
  var _props$disablePast, _props$disableFuture, _props$format;
  var utils = useUtils();
  var defaultDates = useDefaultDates();
  return _extends({}, props, {
    disablePast: (_props$disablePast = props.disablePast) != null ? _props$disablePast : false,
    disableFuture: (_props$disableFuture = props.disableFuture) != null ? _props$disableFuture : false,
    format: (_props$format = props.format) != null ? _props$format : utils.formats.keyboardDate,
    minDate: applyDefaultDate(utils, props.minDate, defaultDates.minDate),
    maxDate: applyDefaultDate(utils, props.maxDate, defaultDates.maxDate)
  });
};
export var useDateField = function useDateField(_ref) {
  var props = _ref.props,
    inputRef = _ref.inputRef;
  var _useDefaultizedDateFi = useDefaultizedDateField(props),
    value = _useDefaultizedDateFi.value,
    defaultValue = _useDefaultizedDateFi.defaultValue,
    format = _useDefaultizedDateFi.format,
    onChange = _useDefaultizedDateFi.onChange,
    readOnly = _useDefaultizedDateFi.readOnly,
    onError = _useDefaultizedDateFi.onError,
    shouldDisableDate = _useDefaultizedDateFi.shouldDisableDate,
    shouldDisableMonth = _useDefaultizedDateFi.shouldDisableMonth,
    shouldDisableYear = _useDefaultizedDateFi.shouldDisableYear,
    minDate = _useDefaultizedDateFi.minDate,
    maxDate = _useDefaultizedDateFi.maxDate,
    disableFuture = _useDefaultizedDateFi.disableFuture,
    disablePast = _useDefaultizedDateFi.disablePast,
    selectedSections = _useDefaultizedDateFi.selectedSections,
    onSelectedSectionsChange = _useDefaultizedDateFi.onSelectedSectionsChange,
    unstableFieldRef = _useDefaultizedDateFi.unstableFieldRef,
    other = _objectWithoutProperties(_useDefaultizedDateFi, _excluded);
  return useField({
    inputRef: inputRef,
    forwardedProps: other,
    internalProps: {
      value: value,
      defaultValue: defaultValue,
      format: format,
      onChange: onChange,
      readOnly: readOnly,
      onError: onError,
      shouldDisableDate: shouldDisableDate,
      shouldDisableMonth: shouldDisableMonth,
      shouldDisableYear: shouldDisableYear,
      minDate: minDate,
      maxDate: maxDate,
      disableFuture: disableFuture,
      disablePast: disablePast,
      selectedSections: selectedSections,
      onSelectedSectionsChange: onSelectedSectionsChange,
      unstableFieldRef: unstableFieldRef
    },
    valueManager: singleItemValueManager,
    fieldValueManager: singleItemFieldValueManager,
    validator: validateDate,
    valueType: 'date'
  });
};