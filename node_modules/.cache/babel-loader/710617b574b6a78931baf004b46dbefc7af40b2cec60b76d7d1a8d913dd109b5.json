{"ast":null,"code":"import { Object3D, Box3, MathUtils, TextureLoader, UVMapping, sRGBEncoding, MeshLambertMaterial } from 'three';\nimport { MD2Loader } from '../loaders/MD2Loader.js';\nimport { MorphBlendMesh } from './MorphBlendMesh.js';\nvar MD2CharacterComplex = function () {\n  var scope = this;\n  this.scale = 1; // animation parameters\n\n  this.animationFPS = 6;\n  this.transitionFrames = 15; // movement model parameters\n\n  this.maxSpeed = 275;\n  this.maxReverseSpeed = -275;\n  this.frontAcceleration = 600;\n  this.backAcceleration = 600;\n  this.frontDecceleration = 600;\n  this.angularSpeed = 2.5; // rig\n\n  this.root = new Object3D();\n  this.meshBody = null;\n  this.meshWeapon = null;\n  this.controls = null; // skins\n\n  this.skinsBody = [];\n  this.skinsWeapon = [];\n  this.weapons = [];\n  this.currentSkin = undefined; //\n\n  this.onLoadComplete = function () {}; // internals\n\n  this.meshes = [];\n  this.animations = {};\n  this.loadCounter = 0; // internal movement control variables\n\n  this.speed = 0;\n  this.bodyOrientation = 0;\n  this.walkSpeed = this.maxSpeed;\n  this.crouchSpeed = this.maxSpeed * 0.5; // internal animation parameters\n\n  this.activeAnimation = null;\n  this.oldAnimation = null; // API\n\n  this.enableShadows = function (enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].castShadow = enable;\n      this.meshes[i].receiveShadow = enable;\n    }\n  };\n  this.setVisible = function (enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].visible = enable;\n      this.meshes[i].visible = enable;\n    }\n  };\n  this.shareParts = function (original) {\n    this.animations = original.animations;\n    this.walkSpeed = original.walkSpeed;\n    this.crouchSpeed = original.crouchSpeed;\n    this.skinsBody = original.skinsBody;\n    this.skinsWeapon = original.skinsWeapon; // BODY\n\n    var mesh = createPart(original.meshBody.geometry, this.skinsBody[0]);\n    mesh.scale.set(this.scale, this.scale, this.scale);\n    this.root.position.y = original.root.position.y;\n    this.root.add(mesh);\n    this.meshBody = mesh;\n    this.meshes.push(mesh); // WEAPONS\n\n    for (let i = 0; i < original.weapons.length; i++) {\n      var meshWeapon = createPart(original.weapons[i].geometry, this.skinsWeapon[i]);\n      meshWeapon.scale.set(this.scale, this.scale, this.scale);\n      meshWeapon.visible = false;\n      meshWeapon.name = original.weapons[i].name;\n      this.root.add(meshWeapon);\n      this.weapons[i] = meshWeapon;\n      this.meshWeapon = meshWeapon;\n      this.meshes.push(meshWeapon);\n    }\n  };\n  this.loadParts = function (config) {\n    this.animations = config.animations;\n    this.walkSpeed = config.walkSpeed;\n    this.crouchSpeed = config.crouchSpeed;\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n    var weaponsTextures = [];\n    for (let i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1]; // SKINS\n\n    this.skinsBody = loadTextures(config.baseUrl + 'skins/', config.skins);\n    this.skinsWeapon = loadTextures(config.baseUrl + 'skins/', weaponsTextures); // BODY\n\n    var loader = new MD2Loader();\n    loader.load(config.baseUrl + config.body, function (geo) {\n      var boundingBox = new Box3();\n      boundingBox.setFromBufferAttribute(geo.attributes.position);\n      scope.root.position.y = -scope.scale * boundingBox.min.y;\n      var mesh = createPart(geo, scope.skinsBody[0]);\n      mesh.scale.set(scope.scale, scope.scale, scope.scale);\n      scope.root.add(mesh);\n      scope.meshBody = mesh;\n      scope.meshes.push(mesh);\n      checkLoadingComplete();\n    }); // WEAPONS\n\n    var generateCallback = function (index, name) {\n      return function (geo) {\n        var mesh = createPart(geo, scope.skinsWeapon[index]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        mesh.visible = false;\n        mesh.name = name;\n        scope.root.add(mesh);\n        scope.weapons[index] = mesh;\n        scope.meshWeapon = mesh;\n        scope.meshes.push(mesh);\n        checkLoadingComplete();\n      };\n    };\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\n    }\n  };\n  this.setPlaybackRate = function (rate) {\n    if (this.meshBody) this.meshBody.duration = this.meshBody.baseDuration / rate;\n    if (this.meshWeapon) this.meshWeapon.duration = this.meshWeapon.baseDuration / rate;\n  };\n  this.setWireframe = function (wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe;\n    } else {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture;\n    }\n  };\n  this.setSkin = function (index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index];\n      this.currentSkin = index;\n    }\n  };\n  this.setWeapon = function (index) {\n    for (let i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false;\n    var activeWeapon = this.weapons[index];\n    if (activeWeapon) {\n      activeWeapon.visible = true;\n      this.meshWeapon = activeWeapon;\n      if (this.activeAnimation) {\n        activeWeapon.playAnimation(this.activeAnimation);\n        this.meshWeapon.setAnimationTime(this.activeAnimation, this.meshBody.getAnimationTime(this.activeAnimation));\n      }\n    }\n  };\n  this.setAnimation = function (animationName) {\n    if (animationName === this.activeAnimation || !animationName) return;\n    if (this.meshBody) {\n      this.meshBody.setAnimationWeight(animationName, 0);\n      this.meshBody.playAnimation(animationName);\n      this.oldAnimation = this.activeAnimation;\n      this.activeAnimation = animationName;\n      this.blendCounter = this.transitionFrames;\n    }\n    if (this.meshWeapon) {\n      this.meshWeapon.setAnimationWeight(animationName, 0);\n      this.meshWeapon.playAnimation(animationName);\n    }\n  };\n  this.update = function (delta) {\n    if (this.controls) this.updateMovementModel(delta);\n    if (this.animations) {\n      this.updateBehaviors();\n      this.updateAnimations(delta);\n    }\n  };\n  this.updateAnimations = function (delta) {\n    var mix = 1;\n    if (this.blendCounter > 0) {\n      mix = (this.transitionFrames - this.blendCounter) / this.transitionFrames;\n      this.blendCounter -= 1;\n    }\n    if (this.meshBody) {\n      this.meshBody.update(delta);\n      this.meshBody.setAnimationWeight(this.activeAnimation, mix);\n      this.meshBody.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n    if (this.meshWeapon) {\n      this.meshWeapon.update(delta);\n      this.meshWeapon.setAnimationWeight(this.activeAnimation, mix);\n      this.meshWeapon.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n  };\n  this.updateBehaviors = function () {\n    var controls = this.controls;\n    var animations = this.animations;\n    var moveAnimation, idleAnimation; // crouch vs stand\n\n    if (controls.crouch) {\n      moveAnimation = animations['crouchMove'];\n      idleAnimation = animations['crouchIdle'];\n    } else {\n      moveAnimation = animations['move'];\n      idleAnimation = animations['idle'];\n    } // actions\n\n    if (controls.jump) {\n      moveAnimation = animations['jump'];\n      idleAnimation = animations['jump'];\n    }\n    if (controls.attack) {\n      if (controls.crouch) {\n        moveAnimation = animations['crouchAttack'];\n        idleAnimation = animations['crouchAttack'];\n      } else {\n        moveAnimation = animations['attack'];\n        idleAnimation = animations['attack'];\n      }\n    } // set animations\n\n    if (controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight) {\n      if (this.activeAnimation !== moveAnimation) {\n        this.setAnimation(moveAnimation);\n      }\n    }\n    if (Math.abs(this.speed) < 0.2 * this.maxSpeed && !(controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward)) {\n      if (this.activeAnimation !== idleAnimation) {\n        this.setAnimation(idleAnimation);\n      }\n    } // set animation direction\n\n    if (controls.moveForward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionForward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionForward(this.oldAnimation);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionForward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionForward(this.oldAnimation);\n      }\n    }\n    if (controls.moveBackward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionBackward(this.oldAnimation);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation);\n      }\n    }\n  };\n  this.updateMovementModel = function (delta) {\n    var controls = this.controls; // speed based on controls\n\n    if (controls.crouch) this.maxSpeed = this.crouchSpeed;else this.maxSpeed = this.walkSpeed;\n    this.maxReverseSpeed = -this.maxSpeed;\n    if (controls.moveForward) {\n      this.speed = MathUtils.clamp(this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    }\n    if (controls.moveBackward) {\n      this.speed = MathUtils.clamp(this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    } // orientation based on controls\n    // (don't just stand while turning)\n\n    var dir = 1;\n    if (controls.moveLeft) {\n      this.bodyOrientation += delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    }\n    if (controls.moveRight) {\n      this.bodyOrientation -= delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    } // speed decay\n\n    if (!(controls.moveForward || controls.moveBackward)) {\n      if (this.speed > 0) {\n        var k = exponentialEaseOut(this.speed / this.maxSpeed);\n        this.speed = MathUtils.clamp(this.speed - k * delta * this.frontDecceleration, 0, this.maxSpeed);\n      } else {\n        var k = exponentialEaseOut(this.speed / this.maxReverseSpeed);\n        this.speed = MathUtils.clamp(this.speed + k * delta * this.backAcceleration, this.maxReverseSpeed, 0);\n      }\n    } // displacement\n\n    var forwardDelta = this.speed * delta;\n    this.root.position.x += Math.sin(this.bodyOrientation) * forwardDelta;\n    this.root.position.z += Math.cos(this.bodyOrientation) * forwardDelta; // steering\n\n    this.root.rotation.y = this.bodyOrientation;\n  }; // internal helpers\n\n  function loadTextures(baseUrl, textureUrls) {\n    var textureLoader = new TextureLoader();\n    var textures = [];\n    for (let i = 0; i < textureUrls.length; i++) {\n      textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n      textures[i].mapping = UVMapping;\n      textures[i].name = textureUrls[i];\n      textures[i].encoding = sRGBEncoding;\n    }\n    return textures;\n  }\n  function createPart(geometry, skinMap) {\n    var materialWireframe = new MeshLambertMaterial({\n      color: 0xffaa00,\n      wireframe: true,\n      morphTargets: true,\n      morphNormals: true\n    });\n    var materialTexture = new MeshLambertMaterial({\n      color: 0xffffff,\n      wireframe: false,\n      map: skinMap,\n      morphTargets: true,\n      morphNormals: true\n    }); //\n\n    var mesh = new MorphBlendMesh(geometry, materialTexture);\n    mesh.rotation.y = -Math.PI / 2; //\n\n    mesh.materialTexture = materialTexture;\n    mesh.materialWireframe = materialWireframe; //\n\n    mesh.autoCreateAnimations(scope.animationFPS);\n    return mesh;\n  }\n  function checkLoadingComplete() {\n    scope.loadCounter -= 1;\n    if (scope.loadCounter === 0) scope.onLoadComplete();\n  }\n  function exponentialEaseOut(k) {\n    return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1;\n  }\n};\nexport { MD2CharacterComplex };","map":{"version":3,"names":["Object3D","Box3","MathUtils","TextureLoader","UVMapping","sRGBEncoding","MeshLambertMaterial","MD2Loader","MorphBlendMesh","MD2CharacterComplex","scope","scale","animationFPS","transitionFrames","maxSpeed","maxReverseSpeed","frontAcceleration","backAcceleration","frontDecceleration","angularSpeed","root","meshBody","meshWeapon","controls","skinsBody","skinsWeapon","weapons","currentSkin","undefined","onLoadComplete","meshes","animations","loadCounter","speed","bodyOrientation","walkSpeed","crouchSpeed","activeAnimation","oldAnimation","enableShadows","enable","i","length","castShadow","receiveShadow","setVisible","visible","shareParts","original","mesh","createPart","geometry","set","position","y","add","push","name","loadParts","config","skins","weaponsTextures","loadTextures","baseUrl","loader","load","body","geo","boundingBox","setFromBufferAttribute","attributes","min","checkLoadingComplete","generateCallback","index","setPlaybackRate","rate","duration","baseDuration","setWireframe","wireframeEnabled","material","materialWireframe","materialTexture","setSkin","wireframe","map","setWeapon","activeWeapon","playAnimation","setAnimationTime","getAnimationTime","setAnimation","animationName","setAnimationWeight","blendCounter","update","delta","updateMovementModel","updateBehaviors","updateAnimations","mix","moveAnimation","idleAnimation","crouch","jump","attack","moveForward","moveBackward","moveLeft","moveRight","Math","abs","setAnimationDirectionForward","setAnimationDirectionBackward","clamp","dir","k","exponentialEaseOut","forwardDelta","x","sin","z","cos","rotation","textureUrls","textureLoader","textures","mapping","encoding","skinMap","color","morphTargets","morphNormals","PI","autoCreateAnimations","pow"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/misc/MD2CharacterComplex.js"],"sourcesContent":["import { Object3D, Box3, MathUtils, TextureLoader, UVMapping, sRGBEncoding, MeshLambertMaterial } from 'three';\nimport { MD2Loader } from '../loaders/MD2Loader.js';\nimport { MorphBlendMesh } from './MorphBlendMesh.js';\n\nvar MD2CharacterComplex = function () {\n  var scope = this;\n  this.scale = 1; // animation parameters\n\n  this.animationFPS = 6;\n  this.transitionFrames = 15; // movement model parameters\n\n  this.maxSpeed = 275;\n  this.maxReverseSpeed = -275;\n  this.frontAcceleration = 600;\n  this.backAcceleration = 600;\n  this.frontDecceleration = 600;\n  this.angularSpeed = 2.5; // rig\n\n  this.root = new Object3D();\n  this.meshBody = null;\n  this.meshWeapon = null;\n  this.controls = null; // skins\n\n  this.skinsBody = [];\n  this.skinsWeapon = [];\n  this.weapons = [];\n  this.currentSkin = undefined; //\n\n  this.onLoadComplete = function () {}; // internals\n\n\n  this.meshes = [];\n  this.animations = {};\n  this.loadCounter = 0; // internal movement control variables\n\n  this.speed = 0;\n  this.bodyOrientation = 0;\n  this.walkSpeed = this.maxSpeed;\n  this.crouchSpeed = this.maxSpeed * 0.5; // internal animation parameters\n\n  this.activeAnimation = null;\n  this.oldAnimation = null; // API\n\n  this.enableShadows = function (enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].castShadow = enable;\n      this.meshes[i].receiveShadow = enable;\n    }\n  };\n\n  this.setVisible = function (enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].visible = enable;\n      this.meshes[i].visible = enable;\n    }\n  };\n\n  this.shareParts = function (original) {\n    this.animations = original.animations;\n    this.walkSpeed = original.walkSpeed;\n    this.crouchSpeed = original.crouchSpeed;\n    this.skinsBody = original.skinsBody;\n    this.skinsWeapon = original.skinsWeapon; // BODY\n\n    var mesh = createPart(original.meshBody.geometry, this.skinsBody[0]);\n    mesh.scale.set(this.scale, this.scale, this.scale);\n    this.root.position.y = original.root.position.y;\n    this.root.add(mesh);\n    this.meshBody = mesh;\n    this.meshes.push(mesh); // WEAPONS\n\n    for (let i = 0; i < original.weapons.length; i++) {\n      var meshWeapon = createPart(original.weapons[i].geometry, this.skinsWeapon[i]);\n      meshWeapon.scale.set(this.scale, this.scale, this.scale);\n      meshWeapon.visible = false;\n      meshWeapon.name = original.weapons[i].name;\n      this.root.add(meshWeapon);\n      this.weapons[i] = meshWeapon;\n      this.meshWeapon = meshWeapon;\n      this.meshes.push(meshWeapon);\n    }\n  };\n\n  this.loadParts = function (config) {\n    this.animations = config.animations;\n    this.walkSpeed = config.walkSpeed;\n    this.crouchSpeed = config.crouchSpeed;\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n    var weaponsTextures = [];\n\n    for (let i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1]; // SKINS\n\n\n    this.skinsBody = loadTextures(config.baseUrl + 'skins/', config.skins);\n    this.skinsWeapon = loadTextures(config.baseUrl + 'skins/', weaponsTextures); // BODY\n\n    var loader = new MD2Loader();\n    loader.load(config.baseUrl + config.body, function (geo) {\n      var boundingBox = new Box3();\n      boundingBox.setFromBufferAttribute(geo.attributes.position);\n      scope.root.position.y = -scope.scale * boundingBox.min.y;\n      var mesh = createPart(geo, scope.skinsBody[0]);\n      mesh.scale.set(scope.scale, scope.scale, scope.scale);\n      scope.root.add(mesh);\n      scope.meshBody = mesh;\n      scope.meshes.push(mesh);\n      checkLoadingComplete();\n    }); // WEAPONS\n\n    var generateCallback = function (index, name) {\n      return function (geo) {\n        var mesh = createPart(geo, scope.skinsWeapon[index]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        mesh.visible = false;\n        mesh.name = name;\n        scope.root.add(mesh);\n        scope.weapons[index] = mesh;\n        scope.meshWeapon = mesh;\n        scope.meshes.push(mesh);\n        checkLoadingComplete();\n      };\n    };\n\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\n    }\n  };\n\n  this.setPlaybackRate = function (rate) {\n    if (this.meshBody) this.meshBody.duration = this.meshBody.baseDuration / rate;\n    if (this.meshWeapon) this.meshWeapon.duration = this.meshWeapon.baseDuration / rate;\n  };\n\n  this.setWireframe = function (wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe;\n    } else {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture;\n    }\n  };\n\n  this.setSkin = function (index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index];\n      this.currentSkin = index;\n    }\n  };\n\n  this.setWeapon = function (index) {\n    for (let i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false;\n\n    var activeWeapon = this.weapons[index];\n\n    if (activeWeapon) {\n      activeWeapon.visible = true;\n      this.meshWeapon = activeWeapon;\n\n      if (this.activeAnimation) {\n        activeWeapon.playAnimation(this.activeAnimation);\n        this.meshWeapon.setAnimationTime(this.activeAnimation, this.meshBody.getAnimationTime(this.activeAnimation));\n      }\n    }\n  };\n\n  this.setAnimation = function (animationName) {\n    if (animationName === this.activeAnimation || !animationName) return;\n\n    if (this.meshBody) {\n      this.meshBody.setAnimationWeight(animationName, 0);\n      this.meshBody.playAnimation(animationName);\n      this.oldAnimation = this.activeAnimation;\n      this.activeAnimation = animationName;\n      this.blendCounter = this.transitionFrames;\n    }\n\n    if (this.meshWeapon) {\n      this.meshWeapon.setAnimationWeight(animationName, 0);\n      this.meshWeapon.playAnimation(animationName);\n    }\n  };\n\n  this.update = function (delta) {\n    if (this.controls) this.updateMovementModel(delta);\n\n    if (this.animations) {\n      this.updateBehaviors();\n      this.updateAnimations(delta);\n    }\n  };\n\n  this.updateAnimations = function (delta) {\n    var mix = 1;\n\n    if (this.blendCounter > 0) {\n      mix = (this.transitionFrames - this.blendCounter) / this.transitionFrames;\n      this.blendCounter -= 1;\n    }\n\n    if (this.meshBody) {\n      this.meshBody.update(delta);\n      this.meshBody.setAnimationWeight(this.activeAnimation, mix);\n      this.meshBody.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n\n    if (this.meshWeapon) {\n      this.meshWeapon.update(delta);\n      this.meshWeapon.setAnimationWeight(this.activeAnimation, mix);\n      this.meshWeapon.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n  };\n\n  this.updateBehaviors = function () {\n    var controls = this.controls;\n    var animations = this.animations;\n    var moveAnimation, idleAnimation; // crouch vs stand\n\n    if (controls.crouch) {\n      moveAnimation = animations['crouchMove'];\n      idleAnimation = animations['crouchIdle'];\n    } else {\n      moveAnimation = animations['move'];\n      idleAnimation = animations['idle'];\n    } // actions\n\n\n    if (controls.jump) {\n      moveAnimation = animations['jump'];\n      idleAnimation = animations['jump'];\n    }\n\n    if (controls.attack) {\n      if (controls.crouch) {\n        moveAnimation = animations['crouchAttack'];\n        idleAnimation = animations['crouchAttack'];\n      } else {\n        moveAnimation = animations['attack'];\n        idleAnimation = animations['attack'];\n      }\n    } // set animations\n\n\n    if (controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight) {\n      if (this.activeAnimation !== moveAnimation) {\n        this.setAnimation(moveAnimation);\n      }\n    }\n\n    if (Math.abs(this.speed) < 0.2 * this.maxSpeed && !(controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward)) {\n      if (this.activeAnimation !== idleAnimation) {\n        this.setAnimation(idleAnimation);\n      }\n    } // set animation direction\n\n\n    if (controls.moveForward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionForward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionForward(this.oldAnimation);\n      }\n\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionForward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionForward(this.oldAnimation);\n      }\n    }\n\n    if (controls.moveBackward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionBackward(this.oldAnimation);\n      }\n\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation);\n      }\n    }\n  };\n\n  this.updateMovementModel = function (delta) {\n    var controls = this.controls; // speed based on controls\n\n    if (controls.crouch) this.maxSpeed = this.crouchSpeed;else this.maxSpeed = this.walkSpeed;\n    this.maxReverseSpeed = -this.maxSpeed;\n\n    if (controls.moveForward) {\n      this.speed = MathUtils.clamp(this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    }\n\n    if (controls.moveBackward) {\n      this.speed = MathUtils.clamp(this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    } // orientation based on controls\n    // (don't just stand while turning)\n\n\n    var dir = 1;\n\n    if (controls.moveLeft) {\n      this.bodyOrientation += delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    }\n\n    if (controls.moveRight) {\n      this.bodyOrientation -= delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    } // speed decay\n\n\n    if (!(controls.moveForward || controls.moveBackward)) {\n      if (this.speed > 0) {\n        var k = exponentialEaseOut(this.speed / this.maxSpeed);\n        this.speed = MathUtils.clamp(this.speed - k * delta * this.frontDecceleration, 0, this.maxSpeed);\n      } else {\n        var k = exponentialEaseOut(this.speed / this.maxReverseSpeed);\n        this.speed = MathUtils.clamp(this.speed + k * delta * this.backAcceleration, this.maxReverseSpeed, 0);\n      }\n    } // displacement\n\n\n    var forwardDelta = this.speed * delta;\n    this.root.position.x += Math.sin(this.bodyOrientation) * forwardDelta;\n    this.root.position.z += Math.cos(this.bodyOrientation) * forwardDelta; // steering\n\n    this.root.rotation.y = this.bodyOrientation;\n  }; // internal helpers\n\n\n  function loadTextures(baseUrl, textureUrls) {\n    var textureLoader = new TextureLoader();\n    var textures = [];\n\n    for (let i = 0; i < textureUrls.length; i++) {\n      textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n      textures[i].mapping = UVMapping;\n      textures[i].name = textureUrls[i];\n      textures[i].encoding = sRGBEncoding;\n    }\n\n    return textures;\n  }\n\n  function createPart(geometry, skinMap) {\n    var materialWireframe = new MeshLambertMaterial({\n      color: 0xffaa00,\n      wireframe: true,\n      morphTargets: true,\n      morphNormals: true\n    });\n    var materialTexture = new MeshLambertMaterial({\n      color: 0xffffff,\n      wireframe: false,\n      map: skinMap,\n      morphTargets: true,\n      morphNormals: true\n    }); //\n\n    var mesh = new MorphBlendMesh(geometry, materialTexture);\n    mesh.rotation.y = -Math.PI / 2; //\n\n    mesh.materialTexture = materialTexture;\n    mesh.materialWireframe = materialWireframe; //\n\n    mesh.autoCreateAnimations(scope.animationFPS);\n    return mesh;\n  }\n\n  function checkLoadingComplete() {\n    scope.loadCounter -= 1;\n    if (scope.loadCounter === 0) scope.onLoadComplete();\n  }\n\n  function exponentialEaseOut(k) {\n    return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1;\n  }\n};\n\nexport { MD2CharacterComplex };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}