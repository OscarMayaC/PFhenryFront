{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from 'three';\n\n/**\n * Autodesk 3DS three.js file loader, based on lib3ds.\n *\n * Loads geometry with uv and materials basic properties with texture support.\n *\n * @class TDSLoader\n * @constructor\n */\n\nclass TDSLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.debug = false;\n    this.group = null;\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n  }\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  /**\n   * Parse arraybuffer data and load 3ds file.\n   *\n   * @method parse\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   * @return {Group} Group loaded from 3ds file.\n   */\n\n  parse(arraybuffer, path) {\n    this.group = new Group();\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n    this.readFile(arraybuffer, path);\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.group.add(this.meshes[i]);\n    }\n    return this.group;\n  }\n  /**\n   * Decode file content to read 3ds data.\n   *\n   * @method readFile\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   */\n\n  readFile(arraybuffer, path) {\n    const data = new DataView(arraybuffer);\n    const chunk = this.readChunk(data);\n    if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n      let next = this.nextChunk(data, chunk);\n      while (next !== 0) {\n        if (next === M3D_VERSION) {\n          const version = this.readDWord(data);\n          this.debugMessage('3DS file version: ' + version);\n        } else if (next === MDATA) {\n          this.resetPosition(data);\n          this.readMeshData(data, path);\n        } else {\n          this.debugMessage('Unknown main chunk: ' + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n    }\n    this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMeshData\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n\n  readMeshData(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    while (next !== 0) {\n      if (next === MESH_VERSION) {\n        const version = +this.readDWord(data);\n        this.debugMessage('Mesh Version: ' + version);\n      } else if (next === MASTER_SCALE) {\n        const scale = this.readFloat(data);\n        this.debugMessage('Master scale: ' + scale);\n        this.group.scale.set(scale, scale, scale);\n      } else if (next === NAMED_OBJECT) {\n        this.debugMessage('Named Object');\n        this.resetPosition(data);\n        this.readNamedObject(data);\n      } else if (next === MAT_ENTRY) {\n        this.debugMessage('Material');\n        this.resetPosition(data);\n        this.readMaterialEntry(data, path);\n      } else {\n        this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n  }\n  /**\n   * Read named object chunk.\n   *\n   * @method readNamedObject\n   * @param {Dataview} data Dataview in use.\n   */\n\n  readNamedObject(data) {\n    const chunk = this.readChunk(data);\n    const name = this.readString(data, 64);\n    chunk.cur = this.position;\n    let next = this.nextChunk(data, chunk);\n    while (next !== 0) {\n      if (next === N_TRI_OBJECT) {\n        this.resetPosition(data);\n        const mesh = this.readMesh(data);\n        mesh.name = name;\n        this.meshes.push(mesh);\n      } else {\n        this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n  }\n  /**\n   * Read material data chunk and add it to the material list.\n   *\n   * @method readMaterialEntry\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n\n  readMaterialEntry(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const material = new MeshPhongMaterial();\n    while (next !== 0) {\n      if (next === MAT_NAME) {\n        material.name = this.readString(data, 64);\n        this.debugMessage('   Name: ' + material.name);\n      } else if (next === MAT_WIRE) {\n        this.debugMessage('   Wireframe');\n        material.wireframe = true;\n      } else if (next === MAT_WIRE_SIZE) {\n        const value = this.readByte(data);\n        material.wireframeLinewidth = value;\n        this.debugMessage('   Wireframe Thickness: ' + value);\n      } else if (next === MAT_TWO_SIDE) {\n        material.side = DoubleSide;\n        this.debugMessage('   DoubleSided');\n      } else if (next === MAT_ADDITIVE) {\n        this.debugMessage('   Additive Blending');\n        material.blending = AdditiveBlending;\n      } else if (next === MAT_DIFFUSE) {\n        this.debugMessage('   Diffuse Color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SPECULAR) {\n        this.debugMessage('   Specular Color');\n        material.specular = this.readColor(data);\n      } else if (next === MAT_AMBIENT) {\n        this.debugMessage('   Ambient color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SHININESS) {\n        const shininess = this.readPercentage(data);\n        material.shininess = shininess * 100;\n        this.debugMessage('   Shininess : ' + shininess);\n      } else if (next === MAT_TRANSPARENCY) {\n        const transparency = this.readPercentage(data);\n        material.opacity = 1 - transparency;\n        this.debugMessage('  Transparency : ' + transparency);\n        material.transparent = material.opacity < 1 ? true : false;\n      } else if (next === MAT_TEXMAP) {\n        this.debugMessage('   ColorMap');\n        this.resetPosition(data);\n        material.map = this.readMap(data, path);\n      } else if (next === MAT_BUMPMAP) {\n        this.debugMessage('   BumpMap');\n        this.resetPosition(data);\n        material.bumpMap = this.readMap(data, path);\n      } else if (next === MAT_OPACMAP) {\n        this.debugMessage('   OpacityMap');\n        this.resetPosition(data);\n        material.alphaMap = this.readMap(data, path);\n      } else if (next === MAT_SPECMAP) {\n        this.debugMessage('   SpecularMap');\n        this.resetPosition(data);\n        material.specularMap = this.readMap(data, path);\n      } else {\n        this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    this.materials[material.name] = material;\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMesh\n   * @param {Dataview} data Dataview in use.\n   * @return {Mesh} The parsed mesh.\n   */\n\n  readMesh(data) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const geometry = new BufferGeometry();\n    const material = new MeshPhongMaterial();\n    const mesh = new Mesh(geometry, material);\n    mesh.name = 'mesh';\n    while (next !== 0) {\n      if (next === POINT_ARRAY) {\n        const points = this.readWord(data);\n        this.debugMessage('   Vertex: ' + points); //BufferGeometry\n\n        const vertices = [];\n        for (let i = 0; i < points; i++) {\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n        }\n        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      } else if (next === FACE_ARRAY) {\n        this.resetPosition(data);\n        this.readFaceArray(data, mesh);\n      } else if (next === TEX_VERTS) {\n        const texels = this.readWord(data);\n        this.debugMessage('   UV: ' + texels); //BufferGeometry\n\n        const uvs = [];\n        for (let i = 0; i < texels; i++) {\n          uvs.push(this.readFloat(data));\n          uvs.push(this.readFloat(data));\n        }\n        geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      } else if (next === MESH_MATRIX) {\n        this.debugMessage('   Tranformation Matrix (TODO)');\n        const values = [];\n        for (let i = 0; i < 12; i++) {\n          values[i] = this.readFloat(data);\n        }\n        const matrix = new Matrix4(); //X Line\n\n        matrix.elements[0] = values[0];\n        matrix.elements[1] = values[6];\n        matrix.elements[2] = values[3];\n        matrix.elements[3] = values[9]; //Y Line\n\n        matrix.elements[4] = values[2];\n        matrix.elements[5] = values[8];\n        matrix.elements[6] = values[5];\n        matrix.elements[7] = values[11]; //Z Line\n\n        matrix.elements[8] = values[1];\n        matrix.elements[9] = values[7];\n        matrix.elements[10] = values[4];\n        matrix.elements[11] = values[10]; //W Line\n\n        matrix.elements[12] = 0;\n        matrix.elements[13] = 0;\n        matrix.elements[14] = 0;\n        matrix.elements[15] = 1;\n        matrix.transpose();\n        const inverse = new Matrix4();\n        inverse.copy(matrix).invert();\n        geometry.applyMatrix4(inverse);\n        matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n      } else {\n        this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    geometry.computeVertexNormals();\n    return mesh;\n  }\n  /**\n   * Read face array data chunk.\n   *\n   * @method readFaceArray\n   * @param {Dataview} data Dataview in use.\n   * @param {Mesh} mesh Mesh to be filled with the data read.\n   */\n\n  readFaceArray(data, mesh) {\n    const chunk = this.readChunk(data);\n    const faces = this.readWord(data);\n    this.debugMessage('   Faces: ' + faces);\n    const index = [];\n    for (let i = 0; i < faces; ++i) {\n      index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n      this.readWord(data); // visibility\n    }\n\n    mesh.geometry.setIndex(index); //The rest of the FACE_ARRAY chunk is subchunks\n\n    let materialIndex = 0;\n    let start = 0;\n    while (this.position < chunk.end) {\n      const subchunk = this.readChunk(data);\n      if (subchunk.id === MSH_MAT_GROUP) {\n        this.debugMessage('      Material Group');\n        this.resetPosition(data);\n        const group = this.readMaterialGroup(data);\n        const count = group.index.length * 3; // assuming successive indices\n\n        mesh.geometry.addGroup(start, count, materialIndex);\n        start += count;\n        materialIndex++;\n        const material = this.materials[group.name];\n        if (Array.isArray(mesh.material) === false) mesh.material = [];\n        if (material !== undefined) {\n          mesh.material.push(material);\n        }\n      } else {\n        this.debugMessage('      Unknown face array chunk: ' + subchunk.toString(16));\n      }\n      this.endChunk(subchunk);\n    }\n    if (mesh.material.length === 1) mesh.material = mesh.material[0]; // for backwards compatibility\n\n    this.endChunk(chunk);\n  }\n  /**\n   * Read texture map data chunk.\n   *\n   * @method readMap\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   * @return {Texture} Texture read from this data chunk.\n   */\n\n  readMap(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    let texture = {};\n    const loader = new TextureLoader(this.manager);\n    loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    while (next !== 0) {\n      if (next === MAT_MAPNAME) {\n        const name = this.readString(data, 128);\n        texture = loader.load(name);\n        this.debugMessage('      File: ' + path + name);\n      } else if (next === MAT_MAP_UOFFSET) {\n        texture.offset.x = this.readFloat(data);\n        this.debugMessage('      OffsetX: ' + texture.offset.x);\n      } else if (next === MAT_MAP_VOFFSET) {\n        texture.offset.y = this.readFloat(data);\n        this.debugMessage('      OffsetY: ' + texture.offset.y);\n      } else if (next === MAT_MAP_USCALE) {\n        texture.repeat.x = this.readFloat(data);\n        this.debugMessage('      RepeatX: ' + texture.repeat.x);\n      } else if (next === MAT_MAP_VSCALE) {\n        texture.repeat.y = this.readFloat(data);\n        this.debugMessage('      RepeatY: ' + texture.repeat.y);\n      } else {\n        this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    return texture;\n  }\n  /**\n   * Read material group data chunk.\n   *\n   * @method readMaterialGroup\n   * @param {Dataview} data Dataview in use.\n   * @return {Object} Object with name and index of the object.\n   */\n\n  readMaterialGroup(data) {\n    this.readChunk(data);\n    const name = this.readString(data, 64);\n    const numFaces = this.readWord(data);\n    this.debugMessage('         Name: ' + name);\n    this.debugMessage('         Faces: ' + numFaces);\n    const index = [];\n    for (let i = 0; i < numFaces; ++i) {\n      index.push(this.readWord(data));\n    }\n    return {\n      name: name,\n      index: index\n    };\n  }\n  /**\n   * Read a color value.\n   *\n   * @method readColor\n   * @param {DataView} data Dataview.\n   * @return {Color} Color value read..\n   */\n\n  readColor(data) {\n    const chunk = this.readChunk(data);\n    const color = new Color();\n    if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n      const r = this.readByte(data);\n      const g = this.readByte(data);\n      const b = this.readByte(data);\n      color.setRGB(r / 255, g / 255, b / 255);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n      const r = this.readFloat(data);\n      const g = this.readFloat(data);\n      const b = this.readFloat(data);\n      color.setRGB(r, g, b);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else {\n      this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n    }\n    this.endChunk(chunk);\n    return color;\n  }\n  /**\n   * Read next chunk of data.\n   *\n   * @method readChunk\n   * @param {DataView} data Dataview.\n   * @return {Object} Chunk of data read.\n   */\n\n  readChunk(data) {\n    const chunk = {};\n    chunk.cur = this.position;\n    chunk.id = this.readWord(data);\n    chunk.size = this.readDWord(data);\n    chunk.end = chunk.cur + chunk.size;\n    chunk.cur += 6;\n    return chunk;\n  }\n  /**\n   * Set position to the end of the current chunk of data.\n   *\n   * @method endChunk\n   * @param {Object} chunk Data chunk.\n   */\n\n  endChunk(chunk) {\n    this.position = chunk.end;\n  }\n  /**\n   * Move to the next data chunk.\n   *\n   * @method nextChunk\n   * @param {DataView} data Dataview.\n   * @param {Object} chunk Data chunk.\n   */\n\n  nextChunk(data, chunk) {\n    if (chunk.cur >= chunk.end) {\n      return 0;\n    }\n    this.position = chunk.cur;\n    try {\n      const next = this.readChunk(data);\n      chunk.cur += next.size;\n      return next.id;\n    } catch (e) {\n      this.debugMessage('Unable to read chunk at ' + this.position);\n      return 0;\n    }\n  }\n  /**\n   * Reset dataview position.\n   *\n   * @method resetPosition\n   */\n\n  resetPosition() {\n    this.position -= 6;\n  }\n  /**\n   * Read byte value.\n   *\n   * @method readByte\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n  readByte(data) {\n    const v = data.getUint8(this.position, true);\n    this.position += 1;\n    return v;\n  }\n  /**\n   * Read 32 bit float value.\n   *\n   * @method readFloat\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n  readFloat(data) {\n    try {\n      const v = data.getFloat32(this.position, true);\n      this.position += 4;\n      return v;\n    } catch (e) {\n      this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n    }\n  }\n  /**\n   * Read 32 bit signed integer value.\n   *\n   * @method readInt\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n  readInt(data) {\n    const v = data.getInt32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 16 bit signed integer value.\n   *\n   * @method readShort\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n  readShort(data) {\n    const v = data.getInt16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read 64 bit unsigned integer value.\n   *\n   * @method readDWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n  readDWord(data) {\n    const v = data.getUint32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 32 bit unsigned integer value.\n   *\n   * @method readWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n  readWord(data) {\n    const v = data.getUint16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read string value.\n   *\n   * @method readString\n   * @param {DataView} data Dataview to read data from.\n   * @param {Number} maxLength Max size of the string to be read.\n   * @return {String} Data read from the dataview.\n   */\n\n  readString(data, maxLength) {\n    let s = '';\n    for (let i = 0; i < maxLength; i++) {\n      const c = this.readByte(data);\n      if (!c) {\n        break;\n      }\n      s += String.fromCharCode(c);\n    }\n    return s;\n  }\n  /**\n   * Read percentage value.\n   *\n   * @method readPercentage\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n  readPercentage(data) {\n    const chunk = this.readChunk(data);\n    let value;\n    switch (chunk.id) {\n      case INT_PERCENTAGE:\n        value = this.readShort(data) / 100;\n        break;\n      case FLOAT_PERCENTAGE:\n        value = this.readFloat(data);\n        break;\n      default:\n        this.debugMessage('      Unknown percentage chunk: ' + chunk.toString(16));\n    }\n    this.endChunk(chunk);\n    return value;\n  }\n  /**\n   * Print debug message to the console.\n   *\n   * Is controlled by a flag to show or hide debug messages.\n   *\n   * @method debugMessage\n   * @param {Object} message Debug message to print to the console.\n   */\n\n  debugMessage(message) {\n    if (this.debug) {\n      console.log(message);\n    }\n  }\n} // const NULL_CHUNK = 0x0000;\n\nconst M3DMAGIC = 0x4d4d; // const SMAGIC = 0x2D2D;\n// const LMAGIC = 0x2D3D;\n\nconst MLIBMAGIC = 0x3daa; // const MATMAGIC = 0x3DFF;\n\nconst CMAGIC = 0xc23d;\nconst M3D_VERSION = 0x0002; // const M3D_KFVERSION = 0x0005;\n\nconst COLOR_F = 0x0010;\nconst COLOR_24 = 0x0011;\nconst LIN_COLOR_24 = 0x0012;\nconst LIN_COLOR_F = 0x0013;\nconst INT_PERCENTAGE = 0x0030;\nconst FLOAT_PERCENTAGE = 0x0031;\nconst MDATA = 0x3d3d;\nconst MESH_VERSION = 0x3d3e;\nconst MASTER_SCALE = 0x0100; // const LO_SHADOW_BIAS = 0x1400;\n// const HI_SHADOW_BIAS = 0x1410;\n// const SHADOW_MAP_SIZE = 0x1420;\n// const SHADOW_SAMPLES = 0x1430;\n// const SHADOW_RANGE = 0x1440;\n// const SHADOW_FILTER = 0x1450;\n// const RAY_BIAS = 0x1460;\n// const O_CONSTS = 0x1500;\n// const AMBIENT_LIGHT = 0x2100;\n// const BIT_MAP = 0x1100;\n// const SOLID_BGND = 0x1200;\n// const V_GRADIENT = 0x1300;\n// const USE_BIT_MAP = 0x1101;\n// const USE_SOLID_BGND = 0x1201;\n// const USE_V_GRADIENT = 0x1301;\n// const FOG = 0x2200;\n// const FOG_BGND = 0x2210;\n// const LAYER_FOG = 0x2302;\n// const DISTANCE_CUE = 0x2300;\n// const DCUE_BGND = 0x2310;\n// const USE_FOG = 0x2201;\n// const USE_LAYER_FOG = 0x2303;\n// const USE_DISTANCE_CUE = 0x2301;\n\nconst MAT_ENTRY = 0xafff;\nconst MAT_NAME = 0xa000;\nconst MAT_AMBIENT = 0xa010;\nconst MAT_DIFFUSE = 0xa020;\nconst MAT_SPECULAR = 0xa030;\nconst MAT_SHININESS = 0xa040; // const MAT_SHIN2PCT = 0xA041;\n\nconst MAT_TRANSPARENCY = 0xa050; // const MAT_XPFALL = 0xA052;\n// const MAT_USE_XPFALL = 0xA240;\n// const MAT_REFBLUR = 0xA053;\n// const MAT_SHADING = 0xA100;\n// const MAT_USE_REFBLUR = 0xA250;\n// const MAT_SELF_ILLUM = 0xA084;\n\nconst MAT_TWO_SIDE = 0xa081; // const MAT_DECAL = 0xA082;\n\nconst MAT_ADDITIVE = 0xa083;\nconst MAT_WIRE = 0xa085; // const MAT_FACEMAP = 0xA088;\n// const MAT_TRANSFALLOFF_IN = 0xA08A;\n// const MAT_PHONGSOFT = 0xA08C;\n// const MAT_WIREABS = 0xA08E;\n\nconst MAT_WIRE_SIZE = 0xa087;\nconst MAT_TEXMAP = 0xa200; // const MAT_SXP_TEXT_DATA = 0xA320;\n// const MAT_TEXMASK = 0xA33E;\n// const MAT_SXP_TEXTMASK_DATA = 0xA32A;\n// const MAT_TEX2MAP = 0xA33A;\n// const MAT_SXP_TEXT2_DATA = 0xA321;\n// const MAT_TEX2MASK = 0xA340;\n// const MAT_SXP_TEXT2MASK_DATA = 0xA32C;\n\nconst MAT_OPACMAP = 0xa210; // const MAT_SXP_OPAC_DATA = 0xA322;\n// const MAT_OPACMASK = 0xA342;\n// const MAT_SXP_OPACMASK_DATA = 0xA32E;\n\nconst MAT_BUMPMAP = 0xa230; // const MAT_SXP_BUMP_DATA = 0xA324;\n// const MAT_BUMPMASK = 0xA344;\n// const MAT_SXP_BUMPMASK_DATA = 0xA330;\n\nconst MAT_SPECMAP = 0xa204; // const MAT_SXP_SPEC_DATA = 0xA325;\n// const MAT_SPECMASK = 0xA348;\n// const MAT_SXP_SPECMASK_DATA = 0xA332;\n// const MAT_SHINMAP = 0xA33C;\n// const MAT_SXP_SHIN_DATA = 0xA326;\n// const MAT_SHINMASK = 0xA346;\n// const MAT_SXP_SHINMASK_DATA = 0xA334;\n// const MAT_SELFIMAP = 0xA33D;\n// const MAT_SXP_SELFI_DATA = 0xA328;\n// const MAT_SELFIMASK = 0xA34A;\n// const MAT_SXP_SELFIMASK_DATA = 0xA336;\n// const MAT_REFLMAP = 0xA220;\n// const MAT_REFLMASK = 0xA34C;\n// const MAT_SXP_REFLMASK_DATA = 0xA338;\n// const MAT_ACUBIC = 0xA310;\n\nconst MAT_MAPNAME = 0xa300; // const MAT_MAP_TILING = 0xA351;\n// const MAT_MAP_TEXBLUR = 0xA353;\n\nconst MAT_MAP_USCALE = 0xa354;\nconst MAT_MAP_VSCALE = 0xa356;\nconst MAT_MAP_UOFFSET = 0xa358;\nconst MAT_MAP_VOFFSET = 0xa35a; // const MAT_MAP_ANG = 0xA35C;\n// const MAT_MAP_COL1 = 0xA360;\n// const MAT_MAP_COL2 = 0xA362;\n// const MAT_MAP_RCOL = 0xA364;\n// const MAT_MAP_GCOL = 0xA366;\n// const MAT_MAP_BCOL = 0xA368;\n\nconst NAMED_OBJECT = 0x4000; // const N_DIRECT_LIGHT = 0x4600;\n// const DL_OFF = 0x4620;\n// const DL_OUTER_RANGE = 0x465A;\n// const DL_INNER_RANGE = 0x4659;\n// const DL_MULTIPLIER = 0x465B;\n// const DL_EXCLUDE = 0x4654;\n// const DL_ATTENUATE = 0x4625;\n// const DL_SPOTLIGHT = 0x4610;\n// const DL_SPOT_ROLL = 0x4656;\n// const DL_SHADOWED = 0x4630;\n// const DL_LOCAL_SHADOW2 = 0x4641;\n// const DL_SEE_CONE = 0x4650;\n// const DL_SPOT_RECTANGULAR = 0x4651;\n// const DL_SPOT_ASPECT = 0x4657;\n// const DL_SPOT_PROJECTOR = 0x4653;\n// const DL_SPOT_OVERSHOOT = 0x4652;\n// const DL_RAY_BIAS = 0x4658;\n// const DL_RAYSHAD = 0x4627;\n// const N_CAMERA = 0x4700;\n// const CAM_SEE_CONE = 0x4710;\n// const CAM_RANGES = 0x4720;\n// const OBJ_HIDDEN = 0x4010;\n// const OBJ_VIS_LOFTER = 0x4011;\n// const OBJ_DOESNT_CAST = 0x4012;\n// const OBJ_DONT_RECVSHADOW = 0x4017;\n// const OBJ_MATTE = 0x4013;\n// const OBJ_FAST = 0x4014;\n// const OBJ_PROCEDURAL = 0x4015;\n// const OBJ_FROZEN = 0x4016;\n\nconst N_TRI_OBJECT = 0x4100;\nconst POINT_ARRAY = 0x4110; // const POINT_FLAG_ARRAY = 0x4111;\n\nconst FACE_ARRAY = 0x4120;\nconst MSH_MAT_GROUP = 0x4130; // const SMOOTH_GROUP = 0x4150;\n// const MSH_BOXMAP = 0x4190;\n\nconst TEX_VERTS = 0x4140;\nconst MESH_MATRIX = 0x4160; // const MESH_COLOR = 0x4165;\n\nexport { TDSLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","Group","MeshPhongMaterial","DoubleSide","AdditiveBlending","BufferGeometry","Mesh","Float32BufferAttribute","Matrix4","TextureLoader","Color","TDSLoader","constructor","manager","debug","group","position","materials","meshes","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","data","parse","e","console","error","itemError","arraybuffer","readFile","i","length","add","DataView","chunk","readChunk","id","MLIBMAGIC","CMAGIC","M3DMAGIC","next","nextChunk","M3D_VERSION","version","readDWord","debugMessage","MDATA","resetPosition","readMeshData","toString","MESH_VERSION","MASTER_SCALE","scale","readFloat","set","NAMED_OBJECT","readNamedObject","MAT_ENTRY","readMaterialEntry","name","readString","cur","N_TRI_OBJECT","mesh","readMesh","push","endChunk","material","MAT_NAME","MAT_WIRE","wireframe","MAT_WIRE_SIZE","value","readByte","wireframeLinewidth","MAT_TWO_SIDE","side","MAT_ADDITIVE","blending","MAT_DIFFUSE","color","readColor","MAT_SPECULAR","specular","MAT_AMBIENT","MAT_SHININESS","shininess","readPercentage","MAT_TRANSPARENCY","transparency","opacity","transparent","MAT_TEXMAP","map","readMap","MAT_BUMPMAP","bumpMap","MAT_OPACMAP","alphaMap","MAT_SPECMAP","specularMap","geometry","POINT_ARRAY","points","readWord","vertices","setAttribute","FACE_ARRAY","readFaceArray","TEX_VERTS","texels","uvs","MESH_MATRIX","values","matrix","elements","transpose","inverse","copy","invert","applyMatrix4","decompose","quaternion","computeVertexNormals","faces","index","setIndex","materialIndex","start","end","subchunk","MSH_MAT_GROUP","readMaterialGroup","count","addGroup","Array","isArray","undefined","texture","resourcePath","setCrossOrigin","crossOrigin","MAT_MAPNAME","MAT_MAP_UOFFSET","offset","x","MAT_MAP_VOFFSET","y","MAT_MAP_USCALE","repeat","MAT_MAP_VSCALE","numFaces","COLOR_24","LIN_COLOR_24","r","g","b","setRGB","COLOR_F","LIN_COLOR_F","size","v","getUint8","getFloat32","byteLength","readInt","getInt32","readShort","getInt16","getUint32","getUint16","maxLength","s","c","String","fromCharCode","INT_PERCENTAGE","FLOAT_PERCENTAGE","message","log"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/loaders/TDSLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from 'three';\n\n/**\n * Autodesk 3DS three.js file loader, based on lib3ds.\n *\n * Loads geometry with uv and materials basic properties with texture support.\n *\n * @class TDSLoader\n * @constructor\n */\n\nclass TDSLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.debug = false;\n    this.group = null;\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n  }\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  /**\n   * Parse arraybuffer data and load 3ds file.\n   *\n   * @method parse\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   * @return {Group} Group loaded from 3ds file.\n   */\n\n\n  parse(arraybuffer, path) {\n    this.group = new Group();\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n    this.readFile(arraybuffer, path);\n\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.group.add(this.meshes[i]);\n    }\n\n    return this.group;\n  }\n  /**\n   * Decode file content to read 3ds data.\n   *\n   * @method readFile\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   */\n\n\n  readFile(arraybuffer, path) {\n    const data = new DataView(arraybuffer);\n    const chunk = this.readChunk(data);\n\n    if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n      let next = this.nextChunk(data, chunk);\n\n      while (next !== 0) {\n        if (next === M3D_VERSION) {\n          const version = this.readDWord(data);\n          this.debugMessage('3DS file version: ' + version);\n        } else if (next === MDATA) {\n          this.resetPosition(data);\n          this.readMeshData(data, path);\n        } else {\n          this.debugMessage('Unknown main chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n    }\n\n    this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMeshData\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n\n\n  readMeshData(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n\n    while (next !== 0) {\n      if (next === MESH_VERSION) {\n        const version = +this.readDWord(data);\n        this.debugMessage('Mesh Version: ' + version);\n      } else if (next === MASTER_SCALE) {\n        const scale = this.readFloat(data);\n        this.debugMessage('Master scale: ' + scale);\n        this.group.scale.set(scale, scale, scale);\n      } else if (next === NAMED_OBJECT) {\n        this.debugMessage('Named Object');\n        this.resetPosition(data);\n        this.readNamedObject(data);\n      } else if (next === MAT_ENTRY) {\n        this.debugMessage('Material');\n        this.resetPosition(data);\n        this.readMaterialEntry(data, path);\n      } else {\n        this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n  }\n  /**\n   * Read named object chunk.\n   *\n   * @method readNamedObject\n   * @param {Dataview} data Dataview in use.\n   */\n\n\n  readNamedObject(data) {\n    const chunk = this.readChunk(data);\n    const name = this.readString(data, 64);\n    chunk.cur = this.position;\n    let next = this.nextChunk(data, chunk);\n\n    while (next !== 0) {\n      if (next === N_TRI_OBJECT) {\n        this.resetPosition(data);\n        const mesh = this.readMesh(data);\n        mesh.name = name;\n        this.meshes.push(mesh);\n      } else {\n        this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n  }\n  /**\n   * Read material data chunk and add it to the material list.\n   *\n   * @method readMaterialEntry\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n\n\n  readMaterialEntry(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const material = new MeshPhongMaterial();\n\n    while (next !== 0) {\n      if (next === MAT_NAME) {\n        material.name = this.readString(data, 64);\n        this.debugMessage('   Name: ' + material.name);\n      } else if (next === MAT_WIRE) {\n        this.debugMessage('   Wireframe');\n        material.wireframe = true;\n      } else if (next === MAT_WIRE_SIZE) {\n        const value = this.readByte(data);\n        material.wireframeLinewidth = value;\n        this.debugMessage('   Wireframe Thickness: ' + value);\n      } else if (next === MAT_TWO_SIDE) {\n        material.side = DoubleSide;\n        this.debugMessage('   DoubleSided');\n      } else if (next === MAT_ADDITIVE) {\n        this.debugMessage('   Additive Blending');\n        material.blending = AdditiveBlending;\n      } else if (next === MAT_DIFFUSE) {\n        this.debugMessage('   Diffuse Color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SPECULAR) {\n        this.debugMessage('   Specular Color');\n        material.specular = this.readColor(data);\n      } else if (next === MAT_AMBIENT) {\n        this.debugMessage('   Ambient color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SHININESS) {\n        const shininess = this.readPercentage(data);\n        material.shininess = shininess * 100;\n        this.debugMessage('   Shininess : ' + shininess);\n      } else if (next === MAT_TRANSPARENCY) {\n        const transparency = this.readPercentage(data);\n        material.opacity = 1 - transparency;\n        this.debugMessage('  Transparency : ' + transparency);\n        material.transparent = material.opacity < 1 ? true : false;\n      } else if (next === MAT_TEXMAP) {\n        this.debugMessage('   ColorMap');\n        this.resetPosition(data);\n        material.map = this.readMap(data, path);\n      } else if (next === MAT_BUMPMAP) {\n        this.debugMessage('   BumpMap');\n        this.resetPosition(data);\n        material.bumpMap = this.readMap(data, path);\n      } else if (next === MAT_OPACMAP) {\n        this.debugMessage('   OpacityMap');\n        this.resetPosition(data);\n        material.alphaMap = this.readMap(data, path);\n      } else if (next === MAT_SPECMAP) {\n        this.debugMessage('   SpecularMap');\n        this.resetPosition(data);\n        material.specularMap = this.readMap(data, path);\n      } else {\n        this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    this.materials[material.name] = material;\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMesh\n   * @param {Dataview} data Dataview in use.\n   * @return {Mesh} The parsed mesh.\n   */\n\n\n  readMesh(data) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const geometry = new BufferGeometry();\n    const material = new MeshPhongMaterial();\n    const mesh = new Mesh(geometry, material);\n    mesh.name = 'mesh';\n\n    while (next !== 0) {\n      if (next === POINT_ARRAY) {\n        const points = this.readWord(data);\n        this.debugMessage('   Vertex: ' + points); //BufferGeometry\n\n        const vertices = [];\n\n        for (let i = 0; i < points; i++) {\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      } else if (next === FACE_ARRAY) {\n        this.resetPosition(data);\n        this.readFaceArray(data, mesh);\n      } else if (next === TEX_VERTS) {\n        const texels = this.readWord(data);\n        this.debugMessage('   UV: ' + texels); //BufferGeometry\n\n        const uvs = [];\n\n        for (let i = 0; i < texels; i++) {\n          uvs.push(this.readFloat(data));\n          uvs.push(this.readFloat(data));\n        }\n\n        geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      } else if (next === MESH_MATRIX) {\n        this.debugMessage('   Tranformation Matrix (TODO)');\n        const values = [];\n\n        for (let i = 0; i < 12; i++) {\n          values[i] = this.readFloat(data);\n        }\n\n        const matrix = new Matrix4(); //X Line\n\n        matrix.elements[0] = values[0];\n        matrix.elements[1] = values[6];\n        matrix.elements[2] = values[3];\n        matrix.elements[3] = values[9]; //Y Line\n\n        matrix.elements[4] = values[2];\n        matrix.elements[5] = values[8];\n        matrix.elements[6] = values[5];\n        matrix.elements[7] = values[11]; //Z Line\n\n        matrix.elements[8] = values[1];\n        matrix.elements[9] = values[7];\n        matrix.elements[10] = values[4];\n        matrix.elements[11] = values[10]; //W Line\n\n        matrix.elements[12] = 0;\n        matrix.elements[13] = 0;\n        matrix.elements[14] = 0;\n        matrix.elements[15] = 1;\n        matrix.transpose();\n        const inverse = new Matrix4();\n        inverse.copy(matrix).invert();\n        geometry.applyMatrix4(inverse);\n        matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n      } else {\n        this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    geometry.computeVertexNormals();\n    return mesh;\n  }\n  /**\n   * Read face array data chunk.\n   *\n   * @method readFaceArray\n   * @param {Dataview} data Dataview in use.\n   * @param {Mesh} mesh Mesh to be filled with the data read.\n   */\n\n\n  readFaceArray(data, mesh) {\n    const chunk = this.readChunk(data);\n    const faces = this.readWord(data);\n    this.debugMessage('   Faces: ' + faces);\n    const index = [];\n\n    for (let i = 0; i < faces; ++i) {\n      index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n      this.readWord(data); // visibility\n    }\n\n    mesh.geometry.setIndex(index); //The rest of the FACE_ARRAY chunk is subchunks\n\n    let materialIndex = 0;\n    let start = 0;\n\n    while (this.position < chunk.end) {\n      const subchunk = this.readChunk(data);\n\n      if (subchunk.id === MSH_MAT_GROUP) {\n        this.debugMessage('      Material Group');\n        this.resetPosition(data);\n        const group = this.readMaterialGroup(data);\n        const count = group.index.length * 3; // assuming successive indices\n\n        mesh.geometry.addGroup(start, count, materialIndex);\n        start += count;\n        materialIndex++;\n        const material = this.materials[group.name];\n        if (Array.isArray(mesh.material) === false) mesh.material = [];\n\n        if (material !== undefined) {\n          mesh.material.push(material);\n        }\n      } else {\n        this.debugMessage('      Unknown face array chunk: ' + subchunk.toString(16));\n      }\n\n      this.endChunk(subchunk);\n    }\n\n    if (mesh.material.length === 1) mesh.material = mesh.material[0]; // for backwards compatibility\n\n    this.endChunk(chunk);\n  }\n  /**\n   * Read texture map data chunk.\n   *\n   * @method readMap\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   * @return {Texture} Texture read from this data chunk.\n   */\n\n\n  readMap(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    let texture = {};\n    const loader = new TextureLoader(this.manager);\n    loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n\n    while (next !== 0) {\n      if (next === MAT_MAPNAME) {\n        const name = this.readString(data, 128);\n        texture = loader.load(name);\n        this.debugMessage('      File: ' + path + name);\n      } else if (next === MAT_MAP_UOFFSET) {\n        texture.offset.x = this.readFloat(data);\n        this.debugMessage('      OffsetX: ' + texture.offset.x);\n      } else if (next === MAT_MAP_VOFFSET) {\n        texture.offset.y = this.readFloat(data);\n        this.debugMessage('      OffsetY: ' + texture.offset.y);\n      } else if (next === MAT_MAP_USCALE) {\n        texture.repeat.x = this.readFloat(data);\n        this.debugMessage('      RepeatX: ' + texture.repeat.x);\n      } else if (next === MAT_MAP_VSCALE) {\n        texture.repeat.y = this.readFloat(data);\n        this.debugMessage('      RepeatY: ' + texture.repeat.y);\n      } else {\n        this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    return texture;\n  }\n  /**\n   * Read material group data chunk.\n   *\n   * @method readMaterialGroup\n   * @param {Dataview} data Dataview in use.\n   * @return {Object} Object with name and index of the object.\n   */\n\n\n  readMaterialGroup(data) {\n    this.readChunk(data);\n    const name = this.readString(data, 64);\n    const numFaces = this.readWord(data);\n    this.debugMessage('         Name: ' + name);\n    this.debugMessage('         Faces: ' + numFaces);\n    const index = [];\n\n    for (let i = 0; i < numFaces; ++i) {\n      index.push(this.readWord(data));\n    }\n\n    return {\n      name: name,\n      index: index\n    };\n  }\n  /**\n   * Read a color value.\n   *\n   * @method readColor\n   * @param {DataView} data Dataview.\n   * @return {Color} Color value read..\n   */\n\n\n  readColor(data) {\n    const chunk = this.readChunk(data);\n    const color = new Color();\n\n    if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n      const r = this.readByte(data);\n      const g = this.readByte(data);\n      const b = this.readByte(data);\n      color.setRGB(r / 255, g / 255, b / 255);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n      const r = this.readFloat(data);\n      const g = this.readFloat(data);\n      const b = this.readFloat(data);\n      color.setRGB(r, g, b);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else {\n      this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n    }\n\n    this.endChunk(chunk);\n    return color;\n  }\n  /**\n   * Read next chunk of data.\n   *\n   * @method readChunk\n   * @param {DataView} data Dataview.\n   * @return {Object} Chunk of data read.\n   */\n\n\n  readChunk(data) {\n    const chunk = {};\n    chunk.cur = this.position;\n    chunk.id = this.readWord(data);\n    chunk.size = this.readDWord(data);\n    chunk.end = chunk.cur + chunk.size;\n    chunk.cur += 6;\n    return chunk;\n  }\n  /**\n   * Set position to the end of the current chunk of data.\n   *\n   * @method endChunk\n   * @param {Object} chunk Data chunk.\n   */\n\n\n  endChunk(chunk) {\n    this.position = chunk.end;\n  }\n  /**\n   * Move to the next data chunk.\n   *\n   * @method nextChunk\n   * @param {DataView} data Dataview.\n   * @param {Object} chunk Data chunk.\n   */\n\n\n  nextChunk(data, chunk) {\n    if (chunk.cur >= chunk.end) {\n      return 0;\n    }\n\n    this.position = chunk.cur;\n\n    try {\n      const next = this.readChunk(data);\n      chunk.cur += next.size;\n      return next.id;\n    } catch (e) {\n      this.debugMessage('Unable to read chunk at ' + this.position);\n      return 0;\n    }\n  }\n  /**\n   * Reset dataview position.\n   *\n   * @method resetPosition\n   */\n\n\n  resetPosition() {\n    this.position -= 6;\n  }\n  /**\n   * Read byte value.\n   *\n   * @method readByte\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readByte(data) {\n    const v = data.getUint8(this.position, true);\n    this.position += 1;\n    return v;\n  }\n  /**\n   * Read 32 bit float value.\n   *\n   * @method readFloat\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readFloat(data) {\n    try {\n      const v = data.getFloat32(this.position, true);\n      this.position += 4;\n      return v;\n    } catch (e) {\n      this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n    }\n  }\n  /**\n   * Read 32 bit signed integer value.\n   *\n   * @method readInt\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readInt(data) {\n    const v = data.getInt32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 16 bit signed integer value.\n   *\n   * @method readShort\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readShort(data) {\n    const v = data.getInt16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read 64 bit unsigned integer value.\n   *\n   * @method readDWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readDWord(data) {\n    const v = data.getUint32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 32 bit unsigned integer value.\n   *\n   * @method readWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readWord(data) {\n    const v = data.getUint16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read string value.\n   *\n   * @method readString\n   * @param {DataView} data Dataview to read data from.\n   * @param {Number} maxLength Max size of the string to be read.\n   * @return {String} Data read from the dataview.\n   */\n\n\n  readString(data, maxLength) {\n    let s = '';\n\n    for (let i = 0; i < maxLength; i++) {\n      const c = this.readByte(data);\n\n      if (!c) {\n        break;\n      }\n\n      s += String.fromCharCode(c);\n    }\n\n    return s;\n  }\n  /**\n   * Read percentage value.\n   *\n   * @method readPercentage\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readPercentage(data) {\n    const chunk = this.readChunk(data);\n    let value;\n\n    switch (chunk.id) {\n      case INT_PERCENTAGE:\n        value = this.readShort(data) / 100;\n        break;\n\n      case FLOAT_PERCENTAGE:\n        value = this.readFloat(data);\n        break;\n\n      default:\n        this.debugMessage('      Unknown percentage chunk: ' + chunk.toString(16));\n    }\n\n    this.endChunk(chunk);\n    return value;\n  }\n  /**\n   * Print debug message to the console.\n   *\n   * Is controlled by a flag to show or hide debug messages.\n   *\n   * @method debugMessage\n   * @param {Object} message Debug message to print to the console.\n   */\n\n\n  debugMessage(message) {\n    if (this.debug) {\n      console.log(message);\n    }\n  }\n\n} // const NULL_CHUNK = 0x0000;\n\n\nconst M3DMAGIC = 0x4d4d; // const SMAGIC = 0x2D2D;\n// const LMAGIC = 0x2D3D;\n\nconst MLIBMAGIC = 0x3daa; // const MATMAGIC = 0x3DFF;\n\nconst CMAGIC = 0xc23d;\nconst M3D_VERSION = 0x0002; // const M3D_KFVERSION = 0x0005;\n\nconst COLOR_F = 0x0010;\nconst COLOR_24 = 0x0011;\nconst LIN_COLOR_24 = 0x0012;\nconst LIN_COLOR_F = 0x0013;\nconst INT_PERCENTAGE = 0x0030;\nconst FLOAT_PERCENTAGE = 0x0031;\nconst MDATA = 0x3d3d;\nconst MESH_VERSION = 0x3d3e;\nconst MASTER_SCALE = 0x0100; // const LO_SHADOW_BIAS = 0x1400;\n// const HI_SHADOW_BIAS = 0x1410;\n// const SHADOW_MAP_SIZE = 0x1420;\n// const SHADOW_SAMPLES = 0x1430;\n// const SHADOW_RANGE = 0x1440;\n// const SHADOW_FILTER = 0x1450;\n// const RAY_BIAS = 0x1460;\n// const O_CONSTS = 0x1500;\n// const AMBIENT_LIGHT = 0x2100;\n// const BIT_MAP = 0x1100;\n// const SOLID_BGND = 0x1200;\n// const V_GRADIENT = 0x1300;\n// const USE_BIT_MAP = 0x1101;\n// const USE_SOLID_BGND = 0x1201;\n// const USE_V_GRADIENT = 0x1301;\n// const FOG = 0x2200;\n// const FOG_BGND = 0x2210;\n// const LAYER_FOG = 0x2302;\n// const DISTANCE_CUE = 0x2300;\n// const DCUE_BGND = 0x2310;\n// const USE_FOG = 0x2201;\n// const USE_LAYER_FOG = 0x2303;\n// const USE_DISTANCE_CUE = 0x2301;\n\nconst MAT_ENTRY = 0xafff;\nconst MAT_NAME = 0xa000;\nconst MAT_AMBIENT = 0xa010;\nconst MAT_DIFFUSE = 0xa020;\nconst MAT_SPECULAR = 0xa030;\nconst MAT_SHININESS = 0xa040; // const MAT_SHIN2PCT = 0xA041;\n\nconst MAT_TRANSPARENCY = 0xa050; // const MAT_XPFALL = 0xA052;\n// const MAT_USE_XPFALL = 0xA240;\n// const MAT_REFBLUR = 0xA053;\n// const MAT_SHADING = 0xA100;\n// const MAT_USE_REFBLUR = 0xA250;\n// const MAT_SELF_ILLUM = 0xA084;\n\nconst MAT_TWO_SIDE = 0xa081; // const MAT_DECAL = 0xA082;\n\nconst MAT_ADDITIVE = 0xa083;\nconst MAT_WIRE = 0xa085; // const MAT_FACEMAP = 0xA088;\n// const MAT_TRANSFALLOFF_IN = 0xA08A;\n// const MAT_PHONGSOFT = 0xA08C;\n// const MAT_WIREABS = 0xA08E;\n\nconst MAT_WIRE_SIZE = 0xa087;\nconst MAT_TEXMAP = 0xa200; // const MAT_SXP_TEXT_DATA = 0xA320;\n// const MAT_TEXMASK = 0xA33E;\n// const MAT_SXP_TEXTMASK_DATA = 0xA32A;\n// const MAT_TEX2MAP = 0xA33A;\n// const MAT_SXP_TEXT2_DATA = 0xA321;\n// const MAT_TEX2MASK = 0xA340;\n// const MAT_SXP_TEXT2MASK_DATA = 0xA32C;\n\nconst MAT_OPACMAP = 0xa210; // const MAT_SXP_OPAC_DATA = 0xA322;\n// const MAT_OPACMASK = 0xA342;\n// const MAT_SXP_OPACMASK_DATA = 0xA32E;\n\nconst MAT_BUMPMAP = 0xa230; // const MAT_SXP_BUMP_DATA = 0xA324;\n// const MAT_BUMPMASK = 0xA344;\n// const MAT_SXP_BUMPMASK_DATA = 0xA330;\n\nconst MAT_SPECMAP = 0xa204; // const MAT_SXP_SPEC_DATA = 0xA325;\n// const MAT_SPECMASK = 0xA348;\n// const MAT_SXP_SPECMASK_DATA = 0xA332;\n// const MAT_SHINMAP = 0xA33C;\n// const MAT_SXP_SHIN_DATA = 0xA326;\n// const MAT_SHINMASK = 0xA346;\n// const MAT_SXP_SHINMASK_DATA = 0xA334;\n// const MAT_SELFIMAP = 0xA33D;\n// const MAT_SXP_SELFI_DATA = 0xA328;\n// const MAT_SELFIMASK = 0xA34A;\n// const MAT_SXP_SELFIMASK_DATA = 0xA336;\n// const MAT_REFLMAP = 0xA220;\n// const MAT_REFLMASK = 0xA34C;\n// const MAT_SXP_REFLMASK_DATA = 0xA338;\n// const MAT_ACUBIC = 0xA310;\n\nconst MAT_MAPNAME = 0xa300; // const MAT_MAP_TILING = 0xA351;\n// const MAT_MAP_TEXBLUR = 0xA353;\n\nconst MAT_MAP_USCALE = 0xa354;\nconst MAT_MAP_VSCALE = 0xa356;\nconst MAT_MAP_UOFFSET = 0xa358;\nconst MAT_MAP_VOFFSET = 0xa35a; // const MAT_MAP_ANG = 0xA35C;\n// const MAT_MAP_COL1 = 0xA360;\n// const MAT_MAP_COL2 = 0xA362;\n// const MAT_MAP_RCOL = 0xA364;\n// const MAT_MAP_GCOL = 0xA366;\n// const MAT_MAP_BCOL = 0xA368;\n\nconst NAMED_OBJECT = 0x4000; // const N_DIRECT_LIGHT = 0x4600;\n// const DL_OFF = 0x4620;\n// const DL_OUTER_RANGE = 0x465A;\n// const DL_INNER_RANGE = 0x4659;\n// const DL_MULTIPLIER = 0x465B;\n// const DL_EXCLUDE = 0x4654;\n// const DL_ATTENUATE = 0x4625;\n// const DL_SPOTLIGHT = 0x4610;\n// const DL_SPOT_ROLL = 0x4656;\n// const DL_SHADOWED = 0x4630;\n// const DL_LOCAL_SHADOW2 = 0x4641;\n// const DL_SEE_CONE = 0x4650;\n// const DL_SPOT_RECTANGULAR = 0x4651;\n// const DL_SPOT_ASPECT = 0x4657;\n// const DL_SPOT_PROJECTOR = 0x4653;\n// const DL_SPOT_OVERSHOOT = 0x4652;\n// const DL_RAY_BIAS = 0x4658;\n// const DL_RAYSHAD = 0x4627;\n// const N_CAMERA = 0x4700;\n// const CAM_SEE_CONE = 0x4710;\n// const CAM_RANGES = 0x4720;\n// const OBJ_HIDDEN = 0x4010;\n// const OBJ_VIS_LOFTER = 0x4011;\n// const OBJ_DOESNT_CAST = 0x4012;\n// const OBJ_DONT_RECVSHADOW = 0x4017;\n// const OBJ_MATTE = 0x4013;\n// const OBJ_FAST = 0x4014;\n// const OBJ_PROCEDURAL = 0x4015;\n// const OBJ_FROZEN = 0x4016;\n\nconst N_TRI_OBJECT = 0x4100;\nconst POINT_ARRAY = 0x4110; // const POINT_FLAG_ARRAY = 0x4111;\n\nconst FACE_ARRAY = 0x4120;\nconst MSH_MAT_GROUP = 0x4130; // const SMOOTH_GROUP = 0x4150;\n// const MSH_BOXMAP = 0x4190;\n\nconst TEX_VERTS = 0x4140;\nconst MESH_MATRIX = 0x4160; // const MESH_COLOR = 0x4165;\n\nexport { TDSLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}