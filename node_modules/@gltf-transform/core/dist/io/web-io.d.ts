import { Document } from '../document';
import { JSONDocument } from '../json-document';
import { PlatformIO } from './platform-io';
/**
 * # WebIO
 *
 * *I/O service for Web.*
 *
 * The most common use of the I/O service is to read/write a {@link Document} with a given path.
 * Methods are also available for converting in-memory representations of raw glTF files, both
 * binary (*ArrayBuffer*) and JSON ({@link JSONDocument}).
 *
 * Usage:
 *
 * ```typescript
 * import { WebIO } from '@gltf-transform/core';
 *
 * const io = new WebIO({credentials: 'include'});
 *
 * // Read.
 * const doc = await io.read('model.glb');  // → Document
 * const doc = io.readBinary(ArrayBuffer);  // → Document
 *
 * // Write.
 * const arrayBuffer = io.writeBinary(doc); // → ArrayBuffer
 * ```
 *
 * @category I/O
 */
export declare class WebIO extends PlatformIO {
    private readonly _fetchConfig;
    /**
     * Constructs a new WebIO service. Instances are reusable.
     * @param _fetchConfig Configuration object for Fetch API.
     */
    constructor(_fetchConfig?: RequestInit);
    /**********************************************************************************************
     * Public.
     */
    /** Loads a URI and returns a {@link Document} instance. */
    read(uri: string): Promise<Document>;
    /** Loads a URI and returns a {@link JSONDocument} struct, without parsing. */
    readAsJSON(uri: string): Promise<JSONDocument>;
}
