{"ast":null,"code":"import { areDatesEqual, replaceInvalidDateByNull } from './date-utils';\nimport { addPositionPropertiesToSections, createDateStrForInputFromSections, splitFormatIntoSections } from '../hooks/useField/useField.utils';\nexport const singleItemValueManager = {\n  emptyValue: null,\n  getTodayValue: utils => utils.date(),\n  cleanValue: replaceInvalidDateByNull,\n  areValuesEqual: areDatesEqual,\n  isSameError: (a, b) => a === b,\n  defaultErrorState: null\n};\nexport const singleItemFieldValueManager = {\n  updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,\n  getSectionsFromValue: (utils, localeText, prevSections, date, format) => {\n    const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;\n    if (shouldReUsePrevDateSections) {\n      return prevSections;\n    }\n    return addPositionPropertiesToSections(splitFormatIntoSections(utils, localeText, format, date));\n  },\n  getValueStrFromSections: sections => createDateStrForInputFromSections(sections),\n  getActiveDateSections: sections => sections,\n  getActiveDateManager: (utils, state) => ({\n    activeDate: state.value,\n    referenceActiveDate: state.referenceValue,\n    getNewValueFromNewActiveDate: newActiveDate => ({\n      value: newActiveDate,\n      referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate\n    })\n  }),\n  parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue),\n  hasError: error => error != null\n};","map":{"version":3,"names":["areDatesEqual","replaceInvalidDateByNull","addPositionPropertiesToSections","createDateStrForInputFromSections","splitFormatIntoSections","singleItemValueManager","emptyValue","getTodayValue","utils","date","cleanValue","areValuesEqual","isSameError","a","b","defaultErrorState","singleItemFieldValueManager","updateReferenceValue","value","prevReferenceValue","isValid","getSectionsFromValue","localeText","prevSections","format","shouldReUsePrevDateSections","getValueStrFromSections","sections","getActiveDateSections","getActiveDateManager","state","activeDate","referenceActiveDate","referenceValue","getNewValueFromNewActiveDate","newActiveDate","parseValueStr","valueStr","parseDate","trim","hasError","error"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/@mui/x-date-pickers/internals/utils/valueManagers.js"],"sourcesContent":["import { areDatesEqual, replaceInvalidDateByNull } from './date-utils';\nimport { addPositionPropertiesToSections, createDateStrForInputFromSections, splitFormatIntoSections } from '../hooks/useField/useField.utils';\nexport const singleItemValueManager = {\n  emptyValue: null,\n  getTodayValue: utils => utils.date(),\n  cleanValue: replaceInvalidDateByNull,\n  areValuesEqual: areDatesEqual,\n  isSameError: (a, b) => a === b,\n  defaultErrorState: null\n};\nexport const singleItemFieldValueManager = {\n  updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,\n  getSectionsFromValue: (utils, localeText, prevSections, date, format) => {\n    const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;\n    if (shouldReUsePrevDateSections) {\n      return prevSections;\n    }\n    return addPositionPropertiesToSections(splitFormatIntoSections(utils, localeText, format, date));\n  },\n  getValueStrFromSections: sections => createDateStrForInputFromSections(sections),\n  getActiveDateSections: sections => sections,\n  getActiveDateManager: (utils, state) => ({\n    activeDate: state.value,\n    referenceActiveDate: state.referenceValue,\n    getNewValueFromNewActiveDate: newActiveDate => ({\n      value: newActiveDate,\n      referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate\n    })\n  }),\n  parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue),\n  hasError: error => error != null\n};"],"mappings":"AAAA,SAASA,aAAa,EAAEC,wBAAwB,QAAQ,cAAc;AACtE,SAASC,+BAA+B,EAAEC,iCAAiC,EAAEC,uBAAuB,QAAQ,kCAAkC;AAC9I,OAAO,MAAMC,sBAAsB,GAAG;EACpCC,UAAU,EAAE,IAAI;EAChBC,aAAa,EAAEC,KAAK,IAAIA,KAAK,CAACC,IAAI,EAAE;EACpCC,UAAU,EAAET,wBAAwB;EACpCU,cAAc,EAAEX,aAAa;EAC7BY,WAAW,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,KAAKC,CAAC;EAC9BC,iBAAiB,EAAE;AACrB,CAAC;AACD,OAAO,MAAMC,2BAA2B,GAAG;EACzCC,oBAAoB,EAAEA,CAACT,KAAK,EAAEU,KAAK,EAAEC,kBAAkB,KAAKD,KAAK,IAAI,IAAI,IAAI,CAACV,KAAK,CAACY,OAAO,CAACF,KAAK,CAAC,GAAGC,kBAAkB,GAAGD,KAAK;EAC/HG,oBAAoB,EAAEA,CAACb,KAAK,EAAEc,UAAU,EAAEC,YAAY,EAAEd,IAAI,EAAEe,MAAM,KAAK;IACvE,MAAMC,2BAA2B,GAAG,CAACjB,KAAK,CAACY,OAAO,CAACX,IAAI,CAAC,IAAI,CAAC,CAACc,YAAY;IAC1E,IAAIE,2BAA2B,EAAE;MAC/B,OAAOF,YAAY;IACrB;IACA,OAAOrB,+BAA+B,CAACE,uBAAuB,CAACI,KAAK,EAAEc,UAAU,EAAEE,MAAM,EAAEf,IAAI,CAAC,CAAC;EAClG,CAAC;EACDiB,uBAAuB,EAAEC,QAAQ,IAAIxB,iCAAiC,CAACwB,QAAQ,CAAC;EAChFC,qBAAqB,EAAED,QAAQ,IAAIA,QAAQ;EAC3CE,oBAAoB,EAAEA,CAACrB,KAAK,EAAEsB,KAAK,MAAM;IACvCC,UAAU,EAAED,KAAK,CAACZ,KAAK;IACvBc,mBAAmB,EAAEF,KAAK,CAACG,cAAc;IACzCC,4BAA4B,EAAEC,aAAa,KAAK;MAC9CjB,KAAK,EAAEiB,aAAa;MACpBF,cAAc,EAAEE,aAAa,IAAI,IAAI,IAAI,CAAC3B,KAAK,CAACY,OAAO,CAACe,aAAa,CAAC,GAAGL,KAAK,CAACG,cAAc,GAAGE;IAClG,CAAC;EACH,CAAC,CAAC;EACFC,aAAa,EAAEA,CAACC,QAAQ,EAAEJ,cAAc,EAAEK,SAAS,KAAKA,SAAS,CAACD,QAAQ,CAACE,IAAI,EAAE,EAAEN,cAAc,CAAC;EAClGO,QAAQ,EAAEC,KAAK,IAAIA,KAAK,IAAI;AAC9B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}