export declare interface MeshoptDecoder {
    supported: boolean;
    ready: Promise<void>;
    decodeVertexBuffer: (target: Uint8Array, count: number, size: number, source: Uint8Array, filter?: string) => void;
    decodeIndexBuffer: (target: Uint8Array, count: number, size: number, source: Uint8Array) => void;
    decodeIndexSequence: (target: Uint8Array, count: number, size: number, source: Uint8Array) => void;
    decodeGltfBuffer: (target: Uint8Array, count: number, size: number, source: Uint8Array, mode: string, filter?: string) => void;
}
export declare interface MeshoptEncoder {
    supported: boolean;
    ready: Promise<void>;
    reorderMesh: (indices: Uint32Array, triangles: boolean, optsize: boolean) => [Uint32Array, number];
    encodeVertexBuffer: (source: Uint8Array, count: number, size: number) => Uint8Array;
    encodeIndexBuffer: (source: Uint8Array, count: number, size: number) => Uint8Array;
    encodeIndexSequence: (source: Uint8Array, count: number, size: number) => Uint8Array;
    encodeGltfBuffer: (source: Uint8Array, count: number, size: number, mode: string) => Uint8Array;
    encodeFilterOct: (source: Float32Array, count: number, stride: number, bits: number) => Uint8Array;
    encodeFilterQuat: (source: Float32Array, count: number, stride: number, bits: number) => Uint8Array;
    encodeFilterExp: (source: Float32Array, count: number, stride: number, bits: number) => Uint8Array;
}
