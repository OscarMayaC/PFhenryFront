{"ast":null,"code":"/**\n * Sepia tone shader\n * based on glfx.js sepia shader\n * https://github.com/evanw/glfx.js\n */\nconst SepiaShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    amount: {\n      value: 1.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float amount;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 color = texture2D( tDiffuse, vUv );', '\tvec3 c = color.rgb;', '\tcolor.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );', '\tcolor.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );', '\tcolor.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );', '\tgl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );', '}'].join('\\n')\n};\nexport { SepiaShader };","map":{"version":3,"names":["SepiaShader","uniforms","tDiffuse","value","amount","vertexShader","join","fragmentShader"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/shaders/SepiaShader.js"],"sourcesContent":["/**\n * Sepia tone shader\n * based on glfx.js sepia shader\n * https://github.com/evanw/glfx.js\n */\nconst SepiaShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    amount: {\n      value: 1.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float amount;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 color = texture2D( tDiffuse, vUv );', '\tvec3 c = color.rgb;', '\tcolor.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );', '\tcolor.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );', '\tcolor.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );', '\tgl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );', '}'].join('\\n')\n};\n\nexport { SepiaShader };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAW,GAAG;EAClBC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MACRC,KAAK,EAAE;IACT,CAAC;IACDC,MAAM,EAAE;MACND,KAAK,EAAE;IACT;EACF,CAAC;EACDE,YAAY,EAAE,CAAC,mBAAmB,EAAE,eAAe,EAAE,YAAY,EAAE,4EAA4E,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAChKC,cAAc,EAAE,CAAC,uBAAuB,EAAE,6BAA6B,EAAE,mBAAmB,EAAE,eAAe,EAAE,2CAA2C,EAAE,sBAAsB,EAAE,oFAAoF,EAAE,oFAAoF,EAAE,oFAAoF,EAAE,iEAAiE,EAAE,GAAG,CAAC,CAACD,IAAI,CAAC,IAAI;AACzgB,CAAC;AAED,SAASN,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}