{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Quaternion, Matrix4 } from 'three';\nimport { CharsetEncoder } from 'mmd-parser';\n\n/**\n * Dependencies\n *  - mmd-parser https://github.com/takahirox/mmd-parser\n */\n\nclass MMDExporter {\n  constructor() {\n    _defineProperty(this, \"u2sTable\", void 0);\n  }\n\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  };\n  */\n\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n  parseVpd(skin, outputShiftJis, useOriginalBones) {\n    if (skin.isSkinnedMesh !== true) {\n      console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');\n      return null;\n    }\n    function toStringsFromNumber(num) {\n      if (Math.abs(num) < 1e-6) num = 0;\n      let a = num.toString();\n      if (a.indexOf('.') === -1) {\n        a += '.';\n      }\n      a += '000000';\n      const index = a.indexOf('.');\n      const d = a.slice(0, index);\n      const p = a.slice(index + 1, index + 7);\n      return d + '.' + p;\n    }\n    function toStringsFromArray(array) {\n      const a = [];\n      for (let i = 0, il = array.length; i < il; i++) {\n        a.push(toStringsFromNumber(array[i]));\n      }\n      return a.join(',');\n    }\n    skin.updateMatrixWorld(true);\n    const bones = skin.skeleton.bones;\n    const bones2 = this.getBindBones(skin);\n    const position = new Vector3();\n    const quaternion = new Quaternion();\n    const quaternion2 = new Quaternion();\n    const matrix = new Matrix4();\n    const array = [];\n    array.push('Vocaloid Pose Data file');\n    array.push('');\n    array.push((skin.name !== '' ? skin.name.replace(/\\s/g, '_') : 'skin') + '.osm;');\n    array.push(bones.length + ';');\n    array.push('');\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i];\n      const bone2 = bones2[i];\n      /*\n       * use the bone matrix saved before solving IK.\n       * see CCDIKSolver for the detail.\n       */\n\n      if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {\n        matrix.fromArray(bone.userData.ik.originalMatrix);\n      } else {\n        matrix.copy(bone.matrix);\n      }\n      position.setFromMatrixPosition(matrix);\n      quaternion.setFromRotationMatrix(matrix);\n      const pArray = position.sub(bone2.position).toArray();\n      const qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray(); // right to left\n\n      pArray[2] = -pArray[2];\n      qArray[0] = -qArray[0];\n      qArray[1] = -qArray[1];\n      array.push('Bone' + i + '{' + bone.name);\n      array.push('  ' + toStringsFromArray(pArray) + ';');\n      array.push('  ' + toStringsFromArray(qArray) + ';');\n      array.push('}');\n      array.push('');\n    }\n    array.push('');\n    const lines = array.join('\\n');\n    return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n  } // Unicode to Shift_JIS table\n\n  unicodeToShiftjis(str) {\n    if (this.u2sTable === undefined) {\n      const encoder = new CharsetEncoder(); // eslint-disable-line no-undef\n\n      const table = encoder.s2uTable;\n      this.u2sTable = {};\n      const keys = Object.keys(table);\n      for (let i = 0, il = keys.length; i < il; i++) {\n        let key = keys[i];\n        const value = table[key];\n        this.u2sTable[value] = parseInt(key);\n      }\n    }\n    const array = [];\n    for (let i = 0, il = str.length; i < il; i++) {\n      const code = str.charCodeAt(i);\n      const value = this.u2sTable[code];\n      if (value === undefined) {\n        throw 'cannot convert charcode 0x' + code.toString(16);\n      } else if (value > 0xff) {\n        array.push(value >> 8 & 0xff);\n        array.push(value & 0xff);\n      } else {\n        array.push(value & 0xff);\n      }\n    }\n    return new Uint8Array(array);\n  }\n  getBindBones(skin) {\n    // any more efficient ways?\n    const poseSkin = skin.clone();\n    poseSkin.pose();\n    return poseSkin.skeleton.bones;\n  }\n}\nexport { MMDExporter };","map":{"version":3,"names":["_defineProperty","Vector3","Quaternion","Matrix4","CharsetEncoder","MMDExporter","constructor","parseVpd","skin","outputShiftJis","useOriginalBones","isSkinnedMesh","console","warn","toStringsFromNumber","num","Math","abs","a","toString","indexOf","index","d","slice","p","toStringsFromArray","array","i","il","length","push","join","updateMatrixWorld","bones","skeleton","bones2","getBindBones","position","quaternion","quaternion2","matrix","name","replace","bone","bone2","userData","ik","undefined","originalMatrix","fromArray","copy","setFromMatrixPosition","setFromRotationMatrix","pArray","sub","toArray","qArray","conjugate","multiply","lines","unicodeToShiftjis","str","u2sTable","encoder","table","s2uTable","keys","Object","key","value","parseInt","code","charCodeAt","Uint8Array","poseSkin","clone","pose"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/exporters/MMDExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Quaternion, Matrix4 } from 'three';\nimport { CharsetEncoder } from 'mmd-parser';\n\n/**\n * Dependencies\n *  - mmd-parser https://github.com/takahirox/mmd-parser\n */\n\nclass MMDExporter {\n  constructor() {\n    _defineProperty(this, \"u2sTable\", void 0);\n  }\n\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  };\n  */\n\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n  parseVpd(skin, outputShiftJis, useOriginalBones) {\n    if (skin.isSkinnedMesh !== true) {\n      console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');\n      return null;\n    }\n\n    function toStringsFromNumber(num) {\n      if (Math.abs(num) < 1e-6) num = 0;\n      let a = num.toString();\n\n      if (a.indexOf('.') === -1) {\n        a += '.';\n      }\n\n      a += '000000';\n      const index = a.indexOf('.');\n      const d = a.slice(0, index);\n      const p = a.slice(index + 1, index + 7);\n      return d + '.' + p;\n    }\n\n    function toStringsFromArray(array) {\n      const a = [];\n\n      for (let i = 0, il = array.length; i < il; i++) {\n        a.push(toStringsFromNumber(array[i]));\n      }\n\n      return a.join(',');\n    }\n\n    skin.updateMatrixWorld(true);\n    const bones = skin.skeleton.bones;\n    const bones2 = this.getBindBones(skin);\n    const position = new Vector3();\n    const quaternion = new Quaternion();\n    const quaternion2 = new Quaternion();\n    const matrix = new Matrix4();\n    const array = [];\n    array.push('Vocaloid Pose Data file');\n    array.push('');\n    array.push((skin.name !== '' ? skin.name.replace(/\\s/g, '_') : 'skin') + '.osm;');\n    array.push(bones.length + ';');\n    array.push('');\n\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i];\n      const bone2 = bones2[i];\n      /*\n       * use the bone matrix saved before solving IK.\n       * see CCDIKSolver for the detail.\n       */\n\n      if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {\n        matrix.fromArray(bone.userData.ik.originalMatrix);\n      } else {\n        matrix.copy(bone.matrix);\n      }\n\n      position.setFromMatrixPosition(matrix);\n      quaternion.setFromRotationMatrix(matrix);\n      const pArray = position.sub(bone2.position).toArray();\n      const qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray(); // right to left\n\n      pArray[2] = -pArray[2];\n      qArray[0] = -qArray[0];\n      qArray[1] = -qArray[1];\n      array.push('Bone' + i + '{' + bone.name);\n      array.push('  ' + toStringsFromArray(pArray) + ';');\n      array.push('  ' + toStringsFromArray(qArray) + ';');\n      array.push('}');\n      array.push('');\n    }\n\n    array.push('');\n    const lines = array.join('\\n');\n    return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n  } // Unicode to Shift_JIS table\n\n\n  unicodeToShiftjis(str) {\n    if (this.u2sTable === undefined) {\n      const encoder = new CharsetEncoder(); // eslint-disable-line no-undef\n\n      const table = encoder.s2uTable;\n      this.u2sTable = {};\n      const keys = Object.keys(table);\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        let key = keys[i];\n        const value = table[key];\n        this.u2sTable[value] = parseInt(key);\n      }\n    }\n\n    const array = [];\n\n    for (let i = 0, il = str.length; i < il; i++) {\n      const code = str.charCodeAt(i);\n      const value = this.u2sTable[code];\n\n      if (value === undefined) {\n        throw 'cannot convert charcode 0x' + code.toString(16);\n      } else if (value > 0xff) {\n        array.push(value >> 8 & 0xff);\n        array.push(value & 0xff);\n      } else {\n        array.push(value & 0xff);\n      }\n    }\n\n    return new Uint8Array(array);\n  }\n\n  getBindBones(skin) {\n    // any more efficient ways?\n    const poseSkin = skin.clone();\n    poseSkin.pose();\n    return poseSkin.skeleton.bones;\n  }\n\n}\n\nexport { MMDExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}