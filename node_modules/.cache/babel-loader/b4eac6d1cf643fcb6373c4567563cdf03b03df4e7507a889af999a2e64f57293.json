{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Matrix4, Vector3, SphereGeometry, MeshBasicMaterial, Color, LineBasicMaterial, Mesh, Line, Quaternion, BufferGeometry, BufferAttribute } from 'three';\nclass CCDIKHelper extends Object3D {\n  constructor(mesh) {\n    let iks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let sphereSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.25;\n    super();\n    _defineProperty(this, \"_m\", new Matrix4());\n    _defineProperty(this, \"_v\", new Vector3());\n    this.root = mesh;\n    this.iks = iks;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.sphereGeometry = new SphereGeometry(sphereSize, 16, 8);\n    this.targetSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0xff8888),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.effectorSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0x88ff88),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.linkSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0x8888ff),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.lineMaterial = new LineBasicMaterial({\n      color: new Color(0xff0000),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    function createLineGeometry(ik) {\n      const geometry = new BufferGeometry();\n      const vertices = new Float32Array((2 + ik.links.length) * 3);\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n      return geometry;\n    }\n    const scope = this;\n    function createTargetMesh() {\n      return new Mesh(scope.sphereGeometry, scope.targetSphereMaterial);\n    }\n    function createEffectorMesh() {\n      return new Mesh(scope.sphereGeometry, scope.effectorSphereMaterial);\n    }\n    function createLinkMesh() {\n      return new Mesh(scope.sphereGeometry, scope.linkSphereMaterial);\n    }\n    function createLine(ik) {\n      return new Line(createLineGeometry(ik), scope.lineMaterial);\n    }\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      this.add(createTargetMesh());\n      this.add(createEffectorMesh());\n      for (let j = 0, jl = ik.links.length; j < jl; j++) {\n        this.add(createLinkMesh());\n      }\n      this.add(createLine(ik));\n    }\n  }\n  _getPosition(bone, matrixWorldInv) {\n    return this._v.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv);\n  }\n  _setPositionOfBoneToAttributeArray(array, index, bone, matrixWorldInv) {\n    const v = this._getPosition(bone, matrixWorldInv);\n    array[index * 3 + 0] = v.x;\n    array[index * 3 + 1] = v.y;\n    array[index * 3 + 2] = v.z;\n  }\n  updateMatrixWorld(force) {\n    const mesh = this.root;\n    if (this.visible) {\n      let offset = 0;\n      const iks = this.iks;\n      const bones = mesh.skeleton.bones;\n      this._m.copy(mesh.matrixWorld).invert();\n      for (let i = 0, il = iks.length; i < il; i++) {\n        const ik = iks[i];\n        const targetBone = bones[ik.target];\n        const effectorBone = bones[ik.effector];\n        const targetMesh = this.children[offset++];\n        const effectorMesh = this.children[offset++];\n        targetMesh.position.copy(this._getPosition(targetBone, this._m));\n        effectorMesh.position.copy(this._getPosition(effectorBone, this._m));\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n          const linkMesh = this.children[offset++];\n          linkMesh.position.copy(this._getPosition(linkBone, this._m));\n        }\n        const line = this.children[offset++];\n        const array = line.geometry.attributes.position.array;\n        this._setPositionOfBoneToAttributeArray(array, 0, targetBone, this._m);\n        this._setPositionOfBoneToAttributeArray(array, 1, effectorBone, this._m);\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n          this._setPositionOfBoneToAttributeArray(array, j + 2, linkBone, this._m);\n        }\n        line.geometry.attributes.position.needsUpdate = true;\n      }\n    }\n    this.matrix.copy(mesh.matrixWorld);\n    super.updateMatrixWorld(force);\n  }\n}\n/**\n * CCD Algorithm\n *  - https://sites.google.com/site/auraliusproject/ccd-algorithm\n *\n * // ik parameter example\n * //\n * // target, effector, index in links are bone index in skeleton.bones.\n * // the bones relation should be\n * // <-- parent                                  child -->\n * // links[ n ], links[ n - 1 ], ..., links[ 0 ], effector\n * iks = [ {\n *\ttarget: 1,\n *\teffector: 2,\n *\tlinks: [ { index: 5, limitation: new Vector3( 1, 0, 0 ) }, { index: 4, enabled: false }, { index : 3 } ],\n *\titeration: 10,\n *\tminAngle: 0.0,\n *\tmaxAngle: 1.0,\n * } ];\n */\n\nclass CCDIKSolver {\n  constructor(mesh, iks) {\n    _defineProperty(this, \"q\", new Quaternion());\n    _defineProperty(this, \"targetPos\", new Vector3());\n    _defineProperty(this, \"targetVec\", new Vector3());\n    _defineProperty(this, \"effectorPos\", new Vector3());\n    _defineProperty(this, \"effectorVec\", new Vector3());\n    _defineProperty(this, \"linkPos\", new Vector3());\n    _defineProperty(this, \"invLinkQ\", new Quaternion());\n    _defineProperty(this, \"linkScale\", new Vector3());\n    _defineProperty(this, \"axis\", new Vector3());\n    _defineProperty(this, \"vector\", new Vector3());\n    this.mesh = mesh;\n    this.iks = iks;\n    const bones = this.mesh.skeleton.bones;\n    for (let i = 0, il = this.iks.length; i < il; i++) {\n      const ik = this.iks[i];\n      const effector = bones[ik.effector];\n      const links = ik.links;\n      let link0, link1;\n      link0 = effector;\n      for (let j = 0, jl = links.length; j < jl; j++) {\n        link1 = bones[links[j].index];\n        if (link0.parent !== link1) {\n          console.warn(`THREE.CCDIKSolver: bone ${link0.name} is not the child of bone ${link1.name}`);\n        }\n        link0 = link1;\n      }\n    }\n  }\n  update() {\n    const bones = this.mesh.skeleton.bones;\n    const iks = this.iks; // for reference overhead reduction in loop\n\n    const math = Math;\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      const effector = bones[ik.effector];\n      const target = bones[ik.target]; // don't use getWorldPosition() here for the performance\n      // because it calls updateMatrixWorld( true ) inside.\n\n      this.targetPos.setFromMatrixPosition(target.matrixWorld);\n      const links = ik.links;\n      const iteration = ik.iteration !== undefined ? ik.iteration : 1;\n      for (let j = 0; j < iteration; j++) {\n        let rotated = false;\n        for (let k = 0, kl = links.length; k < kl; k++) {\n          const link = bones[links[k].index]; // skip this link and following links.\n          // this skip is used for MMD performance optimization.\n\n          if (links[k].enabled === false) break;\n          const limitation = links[k].limitation;\n          const rotationMin = links[k].rotationMin;\n          const rotationMax = links[k].rotationMax; // don't use getWorldPosition/Quaternion() here for the performance\n          // because they call updateMatrixWorld( true ) inside.\n\n          link.matrixWorld.decompose(this.linkPos, this.invLinkQ, this.linkScale);\n          this.invLinkQ.invert();\n          this.effectorPos.setFromMatrixPosition(effector.matrixWorld); // work in link world\n\n          this.effectorVec.subVectors(this.effectorPos, this.linkPos);\n          this.effectorVec.applyQuaternion(this.invLinkQ);\n          this.effectorVec.normalize();\n          this.targetVec.subVectors(this.targetPos, this.linkPos);\n          this.targetVec.applyQuaternion(this.invLinkQ);\n          this.targetVec.normalize();\n          let angle = this.targetVec.dot(this.effectorVec);\n          if (angle > 1.0) {\n            angle = 1.0;\n          } else if (angle < -1.0) {\n            angle = -1.0;\n          }\n          angle = math.acos(angle); // skip if changing angle is too small to prevent vibration of bone\n          // Refer to http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n\n          if (angle < 1e-5) continue;\n          if (ik.minAngle !== undefined && angle < ik.minAngle) {\n            angle = ik.minAngle;\n          }\n          if (ik.maxAngle !== undefined && angle > ik.maxAngle) {\n            angle = ik.maxAngle;\n          }\n          this.axis.crossVectors(this.effectorVec, this.targetVec);\n          this.axis.normalize();\n          this.q.setFromAxisAngle(this.axis, angle);\n          link.quaternion.multiply(this.q); // TODO: re-consider the limitation specification\n\n          if (limitation !== undefined) {\n            let c = link.quaternion.w;\n            if (c > 1.0) c = 1.0;\n            const c2 = math.sqrt(1 - c * c);\n            link.quaternion.set(limitation.x * c2, limitation.y * c2, limitation.z * c2, c);\n          }\n          if (rotationMin !== undefined) {\n            link.rotation.setFromVector3(this.vector.setFromEuler(link.rotation).max(rotationMin));\n          }\n          if (rotationMax !== undefined) {\n            link.rotation.setFromVector3(this.vector.setFromEuler(link.rotation).min(rotationMax));\n          }\n          link.updateMatrixWorld(true);\n          rotated = true;\n        }\n        if (!rotated) break;\n      }\n    }\n    return this;\n  }\n  createHelper() {\n    return new CCDIKHelper(this.mesh, this.mesh.geometry.userData.MMD.iks);\n  }\n}\nexport { CCDIKHelper, CCDIKSolver };","map":{"version":3,"names":["_defineProperty","Object3D","Matrix4","Vector3","SphereGeometry","MeshBasicMaterial","Color","LineBasicMaterial","Mesh","Line","Quaternion","BufferGeometry","BufferAttribute","CCDIKHelper","constructor","mesh","iks","arguments","length","undefined","sphereSize","root","matrix","copy","matrixWorld","matrixAutoUpdate","sphereGeometry","targetSphereMaterial","color","depthTest","depthWrite","transparent","effectorSphereMaterial","linkSphereMaterial","lineMaterial","createLineGeometry","ik","geometry","vertices","Float32Array","links","setAttribute","scope","createTargetMesh","createEffectorMesh","createLinkMesh","createLine","i","il","add","j","jl","_getPosition","bone","matrixWorldInv","_v","setFromMatrixPosition","applyMatrix4","_setPositionOfBoneToAttributeArray","array","index","v","x","y","z","updateMatrixWorld","force","visible","offset","bones","skeleton","_m","invert","targetBone","target","effectorBone","effector","targetMesh","children","effectorMesh","position","link","linkBone","linkMesh","line","attributes","needsUpdate","CCDIKSolver","link0","link1","parent","console","warn","name","update","math","Math","targetPos","iteration","rotated","k","kl","enabled","limitation","rotationMin","rotationMax","decompose","linkPos","invLinkQ","linkScale","effectorPos","effectorVec","subVectors","applyQuaternion","normalize","targetVec","angle","dot","acos","minAngle","maxAngle","axis","crossVectors","q","setFromAxisAngle","quaternion","multiply","c","w","c2","sqrt","set","rotation","setFromVector3","vector","setFromEuler","max","min","createHelper","userData","MMD"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/animation/CCDIKSolver.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Matrix4, Vector3, SphereGeometry, MeshBasicMaterial, Color, LineBasicMaterial, Mesh, Line, Quaternion, BufferGeometry, BufferAttribute } from 'three';\n\nclass CCDIKHelper extends Object3D {\n  constructor(mesh, iks = [], sphereSize = 0.25) {\n    super();\n\n    _defineProperty(this, \"_m\", new Matrix4());\n\n    _defineProperty(this, \"_v\", new Vector3());\n\n    this.root = mesh;\n    this.iks = iks;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.sphereGeometry = new SphereGeometry(sphereSize, 16, 8);\n    this.targetSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0xff8888),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.effectorSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0x88ff88),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.linkSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0x8888ff),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.lineMaterial = new LineBasicMaterial({\n      color: new Color(0xff0000),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n\n    function createLineGeometry(ik) {\n      const geometry = new BufferGeometry();\n      const vertices = new Float32Array((2 + ik.links.length) * 3);\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n      return geometry;\n    }\n\n    const scope = this;\n\n    function createTargetMesh() {\n      return new Mesh(scope.sphereGeometry, scope.targetSphereMaterial);\n    }\n\n    function createEffectorMesh() {\n      return new Mesh(scope.sphereGeometry, scope.effectorSphereMaterial);\n    }\n\n    function createLinkMesh() {\n      return new Mesh(scope.sphereGeometry, scope.linkSphereMaterial);\n    }\n\n    function createLine(ik) {\n      return new Line(createLineGeometry(ik), scope.lineMaterial);\n    }\n\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      this.add(createTargetMesh());\n      this.add(createEffectorMesh());\n\n      for (let j = 0, jl = ik.links.length; j < jl; j++) {\n        this.add(createLinkMesh());\n      }\n\n      this.add(createLine(ik));\n    }\n  }\n\n  _getPosition(bone, matrixWorldInv) {\n    return this._v.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv);\n  }\n\n  _setPositionOfBoneToAttributeArray(array, index, bone, matrixWorldInv) {\n    const v = this._getPosition(bone, matrixWorldInv);\n\n    array[index * 3 + 0] = v.x;\n    array[index * 3 + 1] = v.y;\n    array[index * 3 + 2] = v.z;\n  }\n\n  updateMatrixWorld(force) {\n    const mesh = this.root;\n\n    if (this.visible) {\n      let offset = 0;\n      const iks = this.iks;\n      const bones = mesh.skeleton.bones;\n\n      this._m.copy(mesh.matrixWorld).invert();\n\n      for (let i = 0, il = iks.length; i < il; i++) {\n        const ik = iks[i];\n        const targetBone = bones[ik.target];\n        const effectorBone = bones[ik.effector];\n        const targetMesh = this.children[offset++];\n        const effectorMesh = this.children[offset++];\n        targetMesh.position.copy(this._getPosition(targetBone, this._m));\n        effectorMesh.position.copy(this._getPosition(effectorBone, this._m));\n\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n          const linkMesh = this.children[offset++];\n          linkMesh.position.copy(this._getPosition(linkBone, this._m));\n        }\n\n        const line = this.children[offset++];\n        const array = line.geometry.attributes.position.array;\n\n        this._setPositionOfBoneToAttributeArray(array, 0, targetBone, this._m);\n\n        this._setPositionOfBoneToAttributeArray(array, 1, effectorBone, this._m);\n\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n\n          this._setPositionOfBoneToAttributeArray(array, j + 2, linkBone, this._m);\n        }\n\n        line.geometry.attributes.position.needsUpdate = true;\n      }\n    }\n\n    this.matrix.copy(mesh.matrixWorld);\n    super.updateMatrixWorld(force);\n  }\n\n}\n/**\n * CCD Algorithm\n *  - https://sites.google.com/site/auraliusproject/ccd-algorithm\n *\n * // ik parameter example\n * //\n * // target, effector, index in links are bone index in skeleton.bones.\n * // the bones relation should be\n * // <-- parent                                  child -->\n * // links[ n ], links[ n - 1 ], ..., links[ 0 ], effector\n * iks = [ {\n *\ttarget: 1,\n *\teffector: 2,\n *\tlinks: [ { index: 5, limitation: new Vector3( 1, 0, 0 ) }, { index: 4, enabled: false }, { index : 3 } ],\n *\titeration: 10,\n *\tminAngle: 0.0,\n *\tmaxAngle: 1.0,\n * } ];\n */\n\n\nclass CCDIKSolver {\n  constructor(mesh, iks) {\n    _defineProperty(this, \"q\", new Quaternion());\n\n    _defineProperty(this, \"targetPos\", new Vector3());\n\n    _defineProperty(this, \"targetVec\", new Vector3());\n\n    _defineProperty(this, \"effectorPos\", new Vector3());\n\n    _defineProperty(this, \"effectorVec\", new Vector3());\n\n    _defineProperty(this, \"linkPos\", new Vector3());\n\n    _defineProperty(this, \"invLinkQ\", new Quaternion());\n\n    _defineProperty(this, \"linkScale\", new Vector3());\n\n    _defineProperty(this, \"axis\", new Vector3());\n\n    _defineProperty(this, \"vector\", new Vector3());\n\n    this.mesh = mesh;\n    this.iks = iks;\n    const bones = this.mesh.skeleton.bones;\n\n    for (let i = 0, il = this.iks.length; i < il; i++) {\n      const ik = this.iks[i];\n      const effector = bones[ik.effector];\n      const links = ik.links;\n      let link0, link1;\n      link0 = effector;\n\n      for (let j = 0, jl = links.length; j < jl; j++) {\n        link1 = bones[links[j].index];\n\n        if (link0.parent !== link1) {\n          console.warn(`THREE.CCDIKSolver: bone ${link0.name} is not the child of bone ${link1.name}`);\n        }\n\n        link0 = link1;\n      }\n    }\n  }\n\n  update() {\n    const bones = this.mesh.skeleton.bones;\n    const iks = this.iks; // for reference overhead reduction in loop\n\n    const math = Math;\n\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      const effector = bones[ik.effector];\n      const target = bones[ik.target]; // don't use getWorldPosition() here for the performance\n      // because it calls updateMatrixWorld( true ) inside.\n\n      this.targetPos.setFromMatrixPosition(target.matrixWorld);\n      const links = ik.links;\n      const iteration = ik.iteration !== undefined ? ik.iteration : 1;\n\n      for (let j = 0; j < iteration; j++) {\n        let rotated = false;\n\n        for (let k = 0, kl = links.length; k < kl; k++) {\n          const link = bones[links[k].index]; // skip this link and following links.\n          // this skip is used for MMD performance optimization.\n\n          if (links[k].enabled === false) break;\n          const limitation = links[k].limitation;\n          const rotationMin = links[k].rotationMin;\n          const rotationMax = links[k].rotationMax; // don't use getWorldPosition/Quaternion() here for the performance\n          // because they call updateMatrixWorld( true ) inside.\n\n          link.matrixWorld.decompose(this.linkPos, this.invLinkQ, this.linkScale);\n          this.invLinkQ.invert();\n          this.effectorPos.setFromMatrixPosition(effector.matrixWorld); // work in link world\n\n          this.effectorVec.subVectors(this.effectorPos, this.linkPos);\n          this.effectorVec.applyQuaternion(this.invLinkQ);\n          this.effectorVec.normalize();\n          this.targetVec.subVectors(this.targetPos, this.linkPos);\n          this.targetVec.applyQuaternion(this.invLinkQ);\n          this.targetVec.normalize();\n          let angle = this.targetVec.dot(this.effectorVec);\n\n          if (angle > 1.0) {\n            angle = 1.0;\n          } else if (angle < -1.0) {\n            angle = -1.0;\n          }\n\n          angle = math.acos(angle); // skip if changing angle is too small to prevent vibration of bone\n          // Refer to http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n\n          if (angle < 1e-5) continue;\n\n          if (ik.minAngle !== undefined && angle < ik.minAngle) {\n            angle = ik.minAngle;\n          }\n\n          if (ik.maxAngle !== undefined && angle > ik.maxAngle) {\n            angle = ik.maxAngle;\n          }\n\n          this.axis.crossVectors(this.effectorVec, this.targetVec);\n          this.axis.normalize();\n          this.q.setFromAxisAngle(this.axis, angle);\n          link.quaternion.multiply(this.q); // TODO: re-consider the limitation specification\n\n          if (limitation !== undefined) {\n            let c = link.quaternion.w;\n            if (c > 1.0) c = 1.0;\n            const c2 = math.sqrt(1 - c * c);\n            link.quaternion.set(limitation.x * c2, limitation.y * c2, limitation.z * c2, c);\n          }\n\n          if (rotationMin !== undefined) {\n            link.rotation.setFromVector3(this.vector.setFromEuler(link.rotation).max(rotationMin));\n          }\n\n          if (rotationMax !== undefined) {\n            link.rotation.setFromVector3(this.vector.setFromEuler(link.rotation).min(rotationMax));\n          }\n\n          link.updateMatrixWorld(true);\n          rotated = true;\n        }\n\n        if (!rotated) break;\n      }\n    }\n\n    return this;\n  }\n\n  createHelper() {\n    return new CCDIKHelper(this.mesh, this.mesh.geometry.userData.MMD.iks);\n  }\n\n}\n\nexport { CCDIKHelper, CCDIKSolver };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}