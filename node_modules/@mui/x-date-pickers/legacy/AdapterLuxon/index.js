import _createClass from "@babel/runtime/helpers/esm/createClass";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/* eslint-disable class-methods-use-this */
import { DateTime } from 'luxon';
import BaseAdapterLuxon from '@date-io/luxon';
var formatTokenMap = {
  // Year
  y: 'year',
  yy: 'year',
  yyyy: 'year',
  // Month
  L: 'month',
  LL: 'month',
  LLL: {
    sectionType: 'month',
    contentType: 'letter'
  },
  LLLL: {
    sectionType: 'month',
    contentType: 'letter'
  },
  M: 'month',
  MM: 'month',
  MMM: {
    sectionType: 'month',
    contentType: 'letter'
  },
  MMMM: {
    sectionType: 'month',
    contentType: 'letter'
  },
  // Day of the month
  d: 'day',
  dd: 'day',
  // Day of the week
  c: 'weekDay',
  ccc: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  cccc: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  ccccc: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  E: 'weekDay',
  EEE: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  EEEE: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  EEEEE: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  // Meridiem
  a: 'meridiem',
  // Hours
  H: 'hours',
  HH: 'hours',
  h: 'hours',
  hh: 'hours',
  // Minutes
  m: 'minutes',
  mm: 'minutes',
  // Seconds
  s: 'seconds',
  ss: 'seconds'
};
export var AdapterLuxon = /*#__PURE__*/function (_BaseAdapterLuxon) {
  _inherits(AdapterLuxon, _BaseAdapterLuxon);
  var _super = _createSuper(AdapterLuxon);
  function AdapterLuxon() {
    var _this;
    _classCallCheck(this, AdapterLuxon);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.isMUIAdapter = true;
    _this.formatTokenMap = formatTokenMap;
    _this.escapedCharacters = {
      start: "'",
      end: "'"
    };
    _this.expandFormat = function (format) {
      if (!DateTime.expandFormat) {
        throw Error('Your luxon version does not support `expandFormat`. Consider upgrading it to v3.0.2');
      }
      // The returned format can contain `yyyyy` which means year between 4 and 6 digits.
      // This value is supported by luxon parser but not luxon formatter.
      // To avoid conflicts, we replace it by 4 digits which is enough for most use-cases.
      return DateTime.expandFormat(format, {
        locale: _this.locale
      }).replace('yyyyy', 'yyyy');
    };
    // Redefined here just to show how it can be written using expandFormat
    _this.getFormatHelperText = function (format) {
      return _this.expandFormat(format).replace(/(a)/g, '(a|p)m').toLocaleLowerCase();
    };
    _this.getWeekNumber = function (date) {
      return date.weekNumber;
    };
    return _this;
  }
  return _createClass(AdapterLuxon);
}(BaseAdapterLuxon);