{"ast":null,"code":"import { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute } from 'three';\n\n/**\n * Description: A THREE loader for PLY ASCII files (known as the Polygon\n * File Format or the Stanford Triangle Format).\n *\n * Limitations: ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *\tconst loader = new PLYLoader();\n *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\n *\n *\t\tscene.add( new THREE.Mesh( geometry ) );\n *\n *\t} );\n *\n * If the PLY file uses non standard property names, they can be mapped while\n * loading. For example, the following maps the properties\n * “diffuse_(red|green|blue)” in the file to standard color names.\n *\n * loader.setPropertyNameMapping( {\n *\tdiffuse_red: 'red',\n *\tdiffuse_green: 'green',\n *\tdiffuse_blue: 'blue'\n * } );\n *\n */\n\nclass PLYLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.propertyNameMapping = {};\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  setPropertyNameMapping(mapping) {\n    this.propertyNameMapping = mapping;\n  }\n  parse(data) {\n    function parseHeader(data) {\n      const patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n      let headerText = '';\n      let headerLength = 0;\n      const result = patternHeader.exec(data);\n      if (result !== null) {\n        headerText = result[1];\n        headerLength = new Blob([result[0]]).size;\n      }\n      const header = {\n        comments: [],\n        elements: [],\n        headerLength: headerLength,\n        objInfo: ''\n      };\n      const lines = headerText.split('\\n');\n      let currentElement;\n      function make_ply_element_property(propertValues, propertyNameMapping) {\n        const property = {\n          type: propertValues[0]\n        };\n        if (property.type === 'list') {\n          property.name = propertValues[3];\n          property.countType = propertValues[1];\n          property.itemType = propertValues[2];\n        } else {\n          property.name = propertValues[1];\n        }\n        if (property.name in propertyNameMapping) {\n          property.name = propertyNameMapping[property.name];\n        }\n        return property;\n      }\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        line = line.trim();\n        if (line === '') continue;\n        const lineValues = line.split(/\\s+/);\n        const lineType = lineValues.shift();\n        line = lineValues.join(' ');\n        switch (lineType) {\n          case 'format':\n            header.format = lineValues[0];\n            header.version = lineValues[1];\n            break;\n          case 'comment':\n            header.comments.push(line);\n            break;\n          case 'element':\n            if (currentElement !== undefined) {\n              header.elements.push(currentElement);\n            }\n            currentElement = {};\n            currentElement.name = lineValues[0];\n            currentElement.count = parseInt(lineValues[1]);\n            currentElement.properties = [];\n            break;\n          case 'property':\n            currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n            break;\n          case 'obj_info':\n            header.objInfo = line;\n            break;\n          default:\n            console.log('unhandled', lineType, lineValues);\n        }\n      }\n      if (currentElement !== undefined) {\n        header.elements.push(currentElement);\n      }\n      return header;\n    }\n    function parseASCIINumber(n, type) {\n      switch (type) {\n        case 'char':\n        case 'uchar':\n        case 'short':\n        case 'ushort':\n        case 'int':\n        case 'uint':\n        case 'int8':\n        case 'uint8':\n        case 'int16':\n        case 'uint16':\n        case 'int32':\n        case 'uint32':\n          return parseInt(n);\n        case 'float':\n        case 'double':\n        case 'float32':\n        case 'float64':\n          return parseFloat(n);\n      }\n    }\n    function parseASCIIElement(properties, line) {\n      const values = line.split(/\\s+/);\n      const element = {};\n      for (let i = 0; i < properties.length; i++) {\n        if (properties[i].type === 'list') {\n          const list = [];\n          const n = parseASCIINumber(values.shift(), properties[i].countType);\n          for (let j = 0; j < n; j++) {\n            list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n          }\n          element[properties[i].name] = list;\n        } else {\n          element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n        }\n      }\n      return element;\n    }\n    function parseASCII(data, header) {\n      // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n      const buffer = {\n        indices: [],\n        vertices: [],\n        normals: [],\n        uvs: [],\n        faceVertexUvs: [],\n        colors: []\n      };\n      let result;\n      const patternBody = /end_header\\s([\\s\\S]*)$/;\n      let body = '';\n      if ((result = patternBody.exec(data)) !== null) {\n        body = result[1];\n      }\n      const lines = body.split('\\n');\n      let currentElement = 0;\n      let currentElementCount = 0;\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        line = line.trim();\n        if (line === '') {\n          continue;\n        }\n        if (currentElementCount >= header.elements[currentElement].count) {\n          currentElement++;\n          currentElementCount = 0;\n        }\n        const element = parseASCIIElement(header.elements[currentElement].properties, line);\n        handleElement(buffer, header.elements[currentElement].name, element);\n        currentElementCount++;\n      }\n      return postProcess(buffer);\n    }\n    function postProcess(buffer) {\n      let geometry = new BufferGeometry(); // mandatory buffer data\n\n      if (buffer.indices.length > 0) {\n        geometry.setIndex(buffer.indices);\n      }\n      geometry.setAttribute('position', new Float32BufferAttribute(buffer.vertices, 3)); // optional buffer data\n\n      if (buffer.normals.length > 0) {\n        geometry.setAttribute('normal', new Float32BufferAttribute(buffer.normals, 3));\n      }\n      if (buffer.uvs.length > 0) {\n        geometry.setAttribute('uv', new Float32BufferAttribute(buffer.uvs, 2));\n      }\n      if (buffer.colors.length > 0) {\n        geometry.setAttribute('color', new Float32BufferAttribute(buffer.colors, 3));\n      }\n      if (buffer.faceVertexUvs.length > 0) {\n        geometry = geometry.toNonIndexed();\n        geometry.setAttribute('uv', new Float32BufferAttribute(buffer.faceVertexUvs, 2));\n      }\n      geometry.computeBoundingSphere();\n      return geometry;\n    }\n    function handleElement(buffer, elementName, element) {\n      if (elementName === 'vertex') {\n        buffer.vertices.push(element.x, element.y, element.z);\n        if ('nx' in element && 'ny' in element && 'nz' in element) {\n          buffer.normals.push(element.nx, element.ny, element.nz);\n        }\n        if ('s' in element && 't' in element) {\n          buffer.uvs.push(element.s, element.t);\n        }\n        if ('red' in element && 'green' in element && 'blue' in element) {\n          buffer.colors.push(element.red / 255.0, element.green / 255.0, element.blue / 255.0);\n        }\n      } else if (elementName === 'face') {\n        const vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\n\n        const texcoord = element.texcoord;\n        if (vertex_indices.length === 3) {\n          buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n          if (texcoord && texcoord.length === 6) {\n            buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n            buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n            buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n          }\n        } else if (vertex_indices.length === 4) {\n          buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n          buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n        }\n      }\n    }\n    function binaryRead(dataview, at, type, little_endian) {\n      switch (type) {\n        // corespondences for non-specific length types here match rply:\n        case 'int8':\n        case 'char':\n          return [dataview.getInt8(at), 1];\n        case 'uint8':\n        case 'uchar':\n          return [dataview.getUint8(at), 1];\n        case 'int16':\n        case 'short':\n          return [dataview.getInt16(at, little_endian), 2];\n        case 'uint16':\n        case 'ushort':\n          return [dataview.getUint16(at, little_endian), 2];\n        case 'int32':\n        case 'int':\n          return [dataview.getInt32(at, little_endian), 4];\n        case 'uint32':\n        case 'uint':\n          return [dataview.getUint32(at, little_endian), 4];\n        case 'float32':\n        case 'float':\n          return [dataview.getFloat32(at, little_endian), 4];\n        case 'float64':\n        case 'double':\n          return [dataview.getFloat64(at, little_endian), 8];\n      }\n    }\n    function binaryReadElement(dataview, at, properties, little_endian) {\n      const element = {};\n      let result,\n        read = 0;\n      for (let i = 0; i < properties.length; i++) {\n        if (properties[i].type === 'list') {\n          const list = [];\n          result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n          const n = result[0];\n          read += result[1];\n          for (let j = 0; j < n; j++) {\n            result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n            list.push(result[0]);\n            read += result[1];\n          }\n          element[properties[i].name] = list;\n        } else {\n          result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n          element[properties[i].name] = result[0];\n          read += result[1];\n        }\n      }\n      return [element, read];\n    }\n    function parseBinary(data, header) {\n      const buffer = {\n        indices: [],\n        vertices: [],\n        normals: [],\n        uvs: [],\n        faceVertexUvs: [],\n        colors: []\n      };\n      const little_endian = header.format === 'binary_little_endian';\n      const body = new DataView(data, header.headerLength);\n      let result,\n        loc = 0;\n      for (let currentElement = 0; currentElement < header.elements.length; currentElement++) {\n        for (let currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n          result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n          loc += result[1];\n          const element = result[0];\n          handleElement(buffer, header.elements[currentElement].name, element);\n        }\n      }\n      return postProcess(buffer);\n    } //\n\n    let geometry;\n    const scope = this;\n    if (data instanceof ArrayBuffer) {\n      const text = LoaderUtils.decodeText(new Uint8Array(data));\n      const header = parseHeader(text);\n      geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\n    } else {\n      geometry = parseASCII(data, parseHeader(data));\n    }\n    return geometry;\n  }\n}\nexport { PLYLoader };","map":{"version":3,"names":["Loader","FileLoader","LoaderUtils","BufferGeometry","Float32BufferAttribute","PLYLoader","constructor","manager","propertyNameMapping","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","setPropertyNameMapping","mapping","data","parseHeader","patternHeader","headerText","headerLength","result","exec","Blob","size","header","comments","elements","objInfo","lines","split","currentElement","make_ply_element_property","propertValues","property","type","name","countType","itemType","i","length","line","trim","lineValues","lineType","shift","join","format","version","push","undefined","count","parseInt","properties","log","parseASCIINumber","n","parseFloat","parseASCIIElement","values","element","list","j","parseASCII","buffer","indices","vertices","normals","uvs","faceVertexUvs","colors","patternBody","body","currentElementCount","handleElement","postProcess","geometry","setIndex","setAttribute","toNonIndexed","computeBoundingSphere","elementName","x","y","z","nx","ny","nz","s","t","red","green","blue","vertex_indices","vertex_index","texcoord","binaryRead","dataview","at","little_endian","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","binaryReadElement","read","parseBinary","DataView","loc","ArrayBuffer","decodeText","Uint8Array"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/loaders/PLYLoader.js"],"sourcesContent":["import { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute } from 'three';\n\n/**\n * Description: A THREE loader for PLY ASCII files (known as the Polygon\n * File Format or the Stanford Triangle Format).\n *\n * Limitations: ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *\tconst loader = new PLYLoader();\n *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\n *\n *\t\tscene.add( new THREE.Mesh( geometry ) );\n *\n *\t} );\n *\n * If the PLY file uses non standard property names, they can be mapped while\n * loading. For example, the following maps the properties\n * “diffuse_(red|green|blue)” in the file to standard color names.\n *\n * loader.setPropertyNameMapping( {\n *\tdiffuse_red: 'red',\n *\tdiffuse_green: 'green',\n *\tdiffuse_blue: 'blue'\n * } );\n *\n */\n\nclass PLYLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.propertyNameMapping = {};\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  setPropertyNameMapping(mapping) {\n    this.propertyNameMapping = mapping;\n  }\n\n  parse(data) {\n    function parseHeader(data) {\n      const patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n      let headerText = '';\n      let headerLength = 0;\n      const result = patternHeader.exec(data);\n\n      if (result !== null) {\n        headerText = result[1];\n        headerLength = new Blob([result[0]]).size;\n      }\n\n      const header = {\n        comments: [],\n        elements: [],\n        headerLength: headerLength,\n        objInfo: ''\n      };\n      const lines = headerText.split('\\n');\n      let currentElement;\n\n      function make_ply_element_property(propertValues, propertyNameMapping) {\n        const property = {\n          type: propertValues[0]\n        };\n\n        if (property.type === 'list') {\n          property.name = propertValues[3];\n          property.countType = propertValues[1];\n          property.itemType = propertValues[2];\n        } else {\n          property.name = propertValues[1];\n        }\n\n        if (property.name in propertyNameMapping) {\n          property.name = propertyNameMapping[property.name];\n        }\n\n        return property;\n      }\n\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        line = line.trim();\n        if (line === '') continue;\n        const lineValues = line.split(/\\s+/);\n        const lineType = lineValues.shift();\n        line = lineValues.join(' ');\n\n        switch (lineType) {\n          case 'format':\n            header.format = lineValues[0];\n            header.version = lineValues[1];\n            break;\n\n          case 'comment':\n            header.comments.push(line);\n            break;\n\n          case 'element':\n            if (currentElement !== undefined) {\n              header.elements.push(currentElement);\n            }\n\n            currentElement = {};\n            currentElement.name = lineValues[0];\n            currentElement.count = parseInt(lineValues[1]);\n            currentElement.properties = [];\n            break;\n\n          case 'property':\n            currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n            break;\n\n          case 'obj_info':\n            header.objInfo = line;\n            break;\n\n          default:\n            console.log('unhandled', lineType, lineValues);\n        }\n      }\n\n      if (currentElement !== undefined) {\n        header.elements.push(currentElement);\n      }\n\n      return header;\n    }\n\n    function parseASCIINumber(n, type) {\n      switch (type) {\n        case 'char':\n        case 'uchar':\n        case 'short':\n        case 'ushort':\n        case 'int':\n        case 'uint':\n        case 'int8':\n        case 'uint8':\n        case 'int16':\n        case 'uint16':\n        case 'int32':\n        case 'uint32':\n          return parseInt(n);\n\n        case 'float':\n        case 'double':\n        case 'float32':\n        case 'float64':\n          return parseFloat(n);\n      }\n    }\n\n    function parseASCIIElement(properties, line) {\n      const values = line.split(/\\s+/);\n      const element = {};\n\n      for (let i = 0; i < properties.length; i++) {\n        if (properties[i].type === 'list') {\n          const list = [];\n          const n = parseASCIINumber(values.shift(), properties[i].countType);\n\n          for (let j = 0; j < n; j++) {\n            list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n          }\n\n          element[properties[i].name] = list;\n        } else {\n          element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n        }\n      }\n\n      return element;\n    }\n\n    function parseASCII(data, header) {\n      // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n      const buffer = {\n        indices: [],\n        vertices: [],\n        normals: [],\n        uvs: [],\n        faceVertexUvs: [],\n        colors: []\n      };\n      let result;\n      const patternBody = /end_header\\s([\\s\\S]*)$/;\n      let body = '';\n\n      if ((result = patternBody.exec(data)) !== null) {\n        body = result[1];\n      }\n\n      const lines = body.split('\\n');\n      let currentElement = 0;\n      let currentElementCount = 0;\n\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        line = line.trim();\n\n        if (line === '') {\n          continue;\n        }\n\n        if (currentElementCount >= header.elements[currentElement].count) {\n          currentElement++;\n          currentElementCount = 0;\n        }\n\n        const element = parseASCIIElement(header.elements[currentElement].properties, line);\n        handleElement(buffer, header.elements[currentElement].name, element);\n        currentElementCount++;\n      }\n\n      return postProcess(buffer);\n    }\n\n    function postProcess(buffer) {\n      let geometry = new BufferGeometry(); // mandatory buffer data\n\n      if (buffer.indices.length > 0) {\n        geometry.setIndex(buffer.indices);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(buffer.vertices, 3)); // optional buffer data\n\n      if (buffer.normals.length > 0) {\n        geometry.setAttribute('normal', new Float32BufferAttribute(buffer.normals, 3));\n      }\n\n      if (buffer.uvs.length > 0) {\n        geometry.setAttribute('uv', new Float32BufferAttribute(buffer.uvs, 2));\n      }\n\n      if (buffer.colors.length > 0) {\n        geometry.setAttribute('color', new Float32BufferAttribute(buffer.colors, 3));\n      }\n\n      if (buffer.faceVertexUvs.length > 0) {\n        geometry = geometry.toNonIndexed();\n        geometry.setAttribute('uv', new Float32BufferAttribute(buffer.faceVertexUvs, 2));\n      }\n\n      geometry.computeBoundingSphere();\n      return geometry;\n    }\n\n    function handleElement(buffer, elementName, element) {\n      if (elementName === 'vertex') {\n        buffer.vertices.push(element.x, element.y, element.z);\n\n        if ('nx' in element && 'ny' in element && 'nz' in element) {\n          buffer.normals.push(element.nx, element.ny, element.nz);\n        }\n\n        if ('s' in element && 't' in element) {\n          buffer.uvs.push(element.s, element.t);\n        }\n\n        if ('red' in element && 'green' in element && 'blue' in element) {\n          buffer.colors.push(element.red / 255.0, element.green / 255.0, element.blue / 255.0);\n        }\n      } else if (elementName === 'face') {\n        const vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\n\n        const texcoord = element.texcoord;\n\n        if (vertex_indices.length === 3) {\n          buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n\n          if (texcoord && texcoord.length === 6) {\n            buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n            buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n            buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n          }\n        } else if (vertex_indices.length === 4) {\n          buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n          buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n        }\n      }\n    }\n\n    function binaryRead(dataview, at, type, little_endian) {\n      switch (type) {\n        // corespondences for non-specific length types here match rply:\n        case 'int8':\n        case 'char':\n          return [dataview.getInt8(at), 1];\n\n        case 'uint8':\n        case 'uchar':\n          return [dataview.getUint8(at), 1];\n\n        case 'int16':\n        case 'short':\n          return [dataview.getInt16(at, little_endian), 2];\n\n        case 'uint16':\n        case 'ushort':\n          return [dataview.getUint16(at, little_endian), 2];\n\n        case 'int32':\n        case 'int':\n          return [dataview.getInt32(at, little_endian), 4];\n\n        case 'uint32':\n        case 'uint':\n          return [dataview.getUint32(at, little_endian), 4];\n\n        case 'float32':\n        case 'float':\n          return [dataview.getFloat32(at, little_endian), 4];\n\n        case 'float64':\n        case 'double':\n          return [dataview.getFloat64(at, little_endian), 8];\n      }\n    }\n\n    function binaryReadElement(dataview, at, properties, little_endian) {\n      const element = {};\n      let result,\n          read = 0;\n\n      for (let i = 0; i < properties.length; i++) {\n        if (properties[i].type === 'list') {\n          const list = [];\n          result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n          const n = result[0];\n          read += result[1];\n\n          for (let j = 0; j < n; j++) {\n            result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n            list.push(result[0]);\n            read += result[1];\n          }\n\n          element[properties[i].name] = list;\n        } else {\n          result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n          element[properties[i].name] = result[0];\n          read += result[1];\n        }\n      }\n\n      return [element, read];\n    }\n\n    function parseBinary(data, header) {\n      const buffer = {\n        indices: [],\n        vertices: [],\n        normals: [],\n        uvs: [],\n        faceVertexUvs: [],\n        colors: []\n      };\n      const little_endian = header.format === 'binary_little_endian';\n      const body = new DataView(data, header.headerLength);\n      let result,\n          loc = 0;\n\n      for (let currentElement = 0; currentElement < header.elements.length; currentElement++) {\n        for (let currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n          result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n          loc += result[1];\n          const element = result[0];\n          handleElement(buffer, header.elements[currentElement].name, element);\n        }\n      }\n\n      return postProcess(buffer);\n    } //\n\n\n    let geometry;\n    const scope = this;\n\n    if (data instanceof ArrayBuffer) {\n      const text = LoaderUtils.decodeText(new Uint8Array(data));\n      const header = parseHeader(text);\n      geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\n    } else {\n      geometry = parseASCII(data, parseHeader(data));\n    }\n\n    return geometry;\n  }\n\n}\n\nexport { PLYLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}