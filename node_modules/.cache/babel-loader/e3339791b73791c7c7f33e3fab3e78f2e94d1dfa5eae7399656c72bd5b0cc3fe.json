{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Loader, FileLoader, ShapePath } from 'three';\nclass FontLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, response => {\n      if (typeof response !== 'string') throw new Error('unsupported data type');\n      const json = JSON.parse(response);\n      const font = this.parse(json);\n      if (onLoad) onLoad(font);\n    }, onProgress, onError);\n  }\n  parse(json) {\n    return new Font(json);\n  }\n}\nclass Font {\n  constructor(data) {\n    _defineProperty(this, \"data\", void 0);\n    this.data = data;\n  }\n  generateShapes(text) {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    let _options = arguments.length > 2 ? arguments[2] : undefined;\n    const shapes = [];\n    const options = {\n      letterSpacing: 0,\n      lineHeight: 1,\n      ..._options\n    };\n    const paths = createPaths(text, size, this.data, options);\n    for (let p = 0, pl = paths.length; p < pl; p++) {\n      Array.prototype.push.apply(shapes, paths[p].toShapes(false));\n    }\n    return shapes;\n  }\n}\n_defineProperty(Font, \"isFont\", void 0);\n_defineProperty(Font, \"type\", void 0);\nfunction createPaths(text, size, data, options) {\n  const chars = Array.from(text);\n  const scale = size / data.resolution;\n  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n  const paths = [];\n  let offsetX = 0,\n    offsetY = 0;\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i];\n    if (char === '\\n') {\n      offsetX = 0;\n      offsetY -= line_height * options.lineHeight;\n    } else {\n      const ret = createPath(char, scale, offsetX, offsetY, data);\n      if (ret) {\n        offsetX += ret.offsetX + options.letterSpacing;\n        paths.push(ret.path);\n      }\n    }\n  }\n  return paths;\n}\nfunction createPath(char, scale, offsetX, offsetY, data) {\n  const glyph = data.glyphs[char] || data.glyphs['?'];\n  if (!glyph) {\n    console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n    return;\n  }\n  const path = new ShapePath();\n  let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n  if (glyph.o) {\n    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n    for (let i = 0, l = outline.length; i < l;) {\n      const action = outline[i++];\n      switch (action) {\n        case 'm':\n          // moveTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.moveTo(x, y);\n          break;\n        case 'l':\n          // lineTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.lineTo(x, y);\n          break;\n        case 'q':\n          // quadraticCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n          break;\n        case 'b':\n          // bezierCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          cpx2 = parseInt(outline[i++]) * scale + offsetX;\n          cpy2 = parseInt(outline[i++]) * scale + offsetY;\n          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n          break;\n      }\n    }\n  }\n  return {\n    offsetX: glyph.ha * scale,\n    path\n  };\n}\nexport { Font, FontLoader };","map":{"version":3,"names":["_defineProperty","Loader","FileLoader","ShapePath","FontLoader","constructor","manager","load","url","onLoad","onProgress","onError","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","response","Error","json","JSON","parse","font","Font","data","generateShapes","text","size","arguments","length","undefined","_options","shapes","options","letterSpacing","lineHeight","paths","createPaths","p","pl","Array","prototype","push","apply","toShapes","chars","from","scale","resolution","line_height","boundingBox","yMax","yMin","underlineThickness","offsetX","offsetY","i","char","ret","createPath","glyph","glyphs","console","error","familyName","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","o","outline","_cachedOutline","split","l","action","parseInt","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/loaders/FontLoader.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Loader, FileLoader, ShapePath } from 'three';\n\nclass FontLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, response => {\n      if (typeof response !== 'string') throw new Error('unsupported data type');\n      const json = JSON.parse(response);\n      const font = this.parse(json);\n      if (onLoad) onLoad(font);\n    }, onProgress, onError);\n  }\n\n  parse(json) {\n    return new Font(json);\n  }\n\n}\nclass Font {\n  constructor(data) {\n    _defineProperty(this, \"data\", void 0);\n\n    this.data = data;\n  }\n\n  generateShapes(text, size = 100, _options) {\n    const shapes = [];\n    const options = {\n      letterSpacing: 0,\n      lineHeight: 1,\n      ..._options\n    };\n    const paths = createPaths(text, size, this.data, options);\n\n    for (let p = 0, pl = paths.length; p < pl; p++) {\n      Array.prototype.push.apply(shapes, paths[p].toShapes(false));\n    }\n\n    return shapes;\n  }\n\n}\n\n_defineProperty(Font, \"isFont\", void 0);\n\n_defineProperty(Font, \"type\", void 0);\n\nfunction createPaths(text, size, data, options) {\n  const chars = Array.from(text);\n  const scale = size / data.resolution;\n  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n  const paths = [];\n  let offsetX = 0,\n      offsetY = 0;\n\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i];\n\n    if (char === '\\n') {\n      offsetX = 0;\n      offsetY -= line_height * options.lineHeight;\n    } else {\n      const ret = createPath(char, scale, offsetX, offsetY, data);\n\n      if (ret) {\n        offsetX += ret.offsetX + options.letterSpacing;\n        paths.push(ret.path);\n      }\n    }\n  }\n\n  return paths;\n}\n\nfunction createPath(char, scale, offsetX, offsetY, data) {\n  const glyph = data.glyphs[char] || data.glyphs['?'];\n\n  if (!glyph) {\n    console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n    return;\n  }\n\n  const path = new ShapePath();\n  let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n  if (glyph.o) {\n    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n    for (let i = 0, l = outline.length; i < l;) {\n      const action = outline[i++];\n\n      switch (action) {\n        case 'm':\n          // moveTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.moveTo(x, y);\n          break;\n\n        case 'l':\n          // lineTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.lineTo(x, y);\n          break;\n\n        case 'q':\n          // quadraticCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n          break;\n\n        case 'b':\n          // bezierCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          cpx2 = parseInt(outline[i++]) * scale + offsetX;\n          cpy2 = parseInt(outline[i++]) * scale + offsetY;\n          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n          break;\n      }\n    }\n  }\n\n  return {\n    offsetX: glyph.ha * scale,\n    path\n  };\n}\n\nexport { Font, FontLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}