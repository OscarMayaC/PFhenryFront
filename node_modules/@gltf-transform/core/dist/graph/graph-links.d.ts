import { GraphNode } from './graph-node';
/**
 * Represents a connection between two {@link GraphNode} resources in a {@link Graph}.
 *
 * The left node is considered the owner, and the right node the resource. The
 * owner is responsible for being able find and remove a reference to a resource, given
 * that link. The resource does not hold a reference to the link or to the owner,
 * although that reverse lookup can be done on the graph.
 *
 * @hidden
 * @category Graph
 */
export declare class Link<Parent extends GraphNode, Child extends GraphNode> {
    private readonly _name;
    private readonly _parent;
    private _child;
    private _disposed;
    private readonly _listeners;
    constructor(_name: string, _parent: Parent, _child: Child);
    /** Name. */
    getName(): string;
    /** Owner node. */
    getParent(): Parent;
    /** Resource node. */
    getChild(): Child;
    /** Destroys a (currently intact) link, updating both the graph and the owner. */
    dispose(): void;
    /** Registers a listener to be invoked if this link is destroyed. */
    onDispose(fn: () => void): this;
    /** Whether this link has been destroyed. */
    isDisposed(): boolean;
}
