import { PureComponent } from "react";
export declare type ErrorObject = {
    error: any;
};
/**
 * Internal callback, used to link the hook state to the boundary state.
 */
export declare type OnDidCatchCallback = (error: any, errorInfo: any) => void;
/**
 * Props of the internal ErrorBoundary component.
 *
 * onDidCatch is used internally.
 * children, render and renderError are public facing and get utilized by the UseErrorBoundaryWrapper.
 */
export interface ErrorBoundaryProps {
    onDidCatch: OnDidCatchCallback;
    children?: React.ReactNode | JSX.Element;
    render?: () => React.ReactNode | JSX.Element;
    renderError?: (error: ErrorObject) => React.ReactNode | JSX.Element;
}
/**
 * Internal ErrorBoundary state.
 */
export interface ErrorBoundaryState {
    hasError: boolean;
    error: any;
}
/**
 * ErrorBoundary class
 *
 * Catches errors using lifecycle methods and renders fallback ui using children or render props.
 */
export declare class ErrorBoundary extends PureComponent<ErrorBoundaryProps, ErrorBoundaryState> {
    /**
     * Initialize component state.
     */
    constructor(props: ErrorBoundaryProps);
    /**
     * Set error state when the boundary catches.
     */
    static getDerivedStateFromError(error: any): {
        hasError: boolean;
        error: any;
    };
    /**
     * Use componentDidCatch lifecycle method to report the error using
     * the onDidCatch prop.
     */
    componentDidCatch(error: any, errorInfo: any): void;
    /**
     * Render children or fallback ui depending on the error state.
     *
     * Uses render props api if either render or renderError is defined.
     */
    render(): {} | null | undefined;
}
