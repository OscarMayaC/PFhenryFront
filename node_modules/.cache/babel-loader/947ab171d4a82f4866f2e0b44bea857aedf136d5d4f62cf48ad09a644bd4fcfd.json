{"ast":null,"code":"import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Line } from '../../core/Line.js';\nimport { Html } from '../Html.js';\nimport clamp from 'lodash.clamp';\nimport { context } from './context.js';\nconst clickDir = new THREE.Vector3();\nconst intersectionDir = new THREE.Vector3();\nconst toDegrees = radians => radians * 180 / Math.PI;\nconst toRadians = degrees => degrees * Math.PI / 180;\nconst calculateAngle = (clickPoint, intersectionPoint, origin, e1, e2) => {\n  clickDir.copy(clickPoint).sub(origin);\n  intersectionDir.copy(intersectionPoint).sub(origin);\n  const dote1e1 = e1.dot(e1);\n  const dote2e2 = e2.dot(e2);\n  const uClick = clickDir.dot(e1) / dote1e1;\n  const vClick = clickDir.dot(e2) / dote2e2;\n  const uIntersection = intersectionDir.dot(e1) / dote1e1;\n  const vIntersection = intersectionDir.dot(e2) / dote2e2;\n  const angleClick = Math.atan2(vClick, uClick);\n  const angleIntersection = Math.atan2(vIntersection, uIntersection);\n  return angleIntersection - angleClick;\n};\nconst fmod = (num, denom) => {\n  let k = Math.floor(num / denom);\n  k = k < 0 ? k + 1 : k;\n  return num - k * denom;\n};\nconst minimizeAngle = angle => {\n  let result = fmod(angle, 2 * Math.PI);\n  if (Math.abs(result) < 1e-6) {\n    return 0.0;\n  }\n  if (result < 0.0) {\n    result += 2 * Math.PI;\n  }\n  return result;\n};\nconst rotMatrix = new THREE.Matrix4();\nconst posNew = new THREE.Vector3();\nconst ray = new THREE.Ray();\nconst intersection = new THREE.Vector3();\nconst AxisRotator = _ref => {\n  let {\n    dir1,\n    dir2,\n    axis\n  } = _ref;\n  const {\n    rotationLimits,\n    annotations,\n    annotationsClass,\n    depthTest,\n    scale,\n    lineWidth,\n    fixed,\n    axisColors,\n    hoveredColor,\n    opacity,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    userData\n  } = React.useContext(context); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const camControls = useThree(state => state.controls);\n  const divRef = React.useRef(null);\n  const objRef = React.useRef(null);\n  const angle0 = React.useRef(0);\n  const angle = React.useRef(0);\n  const clickInfo = React.useRef(null);\n  const [isHovered, setIsHovered] = React.useState(false);\n  const onPointerDown = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.innerText = `${toDegrees(angle.current).toFixed(0)}ยบ`;\n      divRef.current.style.display = 'block';\n    }\n    e.stopPropagation();\n    const clickPoint = e.point.clone();\n    const origin = new THREE.Vector3().setFromMatrixPosition(objRef.current.matrixWorld);\n    const e1 = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 0).normalize();\n    const e2 = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 1).normalize();\n    const normal = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 2).normalize();\n    const plane = new THREE.Plane().setFromNormalAndCoplanarPoint(normal, origin);\n    clickInfo.current = {\n      clickPoint,\n      origin,\n      e1,\n      e2,\n      normal,\n      plane\n    };\n    onDragStart({\n      component: 'Rotator',\n      axis,\n      origin,\n      directions: [e1, e2, normal]\n    });\n    camControls && (camControls.enabled = false); // @ts-ignore\n\n    e.target.setPointerCapture(e.pointerId);\n  }, [annotations, camControls, onDragStart, axis]);\n  const onPointerMove = React.useCallback(e => {\n    e.stopPropagation();\n    if (!isHovered) setIsHovered(true);\n    if (clickInfo.current) {\n      const {\n        clickPoint,\n        origin,\n        e1,\n        e2,\n        normal,\n        plane\n      } = clickInfo.current;\n      const [min, max] = (rotationLimits == null ? void 0 : rotationLimits[axis]) || [undefined, undefined];\n      ray.copy(e.ray);\n      ray.intersectPlane(plane, intersection);\n      ray.direction.negate();\n      ray.intersectPlane(plane, intersection);\n      let deltaAngle = calculateAngle(clickPoint, intersection, origin, e1, e2);\n      let degrees = toDegrees(deltaAngle); // @ts-ignore\n\n      if (e.shiftKey) {\n        degrees = Math.round(degrees / 10) * 10;\n        deltaAngle = toRadians(degrees);\n      }\n      if (min !== undefined && max !== undefined && max - min < 2 * Math.PI) {\n        deltaAngle = minimizeAngle(deltaAngle);\n        deltaAngle = deltaAngle > Math.PI ? deltaAngle - 2 * Math.PI : deltaAngle;\n        deltaAngle = clamp(deltaAngle, min - angle0.current, max - angle0.current);\n        angle.current = angle0.current + deltaAngle;\n      } else {\n        angle.current = minimizeAngle(angle0.current + deltaAngle);\n        angle.current = angle.current > Math.PI ? angle.current - 2 * Math.PI : angle.current;\n      }\n      if (annotations) {\n        degrees = toDegrees(angle.current);\n        divRef.current.innerText = `${degrees.toFixed(0)}ยบ`;\n      }\n      rotMatrix.makeRotationAxis(normal, deltaAngle);\n      posNew.copy(origin).applyMatrix4(rotMatrix).sub(origin).negate();\n      rotMatrix.setPosition(posNew);\n      onDrag(rotMatrix);\n    }\n  }, [annotations, onDrag, isHovered, rotationLimits, axis]);\n  const onPointerUp = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.style.display = 'none';\n    }\n    e.stopPropagation();\n    angle0.current = angle.current;\n    clickInfo.current = null;\n    onDragEnd();\n    camControls && (camControls.enabled = true); // @ts-ignore\n\n    e.target.releasePointerCapture(e.pointerId);\n  }, [annotations, camControls, onDragEnd]);\n  const onPointerOut = React.useCallback(e => {\n    e.stopPropagation();\n    setIsHovered(false);\n  }, []);\n  const matrixL = React.useMemo(() => {\n    const dir1N = dir1.clone().normalize();\n    const dir2N = dir2.clone().normalize();\n    return new THREE.Matrix4().makeBasis(dir1N, dir2N, dir1N.clone().cross(dir2N));\n  }, [dir1, dir2]);\n  const r = fixed ? 0.65 : scale * 0.65;\n  const arc = React.useMemo(() => {\n    const segments = 32;\n    const points = [];\n    for (let j = 0; j <= segments; j++) {\n      const angle = j * (Math.PI / 2) / segments;\n      points.push(new THREE.Vector3(Math.cos(angle) * r, Math.sin(angle) * r, 0));\n    }\n    return points;\n  }, [r]);\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: objRef,\n    onPointerDown: onPointerDown,\n    onPointerMove: onPointerMove,\n    onPointerUp: onPointerUp,\n    onPointerOut: onPointerOut,\n    matrix: matrixL,\n    matrixAutoUpdate: false\n  }, annotations && /*#__PURE__*/React.createElement(Html, {\n    position: [r, r, 0]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'none',\n      background: '#151520',\n      color: 'white',\n      padding: '6px 8px',\n      borderRadius: 7,\n      whiteSpace: 'nowrap'\n    },\n    className: annotationsClass,\n    ref: divRef\n  })), /*#__PURE__*/React.createElement(Line, {\n    points: arc,\n    lineWidth: lineWidth * 4,\n    visible: false,\n    userData: userData\n  }), /*#__PURE__*/React.createElement(Line, {\n    transparent: true,\n    raycast: () => null,\n    depthTest: depthTest,\n    points: arc,\n    lineWidth: lineWidth,\n    color: isHovered ? hoveredColor : axisColors[axis],\n    opacity: opacity,\n    polygonOffset: true,\n    polygonOffsetFactor: -10\n  }));\n};\nexport { AxisRotator };","map":{"version":3,"names":["React","THREE","useThree","Line","Html","clamp","context","clickDir","Vector3","intersectionDir","toDegrees","radians","Math","PI","toRadians","degrees","calculateAngle","clickPoint","intersectionPoint","origin","e1","e2","copy","sub","dote1e1","dot","dote2e2","uClick","vClick","uIntersection","vIntersection","angleClick","atan2","angleIntersection","fmod","num","denom","k","floor","minimizeAngle","angle","result","abs","rotMatrix","Matrix4","posNew","ray","Ray","intersection","AxisRotator","_ref","dir1","dir2","axis","rotationLimits","annotations","annotationsClass","depthTest","scale","lineWidth","fixed","axisColors","hoveredColor","opacity","onDragStart","onDrag","onDragEnd","userData","useContext","camControls","state","controls","divRef","useRef","objRef","angle0","clickInfo","isHovered","setIsHovered","useState","onPointerDown","useCallback","e","current","innerText","toFixed","style","display","stopPropagation","point","clone","setFromMatrixPosition","matrixWorld","setFromMatrixColumn","normalize","normal","plane","Plane","setFromNormalAndCoplanarPoint","component","directions","enabled","target","setPointerCapture","pointerId","onPointerMove","min","max","undefined","intersectPlane","direction","negate","deltaAngle","shiftKey","round","makeRotationAxis","applyMatrix4","setPosition","onPointerUp","releasePointerCapture","onPointerOut","matrixL","useMemo","dir1N","dir2N","makeBasis","cross","r","arc","segments","points","j","push","cos","sin","createElement","ref","matrix","matrixAutoUpdate","position","background","color","padding","borderRadius","whiteSpace","className","visible","transparent","raycast","polygonOffset","polygonOffsetFactor"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/@react-three/drei/web/pivotControls/AxisRotator.js"],"sourcesContent":["import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Line } from '../../core/Line.js';\nimport { Html } from '../Html.js';\nimport clamp from 'lodash.clamp';\nimport { context } from './context.js';\n\nconst clickDir = new THREE.Vector3();\nconst intersectionDir = new THREE.Vector3();\n\nconst toDegrees = radians => radians * 180 / Math.PI;\n\nconst toRadians = degrees => degrees * Math.PI / 180;\n\nconst calculateAngle = (clickPoint, intersectionPoint, origin, e1, e2) => {\n  clickDir.copy(clickPoint).sub(origin);\n  intersectionDir.copy(intersectionPoint).sub(origin);\n  const dote1e1 = e1.dot(e1);\n  const dote2e2 = e2.dot(e2);\n  const uClick = clickDir.dot(e1) / dote1e1;\n  const vClick = clickDir.dot(e2) / dote2e2;\n  const uIntersection = intersectionDir.dot(e1) / dote1e1;\n  const vIntersection = intersectionDir.dot(e2) / dote2e2;\n  const angleClick = Math.atan2(vClick, uClick);\n  const angleIntersection = Math.atan2(vIntersection, uIntersection);\n  return angleIntersection - angleClick;\n};\n\nconst fmod = (num, denom) => {\n  let k = Math.floor(num / denom);\n  k = k < 0 ? k + 1 : k;\n  return num - k * denom;\n};\n\nconst minimizeAngle = angle => {\n  let result = fmod(angle, 2 * Math.PI);\n\n  if (Math.abs(result) < 1e-6) {\n    return 0.0;\n  }\n\n  if (result < 0.0) {\n    result += 2 * Math.PI;\n  }\n\n  return result;\n};\n\nconst rotMatrix = new THREE.Matrix4();\nconst posNew = new THREE.Vector3();\nconst ray = new THREE.Ray();\nconst intersection = new THREE.Vector3();\nconst AxisRotator = ({\n  dir1,\n  dir2,\n  axis\n}) => {\n  const {\n    rotationLimits,\n    annotations,\n    annotationsClass,\n    depthTest,\n    scale,\n    lineWidth,\n    fixed,\n    axisColors,\n    hoveredColor,\n    opacity,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    userData\n  } = React.useContext(context); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const camControls = useThree(state => state.controls);\n  const divRef = React.useRef(null);\n  const objRef = React.useRef(null);\n  const angle0 = React.useRef(0);\n  const angle = React.useRef(0);\n  const clickInfo = React.useRef(null);\n  const [isHovered, setIsHovered] = React.useState(false);\n  const onPointerDown = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.innerText = `${toDegrees(angle.current).toFixed(0)}ยบ`;\n      divRef.current.style.display = 'block';\n    }\n\n    e.stopPropagation();\n    const clickPoint = e.point.clone();\n    const origin = new THREE.Vector3().setFromMatrixPosition(objRef.current.matrixWorld);\n    const e1 = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 0).normalize();\n    const e2 = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 1).normalize();\n    const normal = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 2).normalize();\n    const plane = new THREE.Plane().setFromNormalAndCoplanarPoint(normal, origin);\n    clickInfo.current = {\n      clickPoint,\n      origin,\n      e1,\n      e2,\n      normal,\n      plane\n    };\n    onDragStart({\n      component: 'Rotator',\n      axis,\n      origin,\n      directions: [e1, e2, normal]\n    });\n    camControls && (camControls.enabled = false); // @ts-ignore\n\n    e.target.setPointerCapture(e.pointerId);\n  }, [annotations, camControls, onDragStart, axis]);\n  const onPointerMove = React.useCallback(e => {\n    e.stopPropagation();\n    if (!isHovered) setIsHovered(true);\n\n    if (clickInfo.current) {\n      const {\n        clickPoint,\n        origin,\n        e1,\n        e2,\n        normal,\n        plane\n      } = clickInfo.current;\n      const [min, max] = (rotationLimits == null ? void 0 : rotationLimits[axis]) || [undefined, undefined];\n      ray.copy(e.ray);\n      ray.intersectPlane(plane, intersection);\n      ray.direction.negate();\n      ray.intersectPlane(plane, intersection);\n      let deltaAngle = calculateAngle(clickPoint, intersection, origin, e1, e2);\n      let degrees = toDegrees(deltaAngle); // @ts-ignore\n\n      if (e.shiftKey) {\n        degrees = Math.round(degrees / 10) * 10;\n        deltaAngle = toRadians(degrees);\n      }\n\n      if (min !== undefined && max !== undefined && max - min < 2 * Math.PI) {\n        deltaAngle = minimizeAngle(deltaAngle);\n        deltaAngle = deltaAngle > Math.PI ? deltaAngle - 2 * Math.PI : deltaAngle;\n        deltaAngle = clamp(deltaAngle, min - angle0.current, max - angle0.current);\n        angle.current = angle0.current + deltaAngle;\n      } else {\n        angle.current = minimizeAngle(angle0.current + deltaAngle);\n        angle.current = angle.current > Math.PI ? angle.current - 2 * Math.PI : angle.current;\n      }\n\n      if (annotations) {\n        degrees = toDegrees(angle.current);\n        divRef.current.innerText = `${degrees.toFixed(0)}ยบ`;\n      }\n\n      rotMatrix.makeRotationAxis(normal, deltaAngle);\n      posNew.copy(origin).applyMatrix4(rotMatrix).sub(origin).negate();\n      rotMatrix.setPosition(posNew);\n      onDrag(rotMatrix);\n    }\n  }, [annotations, onDrag, isHovered, rotationLimits, axis]);\n  const onPointerUp = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.style.display = 'none';\n    }\n\n    e.stopPropagation();\n    angle0.current = angle.current;\n    clickInfo.current = null;\n    onDragEnd();\n    camControls && (camControls.enabled = true); // @ts-ignore\n\n    e.target.releasePointerCapture(e.pointerId);\n  }, [annotations, camControls, onDragEnd]);\n  const onPointerOut = React.useCallback(e => {\n    e.stopPropagation();\n    setIsHovered(false);\n  }, []);\n  const matrixL = React.useMemo(() => {\n    const dir1N = dir1.clone().normalize();\n    const dir2N = dir2.clone().normalize();\n    return new THREE.Matrix4().makeBasis(dir1N, dir2N, dir1N.clone().cross(dir2N));\n  }, [dir1, dir2]);\n  const r = fixed ? 0.65 : scale * 0.65;\n  const arc = React.useMemo(() => {\n    const segments = 32;\n    const points = [];\n\n    for (let j = 0; j <= segments; j++) {\n      const angle = j * (Math.PI / 2) / segments;\n      points.push(new THREE.Vector3(Math.cos(angle) * r, Math.sin(angle) * r, 0));\n    }\n\n    return points;\n  }, [r]);\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: objRef,\n    onPointerDown: onPointerDown,\n    onPointerMove: onPointerMove,\n    onPointerUp: onPointerUp,\n    onPointerOut: onPointerOut,\n    matrix: matrixL,\n    matrixAutoUpdate: false\n  }, annotations && /*#__PURE__*/React.createElement(Html, {\n    position: [r, r, 0]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'none',\n      background: '#151520',\n      color: 'white',\n      padding: '6px 8px',\n      borderRadius: 7,\n      whiteSpace: 'nowrap'\n    },\n    className: annotationsClass,\n    ref: divRef\n  })), /*#__PURE__*/React.createElement(Line, {\n    points: arc,\n    lineWidth: lineWidth * 4,\n    visible: false,\n    userData: userData\n  }), /*#__PURE__*/React.createElement(Line, {\n    transparent: true,\n    raycast: () => null,\n    depthTest: depthTest,\n    points: arc,\n    lineWidth: lineWidth,\n    color: isHovered ? hoveredColor : axisColors[axis],\n    opacity: opacity,\n    polygonOffset: true,\n    polygonOffsetFactor: -10\n  }));\n};\n\nexport { AxisRotator };\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,IAAI,QAAQ,oBAAoB;AACzC,SAASC,IAAI,QAAQ,YAAY;AACjC,OAAOC,KAAK,MAAM,cAAc;AAChC,SAASC,OAAO,QAAQ,cAAc;AAEtC,MAAMC,QAAQ,GAAG,IAAIN,KAAK,CAACO,OAAO,EAAE;AACpC,MAAMC,eAAe,GAAG,IAAIR,KAAK,CAACO,OAAO,EAAE;AAE3C,MAAME,SAAS,GAAGC,OAAO,IAAIA,OAAO,GAAG,GAAG,GAAGC,IAAI,CAACC,EAAE;AAEpD,MAAMC,SAAS,GAAGC,OAAO,IAAIA,OAAO,GAAGH,IAAI,CAACC,EAAE,GAAG,GAAG;AAEpD,MAAMG,cAAc,GAAGA,CAACC,UAAU,EAAEC,iBAAiB,EAAEC,MAAM,EAAEC,EAAE,EAAEC,EAAE,KAAK;EACxEd,QAAQ,CAACe,IAAI,CAACL,UAAU,CAAC,CAACM,GAAG,CAACJ,MAAM,CAAC;EACrCV,eAAe,CAACa,IAAI,CAACJ,iBAAiB,CAAC,CAACK,GAAG,CAACJ,MAAM,CAAC;EACnD,MAAMK,OAAO,GAAGJ,EAAE,CAACK,GAAG,CAACL,EAAE,CAAC;EAC1B,MAAMM,OAAO,GAAGL,EAAE,CAACI,GAAG,CAACJ,EAAE,CAAC;EAC1B,MAAMM,MAAM,GAAGpB,QAAQ,CAACkB,GAAG,CAACL,EAAE,CAAC,GAAGI,OAAO;EACzC,MAAMI,MAAM,GAAGrB,QAAQ,CAACkB,GAAG,CAACJ,EAAE,CAAC,GAAGK,OAAO;EACzC,MAAMG,aAAa,GAAGpB,eAAe,CAACgB,GAAG,CAACL,EAAE,CAAC,GAAGI,OAAO;EACvD,MAAMM,aAAa,GAAGrB,eAAe,CAACgB,GAAG,CAACJ,EAAE,CAAC,GAAGK,OAAO;EACvD,MAAMK,UAAU,GAAGnB,IAAI,CAACoB,KAAK,CAACJ,MAAM,EAAED,MAAM,CAAC;EAC7C,MAAMM,iBAAiB,GAAGrB,IAAI,CAACoB,KAAK,CAACF,aAAa,EAAED,aAAa,CAAC;EAClE,OAAOI,iBAAiB,GAAGF,UAAU;AACvC,CAAC;AAED,MAAMG,IAAI,GAAGA,CAACC,GAAG,EAAEC,KAAK,KAAK;EAC3B,IAAIC,CAAC,GAAGzB,IAAI,CAAC0B,KAAK,CAACH,GAAG,GAAGC,KAAK,CAAC;EAC/BC,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAGA,CAAC;EACrB,OAAOF,GAAG,GAAGE,CAAC,GAAGD,KAAK;AACxB,CAAC;AAED,MAAMG,aAAa,GAAGC,KAAK,IAAI;EAC7B,IAAIC,MAAM,GAAGP,IAAI,CAACM,KAAK,EAAE,CAAC,GAAG5B,IAAI,CAACC,EAAE,CAAC;EAErC,IAAID,IAAI,CAAC8B,GAAG,CAACD,MAAM,CAAC,GAAG,IAAI,EAAE;IAC3B,OAAO,GAAG;EACZ;EAEA,IAAIA,MAAM,GAAG,GAAG,EAAE;IAChBA,MAAM,IAAI,CAAC,GAAG7B,IAAI,CAACC,EAAE;EACvB;EAEA,OAAO4B,MAAM;AACf,CAAC;AAED,MAAME,SAAS,GAAG,IAAI1C,KAAK,CAAC2C,OAAO,EAAE;AACrC,MAAMC,MAAM,GAAG,IAAI5C,KAAK,CAACO,OAAO,EAAE;AAClC,MAAMsC,GAAG,GAAG,IAAI7C,KAAK,CAAC8C,GAAG,EAAE;AAC3B,MAAMC,YAAY,GAAG,IAAI/C,KAAK,CAACO,OAAO,EAAE;AACxC,MAAMyC,WAAW,GAAGC,IAAA,IAId;EAAA,IAJe;IACnBC,IAAI;IACJC,IAAI;IACJC;EACF,CAAC,GAAAH,IAAA;EACC,MAAM;IACJI,cAAc;IACdC,WAAW;IACXC,gBAAgB;IAChBC,SAAS;IACTC,KAAK;IACLC,SAAS;IACTC,KAAK;IACLC,UAAU;IACVC,YAAY;IACZC,OAAO;IACPC,WAAW;IACXC,MAAM;IACNC,SAAS;IACTC;EACF,CAAC,GAAGnE,KAAK,CAACoE,UAAU,CAAC9D,OAAO,CAAC,CAAC,CAAC;;EAE/B,MAAM+D,WAAW,GAAGnE,QAAQ,CAACoE,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAC;EACrD,MAAMC,MAAM,GAAGxE,KAAK,CAACyE,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMC,MAAM,GAAG1E,KAAK,CAACyE,MAAM,CAAC,IAAI,CAAC;EACjC,MAAME,MAAM,GAAG3E,KAAK,CAACyE,MAAM,CAAC,CAAC,CAAC;EAC9B,MAAMjC,KAAK,GAAGxC,KAAK,CAACyE,MAAM,CAAC,CAAC,CAAC;EAC7B,MAAMG,SAAS,GAAG5E,KAAK,CAACyE,MAAM,CAAC,IAAI,CAAC;EACpC,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAG9E,KAAK,CAAC+E,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMC,aAAa,GAAGhF,KAAK,CAACiF,WAAW,CAACC,CAAC,IAAI;IAC3C,IAAI3B,WAAW,EAAE;MACfiB,MAAM,CAACW,OAAO,CAACC,SAAS,GAAI,GAAE1E,SAAS,CAAC8B,KAAK,CAAC2C,OAAO,CAAC,CAACE,OAAO,CAAC,CAAC,CAAE,GAAE;MACpEb,MAAM,CAACW,OAAO,CAACG,KAAK,CAACC,OAAO,GAAG,OAAO;IACxC;IAEAL,CAAC,CAACM,eAAe,EAAE;IACnB,MAAMvE,UAAU,GAAGiE,CAAC,CAACO,KAAK,CAACC,KAAK,EAAE;IAClC,MAAMvE,MAAM,GAAG,IAAIlB,KAAK,CAACO,OAAO,EAAE,CAACmF,qBAAqB,CAACjB,MAAM,CAACS,OAAO,CAACS,WAAW,CAAC;IACpF,MAAMxE,EAAE,GAAG,IAAInB,KAAK,CAACO,OAAO,EAAE,CAACqF,mBAAmB,CAACnB,MAAM,CAACS,OAAO,CAACS,WAAW,EAAE,CAAC,CAAC,CAACE,SAAS,EAAE;IAC7F,MAAMzE,EAAE,GAAG,IAAIpB,KAAK,CAACO,OAAO,EAAE,CAACqF,mBAAmB,CAACnB,MAAM,CAACS,OAAO,CAACS,WAAW,EAAE,CAAC,CAAC,CAACE,SAAS,EAAE;IAC7F,MAAMC,MAAM,GAAG,IAAI9F,KAAK,CAACO,OAAO,EAAE,CAACqF,mBAAmB,CAACnB,MAAM,CAACS,OAAO,CAACS,WAAW,EAAE,CAAC,CAAC,CAACE,SAAS,EAAE;IACjG,MAAME,KAAK,GAAG,IAAI/F,KAAK,CAACgG,KAAK,EAAE,CAACC,6BAA6B,CAACH,MAAM,EAAE5E,MAAM,CAAC;IAC7EyD,SAAS,CAACO,OAAO,GAAG;MAClBlE,UAAU;MACVE,MAAM;MACNC,EAAE;MACFC,EAAE;MACF0E,MAAM;MACNC;IACF,CAAC;IACDhC,WAAW,CAAC;MACVmC,SAAS,EAAE,SAAS;MACpB9C,IAAI;MACJlC,MAAM;MACNiF,UAAU,EAAE,CAAChF,EAAE,EAAEC,EAAE,EAAE0E,MAAM;IAC7B,CAAC,CAAC;IACF1B,WAAW,KAAKA,WAAW,CAACgC,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC;;IAE9CnB,CAAC,CAACoB,MAAM,CAACC,iBAAiB,CAACrB,CAAC,CAACsB,SAAS,CAAC;EACzC,CAAC,EAAE,CAACjD,WAAW,EAAEc,WAAW,EAAEL,WAAW,EAAEX,IAAI,CAAC,CAAC;EACjD,MAAMoD,aAAa,GAAGzG,KAAK,CAACiF,WAAW,CAACC,CAAC,IAAI;IAC3CA,CAAC,CAACM,eAAe,EAAE;IACnB,IAAI,CAACX,SAAS,EAAEC,YAAY,CAAC,IAAI,CAAC;IAElC,IAAIF,SAAS,CAACO,OAAO,EAAE;MACrB,MAAM;QACJlE,UAAU;QACVE,MAAM;QACNC,EAAE;QACFC,EAAE;QACF0E,MAAM;QACNC;MACF,CAAC,GAAGpB,SAAS,CAACO,OAAO;MACrB,MAAM,CAACuB,GAAG,EAAEC,GAAG,CAAC,GAAG,CAACrD,cAAc,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACD,IAAI,CAAC,KAAK,CAACuD,SAAS,EAAEA,SAAS,CAAC;MACrG9D,GAAG,CAACxB,IAAI,CAAC4D,CAAC,CAACpC,GAAG,CAAC;MACfA,GAAG,CAAC+D,cAAc,CAACb,KAAK,EAAEhD,YAAY,CAAC;MACvCF,GAAG,CAACgE,SAAS,CAACC,MAAM,EAAE;MACtBjE,GAAG,CAAC+D,cAAc,CAACb,KAAK,EAAEhD,YAAY,CAAC;MACvC,IAAIgE,UAAU,GAAGhG,cAAc,CAACC,UAAU,EAAE+B,YAAY,EAAE7B,MAAM,EAAEC,EAAE,EAAEC,EAAE,CAAC;MACzE,IAAIN,OAAO,GAAGL,SAAS,CAACsG,UAAU,CAAC,CAAC,CAAC;;MAErC,IAAI9B,CAAC,CAAC+B,QAAQ,EAAE;QACdlG,OAAO,GAAGH,IAAI,CAACsG,KAAK,CAACnG,OAAO,GAAG,EAAE,CAAC,GAAG,EAAE;QACvCiG,UAAU,GAAGlG,SAAS,CAACC,OAAO,CAAC;MACjC;MAEA,IAAI2F,GAAG,KAAKE,SAAS,IAAID,GAAG,KAAKC,SAAS,IAAID,GAAG,GAAGD,GAAG,GAAG,CAAC,GAAG9F,IAAI,CAACC,EAAE,EAAE;QACrEmG,UAAU,GAAGzE,aAAa,CAACyE,UAAU,CAAC;QACtCA,UAAU,GAAGA,UAAU,GAAGpG,IAAI,CAACC,EAAE,GAAGmG,UAAU,GAAG,CAAC,GAAGpG,IAAI,CAACC,EAAE,GAAGmG,UAAU;QACzEA,UAAU,GAAG3G,KAAK,CAAC2G,UAAU,EAAEN,GAAG,GAAG/B,MAAM,CAACQ,OAAO,EAAEwB,GAAG,GAAGhC,MAAM,CAACQ,OAAO,CAAC;QAC1E3C,KAAK,CAAC2C,OAAO,GAAGR,MAAM,CAACQ,OAAO,GAAG6B,UAAU;MAC7C,CAAC,MAAM;QACLxE,KAAK,CAAC2C,OAAO,GAAG5C,aAAa,CAACoC,MAAM,CAACQ,OAAO,GAAG6B,UAAU,CAAC;QAC1DxE,KAAK,CAAC2C,OAAO,GAAG3C,KAAK,CAAC2C,OAAO,GAAGvE,IAAI,CAACC,EAAE,GAAG2B,KAAK,CAAC2C,OAAO,GAAG,CAAC,GAAGvE,IAAI,CAACC,EAAE,GAAG2B,KAAK,CAAC2C,OAAO;MACvF;MAEA,IAAI5B,WAAW,EAAE;QACfxC,OAAO,GAAGL,SAAS,CAAC8B,KAAK,CAAC2C,OAAO,CAAC;QAClCX,MAAM,CAACW,OAAO,CAACC,SAAS,GAAI,GAAErE,OAAO,CAACsE,OAAO,CAAC,CAAC,CAAE,GAAE;MACrD;MAEA1C,SAAS,CAACwE,gBAAgB,CAACpB,MAAM,EAAEiB,UAAU,CAAC;MAC9CnE,MAAM,CAACvB,IAAI,CAACH,MAAM,CAAC,CAACiG,YAAY,CAACzE,SAAS,CAAC,CAACpB,GAAG,CAACJ,MAAM,CAAC,CAAC4F,MAAM,EAAE;MAChEpE,SAAS,CAAC0E,WAAW,CAACxE,MAAM,CAAC;MAC7BoB,MAAM,CAACtB,SAAS,CAAC;IACnB;EACF,CAAC,EAAE,CAACY,WAAW,EAAEU,MAAM,EAAEY,SAAS,EAAEvB,cAAc,EAAED,IAAI,CAAC,CAAC;EAC1D,MAAMiE,WAAW,GAAGtH,KAAK,CAACiF,WAAW,CAACC,CAAC,IAAI;IACzC,IAAI3B,WAAW,EAAE;MACfiB,MAAM,CAACW,OAAO,CAACG,KAAK,CAACC,OAAO,GAAG,MAAM;IACvC;IAEAL,CAAC,CAACM,eAAe,EAAE;IACnBb,MAAM,CAACQ,OAAO,GAAG3C,KAAK,CAAC2C,OAAO;IAC9BP,SAAS,CAACO,OAAO,GAAG,IAAI;IACxBjB,SAAS,EAAE;IACXG,WAAW,KAAKA,WAAW,CAACgC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC;;IAE7CnB,CAAC,CAACoB,MAAM,CAACiB,qBAAqB,CAACrC,CAAC,CAACsB,SAAS,CAAC;EAC7C,CAAC,EAAE,CAACjD,WAAW,EAAEc,WAAW,EAAEH,SAAS,CAAC,CAAC;EACzC,MAAMsD,YAAY,GAAGxH,KAAK,CAACiF,WAAW,CAACC,CAAC,IAAI;IAC1CA,CAAC,CAACM,eAAe,EAAE;IACnBV,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EACN,MAAM2C,OAAO,GAAGzH,KAAK,CAAC0H,OAAO,CAAC,MAAM;IAClC,MAAMC,KAAK,GAAGxE,IAAI,CAACuC,KAAK,EAAE,CAACI,SAAS,EAAE;IACtC,MAAM8B,KAAK,GAAGxE,IAAI,CAACsC,KAAK,EAAE,CAACI,SAAS,EAAE;IACtC,OAAO,IAAI7F,KAAK,CAAC2C,OAAO,EAAE,CAACiF,SAAS,CAACF,KAAK,EAAEC,KAAK,EAAED,KAAK,CAACjC,KAAK,EAAE,CAACoC,KAAK,CAACF,KAAK,CAAC,CAAC;EAChF,CAAC,EAAE,CAACzE,IAAI,EAAEC,IAAI,CAAC,CAAC;EAChB,MAAM2E,CAAC,GAAGnE,KAAK,GAAG,IAAI,GAAGF,KAAK,GAAG,IAAI;EACrC,MAAMsE,GAAG,GAAGhI,KAAK,CAAC0H,OAAO,CAAC,MAAM;IAC9B,MAAMO,QAAQ,GAAG,EAAE;IACnB,MAAMC,MAAM,GAAG,EAAE;IAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MAClC,MAAM3F,KAAK,GAAG2F,CAAC,IAAIvH,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC,GAAGoH,QAAQ;MAC1CC,MAAM,CAACE,IAAI,CAAC,IAAInI,KAAK,CAACO,OAAO,CAACI,IAAI,CAACyH,GAAG,CAAC7F,KAAK,CAAC,GAAGuF,CAAC,EAAEnH,IAAI,CAAC0H,GAAG,CAAC9F,KAAK,CAAC,GAAGuF,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7E;IAEA,OAAOG,MAAM;EACf,CAAC,EAAE,CAACH,CAAC,CAAC,CAAC;EACP,OAAO,aAAa/H,KAAK,CAACuI,aAAa,CAAC,OAAO,EAAE;IAC/CC,GAAG,EAAE9D,MAAM;IACXM,aAAa,EAAEA,aAAa;IAC5ByB,aAAa,EAAEA,aAAa;IAC5Ba,WAAW,EAAEA,WAAW;IACxBE,YAAY,EAAEA,YAAY;IAC1BiB,MAAM,EAAEhB,OAAO;IACfiB,gBAAgB,EAAE;EACpB,CAAC,EAAEnF,WAAW,IAAI,aAAavD,KAAK,CAACuI,aAAa,CAACnI,IAAI,EAAE;IACvDuI,QAAQ,EAAE,CAACZ,CAAC,EAAEA,CAAC,EAAE,CAAC;EACpB,CAAC,EAAE,aAAa/H,KAAK,CAACuI,aAAa,CAAC,KAAK,EAAE;IACzCjD,KAAK,EAAE;MACLC,OAAO,EAAE,MAAM;MACfqD,UAAU,EAAE,SAAS;MACrBC,KAAK,EAAE,OAAO;MACdC,OAAO,EAAE,SAAS;MAClBC,YAAY,EAAE,CAAC;MACfC,UAAU,EAAE;IACd,CAAC;IACDC,SAAS,EAAEzF,gBAAgB;IAC3BgF,GAAG,EAAEhE;EACP,CAAC,CAAC,CAAC,EAAE,aAAaxE,KAAK,CAACuI,aAAa,CAACpI,IAAI,EAAE;IAC1C+H,MAAM,EAAEF,GAAG;IACXrE,SAAS,EAAEA,SAAS,GAAG,CAAC;IACxBuF,OAAO,EAAE,KAAK;IACd/E,QAAQ,EAAEA;EACZ,CAAC,CAAC,EAAE,aAAanE,KAAK,CAACuI,aAAa,CAACpI,IAAI,EAAE;IACzCgJ,WAAW,EAAE,IAAI;IACjBC,OAAO,EAAEA,CAAA,KAAM,IAAI;IACnB3F,SAAS,EAAEA,SAAS;IACpByE,MAAM,EAAEF,GAAG;IACXrE,SAAS,EAAEA,SAAS;IACpBkF,KAAK,EAAEhE,SAAS,GAAGf,YAAY,GAAGD,UAAU,CAACR,IAAI,CAAC;IAClDU,OAAO,EAAEA,OAAO;IAChBsF,aAAa,EAAE,IAAI;IACnBC,mBAAmB,EAAE,CAAC;EACxB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAASrG,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}