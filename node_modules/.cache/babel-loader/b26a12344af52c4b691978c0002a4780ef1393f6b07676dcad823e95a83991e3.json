{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.firstForTerminal = exports.firstForBranching = exports.firstForSequence = exports.first = void 0;\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\nvar uniq_1 = __importDefault(require(\"lodash/uniq\"));\nvar map_1 = __importDefault(require(\"lodash/map\"));\nvar gast_1 = require(\"@chevrotain/gast\");\nvar gast_2 = require(\"@chevrotain/gast\");\nfunction first(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof gast_1.NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first(prod.referencedRule);\n  } else if (prod instanceof gast_1.Terminal) {\n    return firstForTerminal(prod);\n  } else if ((0, gast_2.isSequenceProd)(prod)) {\n    return firstForSequence(prod);\n  } else if ((0, gast_2.isBranchingProd)(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nexports.first = first;\nfunction firstForSequence(prod) {\n  var firstSet = [];\n  var seq = prod.definition;\n  var nextSubProdIdx = 0;\n  var hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  var currSubProd;\n  // so we enter the loop at least once (if the definition is not empty\n  var isLastInnerProdOptional = true;\n  // scan a sequence until it's end or until we have found a NONE optional production in it\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = (0, gast_2.isOptionalProd)(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n  return (0, uniq_1.default)(firstSet);\n}\nexports.firstForSequence = firstForSequence;\nfunction firstForBranching(prod) {\n  var allAlternativesFirsts = (0, map_1.default)(prod.definition, function (innerProd) {\n    return first(innerProd);\n  });\n  return (0, uniq_1.default)((0, flatten_1.default)(allAlternativesFirsts));\n}\nexports.firstForBranching = firstForBranching;\nfunction firstForTerminal(terminal) {\n  return [terminal.terminalType];\n}\nexports.firstForTerminal = firstForTerminal;","map":{"version":3,"names":["flatten_1","__importDefault","require","uniq_1","map_1","gast_1","gast_2","first","prod","NonTerminal","referencedRule","Terminal","firstForTerminal","isSequenceProd","firstForSequence","isBranchingProd","firstForBranching","Error","exports","firstSet","seq","definition","nextSubProdIdx","hasInnerProdsRemaining","length","currSubProd","isLastInnerProdOptional","isOptionalProd","concat","default","allAlternativesFirsts","innerProd","terminal","terminalType"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/chevrotain/src/parse/grammar/first.ts"],"sourcesContent":["import flatten from \"lodash/flatten\"\nimport uniq from \"lodash/uniq\"\nimport map from \"lodash/map\"\nimport { NonTerminal, Terminal } from \"@chevrotain/gast\"\nimport {\n  isBranchingProd,\n  isOptionalProd,\n  isSequenceProd\n} from \"@chevrotain/gast\"\nimport { IProduction, TokenType } from \"@chevrotain/types\"\n\nexport function first(prod: IProduction): TokenType[] {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first((<NonTerminal>prod).referencedRule)\n  } else if (prod instanceof Terminal) {\n    return firstForTerminal(<Terminal>prod)\n  } else if (isSequenceProd(prod)) {\n    return firstForSequence(prod)\n  } else if (isBranchingProd(prod)) {\n    return firstForBranching(prod)\n  } else {\n    throw Error(\"non exhaustive match\")\n  }\n}\n\nexport function firstForSequence(prod: {\n  definition: IProduction[]\n}): TokenType[] {\n  let firstSet: TokenType[] = []\n  const seq = prod.definition\n  let nextSubProdIdx = 0\n  let hasInnerProdsRemaining = seq.length > nextSubProdIdx\n  let currSubProd\n  // so we enter the loop at least once (if the definition is not empty\n  let isLastInnerProdOptional = true\n  // scan a sequence until it's end or until we have found a NONE optional production in it\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx]\n    isLastInnerProdOptional = isOptionalProd(currSubProd)\n    firstSet = firstSet.concat(first(currSubProd))\n    nextSubProdIdx = nextSubProdIdx + 1\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx\n  }\n\n  return uniq(firstSet)\n}\n\nexport function firstForBranching(prod: {\n  definition: IProduction[]\n}): TokenType[] {\n  const allAlternativesFirsts: TokenType[][] = map(\n    prod.definition,\n    (innerProd) => {\n      return first(innerProd)\n    }\n  )\n  return uniq(flatten<TokenType>(allAlternativesFirsts))\n}\n\nexport function firstForTerminal(terminal: Terminal): TokenType[] {\n  return [terminal.terminalType]\n}\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,SAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,IAAAC,MAAA,GAAAF,eAAA,CAAAC,OAAA;AACA,IAAAE,KAAA,GAAAH,eAAA,CAAAC,OAAA;AACA,IAAAG,MAAA,GAAAH,OAAA;AACA,IAAAI,MAAA,GAAAJ,OAAA;AAOA,SAAgBK,KAAKA,CAACC,IAAiB;EACrC;EACA,IAAIA,IAAI,YAAYH,MAAA,CAAAI,WAAW,EAAE;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAOF,KAAK,CAAeC,IAAK,CAACE,cAAc,CAAC;GACjD,MAAM,IAAIF,IAAI,YAAYH,MAAA,CAAAM,QAAQ,EAAE;IACnC,OAAOC,gBAAgB,CAAWJ,IAAI,CAAC;GACxC,MAAM,IAAI,IAAAF,MAAA,CAAAO,cAAc,EAACL,IAAI,CAAC,EAAE;IAC/B,OAAOM,gBAAgB,CAACN,IAAI,CAAC;GAC9B,MAAM,IAAI,IAAAF,MAAA,CAAAS,eAAe,EAACP,IAAI,CAAC,EAAE;IAChC,OAAOQ,iBAAiB,CAACR,IAAI,CAAC;GAC/B,MAAM;IACL,MAAMS,KAAK,CAAC,sBAAsB,CAAC;;AAEvC;AArBAC,OAAA,CAAAX,KAAA,GAAAA,KAAA;AAuBA,SAAgBO,gBAAgBA,CAACN,IAEhC;EACC,IAAIW,QAAQ,GAAgB,EAAE;EAC9B,IAAMC,GAAG,GAAGZ,IAAI,CAACa,UAAU;EAC3B,IAAIC,cAAc,GAAG,CAAC;EACtB,IAAIC,sBAAsB,GAAGH,GAAG,CAACI,MAAM,GAAGF,cAAc;EACxD,IAAIG,WAAW;EACf;EACA,IAAIC,uBAAuB,GAAG,IAAI;EAClC;EACA,OAAOH,sBAAsB,IAAIG,uBAAuB,EAAE;IACxDD,WAAW,GAAGL,GAAG,CAACE,cAAc,CAAC;IACjCI,uBAAuB,GAAG,IAAApB,MAAA,CAAAqB,cAAc,EAACF,WAAW,CAAC;IACrDN,QAAQ,GAAGA,QAAQ,CAACS,MAAM,CAACrB,KAAK,CAACkB,WAAW,CAAC,CAAC;IAC9CH,cAAc,GAAGA,cAAc,GAAG,CAAC;IACnCC,sBAAsB,GAAGH,GAAG,CAACI,MAAM,GAAGF,cAAc;;EAGtD,OAAO,IAAAnB,MAAA,CAAA0B,OAAI,EAACV,QAAQ,CAAC;AACvB;AApBAD,OAAA,CAAAJ,gBAAA,GAAAA,gBAAA;AAsBA,SAAgBE,iBAAiBA,CAACR,IAEjC;EACC,IAAMsB,qBAAqB,GAAkB,IAAA1B,KAAA,CAAAyB,OAAG,EAC9CrB,IAAI,CAACa,UAAU,EACf,UAACU,SAAS;IACR,OAAOxB,KAAK,CAACwB,SAAS,CAAC;EACzB,CAAC,CACF;EACD,OAAO,IAAA5B,MAAA,CAAA0B,OAAI,EAAC,IAAA7B,SAAA,CAAA6B,OAAO,EAAYC,qBAAqB,CAAC,CAAC;AACxD;AAVAZ,OAAA,CAAAF,iBAAA,GAAAA,iBAAA;AAYA,SAAgBJ,gBAAgBA,CAACoB,QAAkB;EACjD,OAAO,CAACA,QAAQ,CAACC,YAAY,CAAC;AAChC;AAFAf,OAAA,CAAAN,gBAAA,GAAAA,gBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}