{"ast":null,"code":"import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format } from 'three';\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\n\nconst _taskCache = new WeakMap();\nclass BasisTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    const texture = new CompressedTexture();\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n      this._createTexture([buffer]).then(function (_texture) {\n        texture.copy(_texture);\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }).catch(onError);\n    }, onProgress, onError);\n    return texture;\n  }\n  /** Low-level transcoding API, exposed for use by KTX2Loader. */\n\n  parseInternalAsync(options) {\n    const {\n      levels\n    } = options;\n    const buffers = new Set();\n    for (let i = 0; i < levels.length; i++) {\n      buffers.add(levels[i].data.buffer);\n    }\n    return this._createTexture(Array.from(buffers), {\n      ...options,\n      lowLevel: true\n    });\n  }\n  /**\n   * @param {ArrayBuffer[]} buffers\n   * @param {object?} config\n   * @return {Promise<CompressedTexture>}\n   */\n\n  _createTexture(buffers) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let worker;\n    let taskID;\n    const taskConfig = config;\n    let taskCost = 0;\n    for (let i = 0; i < buffers.length; i++) {\n      taskCost += buffers[i].byteLength;\n    }\n    const texturePending = this._allocateWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'transcode',\n          id: taskID,\n          buffers: buffers,\n          taskConfig: taskConfig\n        }, buffers);\n      });\n    }).then(message => {\n      const {\n        mipmaps,\n        width,\n        height,\n        format\n      } = message;\n      const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      return texture;\n    }); // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n    texturePending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        worker._taskLoad -= taskCost;\n        delete worker._callbacks[taskID];\n      }\n    }); // Cache the task result.\n\n    _taskCache.set(buffers[0], {\n      promise: texturePending\n    });\n    return texturePending;\n  }\n  _initTranscoder() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('basis_transcoder.js', resolve, undefined, reject);\n      }); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\n      });\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(_ref => {\n        let [jsContent, binaryContent] = _ref;\n        const fn = BasisTextureLoader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(BasisTextureLoader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(BasisTextureLoader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(BasisTextureLoader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n      });\n    }\n    return this.transcoderPending;\n  }\n  _allocateWorker(taskCost) {\n    return this._initTranscoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          config: this.workerConfig,\n          transcoderBinary: this.transcoderBinary\n        });\n        worker.onmessage = function (e) {\n          const message = e.data;\n          switch (message.type) {\n            case 'transcode':\n              worker._callbacks[message.id].resolve(message);\n              break;\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; i++) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n}\n/* CONSTANTS */\n\nBasisTextureLoader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nBasisTextureLoader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nBasisTextureLoader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  onmessage = function (e) {\n    const message = e.data;\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            } = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]);\n            const buffers = [];\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n    });\n  }\n  function transcodeLowLevel(taskConfig) {\n    const {\n      basisFormat,\n      width,\n      height,\n      hasAlpha\n    } = taskConfig;\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), 'THREE.BasisTextureLoader: Unsupported format.');\n    const mipmaps = [];\n    if (basisFormat === BasisFormat.ETC1S) {\n      const transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      const {\n        endpointCount,\n        endpointsData,\n        selectorCount,\n        selectorsData,\n        tablesData\n      } = taskConfig.globalData;\n      try {\n        let ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, 'THREE.BasisTextureLoader: decodePalettes() failed.');\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, 'THREE.BasisTextureLoader: decodeTables() failed.');\n        for (let i = 0; i < taskConfig.levels.length; i++) {\n          const level = taskConfig.levels[i];\n          const imageDesc = taskConfig.globalData.imageDescs[i];\n          const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          const dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.');\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (let i = 0; i < taskConfig.levels.length; i++) {\n        const level = taskConfig.levels[i];\n        const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n        const dst = new Uint8Array(dstByteLength);\n        const ok = BasisModule.transcodeUASTCImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, 0, level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n        assert(ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + level.index + '.');\n        mipmaps.push({\n          data: dst,\n          width: level.width,\n          height: level.height\n        });\n      }\n    }\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  }\n  function transcode(buffer) {\n    const basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    const basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = basisFile.getImageWidth(0, 0);\n    const height = basisFile.getImageHeight(0, 0);\n    const levels = basisFile.getNumLevels(0);\n    const hasAlpha = basisFile.getHasAlpha();\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader:\tInvalid texture');\n    }\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\n    }\n    const mipmaps = [];\n    for (let mip = 0; mip < levels; mip++) {\n      const mipWidth = basisFile.getImageWidth(0, mip);\n      const mipHeight = basisFile.getImageHeight(0, mip);\n      const dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      const status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\n      }\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n    console.warn('THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      // GL requires extra padding for very small textures:\n      // https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\n      const paddedWidth = width + 3 & ~3;\n      const paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n};\nexport { BasisTextureLoader };","map":{"version":3,"names":["Loader","FileLoader","CompressedTexture","UnsignedByteType","LinearFilter","LinearMipmapLinearFilter","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","_taskCache","WeakMap","BasisTextureLoader","constructor","manager","transcoderPath","transcoderBinary","transcoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","setTranscoderPath","path","setWorkerLimit","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","load","url","onLoad","onProgress","onError","loader","setResponseType","setWithCredentials","withCredentials","texture","buffer","cachedTask","get","promise","then","catch","_createTexture","_texture","copy","needsUpdate","parseInternalAsync","options","levels","buffers","Set","i","length","add","data","Array","from","lowLevel","config","arguments","undefined","worker","taskID","taskConfig","taskCost","byteLength","texturePending","_allocateWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","mipmaps","width","height","format","minFilter","magFilter","generateMipmaps","_taskLoad","set","_initTranscoder","jsLoader","setPath","jsContent","binaryLoader","binaryContent","all","_ref","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","onmessage","e","console","error","push","sort","a","b","dispose","terminate","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","init","hasAlpha","transcodeLowLevel","transcode","self","wasmBinary","onRuntimeInitialized","BASIS","initializeBasis","basisFormat","transcoderFormat","engineFormat","getTranscoderFormat","blockByteLength","getBytesPerBlockOrPixel","assert","isFormatSupported","transcoder","LowLevelETC1SImageTranscoder","endpointCount","endpointsData","selectorCount","selectorsData","tablesData","globalData","ok","decodePalettes","decodeTables","level","imageDesc","imageDescs","dstByteLength","getTranscodedImageByteLength","dst","Uint8Array","transcodeImage","getWidthInBlocks","getHeightInBlocks","index","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","imageFlags","delete","transcodeUASTCImage","basisFile","BasisFile","isUASTC","getImageWidth","getImageHeight","getNumLevels","getHasAlpha","cleanup","close","Error","startTranscoding","mip","mipWidth","mipHeight","getImageTranscodedSizeInBytes","status","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","UASTC_OPTIONS","opt","includes","isPowerOfTwo","warn","Math","ceil","getFormatBlockWidth","getFormatBlockHeight","formatIsUncompressed","paddedWidth","paddedHeight","max","value"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/loaders/BasisTextureLoader.js"],"sourcesContent":["import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format } from 'three';\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\n\nconst _taskCache = new WeakMap();\n\nclass BasisTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    const texture = new CompressedTexture();\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture([buffer]).then(function (_texture) {\n        texture.copy(_texture);\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }).catch(onError);\n    }, onProgress, onError);\n    return texture;\n  }\n  /** Low-level transcoding API, exposed for use by KTX2Loader. */\n\n\n  parseInternalAsync(options) {\n    const {\n      levels\n    } = options;\n    const buffers = new Set();\n\n    for (let i = 0; i < levels.length; i++) {\n      buffers.add(levels[i].data.buffer);\n    }\n\n    return this._createTexture(Array.from(buffers), { ...options,\n      lowLevel: true\n    });\n  }\n  /**\n   * @param {ArrayBuffer[]} buffers\n   * @param {object?} config\n   * @return {Promise<CompressedTexture>}\n   */\n\n\n  _createTexture(buffers, config = {}) {\n    let worker;\n    let taskID;\n    const taskConfig = config;\n    let taskCost = 0;\n\n    for (let i = 0; i < buffers.length; i++) {\n      taskCost += buffers[i].byteLength;\n    }\n\n    const texturePending = this._allocateWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'transcode',\n          id: taskID,\n          buffers: buffers,\n          taskConfig: taskConfig\n        }, buffers);\n      });\n    }).then(message => {\n      const {\n        mipmaps,\n        width,\n        height,\n        format\n      } = message;\n      const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      return texture;\n    }); // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    texturePending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        worker._taskLoad -= taskCost;\n        delete worker._callbacks[taskID];\n      }\n    }); // Cache the task result.\n\n    _taskCache.set(buffers[0], {\n      promise: texturePending\n    });\n\n    return texturePending;\n  }\n\n  _initTranscoder() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('basis_transcoder.js', resolve, undefined, reject);\n      }); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\n      });\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = BasisTextureLoader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(BasisTextureLoader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(BasisTextureLoader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(BasisTextureLoader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n      });\n    }\n\n    return this.transcoderPending;\n  }\n\n  _allocateWorker(taskCost) {\n    return this._initTranscoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          config: this.workerConfig,\n          transcoderBinary: this.transcoderBinary\n        });\n\n        worker.onmessage = function (e) {\n          const message = e.data;\n\n          switch (message.type) {\n            case 'transcode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; i++) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n\n}\n/* CONSTANTS */\n\n\nBasisTextureLoader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nBasisTextureLoader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nBasisTextureLoader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  onmessage = function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            } = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]);\n            const buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n    });\n  }\n\n  function transcodeLowLevel(taskConfig) {\n    const {\n      basisFormat,\n      width,\n      height,\n      hasAlpha\n    } = taskConfig;\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), 'THREE.BasisTextureLoader: Unsupported format.');\n    const mipmaps = [];\n\n    if (basisFormat === BasisFormat.ETC1S) {\n      const transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      const {\n        endpointCount,\n        endpointsData,\n        selectorCount,\n        selectorsData,\n        tablesData\n      } = taskConfig.globalData;\n\n      try {\n        let ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, 'THREE.BasisTextureLoader: decodePalettes() failed.');\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, 'THREE.BasisTextureLoader: decodeTables() failed.');\n\n        for (let i = 0; i < taskConfig.levels.length; i++) {\n          const level = taskConfig.levels[i];\n          const imageDesc = taskConfig.globalData.imageDescs[i];\n          const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          const dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.');\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (let i = 0; i < taskConfig.levels.length; i++) {\n        const level = taskConfig.levels[i];\n        const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n        const dst = new Uint8Array(dstByteLength);\n        const ok = BasisModule.transcodeUASTCImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, 0, level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n        assert(ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + level.index + '.');\n        mipmaps.push({\n          data: dst,\n          width: level.width,\n          height: level.height\n        });\n      }\n    }\n\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  }\n\n  function transcode(buffer) {\n    const basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    const basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = basisFile.getImageWidth(0, 0);\n    const height = basisFile.getImageHeight(0, 0);\n    const levels = basisFile.getNumLevels(0);\n    const hasAlpha = basisFile.getHasAlpha();\n\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader:\tInvalid texture');\n    }\n\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\n    }\n\n    const mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      const mipWidth = basisFile.getImageWidth(0, mip);\n      const mipHeight = basisFile.getImageHeight(0, mip);\n      const dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      const status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn('THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      // GL requires extra padding for very small textures:\n      // https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\n      const paddedWidth = width + 3 & ~3;\n      const paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n};\n\nexport { BasisTextureLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}