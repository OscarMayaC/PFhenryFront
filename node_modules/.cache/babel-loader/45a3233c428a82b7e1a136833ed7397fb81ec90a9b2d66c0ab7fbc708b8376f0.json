{"ast":null,"code":"import { useState, useRef, useEffect, useMemo } from 'react';\nimport createDebounce from 'debounce';\nfunction useMeasure(_temp) {\n  let {\n    debounce,\n    scroll,\n    polyfill,\n    offsetSize\n  } = _temp === void 0 ? {\n    debounce: 0,\n    scroll: false,\n    offsetSize: false\n  } : _temp;\n  const ResizeObserver = polyfill || (typeof window === 'undefined' ? class ResizeObserver {} : window.ResizeObserver);\n  if (!ResizeObserver) {\n    throw new Error('This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills');\n  }\n  const [bounds, set] = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n    bottom: 0,\n    right: 0,\n    x: 0,\n    y: 0\n  }); // keep all state in a ref\n\n  const state = useRef({\n    element: null,\n    scrollContainers: null,\n    resizeObserver: null,\n    lastBounds: bounds\n  }); // set actual debounce values early, so effects know if they should react accordingly\n\n  const scrollDebounce = debounce ? typeof debounce === 'number' ? debounce : debounce.scroll : null;\n  const resizeDebounce = debounce ? typeof debounce === 'number' ? debounce : debounce.resize : null; // make sure to update state only as long as the component is truly mounted\n\n  const mounted = useRef(false);\n  useEffect(() => {\n    mounted.current = true;\n    return () => void (mounted.current = false);\n  }); // memoize handlers, so event-listeners know when they should update\n\n  const [forceRefresh, resizeChange, scrollChange] = useMemo(() => {\n    const callback = () => {\n      if (!state.current.element) return;\n      const {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      } = state.current.element.getBoundingClientRect();\n      const size = {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      };\n      if (state.current.element instanceof HTMLElement && offsetSize) {\n        size.height = state.current.element.offsetHeight;\n        size.width = state.current.element.offsetWidth;\n      }\n      Object.freeze(size);\n      if (mounted.current && !areBoundsEqual(state.current.lastBounds, size)) set(state.current.lastBounds = size);\n    };\n    return [callback, resizeDebounce ? createDebounce(callback, resizeDebounce) : callback, scrollDebounce ? createDebounce(callback, scrollDebounce) : callback];\n  }, [set, offsetSize, scrollDebounce, resizeDebounce]); // cleanup current scroll-listeners / observers\n\n  function removeListeners() {\n    if (state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(element => element.removeEventListener('scroll', scrollChange, true));\n      state.current.scrollContainers = null;\n    }\n    if (state.current.resizeObserver) {\n      state.current.resizeObserver.disconnect();\n      state.current.resizeObserver = null;\n    }\n  } // add scroll-listeners / observers\n\n  function addListeners() {\n    if (!state.current.element) return;\n    state.current.resizeObserver = new ResizeObserver(scrollChange);\n    state.current.resizeObserver.observe(state.current.element);\n    if (scroll && state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(scrollContainer => scrollContainer.addEventListener('scroll', scrollChange, {\n        capture: true,\n        passive: true\n      }));\n    }\n  } // the ref we expose to the user\n\n  const ref = node => {\n    if (!node || node === state.current.element) return;\n    removeListeners();\n    state.current.element = node;\n    state.current.scrollContainers = findScrollContainers(node);\n    addListeners();\n  }; // add general event listeners\n\n  useOnWindowScroll(scrollChange, Boolean(scroll));\n  useOnWindowResize(resizeChange); // respond to changes that are relevant for the listeners\n\n  useEffect(() => {\n    removeListeners();\n    addListeners();\n  }, [scroll, scrollChange, resizeChange]); // remove all listeners when the components unmounts\n\n  useEffect(() => removeListeners, []);\n  return [ref, bounds, forceRefresh];\n} // Adds native resize listener to window\n\nfunction useOnWindowResize(onWindowResize) {\n  useEffect(() => {\n    const cb = onWindowResize;\n    window.addEventListener('resize', cb);\n    return () => void window.removeEventListener('resize', cb);\n  }, [onWindowResize]);\n}\nfunction useOnWindowScroll(onScroll, enabled) {\n  useEffect(() => {\n    if (enabled) {\n      const cb = onScroll;\n      window.addEventListener('scroll', cb, {\n        capture: true,\n        passive: true\n      });\n      return () => void window.removeEventListener('scroll', cb, true);\n    }\n  }, [onScroll, enabled]);\n} // Returns a list of scroll offsets\n\nfunction findScrollContainers(element) {\n  const result = [];\n  if (!element || element === document.body) return result;\n  const {\n    overflow,\n    overflowX,\n    overflowY\n  } = window.getComputedStyle(element);\n  if ([overflow, overflowX, overflowY].some(prop => prop === 'auto' || prop === 'scroll')) result.push(element);\n  return [...result, ...findScrollContainers(element.parentElement)];\n} // Checks if element boundaries are equal\n\nconst keys = ['x', 'y', 'top', 'bottom', 'left', 'right', 'width', 'height'];\nconst areBoundsEqual = (a, b) => keys.every(key => a[key] === b[key]);\nexport { useMeasure as default };","map":{"version":3,"names":["useState","useRef","useEffect","useMemo","createDebounce","useMeasure","_temp","debounce","scroll","polyfill","offsetSize","ResizeObserver","window","Error","bounds","set","left","top","width","height","bottom","right","x","y","state","element","scrollContainers","resizeObserver","lastBounds","scrollDebounce","resizeDebounce","resize","mounted","current","forceRefresh","resizeChange","scrollChange","callback","getBoundingClientRect","size","HTMLElement","offsetHeight","offsetWidth","Object","freeze","areBoundsEqual","removeListeners","forEach","removeEventListener","disconnect","addListeners","observe","scrollContainer","addEventListener","capture","passive","ref","node","findScrollContainers","useOnWindowScroll","Boolean","useOnWindowResize","onWindowResize","cb","onScroll","enabled","result","document","body","overflow","overflowX","overflowY","getComputedStyle","some","prop","push","parentElement","keys","a","b","every","key","default"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/react-use-measure/dist/web.js"],"sourcesContent":["import { useState, useRef, useEffect, useMemo } from 'react';\nimport createDebounce from 'debounce';\n\nfunction useMeasure(_temp) {\n  let {\n    debounce,\n    scroll,\n    polyfill,\n    offsetSize\n  } = _temp === void 0 ? {\n    debounce: 0,\n    scroll: false,\n    offsetSize: false\n  } : _temp;\n  const ResizeObserver = polyfill || (typeof window === 'undefined' ? class ResizeObserver {} : window.ResizeObserver);\n\n  if (!ResizeObserver) {\n    throw new Error('This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills');\n  }\n\n  const [bounds, set] = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n    bottom: 0,\n    right: 0,\n    x: 0,\n    y: 0\n  }); // keep all state in a ref\n\n  const state = useRef({\n    element: null,\n    scrollContainers: null,\n    resizeObserver: null,\n    lastBounds: bounds\n  }); // set actual debounce values early, so effects know if they should react accordingly\n\n  const scrollDebounce = debounce ? typeof debounce === 'number' ? debounce : debounce.scroll : null;\n  const resizeDebounce = debounce ? typeof debounce === 'number' ? debounce : debounce.resize : null; // make sure to update state only as long as the component is truly mounted\n\n  const mounted = useRef(false);\n  useEffect(() => {\n    mounted.current = true;\n    return () => void (mounted.current = false);\n  }); // memoize handlers, so event-listeners know when they should update\n\n  const [forceRefresh, resizeChange, scrollChange] = useMemo(() => {\n    const callback = () => {\n      if (!state.current.element) return;\n      const {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      } = state.current.element.getBoundingClientRect();\n      const size = {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      };\n\n      if (state.current.element instanceof HTMLElement && offsetSize) {\n        size.height = state.current.element.offsetHeight;\n        size.width = state.current.element.offsetWidth;\n      }\n\n      Object.freeze(size);\n      if (mounted.current && !areBoundsEqual(state.current.lastBounds, size)) set(state.current.lastBounds = size);\n    };\n\n    return [callback, resizeDebounce ? createDebounce(callback, resizeDebounce) : callback, scrollDebounce ? createDebounce(callback, scrollDebounce) : callback];\n  }, [set, offsetSize, scrollDebounce, resizeDebounce]); // cleanup current scroll-listeners / observers\n\n  function removeListeners() {\n    if (state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(element => element.removeEventListener('scroll', scrollChange, true));\n      state.current.scrollContainers = null;\n    }\n\n    if (state.current.resizeObserver) {\n      state.current.resizeObserver.disconnect();\n      state.current.resizeObserver = null;\n    }\n  } // add scroll-listeners / observers\n\n\n  function addListeners() {\n    if (!state.current.element) return;\n    state.current.resizeObserver = new ResizeObserver(scrollChange);\n    state.current.resizeObserver.observe(state.current.element);\n\n    if (scroll && state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(scrollContainer => scrollContainer.addEventListener('scroll', scrollChange, {\n        capture: true,\n        passive: true\n      }));\n    }\n  } // the ref we expose to the user\n\n\n  const ref = node => {\n    if (!node || node === state.current.element) return;\n    removeListeners();\n    state.current.element = node;\n    state.current.scrollContainers = findScrollContainers(node);\n    addListeners();\n  }; // add general event listeners\n\n\n  useOnWindowScroll(scrollChange, Boolean(scroll));\n  useOnWindowResize(resizeChange); // respond to changes that are relevant for the listeners\n\n  useEffect(() => {\n    removeListeners();\n    addListeners();\n  }, [scroll, scrollChange, resizeChange]); // remove all listeners when the components unmounts\n\n  useEffect(() => removeListeners, []);\n  return [ref, bounds, forceRefresh];\n} // Adds native resize listener to window\n\n\nfunction useOnWindowResize(onWindowResize) {\n  useEffect(() => {\n    const cb = onWindowResize;\n    window.addEventListener('resize', cb);\n    return () => void window.removeEventListener('resize', cb);\n  }, [onWindowResize]);\n}\n\nfunction useOnWindowScroll(onScroll, enabled) {\n  useEffect(() => {\n    if (enabled) {\n      const cb = onScroll;\n      window.addEventListener('scroll', cb, {\n        capture: true,\n        passive: true\n      });\n      return () => void window.removeEventListener('scroll', cb, true);\n    }\n  }, [onScroll, enabled]);\n} // Returns a list of scroll offsets\n\n\nfunction findScrollContainers(element) {\n  const result = [];\n  if (!element || element === document.body) return result;\n  const {\n    overflow,\n    overflowX,\n    overflowY\n  } = window.getComputedStyle(element);\n  if ([overflow, overflowX, overflowY].some(prop => prop === 'auto' || prop === 'scroll')) result.push(element);\n  return [...result, ...findScrollContainers(element.parentElement)];\n} // Checks if element boundaries are equal\n\n\nconst keys = ['x', 'y', 'top', 'bottom', 'left', 'right', 'width', 'height'];\n\nconst areBoundsEqual = (a, b) => keys.every(key => a[key] === b[key]);\n\nexport { useMeasure as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}