"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testPickerActionBar = void 0;
var React = _interopRequireWildcard(require("react"));
var _chai = require("chai");
var _sinon = require("sinon");
var _utils = require("@mui/monorepo/test/utils");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const testPickerActionBar = (ElementToTest, getOptions) => {
  const {
    componentFamily,
    render,
    values,
    emptyValue,
    setNewValue,
    variant,
    type
  } = getOptions();
  if (componentFamily !== 'picker') {
    return;
  }

  // No view to test
  if (variant === 'desktop' && type === 'time') {
    return;
  }
  describe('Picker action bar', () => {
    describe('clear action', () => {
      it('should call onClose, onChange with empty value and onAccept with empty value', () => {
        const onChange = (0, _sinon.spy)();
        const onAccept = (0, _sinon.spy)();
        const onClose = (0, _sinon.spy)();
        render( /*#__PURE__*/(0, _jsxRuntime.jsx)(ElementToTest, {
          onChange: onChange,
          onAccept: onAccept,
          onClose: onClose,
          defaultValue: values[0],
          open: true,
          componentsProps: {
            actionBar: {
              actions: ['clear']
            }
          }
        }));

        // Clear the date
        _utils.userEvent.mousePress(_utils.screen.getByText(/clear/i));
        (0, _chai.expect)(onChange.callCount).to.equal(1);
        if (type === 'date-range') {
          onChange.lastCall.args[0].forEach((value, index) => {
            (0, _chai.expect)(value).to.deep.equal(emptyValue[index]);
          });
        } else {
          (0, _chai.expect)(onChange.lastCall.args[0]).to.deep.equal(emptyValue);
        }
        (0, _chai.expect)(onAccept.callCount).to.equal(1);
        if (type === 'date-range') {
          onAccept.lastCall.args[0].forEach((value, index) => {
            (0, _chai.expect)(value).to.deep.equal(emptyValue[index]);
          });
        } else {
          (0, _chai.expect)(onAccept.lastCall.args[0]).to.deep.equal(emptyValue);
        }
        (0, _chai.expect)(onClose.callCount).to.equal(1);
      });
      it('should not call onChange or onAccept if the value is already empty value', () => {
        const onChange = (0, _sinon.spy)();
        const onAccept = (0, _sinon.spy)();
        const onClose = (0, _sinon.spy)();
        render( /*#__PURE__*/(0, _jsxRuntime.jsx)(ElementToTest, {
          onChange: onChange,
          onAccept: onAccept,
          onClose: onClose,
          open: true,
          componentsProps: {
            actionBar: {
              actions: ['clear']
            }
          }
        }));

        // Clear the date
        _utils.userEvent.mousePress(_utils.screen.getByText(/clear/i));
        (0, _chai.expect)(onChange.callCount).to.equal(0);
        (0, _chai.expect)(onAccept.callCount).to.equal(0);
        (0, _chai.expect)(onClose.callCount).to.equal(1);
      });
    });
    describe('cancel action', () => {
      it('should call onClose and onChange with the initial value', () => {
        const onChange = (0, _sinon.spy)();
        const onAccept = (0, _sinon.spy)();
        const onClose = (0, _sinon.spy)();
        render( /*#__PURE__*/(0, _jsxRuntime.jsx)(ElementToTest, {
          onChange: onChange,
          onAccept: onAccept,
          onClose: onClose,
          open: true,
          defaultValue: values[0],
          componentsProps: {
            actionBar: {
              actions: ['cancel']
            }
          },
          closeOnSelect: false
        }));

        // Change the value (already tested)
        setNewValue(values[0], {
          isOpened: true
        });

        // Cancel the modifications
        _utils.userEvent.mousePress(_utils.screen.getByText(/cancel/i));
        (0, _chai.expect)(onChange.callCount).to.equal(2);
        if (type === 'date-range') {
          values[0].forEach((value, index) => {
            (0, _chai.expect)(onChange.lastCall.args[0][index]).toEqualDateTime(value);
          });
        } else {
          (0, _chai.expect)(onChange.lastCall.args[0]).toEqualDateTime(values[0]);
        }
        (0, _chai.expect)(onAccept.callCount).to.equal(0);
        (0, _chai.expect)(onClose.callCount).to.equal(1);
      });
      it('should not call onChange if no prior value modification', () => {
        const onChange = (0, _sinon.spy)();
        const onAccept = (0, _sinon.spy)();
        const onClose = (0, _sinon.spy)();
        render( /*#__PURE__*/(0, _jsxRuntime.jsx)(ElementToTest, {
          onChange: onChange,
          onAccept: onAccept,
          onClose: onClose,
          open: true,
          defaultValue: values[0],
          componentsProps: {
            actionBar: {
              actions: ['cancel']
            }
          },
          closeOnSelect: false
        }));

        // Cancel the modifications
        _utils.userEvent.mousePress(_utils.screen.getByText(/cancel/i));
        (0, _chai.expect)(onChange.callCount).to.equal(0);
        (0, _chai.expect)(onAccept.callCount).to.equal(0);
        (0, _chai.expect)(onClose.callCount).to.equal(1);
      });
    });
    describe('confirm action', () => {
      it('should call onClose and onAccept with the live value', () => {
        const onChange = (0, _sinon.spy)();
        const onAccept = (0, _sinon.spy)();
        const onClose = (0, _sinon.spy)();
        render( /*#__PURE__*/(0, _jsxRuntime.jsx)(ElementToTest, {
          onChange: onChange,
          onAccept: onAccept,
          onClose: onClose,
          open: true,
          defaultValue: values[0],
          componentsProps: {
            actionBar: {
              actions: ['accept']
            }
          },
          closeOnSelect: false
        }));

        // Change the value (already tested)
        setNewValue(values[0], {
          isOpened: true
        });

        // Accept the modifications
        _utils.userEvent.mousePress(_utils.screen.getByText(/ok/i));
        (0, _chai.expect)(onChange.callCount).to.equal(1); // The accepted value as already been committed, don't call onChange again
        (0, _chai.expect)(onAccept.callCount).to.equal(1);
        (0, _chai.expect)(onClose.callCount).to.equal(1);
      });
    });
  });
};
exports.testPickerActionBar = testPickerActionBar;