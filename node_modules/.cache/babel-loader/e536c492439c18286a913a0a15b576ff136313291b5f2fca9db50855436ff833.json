{"ast":null,"code":"import { Vector2 } from 'three';\n\n/**\n * Normal map shader\n * - compute normals from heightmap\n */\n\nconst NormalMapShader = {\n  uniforms: {\n    heightMap: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(512, 512)\n    },\n    scale: {\n      value: new Vector2(1, 1)\n    },\n    height: {\n      value: 0.05\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float height;', 'uniform vec2 resolution;', 'uniform sampler2D heightMap;', 'varying vec2 vUv;', 'void main() {', '\tfloat val = texture2D( heightMap, vUv ).x;', '\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;', '\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;', '\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );', '}'].join('\\n')\n};\nexport { NormalMapShader };","map":{"version":3,"names":["Vector2","NormalMapShader","uniforms","heightMap","value","resolution","scale","height","vertexShader","join","fragmentShader"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/shaders/NormalMapShader.js"],"sourcesContent":["import { Vector2 } from 'three';\n\n/**\n * Normal map shader\n * - compute normals from heightmap\n */\n\nconst NormalMapShader = {\n  uniforms: {\n    heightMap: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(512, 512)\n    },\n    scale: {\n      value: new Vector2(1, 1)\n    },\n    height: {\n      value: 0.05\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float height;', 'uniform vec2 resolution;', 'uniform sampler2D heightMap;', 'varying vec2 vUv;', 'void main() {', '\tfloat val = texture2D( heightMap, vUv ).x;', '\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;', '\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;', '\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );', '}'].join('\\n')\n};\n\nexport { NormalMapShader };\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;;AAE/B;AACA;AACA;AACA;;AAEA,MAAMC,eAAe,GAAG;EACtBC,QAAQ,EAAE;IACRC,SAAS,EAAE;MACTC,KAAK,EAAE;IACT,CAAC;IACDC,UAAU,EAAE;MACVD,KAAK,EAAE,IAAIJ,OAAO,CAAC,GAAG,EAAE,GAAG;IAC7B,CAAC;IACDM,KAAK,EAAE;MACLF,KAAK,EAAE,IAAIJ,OAAO,CAAC,CAAC,EAAE,CAAC;IACzB,CAAC;IACDO,MAAM,EAAE;MACNH,KAAK,EAAE;IACT;EACF,CAAC;EACDI,YAAY,EAAE,CAAC,mBAAmB,EAAE,eAAe,EAAE,YAAY,EAAE,4EAA4E,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAChKC,cAAc,EAAE,CAAC,uBAAuB,EAAE,0BAA0B,EAAE,8BAA8B,EAAE,mBAAmB,EAAE,eAAe,EAAE,6CAA6C,EAAE,gFAAgF,EAAE,gFAAgF,EAAE,oGAAoG,EAAE,GAAG,CAAC,CAACD,IAAI,CAAC,IAAI;AACrd,CAAC;AAED,SAASR,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}