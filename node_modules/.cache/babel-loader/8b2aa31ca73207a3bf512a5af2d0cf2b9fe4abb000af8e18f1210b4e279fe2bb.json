{"ast":null,"code":"/**\n * Full-screen tone-mapping shader based on http://www.cis.rit.edu/people/faculty/ferwerda/publications/sig02_paper.pdf\n */\nconst ToneMapShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    averageLuminance: {\n      value: 1.0\n    },\n    luminanceMap: {\n      value: null\n    },\n    maxLuminance: {\n      value: 16.0\n    },\n    minLuminance: {\n      value: 0.01\n    },\n    middleGrey: {\n      value: 0.6\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#include <common>', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'uniform float middleGrey;', 'uniform float minLuminance;', 'uniform float maxLuminance;', '#ifdef ADAPTED_LUMINANCE', '\tuniform sampler2D luminanceMap;', '#else', '\tuniform float averageLuminance;', '#endif', 'vec3 ToneMap( vec3 vColor ) {', '\t#ifdef ADAPTED_LUMINANCE',\n  // Get the calculated average luminance\n  '\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;', '\t#else', '\t\tfloat fLumAvg = averageLuminance;', '\t#endif',\n  // Calculate the luminance of the current pixel\n  '\tfloat fLumPixel = linearToRelativeLuminance( vColor );',\n  // Apply the modified operator (Eq. 4)\n  '\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );', '\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);', '\treturn fLumCompressed * vColor;', '}', 'void main() {', '\tvec4 texel = texture2D( tDiffuse, vUv );', '\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );', '}'].join('\\n')\n};\nexport { ToneMapShader };","map":{"version":3,"names":["ToneMapShader","uniforms","tDiffuse","value","averageLuminance","luminanceMap","maxLuminance","minLuminance","middleGrey","vertexShader","join","fragmentShader"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/shaders/ToneMapShader.js"],"sourcesContent":["/**\n * Full-screen tone-mapping shader based on http://www.cis.rit.edu/people/faculty/ferwerda/publications/sig02_paper.pdf\n */\nconst ToneMapShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    averageLuminance: {\n      value: 1.0\n    },\n    luminanceMap: {\n      value: null\n    },\n    maxLuminance: {\n      value: 16.0\n    },\n    minLuminance: {\n      value: 0.01\n    },\n    middleGrey: {\n      value: 0.6\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#include <common>', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'uniform float middleGrey;', 'uniform float minLuminance;', 'uniform float maxLuminance;', '#ifdef ADAPTED_LUMINANCE', '\tuniform sampler2D luminanceMap;', '#else', '\tuniform float averageLuminance;', '#endif', 'vec3 ToneMap( vec3 vColor ) {', '\t#ifdef ADAPTED_LUMINANCE', // Get the calculated average luminance\n  '\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;', '\t#else', '\t\tfloat fLumAvg = averageLuminance;', '\t#endif', // Calculate the luminance of the current pixel\n  '\tfloat fLumPixel = linearToRelativeLuminance( vColor );', // Apply the modified operator (Eq. 4)\n  '\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );', '\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);', '\treturn fLumCompressed * vColor;', '}', 'void main() {', '\tvec4 texel = texture2D( tDiffuse, vUv );', '\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );', '}'].join('\\n')\n};\n\nexport { ToneMapShader };\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,aAAa,GAAG;EACpBC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MACRC,KAAK,EAAE;IACT,CAAC;IACDC,gBAAgB,EAAE;MAChBD,KAAK,EAAE;IACT,CAAC;IACDE,YAAY,EAAE;MACZF,KAAK,EAAE;IACT,CAAC;IACDG,YAAY,EAAE;MACZH,KAAK,EAAE;IACT,CAAC;IACDI,YAAY,EAAE;MACZJ,KAAK,EAAE;IACT,CAAC;IACDK,UAAU,EAAE;MACVL,KAAK,EAAE;IACT;EACF,CAAC;EACDM,YAAY,EAAE,CAAC,mBAAmB,EAAE,eAAe,EAAE,YAAY,EAAE,4EAA4E,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAChKC,cAAc,EAAE,CAAC,mBAAmB,EAAE,6BAA6B,EAAE,mBAAmB,EAAE,2BAA2B,EAAE,6BAA6B,EAAE,6BAA6B,EAAE,0BAA0B,EAAE,kCAAkC,EAAE,OAAO,EAAE,kCAAkC,EAAE,QAAQ,EAAE,+BAA+B,EAAE,2BAA2B;EAAE;EAC1W,8DAA8D,EAAE,QAAQ,EAAE,qCAAqC,EAAE,SAAS;EAAE;EAC5H,yDAAyD;EAAE;EAC3D,8EAA8E,EAAE,mHAAmH,EAAE,kCAAkC,EAAE,GAAG,EAAE,eAAe,EAAE,2CAA2C,EAAE,wDAAwD,EAAE,GAAG,CAAC,CAACD,IAAI,CAAC,IAAI;AACtX,CAAC;AAED,SAASV,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}