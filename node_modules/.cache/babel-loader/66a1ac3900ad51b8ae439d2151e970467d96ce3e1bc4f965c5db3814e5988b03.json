{"ast":null,"code":"import { Color, Vector2, WebGLRenderTarget, LinearFilter, RGBAFormat, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SAOShader } from '../shaders/SAOShader.js';\nimport { DepthLimitedBlurShader, BlurShaderUtils } from '../shaders/DepthLimitedBlurShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { UnpackDepthRGBAShader } from '../shaders/UnpackDepthRGBAShader.js';\n\n/**\n * SAO implementation inspired from bhouston previous SAO work\n */\n\nvar SAOPass = function (scene, camera, depthTexture, useNormals, resolution) {\n  this.scene = scene;\n  this.camera = camera;\n  this.clear = true;\n  this.needsSwap = false;\n  this.supportsDepthTextureExtension = depthTexture !== undefined ? depthTexture : false;\n  this.supportsNormalTexture = useNormals !== undefined ? useNormals : false;\n  this.originalClearColor = new Color();\n  this._oldClearColor = new Color();\n  this.oldClearAlpha = 1;\n  this.params = {\n    output: 0,\n    saoBias: 0.5,\n    saoIntensity: 0.18,\n    saoScale: 1,\n    saoKernelRadius: 100,\n    saoMinResolution: 0,\n    saoBlur: true,\n    saoBlurRadius: 8,\n    saoBlurStdDev: 4,\n    saoBlurDepthCutoff: 0.01\n  };\n  this.resolution = resolution !== undefined ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n  this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n  this.beautyRenderTarget = this.saoRenderTarget.clone();\n  this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  });\n  this.depthRenderTarget = this.normalRenderTarget.clone();\n  if (this.supportsDepthTextureExtension) {\n    var depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    this.beautyRenderTarget.depthTexture = depthTexture;\n    this.beautyRenderTarget.depthBuffer = true;\n  }\n  this.depthMaterial = new MeshDepthMaterial();\n  this.depthMaterial.depthPacking = RGBADepthPacking;\n  this.depthMaterial.blending = NoBlending;\n  this.normalMaterial = new MeshNormalMaterial();\n  this.normalMaterial.blending = NoBlending;\n  if (SAOShader === undefined) {\n    console.error('THREE.SAOPass relies on SAOShader');\n  }\n  this.saoMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SAOShader.defines),\n    fragmentShader: SAOShader.fragmentShader,\n    vertexShader: SAOShader.vertexShader,\n    uniforms: UniformsUtils.clone(SAOShader.uniforms)\n  });\n  this.saoMaterial.extensions.derivatives = true;\n  this.saoMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.saoMaterial.defines['NORMAL_TEXTURE'] = this.supportsNormalTexture ? 1 : 0;\n  this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.saoMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n  this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n  this.saoMaterial.blending = NoBlending;\n  if (DepthLimitedBlurShader === undefined) {\n    console.error('THREE.SAOPass relies on DepthLimitedBlurShader');\n  }\n  this.vBlurMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n    defines: Object.assign({}, DepthLimitedBlurShader.defines),\n    vertexShader: DepthLimitedBlurShader.vertexShader,\n    fragmentShader: DepthLimitedBlurShader.fragmentShader\n  });\n  this.vBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n  this.vBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.vBlurMaterial.blending = NoBlending;\n  this.hBlurMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n    defines: Object.assign({}, DepthLimitedBlurShader.defines),\n    vertexShader: DepthLimitedBlurShader.vertexShader,\n    fragmentShader: DepthLimitedBlurShader.fragmentShader\n  });\n  this.hBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture;\n  this.hBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.hBlurMaterial.blending = NoBlending;\n  if (CopyShader === undefined) {\n    console.error('THREE.SAOPass relies on CopyShader');\n  }\n  this.materialCopy = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.materialCopy.transparent = true;\n  this.materialCopy.depthTest = false;\n  this.materialCopy.depthWrite = false;\n  this.materialCopy.blending = CustomBlending;\n  this.materialCopy.blendSrc = DstColorFactor;\n  this.materialCopy.blendDst = ZeroFactor;\n  this.materialCopy.blendEquation = AddEquation;\n  this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n  this.materialCopy.blendDstAlpha = ZeroFactor;\n  this.materialCopy.blendEquationAlpha = AddEquation;\n  if (UnpackDepthRGBAShader === undefined) {\n    console.error('THREE.SAOPass relies on UnpackDepthRGBAShader');\n  }\n  this.depthCopy = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n    vertexShader: UnpackDepthRGBAShader.vertexShader,\n    fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.fsQuad = new FullScreenQuad(null);\n};\nSAOPass.OUTPUT = {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n};\nSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SAOPass,\n  render: function (renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive*/) {\n    // Rendering readBuffer first when rendering to screen\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending;\n      this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this.renderPass(renderer, this.materialCopy, null);\n    }\n    if (this.params.output === 1) {\n      return;\n    }\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setRenderTarget(this.depthRenderTarget);\n    renderer.clear();\n    this.saoMaterial.uniforms['bias'].value = this.params.saoBias;\n    this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms['scale'].value = this.params.saoScale;\n    this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms['minResolution'].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.saoMaterial.uniforms['cameraFar'].value = this.camera.far; // this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n    var depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\n      BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    } // Rendering scene to depth texture\n\n    renderer.setClearColor(0x000000);\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // Re-render scene if depth texture extension is not supported\n\n    if (!this.supportsDepthTextureExtension) {\n      // Clear rule : far clipping plane in both RGBA and Basic encoding\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0);\n    }\n    if (this.supportsNormalTexture) {\n      // Clear rule : default normal is facing the camera\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    } // Rendering SAO texture\n\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0); // Blurring SAO texture\n\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0);\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0);\n    }\n    var outputMaterial = this.materialCopy; // Setting up SAO rendering\n\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms['tDiffuse'].value = this.beautyRenderTarget.depthTexture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.depthCopy.uniforms['tDiffuse'].value = this.depthRenderTarget.texture;\n        this.depthCopy.needsUpdate = true;\n        outputMaterial = this.depthCopy;\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } // Blending depends on output, only want a CustomBlending when showing SAO\n\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending;\n    } else {\n      outputMaterial.blending = NoBlending;\n    } // Rendering SAOPass result on top of previous pass\n\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  },\n  renderPass: function (renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function (width, height) {\n    this.beautyRenderTarget.setSize(width, height);\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.depthRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms['size'].value.set(width, height);\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms['size'].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms['size'].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n});\nexport { SAOPass };","map":{"version":3,"names":["Color","Vector2","WebGLRenderTarget","LinearFilter","RGBAFormat","NearestFilter","DepthTexture","UnsignedShortType","MeshDepthMaterial","RGBADepthPacking","NoBlending","MeshNormalMaterial","ShaderMaterial","UniformsUtils","CustomBlending","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","FullScreenQuad","Pass","SAOShader","DepthLimitedBlurShader","BlurShaderUtils","CopyShader","UnpackDepthRGBAShader","SAOPass","scene","camera","depthTexture","useNormals","resolution","clear","needsSwap","supportsDepthTextureExtension","undefined","supportsNormalTexture","originalClearColor","_oldClearColor","oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","x","y","saoRenderTarget","minFilter","magFilter","format","blurIntermediateRenderTarget","clone","beautyRenderTarget","normalRenderTarget","depthRenderTarget","type","depthBuffer","depthMaterial","depthPacking","blending","normalMaterial","console","error","saoMaterial","defines","Object","assign","fragmentShader","vertexShader","uniforms","extensions","derivatives","isPerspectiveCamera","value","texture","set","copy","projectionMatrixInverse","projectionMatrix","vBlurMaterial","hBlurMaterial","materialCopy","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthCopy","fsQuad","OUTPUT","Beauty","Default","SAO","Depth","Normal","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","renderToScreen","needsUpdate","renderPass","getClearColor","getClearAlpha","oldAutoClear","autoClear","setRenderTarget","near","far","depthCutoff","Math","floor","prevStdDev","prevNumSamples","configure","setClearColor","renderOverride","outputMaterial","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","setClearAlpha","material","overrideMaterial","setSize","width","height"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/postprocessing/SAOPass.js"],"sourcesContent":["import { Color, Vector2, WebGLRenderTarget, LinearFilter, RGBAFormat, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SAOShader } from '../shaders/SAOShader.js';\nimport { DepthLimitedBlurShader, BlurShaderUtils } from '../shaders/DepthLimitedBlurShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { UnpackDepthRGBAShader } from '../shaders/UnpackDepthRGBAShader.js';\n\n/**\n * SAO implementation inspired from bhouston previous SAO work\n */\n\nvar SAOPass = function (scene, camera, depthTexture, useNormals, resolution) {\n  this.scene = scene;\n  this.camera = camera;\n  this.clear = true;\n  this.needsSwap = false;\n  this.supportsDepthTextureExtension = depthTexture !== undefined ? depthTexture : false;\n  this.supportsNormalTexture = useNormals !== undefined ? useNormals : false;\n  this.originalClearColor = new Color();\n  this._oldClearColor = new Color();\n  this.oldClearAlpha = 1;\n  this.params = {\n    output: 0,\n    saoBias: 0.5,\n    saoIntensity: 0.18,\n    saoScale: 1,\n    saoKernelRadius: 100,\n    saoMinResolution: 0,\n    saoBlur: true,\n    saoBlurRadius: 8,\n    saoBlurStdDev: 4,\n    saoBlurDepthCutoff: 0.01\n  };\n  this.resolution = resolution !== undefined ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n  this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n  this.beautyRenderTarget = this.saoRenderTarget.clone();\n  this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  });\n  this.depthRenderTarget = this.normalRenderTarget.clone();\n\n  if (this.supportsDepthTextureExtension) {\n    var depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    this.beautyRenderTarget.depthTexture = depthTexture;\n    this.beautyRenderTarget.depthBuffer = true;\n  }\n\n  this.depthMaterial = new MeshDepthMaterial();\n  this.depthMaterial.depthPacking = RGBADepthPacking;\n  this.depthMaterial.blending = NoBlending;\n  this.normalMaterial = new MeshNormalMaterial();\n  this.normalMaterial.blending = NoBlending;\n\n  if (SAOShader === undefined) {\n    console.error('THREE.SAOPass relies on SAOShader');\n  }\n\n  this.saoMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SAOShader.defines),\n    fragmentShader: SAOShader.fragmentShader,\n    vertexShader: SAOShader.vertexShader,\n    uniforms: UniformsUtils.clone(SAOShader.uniforms)\n  });\n  this.saoMaterial.extensions.derivatives = true;\n  this.saoMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.saoMaterial.defines['NORMAL_TEXTURE'] = this.supportsNormalTexture ? 1 : 0;\n  this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.saoMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n  this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n  this.saoMaterial.blending = NoBlending;\n\n  if (DepthLimitedBlurShader === undefined) {\n    console.error('THREE.SAOPass relies on DepthLimitedBlurShader');\n  }\n\n  this.vBlurMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n    defines: Object.assign({}, DepthLimitedBlurShader.defines),\n    vertexShader: DepthLimitedBlurShader.vertexShader,\n    fragmentShader: DepthLimitedBlurShader.fragmentShader\n  });\n  this.vBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n  this.vBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.vBlurMaterial.blending = NoBlending;\n  this.hBlurMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n    defines: Object.assign({}, DepthLimitedBlurShader.defines),\n    vertexShader: DepthLimitedBlurShader.vertexShader,\n    fragmentShader: DepthLimitedBlurShader.fragmentShader\n  });\n  this.hBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture;\n  this.hBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.hBlurMaterial.blending = NoBlending;\n\n  if (CopyShader === undefined) {\n    console.error('THREE.SAOPass relies on CopyShader');\n  }\n\n  this.materialCopy = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.materialCopy.transparent = true;\n  this.materialCopy.depthTest = false;\n  this.materialCopy.depthWrite = false;\n  this.materialCopy.blending = CustomBlending;\n  this.materialCopy.blendSrc = DstColorFactor;\n  this.materialCopy.blendDst = ZeroFactor;\n  this.materialCopy.blendEquation = AddEquation;\n  this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n  this.materialCopy.blendDstAlpha = ZeroFactor;\n  this.materialCopy.blendEquationAlpha = AddEquation;\n\n  if (UnpackDepthRGBAShader === undefined) {\n    console.error('THREE.SAOPass relies on UnpackDepthRGBAShader');\n  }\n\n  this.depthCopy = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n    vertexShader: UnpackDepthRGBAShader.vertexShader,\n    fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.fsQuad = new FullScreenQuad(null);\n};\n\nSAOPass.OUTPUT = {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n};\nSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SAOPass,\n  render: function (renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive*/\n  ) {\n    // Rendering readBuffer first when rendering to screen\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending;\n      this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this.renderPass(renderer, this.materialCopy, null);\n    }\n\n    if (this.params.output === 1) {\n      return;\n    }\n\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setRenderTarget(this.depthRenderTarget);\n    renderer.clear();\n    this.saoMaterial.uniforms['bias'].value = this.params.saoBias;\n    this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms['scale'].value = this.params.saoScale;\n    this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms['minResolution'].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.saoMaterial.uniforms['cameraFar'].value = this.camera.far; // this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n    var depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\n      BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    } // Rendering scene to depth texture\n\n\n    renderer.setClearColor(0x000000);\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // Re-render scene if depth texture extension is not supported\n\n    if (!this.supportsDepthTextureExtension) {\n      // Clear rule : far clipping plane in both RGBA and Basic encoding\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0);\n    }\n\n    if (this.supportsNormalTexture) {\n      // Clear rule : default normal is facing the camera\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    } // Rendering SAO texture\n\n\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0); // Blurring SAO texture\n\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0);\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0);\n    }\n\n    var outputMaterial = this.materialCopy; // Setting up SAO rendering\n\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms['tDiffuse'].value = this.beautyRenderTarget.depthTexture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.depthCopy.uniforms['tDiffuse'].value = this.depthRenderTarget.texture;\n        this.depthCopy.needsUpdate = true;\n        outputMaterial = this.depthCopy;\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } // Blending depends on output, only want a CustomBlending when showing SAO\n\n\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending;\n    } else {\n      outputMaterial.blending = NoBlending;\n    } // Rendering SAOPass result on top of previous pass\n\n\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  },\n  renderPass: function (renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function (width, height) {\n    this.beautyRenderTarget.setSize(width, height);\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.depthRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms['size'].value.set(width, height);\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms['size'].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms['size'].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n});\n\nexport { SAOPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}