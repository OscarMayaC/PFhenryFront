{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector2, WebGLRenderTarget, Clock, LinearFilter, RGBAFormat } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass, ClearMaskPass } from './MaskPass.js';\nclass EffectComposer {\n  constructor(renderer, renderTarget) {\n    _defineProperty(this, \"renderer\", void 0);\n    _defineProperty(this, \"_pixelRatio\", void 0);\n    _defineProperty(this, \"_width\", void 0);\n    _defineProperty(this, \"_height\", void 0);\n    _defineProperty(this, \"renderTarget1\", void 0);\n    _defineProperty(this, \"renderTarget2\", void 0);\n    _defineProperty(this, \"writeBuffer\", void 0);\n    _defineProperty(this, \"readBuffer\", void 0);\n    _defineProperty(this, \"renderToScreen\", void 0);\n    _defineProperty(this, \"passes\", []);\n    _defineProperty(this, \"copyPass\", void 0);\n    _defineProperty(this, \"clock\", void 0);\n    this.renderer = renderer;\n    if (renderTarget === undefined) {\n      const parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      const size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true; // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader');\n    }\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass');\n    }\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n    return true;\n  }\n  render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n    const il = this.passes.length;\n    for (let i = 0; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n        this.swapBuffers();\n      }\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n  reset(renderTarget) {\n    if (renderTarget === undefined) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n}\nexport { EffectComposer };","map":{"version":3,"names":["_defineProperty","Vector2","WebGLRenderTarget","Clock","LinearFilter","RGBAFormat","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","constructor","renderer","renderTarget","undefined","parameters","minFilter","magFilter","format","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","console","error","copyPass","clock","swapBuffers","tmp","addPass","pass","passes","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/postprocessing/EffectComposer.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector2, WebGLRenderTarget, Clock, LinearFilter, RGBAFormat } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass, ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n  constructor(renderer, renderTarget) {\n    _defineProperty(this, \"renderer\", void 0);\n\n    _defineProperty(this, \"_pixelRatio\", void 0);\n\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_height\", void 0);\n\n    _defineProperty(this, \"renderTarget1\", void 0);\n\n    _defineProperty(this, \"renderTarget2\", void 0);\n\n    _defineProperty(this, \"writeBuffer\", void 0);\n\n    _defineProperty(this, \"readBuffer\", void 0);\n\n    _defineProperty(this, \"renderToScreen\", void 0);\n\n    _defineProperty(this, \"passes\", []);\n\n    _defineProperty(this, \"copyPass\", void 0);\n\n    _defineProperty(this, \"clock\", void 0);\n\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n      const parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      const size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true; // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader');\n    }\n\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass');\n    }\n\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n    const il = this.passes.length;\n\n    for (let i = 0; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n\n  reset(renderTarget) {\n    if (renderTarget === undefined) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n\n}\n\nexport { EffectComposer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}