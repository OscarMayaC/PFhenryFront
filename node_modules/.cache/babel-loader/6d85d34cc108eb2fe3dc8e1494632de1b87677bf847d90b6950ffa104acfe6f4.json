{"ast":null,"code":"import { ShaderChunk, UniformsUtils, ShaderLib, Color } from 'three';\n\n/**\n * ------------------------------------------------------------------------------------------\n * Subsurface Scattering shader\n * Based on GDC 2011 – Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look\n * https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/\n *------------------------------------------------------------------------------------------\n */\n\nfunction replaceAll(string, find, replace) {\n  return string.split(find).join(replace);\n}\nconst meshphong_frag_head = ShaderChunk['meshphong_frag'].slice(0, ShaderChunk['meshphong_frag'].indexOf('void main() {'));\nconst meshphong_frag_body = ShaderChunk['meshphong_frag'].slice(ShaderChunk['meshphong_frag'].indexOf('void main() {'));\nconst SubsurfaceScatteringShader = {\n  uniforms: UniformsUtils.merge([ShaderLib['phong'].uniforms, {\n    thicknessMap: {\n      value: null\n    },\n    thicknessColor: {\n      value: new Color(0xffffff)\n    },\n    thicknessDistortion: {\n      value: 0.1\n    },\n    thicknessAmbient: {\n      value: 0.0\n    },\n    thicknessAttenuation: {\n      value: 0.1\n    },\n    thicknessPower: {\n      value: 2.0\n    },\n    thicknessScale: {\n      value: 10.0\n    }\n  }]),\n  vertexShader: ['#define USE_UV', ShaderChunk['meshphong_vert']].join('\\n'),\n  fragmentShader: ['#define USE_UV', '#define SUBSURFACE', meshphong_frag_head, 'uniform sampler2D thicknessMap;', 'uniform float thicknessPower;', 'uniform float thicknessScale;', 'uniform float thicknessDistortion;', 'uniform float thicknessAmbient;', 'uniform float thicknessAttenuation;', 'uniform vec3 thicknessColor;', 'void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {', '\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;', '\tvec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));', '\tfloat scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;', '\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;', '\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;', '}', meshphong_frag_body.replace('#include <lights_fragment_begin>', replaceAll(ShaderChunk['lights_fragment_begin'], 'RE_Direct( directLight, geometry, material, reflectedLight );', ['RE_Direct( directLight, geometry, material, reflectedLight );', '#if defined( SUBSURFACE ) && defined( USE_UV )', ' RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);', '#endif'].join('\\n')))].join('\\n')\n};\nexport { SubsurfaceScatteringShader };","map":{"version":3,"names":["ShaderChunk","UniformsUtils","ShaderLib","Color","replaceAll","string","find","replace","split","join","meshphong_frag_head","slice","indexOf","meshphong_frag_body","SubsurfaceScatteringShader","uniforms","merge","thicknessMap","value","thicknessColor","thicknessDistortion","thicknessAmbient","thicknessAttenuation","thicknessPower","thicknessScale","vertexShader","fragmentShader"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/shaders/SubsurfaceScatteringShader.js"],"sourcesContent":["import { ShaderChunk, UniformsUtils, ShaderLib, Color } from 'three';\n\n/**\n * ------------------------------------------------------------------------------------------\n * Subsurface Scattering shader\n * Based on GDC 2011 – Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look\n * https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/\n *------------------------------------------------------------------------------------------\n */\n\nfunction replaceAll(string, find, replace) {\n  return string.split(find).join(replace);\n}\n\nconst meshphong_frag_head = ShaderChunk['meshphong_frag'].slice(0, ShaderChunk['meshphong_frag'].indexOf('void main() {'));\nconst meshphong_frag_body = ShaderChunk['meshphong_frag'].slice(ShaderChunk['meshphong_frag'].indexOf('void main() {'));\nconst SubsurfaceScatteringShader = {\n  uniforms: UniformsUtils.merge([ShaderLib['phong'].uniforms, {\n    thicknessMap: {\n      value: null\n    },\n    thicknessColor: {\n      value: new Color(0xffffff)\n    },\n    thicknessDistortion: {\n      value: 0.1\n    },\n    thicknessAmbient: {\n      value: 0.0\n    },\n    thicknessAttenuation: {\n      value: 0.1\n    },\n    thicknessPower: {\n      value: 2.0\n    },\n    thicknessScale: {\n      value: 10.0\n    }\n  }]),\n  vertexShader: ['#define USE_UV', ShaderChunk['meshphong_vert']].join('\\n'),\n  fragmentShader: ['#define USE_UV', '#define SUBSURFACE', meshphong_frag_head, 'uniform sampler2D thicknessMap;', 'uniform float thicknessPower;', 'uniform float thicknessScale;', 'uniform float thicknessDistortion;', 'uniform float thicknessAmbient;', 'uniform float thicknessAttenuation;', 'uniform vec3 thicknessColor;', 'void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {', '\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;', '\tvec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));', '\tfloat scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;', '\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;', '\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;', '}', meshphong_frag_body.replace('#include <lights_fragment_begin>', replaceAll(ShaderChunk['lights_fragment_begin'], 'RE_Direct( directLight, geometry, material, reflectedLight );', ['RE_Direct( directLight, geometry, material, reflectedLight );', '#if defined( SUBSURFACE ) && defined( USE_UV )', ' RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);', '#endif'].join('\\n')))].join('\\n')\n};\n\nexport { SubsurfaceScatteringShader };\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,aAAa,EAAEC,SAAS,EAAEC,KAAK,QAAQ,OAAO;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,UAAUA,CAACC,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAE;EACzC,OAAOF,MAAM,CAACG,KAAK,CAACF,IAAI,CAAC,CAACG,IAAI,CAACF,OAAO,CAAC;AACzC;AAEA,MAAMG,mBAAmB,GAAGV,WAAW,CAAC,gBAAgB,CAAC,CAACW,KAAK,CAAC,CAAC,EAAEX,WAAW,CAAC,gBAAgB,CAAC,CAACY,OAAO,CAAC,eAAe,CAAC,CAAC;AAC1H,MAAMC,mBAAmB,GAAGb,WAAW,CAAC,gBAAgB,CAAC,CAACW,KAAK,CAACX,WAAW,CAAC,gBAAgB,CAAC,CAACY,OAAO,CAAC,eAAe,CAAC,CAAC;AACvH,MAAME,0BAA0B,GAAG;EACjCC,QAAQ,EAAEd,aAAa,CAACe,KAAK,CAAC,CAACd,SAAS,CAAC,OAAO,CAAC,CAACa,QAAQ,EAAE;IAC1DE,YAAY,EAAE;MACZC,KAAK,EAAE;IACT,CAAC;IACDC,cAAc,EAAE;MACdD,KAAK,EAAE,IAAIf,KAAK,CAAC,QAAQ;IAC3B,CAAC;IACDiB,mBAAmB,EAAE;MACnBF,KAAK,EAAE;IACT,CAAC;IACDG,gBAAgB,EAAE;MAChBH,KAAK,EAAE;IACT,CAAC;IACDI,oBAAoB,EAAE;MACpBJ,KAAK,EAAE;IACT,CAAC;IACDK,cAAc,EAAE;MACdL,KAAK,EAAE;IACT,CAAC;IACDM,cAAc,EAAE;MACdN,KAAK,EAAE;IACT;EACF,CAAC,CAAC,CAAC;EACHO,YAAY,EAAE,CAAC,gBAAgB,EAAEzB,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAACS,IAAI,CAAC,IAAI,CAAC;EAC1EiB,cAAc,EAAE,CAAC,gBAAgB,EAAE,oBAAoB,EAAEhB,mBAAmB,EAAE,iCAAiC,EAAE,+BAA+B,EAAE,+BAA+B,EAAE,oCAAoC,EAAE,iCAAiC,EAAE,qCAAqC,EAAE,8BAA8B,EAAE,4JAA4J,EAAE,mEAAmE,EAAE,oGAAoG,EAAE,gHAAgH,EAAE,wEAAwE,EAAE,6FAA6F,EAAE,GAAG,EAAEG,mBAAmB,CAACN,OAAO,CAAC,kCAAkC,EAAEH,UAAU,CAACJ,WAAW,CAAC,uBAAuB,CAAC,EAAE,+DAA+D,EAAE,CAAC,+DAA+D,EAAE,gDAAgD,EAAE,oEAAoE,EAAE,QAAQ,CAAC,CAACS,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAACA,IAAI,CAAC,IAAI;AAC3zC,CAAC;AAED,SAASK,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}