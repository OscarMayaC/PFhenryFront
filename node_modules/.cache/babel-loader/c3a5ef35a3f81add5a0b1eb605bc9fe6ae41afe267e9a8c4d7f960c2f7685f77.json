{"ast":null,"code":"import { BufferAttribute, DynamicDrawUsage, BufferGeometry, MeshStandardMaterial, Mesh, Vector3, Color, Matrix4 } from 'three';\nfunction TubePainter() {\n  const BUFFER_SIZE = 1000000 * 3;\n  const positions = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  positions.usage = DynamicDrawUsage;\n  const normals = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  normals.usage = DynamicDrawUsage;\n  const colors = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  colors.usage = DynamicDrawUsage;\n  const geometry = new BufferGeometry();\n  geometry.setAttribute('position', positions);\n  geometry.setAttribute('normal', normals);\n  geometry.setAttribute('color', colors);\n  geometry.drawRange.count = 0;\n  const material = new MeshStandardMaterial({\n    vertexColors: true\n  });\n  const mesh = new Mesh(geometry, material);\n  mesh.frustumCulled = false; //\n\n  function getPoints(size) {\n    const PI2 = Math.PI * 2;\n    const sides = 10;\n    const array = [];\n    const radius = 0.01 * size;\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      array.push(new Vector3(Math.sin(angle) * radius, Math.cos(angle) * radius, 0));\n    }\n    return array;\n  } //\n\n  const vector1 = new Vector3();\n  const vector2 = new Vector3();\n  const vector3 = new Vector3();\n  const vector4 = new Vector3();\n  const color = new Color(0xffffff);\n  let size = 1;\n  function stroke(position1, position2, matrix1, matrix2) {\n    if (position1.distanceToSquared(position2) === 0) return;\n    let count = geometry.drawRange.count;\n    const points = getPoints(size);\n    for (let i = 0, il = points.length; i < il; i++) {\n      const vertex1 = points[i];\n      const vertex2 = points[(i + 1) % il]; // positions\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).add(position2);\n      vector2.copy(vertex2).applyMatrix4(matrix2).add(position2);\n      vector3.copy(vertex2).applyMatrix4(matrix1).add(position1);\n      vector4.copy(vertex1).applyMatrix4(matrix1).add(position1);\n      vector1.toArray(positions.array, (count + 0) * 3);\n      vector2.toArray(positions.array, (count + 1) * 3);\n      vector4.toArray(positions.array, (count + 2) * 3);\n      vector2.toArray(positions.array, (count + 3) * 3);\n      vector3.toArray(positions.array, (count + 4) * 3);\n      vector4.toArray(positions.array, (count + 5) * 3); // normals\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).normalize();\n      vector2.copy(vertex2).applyMatrix4(matrix2).normalize();\n      vector3.copy(vertex2).applyMatrix4(matrix1).normalize();\n      vector4.copy(vertex1).applyMatrix4(matrix1).normalize();\n      vector1.toArray(normals.array, (count + 0) * 3);\n      vector2.toArray(normals.array, (count + 1) * 3);\n      vector4.toArray(normals.array, (count + 2) * 3);\n      vector2.toArray(normals.array, (count + 3) * 3);\n      vector3.toArray(normals.array, (count + 4) * 3);\n      vector4.toArray(normals.array, (count + 5) * 3); // colors\n\n      color.toArray(colors.array, (count + 0) * 3);\n      color.toArray(colors.array, (count + 1) * 3);\n      color.toArray(colors.array, (count + 2) * 3);\n      color.toArray(colors.array, (count + 3) * 3);\n      color.toArray(colors.array, (count + 4) * 3);\n      color.toArray(colors.array, (count + 5) * 3);\n      count += 6;\n    }\n    geometry.drawRange.count = count;\n  } //\n\n  const up = new Vector3(0, 1, 0);\n  const point1 = new Vector3();\n  const point2 = new Vector3();\n  const matrix1 = new Matrix4();\n  const matrix2 = new Matrix4();\n  function moveTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    point2.copy(position);\n    matrix2.copy(matrix1);\n  }\n  function lineTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    stroke(point1, point2, matrix1, matrix2);\n    point2.copy(point1);\n    matrix2.copy(matrix1);\n  }\n  function setSize(value) {\n    size = value;\n  } //\n\n  let count = 0;\n  function update() {\n    const start = count;\n    const end = geometry.drawRange.count;\n    if (start === end) return;\n    positions.updateRange.offset = start * 3;\n    positions.updateRange.count = (end - start) * 3;\n    positions.needsUpdate = true;\n    normals.updateRange.offset = start * 3;\n    normals.updateRange.count = (end - start) * 3;\n    normals.needsUpdate = true;\n    colors.updateRange.offset = start * 3;\n    colors.updateRange.count = (end - start) * 3;\n    colors.needsUpdate = true;\n    count = geometry.drawRange.count;\n  }\n  return {\n    mesh: mesh,\n    moveTo: moveTo,\n    lineTo: lineTo,\n    setSize: setSize,\n    update: update\n  };\n}\nexport { TubePainter };","map":{"version":3,"names":["BufferAttribute","DynamicDrawUsage","BufferGeometry","MeshStandardMaterial","Mesh","Vector3","Color","Matrix4","TubePainter","BUFFER_SIZE","positions","Float32Array","usage","normals","colors","geometry","setAttribute","drawRange","count","material","vertexColors","mesh","frustumCulled","getPoints","size","PI2","Math","PI","sides","array","radius","i","angle","push","sin","cos","vector1","vector2","vector3","vector4","color","stroke","position1","position2","matrix1","matrix2","distanceToSquared","points","il","length","vertex1","vertex2","copy","applyMatrix4","add","toArray","normalize","up","point1","point2","moveTo","position","lookAt","lineTo","setSize","value","update","start","end","updateRange","offset","needsUpdate"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/misc/TubePainter.js"],"sourcesContent":["import { BufferAttribute, DynamicDrawUsage, BufferGeometry, MeshStandardMaterial, Mesh, Vector3, Color, Matrix4 } from 'three';\n\nfunction TubePainter() {\n  const BUFFER_SIZE = 1000000 * 3;\n  const positions = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  positions.usage = DynamicDrawUsage;\n  const normals = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  normals.usage = DynamicDrawUsage;\n  const colors = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  colors.usage = DynamicDrawUsage;\n  const geometry = new BufferGeometry();\n  geometry.setAttribute('position', positions);\n  geometry.setAttribute('normal', normals);\n  geometry.setAttribute('color', colors);\n  geometry.drawRange.count = 0;\n  const material = new MeshStandardMaterial({\n    vertexColors: true\n  });\n  const mesh = new Mesh(geometry, material);\n  mesh.frustumCulled = false; //\n\n  function getPoints(size) {\n    const PI2 = Math.PI * 2;\n    const sides = 10;\n    const array = [];\n    const radius = 0.01 * size;\n\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      array.push(new Vector3(Math.sin(angle) * radius, Math.cos(angle) * radius, 0));\n    }\n\n    return array;\n  } //\n\n\n  const vector1 = new Vector3();\n  const vector2 = new Vector3();\n  const vector3 = new Vector3();\n  const vector4 = new Vector3();\n  const color = new Color(0xffffff);\n  let size = 1;\n\n  function stroke(position1, position2, matrix1, matrix2) {\n    if (position1.distanceToSquared(position2) === 0) return;\n    let count = geometry.drawRange.count;\n    const points = getPoints(size);\n\n    for (let i = 0, il = points.length; i < il; i++) {\n      const vertex1 = points[i];\n      const vertex2 = points[(i + 1) % il]; // positions\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).add(position2);\n      vector2.copy(vertex2).applyMatrix4(matrix2).add(position2);\n      vector3.copy(vertex2).applyMatrix4(matrix1).add(position1);\n      vector4.copy(vertex1).applyMatrix4(matrix1).add(position1);\n      vector1.toArray(positions.array, (count + 0) * 3);\n      vector2.toArray(positions.array, (count + 1) * 3);\n      vector4.toArray(positions.array, (count + 2) * 3);\n      vector2.toArray(positions.array, (count + 3) * 3);\n      vector3.toArray(positions.array, (count + 4) * 3);\n      vector4.toArray(positions.array, (count + 5) * 3); // normals\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).normalize();\n      vector2.copy(vertex2).applyMatrix4(matrix2).normalize();\n      vector3.copy(vertex2).applyMatrix4(matrix1).normalize();\n      vector4.copy(vertex1).applyMatrix4(matrix1).normalize();\n      vector1.toArray(normals.array, (count + 0) * 3);\n      vector2.toArray(normals.array, (count + 1) * 3);\n      vector4.toArray(normals.array, (count + 2) * 3);\n      vector2.toArray(normals.array, (count + 3) * 3);\n      vector3.toArray(normals.array, (count + 4) * 3);\n      vector4.toArray(normals.array, (count + 5) * 3); // colors\n\n      color.toArray(colors.array, (count + 0) * 3);\n      color.toArray(colors.array, (count + 1) * 3);\n      color.toArray(colors.array, (count + 2) * 3);\n      color.toArray(colors.array, (count + 3) * 3);\n      color.toArray(colors.array, (count + 4) * 3);\n      color.toArray(colors.array, (count + 5) * 3);\n      count += 6;\n    }\n\n    geometry.drawRange.count = count;\n  } //\n\n\n  const up = new Vector3(0, 1, 0);\n  const point1 = new Vector3();\n  const point2 = new Vector3();\n  const matrix1 = new Matrix4();\n  const matrix2 = new Matrix4();\n\n  function moveTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    point2.copy(position);\n    matrix2.copy(matrix1);\n  }\n\n  function lineTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    stroke(point1, point2, matrix1, matrix2);\n    point2.copy(point1);\n    matrix2.copy(matrix1);\n  }\n\n  function setSize(value) {\n    size = value;\n  } //\n\n\n  let count = 0;\n\n  function update() {\n    const start = count;\n    const end = geometry.drawRange.count;\n    if (start === end) return;\n    positions.updateRange.offset = start * 3;\n    positions.updateRange.count = (end - start) * 3;\n    positions.needsUpdate = true;\n    normals.updateRange.offset = start * 3;\n    normals.updateRange.count = (end - start) * 3;\n    normals.needsUpdate = true;\n    colors.updateRange.offset = start * 3;\n    colors.updateRange.count = (end - start) * 3;\n    colors.needsUpdate = true;\n    count = geometry.drawRange.count;\n  }\n\n  return {\n    mesh: mesh,\n    moveTo: moveTo,\n    lineTo: lineTo,\n    setSize: setSize,\n    update: update\n  };\n}\n\nexport { TubePainter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}