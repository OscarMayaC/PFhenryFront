{"ast":null,"code":"import * as THREE from 'three';\nimport * as React from 'react';\nimport { applyProps } from '@react-three/fiber';\n\n// and @0beqz https://gist.github.com/0beqz/8d51b4ae16d68021a09fb504af708fca\n\nconst worldposReplace = /* glsl */\n`\n#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n  vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n  #ifdef BOX_PROJECTED_ENV_MAP\n    vWorldPosition = worldPosition.xyz;\n  #endif\n#endif\n`;\nconst boxProjectDefinitions = /*glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n  uniform vec3 envMapSize;\n  uniform vec3 envMapPosition;\n  varying vec3 vWorldPosition;\n    \n  vec3 parallaxCorrectNormal( vec3 v, vec3 cubeSize, vec3 cubePos ) {\n    vec3 nDir = normalize( v );\n    vec3 rbmax = ( .5 * cubeSize + cubePos - vWorldPosition ) / nDir;\n    vec3 rbmin = ( -.5 * cubeSize + cubePos - vWorldPosition ) / nDir;\n    vec3 rbminmax;\n    rbminmax.x = ( nDir.x > 0. ) ? rbmax.x : rbmin.x;\n    rbminmax.y = ( nDir.y > 0. ) ? rbmax.y : rbmin.y;\n    rbminmax.z = ( nDir.z > 0. ) ? rbmax.z : rbmin.z;\n    float correction = min( min( rbminmax.x, rbminmax.y ), rbminmax.z );\n    vec3 boxIntersection = vWorldPosition + nDir * correction;    \n    return boxIntersection - cubePos;\n  }\n#endif\n`; // will be inserted after \"vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\"\n\nconst getIBLIrradiance_patch = /* glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n  worldNormal = parallaxCorrectNormal( worldNormal, envMapSize, envMapPosition );\n#endif\n`; // will be inserted after \"reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\"\n\nconst getIBLRadiance_patch = /* glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n  reflectVec = parallaxCorrectNormal( reflectVec, envMapSize, envMapPosition );\n#endif\n`;\nfunction boxProjectedEnvMap(shader, envMapPosition, envMapSize) {\n  shader.defines.BOX_PROJECTED_ENV_MAP = true; // uniforms\n\n  shader.uniforms.envMapPosition = {\n    value: envMapPosition\n  };\n  shader.uniforms.envMapSize = {\n    value: envMapSize\n  }; // vertex shader\n\n  shader.vertexShader = `\n  varying vec3 vWorldPosition;\n  ${shader.vertexShader.replace('#include <worldpos_vertex>', worldposReplace)}`; // fragment shader\n\n  shader.fragmentShader = `\n    ${boxProjectDefinitions}\n    ${shader.fragmentShader.replace('#include <envmap_physical_pars_fragment>', THREE.ShaderChunk.envmap_physical_pars_fragment).replace('vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );', `vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n         ${getIBLIrradiance_patch}\n         `).replace('reflectVec = inverseTransformDirection( reflectVec, viewMatrix );', `reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n         ${getIBLRadiance_patch}\n        `)}`;\n}\nfunction useBoxProjectedEnv() {\n  let position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new THREE.Vector3();\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new THREE.Vector3();\n  const [config] = React.useState(() => ({\n    position: new THREE.Vector3(),\n    size: new THREE.Vector3()\n  }));\n  applyProps(config, {\n    position,\n    size\n  });\n  const ref = React.useRef(null);\n  const spread = React.useMemo(() => ({\n    ref,\n    onBeforeCompile: shader => boxProjectedEnvMap(shader, config.position, config.size),\n    customProgramCacheKey: () => JSON.stringify(config.position.toArray()) + JSON.stringify(config.size.toArray())\n  }), [...config.position.toArray(), ...config.size.toArray()]);\n  React.useLayoutEffect(() => void (ref.current.needsUpdate = true), [config]);\n  return spread;\n}\nexport { useBoxProjectedEnv };","map":{"version":3,"names":["THREE","React","applyProps","worldposReplace","boxProjectDefinitions","getIBLIrradiance_patch","getIBLRadiance_patch","boxProjectedEnvMap","shader","envMapPosition","envMapSize","defines","BOX_PROJECTED_ENV_MAP","uniforms","value","vertexShader","replace","fragmentShader","ShaderChunk","envmap_physical_pars_fragment","useBoxProjectedEnv","position","arguments","length","undefined","Vector3","size","config","useState","ref","useRef","spread","useMemo","onBeforeCompile","customProgramCacheKey","JSON","stringify","toArray","useLayoutEffect","current","needsUpdate"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/@react-three/drei/core/useBoxProjectedEnv.js"],"sourcesContent":["import * as THREE from 'three';\nimport * as React from 'react';\nimport { applyProps } from '@react-three/fiber';\n\n// and @0beqz https://gist.github.com/0beqz/8d51b4ae16d68021a09fb504af708fca\n\nconst worldposReplace =\n/* glsl */\n`\n#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n  vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n  #ifdef BOX_PROJECTED_ENV_MAP\n    vWorldPosition = worldPosition.xyz;\n  #endif\n#endif\n`;\nconst boxProjectDefinitions =\n/*glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n  uniform vec3 envMapSize;\n  uniform vec3 envMapPosition;\n  varying vec3 vWorldPosition;\n    \n  vec3 parallaxCorrectNormal( vec3 v, vec3 cubeSize, vec3 cubePos ) {\n    vec3 nDir = normalize( v );\n    vec3 rbmax = ( .5 * cubeSize + cubePos - vWorldPosition ) / nDir;\n    vec3 rbmin = ( -.5 * cubeSize + cubePos - vWorldPosition ) / nDir;\n    vec3 rbminmax;\n    rbminmax.x = ( nDir.x > 0. ) ? rbmax.x : rbmin.x;\n    rbminmax.y = ( nDir.y > 0. ) ? rbmax.y : rbmin.y;\n    rbminmax.z = ( nDir.z > 0. ) ? rbmax.z : rbmin.z;\n    float correction = min( min( rbminmax.x, rbminmax.y ), rbminmax.z );\n    vec3 boxIntersection = vWorldPosition + nDir * correction;    \n    return boxIntersection - cubePos;\n  }\n#endif\n`; // will be inserted after \"vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\"\n\nconst getIBLIrradiance_patch =\n/* glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n  worldNormal = parallaxCorrectNormal( worldNormal, envMapSize, envMapPosition );\n#endif\n`; // will be inserted after \"reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\"\n\nconst getIBLRadiance_patch =\n/* glsl */\n`\n#ifdef BOX_PROJECTED_ENV_MAP\n  reflectVec = parallaxCorrectNormal( reflectVec, envMapSize, envMapPosition );\n#endif\n`;\n\nfunction boxProjectedEnvMap(shader, envMapPosition, envMapSize) {\n  shader.defines.BOX_PROJECTED_ENV_MAP = true; // uniforms\n\n  shader.uniforms.envMapPosition = {\n    value: envMapPosition\n  };\n  shader.uniforms.envMapSize = {\n    value: envMapSize\n  }; // vertex shader\n\n  shader.vertexShader = `\n  varying vec3 vWorldPosition;\n  ${shader.vertexShader.replace('#include <worldpos_vertex>', worldposReplace)}`; // fragment shader\n\n  shader.fragmentShader = `\n    ${boxProjectDefinitions}\n    ${shader.fragmentShader.replace('#include <envmap_physical_pars_fragment>', THREE.ShaderChunk.envmap_physical_pars_fragment).replace('vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );', `vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n         ${getIBLIrradiance_patch}\n         `).replace('reflectVec = inverseTransformDirection( reflectVec, viewMatrix );', `reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n         ${getIBLRadiance_patch}\n        `)}`;\n}\n\nfunction useBoxProjectedEnv(position = new THREE.Vector3(), size = new THREE.Vector3()) {\n  const [config] = React.useState(() => ({\n    position: new THREE.Vector3(),\n    size: new THREE.Vector3()\n  }));\n  applyProps(config, {\n    position,\n    size\n  });\n  const ref = React.useRef(null);\n  const spread = React.useMemo(() => ({\n    ref,\n    onBeforeCompile: shader => boxProjectedEnvMap(shader, config.position, config.size),\n    customProgramCacheKey: () => JSON.stringify(config.position.toArray()) + JSON.stringify(config.size.toArray())\n  }), [...config.position.toArray(), ...config.size.toArray()]);\n  React.useLayoutEffect(() => void (ref.current.needsUpdate = true), [config]);\n  return spread;\n}\n\nexport { useBoxProjectedEnv };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}