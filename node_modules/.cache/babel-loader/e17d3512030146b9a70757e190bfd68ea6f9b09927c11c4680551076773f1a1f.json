{"ast":null,"code":"/**\n * Kaleidoscope Shader\n * Radial reflection around center point\n * Ported from: http://pixelshaders.com/editor/\n * by Toby Schachman / http://tobyschachman.com/\n *\n * sides: number of reflections\n * angle: initial angle in radians\n */\nconst KaleidoShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    sides: {\n      value: 6.0\n    },\n    angle: {\n      value: 0.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float sides;', 'uniform float angle;', 'varying vec2 vUv;', 'void main() {', '\tvec2 p = vUv - 0.5;', '\tfloat r = length(p);', '\tfloat a = atan(p.y, p.x) + angle;', '\tfloat tau = 2. * 3.1416 ;', '\ta = mod(a, tau/sides);', '\ta = abs(a - tau/sides/2.) ;', '\tp = r * vec2(cos(a), sin(a));', '\tvec4 color = texture2D(tDiffuse, p + 0.5);', '\tgl_FragColor = color;', '}'].join('\\n')\n};\nexport { KaleidoShader };","map":{"version":3,"names":["KaleidoShader","uniforms","tDiffuse","value","sides","angle","vertexShader","join","fragmentShader"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/shaders/KaleidoShader.js"],"sourcesContent":["/**\n * Kaleidoscope Shader\n * Radial reflection around center point\n * Ported from: http://pixelshaders.com/editor/\n * by Toby Schachman / http://tobyschachman.com/\n *\n * sides: number of reflections\n * angle: initial angle in radians\n */\nconst KaleidoShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    sides: {\n      value: 6.0\n    },\n    angle: {\n      value: 0.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float sides;', 'uniform float angle;', 'varying vec2 vUv;', 'void main() {', '\tvec2 p = vUv - 0.5;', '\tfloat r = length(p);', '\tfloat a = atan(p.y, p.x) + angle;', '\tfloat tau = 2. * 3.1416 ;', '\ta = mod(a, tau/sides);', '\ta = abs(a - tau/sides/2.) ;', '\tp = r * vec2(cos(a), sin(a));', '\tvec4 color = texture2D(tDiffuse, p + 0.5);', '\tgl_FragColor = color;', '}'].join('\\n')\n};\n\nexport { KaleidoShader };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,aAAa,GAAG;EACpBC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MACRC,KAAK,EAAE;IACT,CAAC;IACDC,KAAK,EAAE;MACLD,KAAK,EAAE;IACT,CAAC;IACDE,KAAK,EAAE;MACLF,KAAK,EAAE;IACT;EACF,CAAC;EACDG,YAAY,EAAE,CAAC,mBAAmB,EAAE,eAAe,EAAE,YAAY,EAAE,4EAA4E,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAChKC,cAAc,EAAE,CAAC,6BAA6B,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,mBAAmB,EAAE,eAAe,EAAE,sBAAsB,EAAE,uBAAuB,EAAE,oCAAoC,EAAE,4BAA4B,EAAE,yBAAyB,EAAE,8BAA8B,EAAE,gCAAgC,EAAE,6CAA6C,EAAE,wBAAwB,EAAE,GAAG,CAAC,CAACD,IAAI,CAAC,IAAI;AACjb,CAAC;AAED,SAASP,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}