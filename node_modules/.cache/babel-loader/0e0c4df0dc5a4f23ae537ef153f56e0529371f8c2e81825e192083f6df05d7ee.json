{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmbeddedActionsParser = exports.CstParser = exports.Parser = exports.EMPTY_ALT = exports.ParserDefinitionErrorType = exports.DEFAULT_RULE_CONFIG = exports.DEFAULT_PARSER_CONFIG = exports.END_OF_FILE = void 0;\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\nvar map_1 = __importDefault(require(\"lodash/map\"));\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\nvar values_1 = __importDefault(require(\"lodash/values\"));\nvar has_1 = __importDefault(require(\"lodash/has\"));\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\nvar utils_1 = require(\"@chevrotain/utils\");\nvar follow_1 = require(\"../grammar/follow\");\nvar tokens_public_1 = require(\"../../scan/tokens_public\");\nvar errors_public_1 = require(\"../errors_public\");\nvar gast_resolver_public_1 = require(\"../grammar/gast/gast_resolver_public\");\nvar recoverable_1 = require(\"./traits/recoverable\");\nvar looksahead_1 = require(\"./traits/looksahead\");\nvar tree_builder_1 = require(\"./traits/tree_builder\");\nvar lexer_adapter_1 = require(\"./traits/lexer_adapter\");\nvar recognizer_api_1 = require(\"./traits/recognizer_api\");\nvar recognizer_engine_1 = require(\"./traits/recognizer_engine\");\nvar error_handler_1 = require(\"./traits/error_handler\");\nvar context_assist_1 = require(\"./traits/context_assist\");\nvar gast_recorder_1 = require(\"./traits/gast_recorder\");\nvar perf_tracer_1 = require(\"./traits/perf_tracer\");\nvar apply_mixins_1 = require(\"./utils/apply_mixins\");\nvar checks_1 = require(\"../grammar/checks\");\nexports.END_OF_FILE = (0, tokens_public_1.createTokenInstance)(tokens_public_1.EOF, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\nObject.freeze(exports.END_OF_FILE);\nexports.DEFAULT_PARSER_CONFIG = Object.freeze({\n  recoveryEnabled: false,\n  maxLookahead: 3,\n  dynamicTokensEnabled: false,\n  outputCst: true,\n  errorMessageProvider: errors_public_1.defaultParserErrorProvider,\n  nodeLocationTracking: \"none\",\n  traceInitPerf: false,\n  skipValidations: false\n});\nexports.DEFAULT_RULE_CONFIG = Object.freeze({\n  recoveryValueFunc: function () {\n    return undefined;\n  },\n  resyncEnabled: true\n});\nvar ParserDefinitionErrorType;\n(function (ParserDefinitionErrorType) {\n  ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_RULE_NAME\"] = 0] = \"INVALID_RULE_NAME\";\n  ParserDefinitionErrorType[ParserDefinitionErrorType[\"DUPLICATE_RULE_NAME\"] = 1] = \"DUPLICATE_RULE_NAME\";\n  ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_RULE_OVERRIDE\"] = 2] = \"INVALID_RULE_OVERRIDE\";\n  ParserDefinitionErrorType[ParserDefinitionErrorType[\"DUPLICATE_PRODUCTIONS\"] = 3] = \"DUPLICATE_PRODUCTIONS\";\n  ParserDefinitionErrorType[ParserDefinitionErrorType[\"UNRESOLVED_SUBRULE_REF\"] = 4] = \"UNRESOLVED_SUBRULE_REF\";\n  ParserDefinitionErrorType[ParserDefinitionErrorType[\"LEFT_RECURSION\"] = 5] = \"LEFT_RECURSION\";\n  ParserDefinitionErrorType[ParserDefinitionErrorType[\"NONE_LAST_EMPTY_ALT\"] = 6] = \"NONE_LAST_EMPTY_ALT\";\n  ParserDefinitionErrorType[ParserDefinitionErrorType[\"AMBIGUOUS_ALTS\"] = 7] = \"AMBIGUOUS_ALTS\";\n  ParserDefinitionErrorType[ParserDefinitionErrorType[\"CONFLICT_TOKENS_RULES_NAMESPACE\"] = 8] = \"CONFLICT_TOKENS_RULES_NAMESPACE\";\n  ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_TOKEN_NAME\"] = 9] = \"INVALID_TOKEN_NAME\";\n  ParserDefinitionErrorType[ParserDefinitionErrorType[\"NO_NON_EMPTY_LOOKAHEAD\"] = 10] = \"NO_NON_EMPTY_LOOKAHEAD\";\n  ParserDefinitionErrorType[ParserDefinitionErrorType[\"AMBIGUOUS_PREFIX_ALTS\"] = 11] = \"AMBIGUOUS_PREFIX_ALTS\";\n  ParserDefinitionErrorType[ParserDefinitionErrorType[\"TOO_MANY_ALTS\"] = 12] = \"TOO_MANY_ALTS\";\n  ParserDefinitionErrorType[ParserDefinitionErrorType[\"CUSTOM_LOOKAHEAD_VALIDATION\"] = 13] = \"CUSTOM_LOOKAHEAD_VALIDATION\";\n})(ParserDefinitionErrorType = exports.ParserDefinitionErrorType || (exports.ParserDefinitionErrorType = {}));\nfunction EMPTY_ALT(value) {\n  if (value === void 0) {\n    value = undefined;\n  }\n  return function () {\n    return value;\n  };\n}\nexports.EMPTY_ALT = EMPTY_ALT;\nvar Parser = /** @class */function () {\n  function Parser(tokenVocabulary, config) {\n    this.definitionErrors = [];\n    this.selfAnalysisDone = false;\n    var that = this;\n    that.initErrorHandler(config);\n    that.initLexerAdapter();\n    that.initLooksAhead(config);\n    that.initRecognizerEngine(tokenVocabulary, config);\n    that.initRecoverable(config);\n    that.initTreeBuilder(config);\n    that.initContentAssist();\n    that.initGastRecorder(config);\n    that.initPerformanceTracer(config);\n    if ((0, has_1.default)(config, \"ignoredIssues\")) {\n      throw new Error(\"The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t\" + \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t\" + \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t\" + \"For further details.\");\n    }\n    this.skipValidations = (0, has_1.default)(config, \"skipValidations\") ? config.skipValidations // casting assumes the end user passing the correct type\n    : exports.DEFAULT_PARSER_CONFIG.skipValidations;\n  }\n  /**\n   *  @deprecated use the **instance** method with the same name instead\n   */\n  Parser.performSelfAnalysis = function (parserInstance) {\n    throw Error(\"The **static** `performSelfAnalysis` method has been deprecated.\" + \"\\t\\nUse the **instance** method with the same name instead.\");\n  };\n  Parser.prototype.performSelfAnalysis = function () {\n    var _this = this;\n    this.TRACE_INIT(\"performSelfAnalysis\", function () {\n      var defErrorsMsgs;\n      _this.selfAnalysisDone = true;\n      var className = _this.className;\n      _this.TRACE_INIT(\"toFastProps\", function () {\n        // Without this voodoo magic the parser would be x3-x4 slower\n        // It seems it is better to invoke `toFastProperties` **before**\n        // Any manipulations of the `this` object done during the recording phase.\n        (0, utils_1.toFastProperties)(_this);\n      });\n      _this.TRACE_INIT(\"Grammar Recording\", function () {\n        try {\n          _this.enableRecording();\n          // Building the GAST\n          (0, forEach_1.default)(_this.definedRulesNames, function (currRuleName) {\n            var wrappedRule = _this[currRuleName];\n            var originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n            var recordedRuleGast;\n            _this.TRACE_INIT(\"\".concat(currRuleName, \" Rule\"), function () {\n              recordedRuleGast = _this.topLevelRuleRecord(currRuleName, originalGrammarAction);\n            });\n            _this.gastProductionsCache[currRuleName] = recordedRuleGast;\n          });\n        } finally {\n          _this.disableRecording();\n        }\n      });\n      var resolverErrors = [];\n      _this.TRACE_INIT(\"Grammar Resolving\", function () {\n        resolverErrors = (0, gast_resolver_public_1.resolveGrammar)({\n          rules: (0, values_1.default)(_this.gastProductionsCache)\n        });\n        _this.definitionErrors = _this.definitionErrors.concat(resolverErrors);\n      });\n      _this.TRACE_INIT(\"Grammar Validations\", function () {\n        // only perform additional grammar validations IFF no resolving errors have occurred.\n        // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n        if ((0, isEmpty_1.default)(resolverErrors) && _this.skipValidations === false) {\n          var validationErrors = (0, gast_resolver_public_1.validateGrammar)({\n            rules: (0, values_1.default)(_this.gastProductionsCache),\n            tokenTypes: (0, values_1.default)(_this.tokensMap),\n            errMsgProvider: errors_public_1.defaultGrammarValidatorErrorProvider,\n            grammarName: className\n          });\n          var lookaheadValidationErrors = (0, checks_1.validateLookahead)({\n            lookaheadStrategy: _this.lookaheadStrategy,\n            rules: (0, values_1.default)(_this.gastProductionsCache),\n            tokenTypes: (0, values_1.default)(_this.tokensMap),\n            grammarName: className\n          });\n          _this.definitionErrors = _this.definitionErrors.concat(validationErrors, lookaheadValidationErrors);\n        }\n      });\n      // this analysis may fail if the grammar is not perfectly valid\n      if ((0, isEmpty_1.default)(_this.definitionErrors)) {\n        // The results of these computations are not needed unless error recovery is enabled.\n        if (_this.recoveryEnabled) {\n          _this.TRACE_INIT(\"computeAllProdsFollows\", function () {\n            var allFollows = (0, follow_1.computeAllProdsFollows)((0, values_1.default)(_this.gastProductionsCache));\n            _this.resyncFollows = allFollows;\n          });\n        }\n        _this.TRACE_INIT(\"ComputeLookaheadFunctions\", function () {\n          var _a, _b;\n          (_b = (_a = _this.lookaheadStrategy).initialize) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            rules: (0, values_1.default)(_this.gastProductionsCache)\n          });\n          _this.preComputeLookaheadFunctions((0, values_1.default)(_this.gastProductionsCache));\n        });\n      }\n      if (!Parser.DEFER_DEFINITION_ERRORS_HANDLING && !(0, isEmpty_1.default)(_this.definitionErrors)) {\n        defErrorsMsgs = (0, map_1.default)(_this.definitionErrors, function (defError) {\n          return defError.message;\n        });\n        throw new Error(\"Parser Definition Errors detected:\\n \".concat(defErrorsMsgs.join(\"\\n-------------------------------\\n\")));\n      }\n    });\n  };\n  // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n  // (normally during the parser's constructor).\n  // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n  // for example: duplicate rule names, referencing an unresolved subrule, ect...\n  // This flag should not be enabled during normal usage, it is used in special situations, for example when\n  // needing to display the parser definition errors in some GUI(online playground).\n  Parser.DEFER_DEFINITION_ERRORS_HANDLING = false;\n  return Parser;\n}();\nexports.Parser = Parser;\n(0, apply_mixins_1.applyMixins)(Parser, [recoverable_1.Recoverable, looksahead_1.LooksAhead, tree_builder_1.TreeBuilder, lexer_adapter_1.LexerAdapter, recognizer_engine_1.RecognizerEngine, recognizer_api_1.RecognizerApi, error_handler_1.ErrorHandler, context_assist_1.ContentAssist, gast_recorder_1.GastRecorder, perf_tracer_1.PerformanceTracer]);\nvar CstParser = /** @class */function (_super) {\n  __extends(CstParser, _super);\n  function CstParser(tokenVocabulary, config) {\n    if (config === void 0) {\n      config = exports.DEFAULT_PARSER_CONFIG;\n    }\n    var configClone = (0, clone_1.default)(config);\n    configClone.outputCst = true;\n    return _super.call(this, tokenVocabulary, configClone) || this;\n  }\n  return CstParser;\n}(Parser);\nexports.CstParser = CstParser;\nvar EmbeddedActionsParser = /** @class */function (_super) {\n  __extends(EmbeddedActionsParser, _super);\n  function EmbeddedActionsParser(tokenVocabulary, config) {\n    if (config === void 0) {\n      config = exports.DEFAULT_PARSER_CONFIG;\n    }\n    var configClone = (0, clone_1.default)(config);\n    configClone.outputCst = false;\n    return _super.call(this, tokenVocabulary, configClone) || this;\n  }\n  return EmbeddedActionsParser;\n}(Parser);\nexports.EmbeddedActionsParser = EmbeddedActionsParser;","map":{"version":3,"names":["isEmpty_1","__importDefault","require","map_1","forEach_1","values_1","has_1","clone_1","utils_1","follow_1","tokens_public_1","errors_public_1","gast_resolver_public_1","recoverable_1","looksahead_1","tree_builder_1","lexer_adapter_1","recognizer_api_1","recognizer_engine_1","error_handler_1","context_assist_1","gast_recorder_1","perf_tracer_1","apply_mixins_1","checks_1","exports","END_OF_FILE","createTokenInstance","EOF","NaN","Object","freeze","DEFAULT_PARSER_CONFIG","recoveryEnabled","maxLookahead","dynamicTokensEnabled","outputCst","errorMessageProvider","defaultParserErrorProvider","nodeLocationTracking","traceInitPerf","skipValidations","DEFAULT_RULE_CONFIG","recoveryValueFunc","undefined","resyncEnabled","ParserDefinitionErrorType","EMPTY_ALT","value","Parser","tokenVocabulary","config","definitionErrors","selfAnalysisDone","that","initErrorHandler","initLexerAdapter","initLooksAhead","initRecognizerEngine","initRecoverable","initTreeBuilder","initContentAssist","initGastRecorder","initPerformanceTracer","default","Error","performSelfAnalysis","parserInstance","prototype","_this","TRACE_INIT","defErrorsMsgs","className","toFastProperties","enableRecording","definedRulesNames","currRuleName","wrappedRule","originalGrammarAction","recordedRuleGast","concat","topLevelRuleRecord","gastProductionsCache","disableRecording","resolverErrors","resolveGrammar","rules","validationErrors","validateGrammar","tokenTypes","tokensMap","errMsgProvider","defaultGrammarValidatorErrorProvider","grammarName","lookaheadValidationErrors","validateLookahead","lookaheadStrategy","allFollows","computeAllProdsFollows","resyncFollows","_b","_a","initialize","call","preComputeLookaheadFunctions","DEFER_DEFINITION_ERRORS_HANDLING","defError","message","join","applyMixins","Recoverable","LooksAhead","TreeBuilder","LexerAdapter","RecognizerEngine","RecognizerApi","ErrorHandler","ContentAssist","GastRecorder","PerformanceTracer","CstParser","_super","__extends","configClone","EmbeddedActionsParser"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/chevrotain/src/parse/parser/parser.ts"],"sourcesContent":["import isEmpty from \"lodash/isEmpty\"\nimport map from \"lodash/map\"\nimport forEach from \"lodash/forEach\"\nimport values from \"lodash/values\"\nimport has from \"lodash/has\"\nimport clone from \"lodash/clone\"\nimport { toFastProperties } from \"@chevrotain/utils\"\nimport { computeAllProdsFollows } from \"../grammar/follow\"\nimport { createTokenInstance, EOF } from \"../../scan/tokens_public\"\nimport {\n  defaultGrammarValidatorErrorProvider,\n  defaultParserErrorProvider\n} from \"../errors_public\"\nimport {\n  resolveGrammar,\n  validateGrammar\n} from \"../grammar/gast/gast_resolver_public\"\nimport {\n  CstNode,\n  IParserConfig,\n  IRecognitionException,\n  IRuleConfig,\n  IToken,\n  TokenType,\n  TokenVocabulary\n} from \"@chevrotain/types\"\nimport { Recoverable } from \"./traits/recoverable\"\nimport { LooksAhead } from \"./traits/looksahead\"\nimport { TreeBuilder } from \"./traits/tree_builder\"\nimport { LexerAdapter } from \"./traits/lexer_adapter\"\nimport { RecognizerApi } from \"./traits/recognizer_api\"\nimport { RecognizerEngine } from \"./traits/recognizer_engine\"\n\nimport { ErrorHandler } from \"./traits/error_handler\"\nimport { MixedInParser } from \"./traits/parser_traits\"\nimport { ContentAssist } from \"./traits/context_assist\"\nimport { GastRecorder } from \"./traits/gast_recorder\"\nimport { PerformanceTracer } from \"./traits/perf_tracer\"\nimport { applyMixins } from \"./utils/apply_mixins\"\nimport { IParserDefinitionError } from \"../grammar/types\"\nimport { Rule } from \"@chevrotain/gast\"\nimport { IParserConfigInternal, ParserMethodInternal } from \"./types\"\nimport { validateLookahead } from \"../grammar/checks\"\n\nexport const END_OF_FILE = createTokenInstance(\n  EOF,\n  \"\",\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN\n)\nObject.freeze(END_OF_FILE)\n\nexport type TokenMatcher = (token: IToken, tokType: TokenType) => boolean\n\nexport const DEFAULT_PARSER_CONFIG: Required<\n  Omit<IParserConfigInternal, \"lookaheadStrategy\">\n> = Object.freeze({\n  recoveryEnabled: false,\n  maxLookahead: 3,\n  dynamicTokensEnabled: false,\n  outputCst: true,\n  errorMessageProvider: defaultParserErrorProvider,\n  nodeLocationTracking: \"none\",\n  traceInitPerf: false,\n  skipValidations: false\n})\n\nexport const DEFAULT_RULE_CONFIG: Required<IRuleConfig<any>> = Object.freeze({\n  recoveryValueFunc: () => undefined,\n  resyncEnabled: true\n})\n\nexport enum ParserDefinitionErrorType {\n  INVALID_RULE_NAME = 0,\n  DUPLICATE_RULE_NAME = 1,\n  INVALID_RULE_OVERRIDE = 2,\n  DUPLICATE_PRODUCTIONS = 3,\n  UNRESOLVED_SUBRULE_REF = 4,\n  LEFT_RECURSION = 5,\n  NONE_LAST_EMPTY_ALT = 6,\n  AMBIGUOUS_ALTS = 7,\n  CONFLICT_TOKENS_RULES_NAMESPACE = 8,\n  INVALID_TOKEN_NAME = 9,\n  NO_NON_EMPTY_LOOKAHEAD = 10,\n  AMBIGUOUS_PREFIX_ALTS = 11,\n  TOO_MANY_ALTS = 12,\n  CUSTOM_LOOKAHEAD_VALIDATION = 13\n}\n\nexport interface IParserDuplicatesDefinitionError\n  extends IParserDefinitionError {\n  dslName: string\n  occurrence: number\n  parameter?: string\n}\n\nexport interface IParserEmptyAlternativeDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number\n  alternative: number\n}\n\nexport interface IParserAmbiguousAlternativesDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number | string\n  alternatives: number[]\n}\n\nexport interface IParserUnresolvedRefDefinitionError\n  extends IParserDefinitionError {\n  unresolvedRefName: string\n}\n\nexport interface IParserState {\n  errors: IRecognitionException[]\n  lexerState: any\n  RULE_STACK: number[]\n  CST_STACK: CstNode[]\n}\n\nexport type Predicate = () => boolean\n\nexport function EMPTY_ALT(): () => undefined\nexport function EMPTY_ALT<T>(value: T): () => T\nexport function EMPTY_ALT(value: any = undefined) {\n  return function () {\n    return value\n  }\n}\n\nexport class Parser {\n  // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n  // (normally during the parser's constructor).\n  // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n  // for example: duplicate rule names, referencing an unresolved subrule, ect...\n  // This flag should not be enabled during normal usage, it is used in special situations, for example when\n  // needing to display the parser definition errors in some GUI(online playground).\n  static DEFER_DEFINITION_ERRORS_HANDLING: boolean = false\n\n  /**\n   *  @deprecated use the **instance** method with the same name instead\n   */\n  static performSelfAnalysis(parserInstance: Parser): void {\n    throw Error(\n      \"The **static** `performSelfAnalysis` method has been deprecated.\" +\n        \"\\t\\nUse the **instance** method with the same name instead.\"\n    )\n  }\n\n  public performSelfAnalysis(this: MixedInParser): void {\n    this.TRACE_INIT(\"performSelfAnalysis\", () => {\n      let defErrorsMsgs\n\n      this.selfAnalysisDone = true\n      const className = this.className\n\n      this.TRACE_INIT(\"toFastProps\", () => {\n        // Without this voodoo magic the parser would be x3-x4 slower\n        // It seems it is better to invoke `toFastProperties` **before**\n        // Any manipulations of the `this` object done during the recording phase.\n        toFastProperties(this)\n      })\n\n      this.TRACE_INIT(\"Grammar Recording\", () => {\n        try {\n          this.enableRecording()\n          // Building the GAST\n          forEach(this.definedRulesNames, (currRuleName) => {\n            const wrappedRule = (this as any)[\n              currRuleName\n            ] as ParserMethodInternal<unknown[], unknown>\n            const originalGrammarAction = wrappedRule[\"originalGrammarAction\"]\n            let recordedRuleGast!: Rule\n            this.TRACE_INIT(`${currRuleName} Rule`, () => {\n              recordedRuleGast = this.topLevelRuleRecord(\n                currRuleName,\n                originalGrammarAction\n              )\n            })\n            this.gastProductionsCache[currRuleName] = recordedRuleGast\n          })\n        } finally {\n          this.disableRecording()\n        }\n      })\n\n      let resolverErrors: IParserDefinitionError[] = []\n      this.TRACE_INIT(\"Grammar Resolving\", () => {\n        resolverErrors = resolveGrammar({\n          rules: values(this.gastProductionsCache)\n        })\n        this.definitionErrors = this.definitionErrors.concat(resolverErrors)\n      })\n\n      this.TRACE_INIT(\"Grammar Validations\", () => {\n        // only perform additional grammar validations IFF no resolving errors have occurred.\n        // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n        if (isEmpty(resolverErrors) && this.skipValidations === false) {\n          const validationErrors = validateGrammar({\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            errMsgProvider: defaultGrammarValidatorErrorProvider,\n            grammarName: className\n          })\n          const lookaheadValidationErrors = validateLookahead({\n            lookaheadStrategy: this.lookaheadStrategy,\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            grammarName: className\n          })\n          this.definitionErrors = this.definitionErrors.concat(\n            validationErrors,\n            lookaheadValidationErrors\n          )\n        }\n      })\n\n      // this analysis may fail if the grammar is not perfectly valid\n      if (isEmpty(this.definitionErrors)) {\n        // The results of these computations are not needed unless error recovery is enabled.\n        if (this.recoveryEnabled) {\n          this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n            const allFollows = computeAllProdsFollows(\n              values(this.gastProductionsCache)\n            )\n            this.resyncFollows = allFollows\n          })\n        }\n\n        this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n          this.lookaheadStrategy.initialize?.({\n            rules: values(this.gastProductionsCache)\n          })\n          this.preComputeLookaheadFunctions(values(this.gastProductionsCache))\n        })\n      }\n\n      if (\n        !Parser.DEFER_DEFINITION_ERRORS_HANDLING &&\n        !isEmpty(this.definitionErrors)\n      ) {\n        defErrorsMsgs = map(\n          this.definitionErrors,\n          (defError) => defError.message\n        )\n        throw new Error(\n          `Parser Definition Errors detected:\\n ${defErrorsMsgs.join(\n            \"\\n-------------------------------\\n\"\n          )}`\n        )\n      }\n    })\n  }\n\n  definitionErrors: IParserDefinitionError[] = []\n  selfAnalysisDone = false\n  protected skipValidations: boolean\n\n  constructor(tokenVocabulary: TokenVocabulary, config: IParserConfig) {\n    const that: MixedInParser = this as any\n    that.initErrorHandler(config)\n    that.initLexerAdapter()\n    that.initLooksAhead(config)\n    that.initRecognizerEngine(tokenVocabulary, config)\n    that.initRecoverable(config)\n    that.initTreeBuilder(config)\n    that.initContentAssist()\n    that.initGastRecorder(config)\n    that.initPerformanceTracer(config)\n\n    if (has(config, \"ignoredIssues\")) {\n      throw new Error(\n        \"The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t\" +\n          \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t\" +\n          \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t\" +\n          \"For further details.\"\n      )\n    }\n\n    this.skipValidations = has(config, \"skipValidations\")\n      ? (config.skipValidations as boolean) // casting assumes the end user passing the correct type\n      : DEFAULT_PARSER_CONFIG.skipValidations\n  }\n}\n\napplyMixins(Parser, [\n  Recoverable,\n  LooksAhead,\n  TreeBuilder,\n  LexerAdapter,\n  RecognizerEngine,\n  RecognizerApi,\n  ErrorHandler,\n  ContentAssist,\n  GastRecorder,\n  PerformanceTracer\n])\n\nexport class CstParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG\n  ) {\n    const configClone = clone(config)\n    configClone.outputCst = true\n    super(tokenVocabulary, configClone)\n  }\n}\n\nexport class EmbeddedActionsParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG\n  ) {\n    const configClone = clone(config)\n    configClone.outputCst = false\n    super(tokenVocabulary, configClone)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}