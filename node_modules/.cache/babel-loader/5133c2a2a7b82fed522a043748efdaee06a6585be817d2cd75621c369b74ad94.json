{"ast":null,"code":"import { Vector3, Color } from 'three';\n\n/**\n * Currently contains:\n *\n *\ttoon1\n *\ttoon2\n *\thatching\n *\tdotted\n */\n\nconst ToonShader1 = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xffffff)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'varying vec3 vRefract;', 'void main() {', '\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );', '\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', '\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );', '\tvNormal = normalize( normalMatrix * normal );', '\tvec3 I = worldPosition.xyz - cameraPosition;', '\tvRefract = refract( normalize( I ), worldNormal, 1.02 );', '\tgl_Position = projectionMatrix * mvPosition;', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'varying vec3 vRefract;', 'void main() {', '\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);', '\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', '\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );', '\tintensity += length(lightWeighting) * 0.2;', '\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );', '\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );', '\tintensity = intensity * 0.2 + 0.3;', '\tif ( intensity < 0.50 ) {', '\t\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );', '\t} else {', '\t\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );', '}', '}'].join('\\n')\n};\nconst ToonShader2 = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xeeeeee)\n    },\n    uLineColor1: {\n      value: new Color(0x808080)\n    },\n    uLineColor2: {\n      value: new Color(0x000000)\n    },\n    uLineColor3: {\n      value: new Color(0x000000)\n    },\n    uLineColor4: {\n      value: new Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', '\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);', '\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);', '\tgl_FragColor = vec4( uBaseColor, 1.0 );', '\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {', '\t\tgl_FragColor *= vec4( uLineColor1, 1.0 );', '\t}', '\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {', '\t\tgl_FragColor *= vec4( uLineColor2, 1.0 );', '\t}', '}'].join('\\n')\n};\nconst ToonShaderHatching = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xffffff)\n    },\n    uLineColor1: {\n      value: new Color(0x000000)\n    },\n    uLineColor2: {\n      value: new Color(0x000000)\n    },\n    uLineColor3: {\n      value: new Color(0x000000)\n    },\n    uLineColor4: {\n      value: new Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', '\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);', '\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', '\tgl_FragColor = vec4( uBaseColor, 1.0 );', '\tif ( length(lightWeighting) < 1.00 ) {', '\t\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.75 ) {', '\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor2, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.50 ) {', '\t\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor3, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.3465 ) {', '\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor4, 1.0 );', '\t}', '\t}', '}'].join('\\n')\n};\nconst ToonShaderDotted = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xffffff)\n    },\n    uLineColor1: {\n      value: new Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', 'float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);', 'vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', 'gl_FragColor = vec4( uBaseColor, 1.0 );', 'if ( length(lightWeighting) < 1.00 ) {', '\t\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.50 ) {', '\t\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '}'].join('\\n')\n};\nexport { ToonShader1, ToonShader2, ToonShaderDotted, ToonShaderHatching };","map":{"version":3,"names":["Vector3","Color","ToonShader1","uniforms","uDirLightPos","value","uDirLightColor","uAmbientLightColor","uBaseColor","vertexShader","join","fragmentShader","ToonShader2","uLineColor1","uLineColor2","uLineColor3","uLineColor4","ToonShaderHatching","ToonShaderDotted"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/shaders/ToonShader.js"],"sourcesContent":["import { Vector3, Color } from 'three';\n\n/**\n * Currently contains:\n *\n *\ttoon1\n *\ttoon2\n *\thatching\n *\tdotted\n */\n\nconst ToonShader1 = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xffffff)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'varying vec3 vRefract;', 'void main() {', '\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );', '\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', '\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );', '\tvNormal = normalize( normalMatrix * normal );', '\tvec3 I = worldPosition.xyz - cameraPosition;', '\tvRefract = refract( normalize( I ), worldNormal, 1.02 );', '\tgl_Position = projectionMatrix * mvPosition;', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'varying vec3 vRefract;', 'void main() {', '\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);', '\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', '\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );', '\tintensity += length(lightWeighting) * 0.2;', '\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );', '\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );', '\tintensity = intensity * 0.2 + 0.3;', '\tif ( intensity < 0.50 ) {', '\t\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );', '\t} else {', '\t\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );', '}', '}'].join('\\n')\n};\nconst ToonShader2 = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xeeeeee)\n    },\n    uLineColor1: {\n      value: new Color(0x808080)\n    },\n    uLineColor2: {\n      value: new Color(0x000000)\n    },\n    uLineColor3: {\n      value: new Color(0x000000)\n    },\n    uLineColor4: {\n      value: new Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', '\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);', '\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);', '\tgl_FragColor = vec4( uBaseColor, 1.0 );', '\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {', '\t\tgl_FragColor *= vec4( uLineColor1, 1.0 );', '\t}', '\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {', '\t\tgl_FragColor *= vec4( uLineColor2, 1.0 );', '\t}', '}'].join('\\n')\n};\nconst ToonShaderHatching = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xffffff)\n    },\n    uLineColor1: {\n      value: new Color(0x000000)\n    },\n    uLineColor2: {\n      value: new Color(0x000000)\n    },\n    uLineColor3: {\n      value: new Color(0x000000)\n    },\n    uLineColor4: {\n      value: new Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', '\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);', '\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', '\tgl_FragColor = vec4( uBaseColor, 1.0 );', '\tif ( length(lightWeighting) < 1.00 ) {', '\t\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.75 ) {', '\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor2, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.50 ) {', '\t\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor3, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.3465 ) {', '\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor4, 1.0 );', '\t}', '\t}', '}'].join('\\n')\n};\nconst ToonShaderDotted = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xffffff)\n    },\n    uLineColor1: {\n      value: new Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', 'float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);', 'vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', 'gl_FragColor = vec4( uBaseColor, 1.0 );', 'if ( length(lightWeighting) < 1.00 ) {', '\t\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.50 ) {', '\t\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '}'].join('\\n')\n};\n\nexport { ToonShader1, ToonShader2, ToonShaderDotted, ToonShaderHatching };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}