'use strict';

var tslib = require('tslib');
var jMoment = require('moment-jalaali');
var DefaultMomentUtils = require('@date-io/moment');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var jMoment__default = /*#__PURE__*/_interopDefaultLegacy(jMoment);
var DefaultMomentUtils__default = /*#__PURE__*/_interopDefaultLegacy(DefaultMomentUtils);

var symbolMap = {
    1: "۱",
    2: "۲",
    3: "۳",
    4: "۴",
    5: "۵",
    6: "۶",
    7: "۷",
    8: "۸",
    9: "۹",
    0: "۰",
};
var defaultFormats = {
    dayOfMonth: "jD",
    fullDate: "jYYYY, jMMMM Do",
    fullDateWithWeekday: "dddd Do jMMMM jYYYY",
    fullDateTime: "jYYYY, jMMMM Do, hh:mm A",
    fullDateTime12h: "jD jMMMM hh:mm A",
    fullDateTime24h: "jD jMMMM HH:mm",
    fullTime: "LT",
    fullTime12h: "hh:mm A",
    fullTime24h: "HH:mm",
    hours12h: "hh",
    hours24h: "HH",
    keyboardDate: "jYYYY/jMM/jDD",
    keyboardDateTime: "jYYYY/jMM/jDD LT",
    keyboardDateTime12h: "jYYYY/jMM/jDD hh:mm A",
    keyboardDateTime24h: "jYYYY/jMM/jDD HH:mm",
    minutes: "mm",
    month: "jMMMM",
    monthAndDate: "jD jMMMM",
    monthAndYear: "jMMMM jYYYY",
    monthShort: "jMMM",
    weekday: "dddd",
    weekdayShort: "ddd",
    normalDate: "dddd, jD jMMM",
    normalDateWithWeekday: "DD MMMM",
    seconds: "ss",
    shortDate: "jD jMMM",
    year: "jYYYY",
};
var MomentUtils = /** @class */ (function (_super) {
    tslib.__extends(MomentUtils, _super);
    function MomentUtils(_a) {
        var _b = _a === void 0 ? {} : _a, formats = _b.formats, instance = _b.instance;
        var _this = _super.call(this, { locale: "fa", instance: instance }) || this;
        _this.lib = "moment-jalaali";
        _this.toJMoment = function (date) {
            return _this.moment(date ? date.clone() : undefined).locale("fa");
        };
        _this.parse = function (value, format) {
            if (value === "") {
                return null;
            }
            return _this.moment(value, format, true).locale("fa");
        };
        _this.date = function (value) {
            if (value === null) {
                return null;
            }
            return _this.moment(value).locale("fa");
        };
        _this.isBeforeYear = function (date, value) {
            return date.jYear() < value.jYear();
        };
        _this.isAfterYear = function (date, value) {
            return date.jYear() > value.jYear();
        };
        _this.getMonth = function (date) {
            return date.jMonth();
        };
        _this.getDaysInMonth = function (date) {
            return date.daysInMonth();
        };
        _this.startOfYear = function (date) {
            return date.clone().startOf("jYear");
        };
        _this.endOfYear = function (date) {
            return date.clone().endOf("jYear");
        };
        _this.startOfMonth = function (date) {
            return date.clone().startOf("jMonth");
        };
        _this.endOfMonth = function (date) {
            return date.clone().endOf("jMonth");
        };
        _this.getNextMonth = function (date) {
            return date.clone().add(1, "jMonth");
        };
        _this.getPreviousMonth = function (date) {
            return date.clone().subtract(1, "jMonth");
        };
        _this.getYear = function (date) {
            return date.jYear();
        };
        _this.setYear = function (date, year) {
            return date.clone().jYear(year);
        };
        _this.getDate = function (date) {
            return date.jDate();
        };
        _this.setDate = function (date, count) {
            return date.clone().jDate(count);
        };
        _this.getMeridiemText = function (ampm) {
            return ampm === "am"
                ? _this.toJMoment().hours(2).format("A")
                : _this.toJMoment().hours(14).format("A");
        };
        _this.getWeekdays = function () {
            return [0, 1, 2, 3, 4, 5, 6].map(function (dayOfWeek) {
                return _this.toJMoment().weekday(dayOfWeek).format("dd");
            });
        };
        _this.isEqual = function (value, comparing) {
            if (value === null && comparing === null) {
                return true;
            }
            return _this.moment(value).isSame(comparing);
        };
        _this.formatNumber = function (num) {
            return num.replace(/\d/g, function (match) { return symbolMap[match]; }).replace(/,/g, "،");
        };
        _this.getWeekArray = function (date) {
            var start = date.clone().startOf("jMonth").startOf("week");
            var end = date.clone().endOf("jMonth").endOf("week");
            var count = 0;
            var current = start;
            var nestedWeeks = [];
            while (current.isBefore(end)) {
                var weekNumber = Math.floor(count / 7);
                nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
                nestedWeeks[weekNumber].push(current);
                current = current.clone().add(1, "day");
                count += 1;
            }
            return nestedWeeks;
        };
        _this.getYearRange = function (start, end) {
            var startDate = _this.moment(start).startOf("jYear");
            var endDate = _this.moment(end).endOf("jYear");
            var years = [];
            var current = startDate;
            while (current.isBefore(endDate)) {
                years.push(current);
                current = current.clone().add(1, "jYear");
            }
            return years;
        };
        _this.moment = instance || jMoment__default["default"];
        _this.locale = "fa";
        _this.formats = Object.assign({}, defaultFormats, formats);
        return _this;
    }
    return MomentUtils;
}(DefaultMomentUtils__default["default"]));

module.exports = MomentUtils;
