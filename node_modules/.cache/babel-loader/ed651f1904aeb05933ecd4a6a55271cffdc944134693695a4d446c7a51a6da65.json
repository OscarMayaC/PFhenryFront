{"ast":null,"code":"import { Vector3, Color, Vector2, Vector4, Box3, Matrix4, Frustum, Matrix3, DoubleSide } from 'three';\nvar RenderableObject = function () {\n  this.id = 0;\n  this.object = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\nvar RenderableFace = function () {\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.v3 = new RenderableVertex();\n  this.normalModel = new Vector3();\n  this.vertexNormalsModel = [new Vector3(), new Vector3(), new Vector3()];\n  this.vertexNormalsLength = 0;\n  this.color = new Color();\n  this.material = null;\n  this.uvs = [new Vector2(), new Vector2(), new Vector2()];\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\nvar RenderableVertex = function () {\n  this.position = new Vector3();\n  this.positionWorld = new Vector3();\n  this.positionScreen = new Vector4();\n  this.visible = true;\n};\nRenderableVertex.prototype.copy = function (vertex) {\n  this.positionWorld.copy(vertex.positionWorld);\n  this.positionScreen.copy(vertex.positionScreen);\n}; //\n\nvar RenderableLine = function () {\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.vertexColors = [new Color(), new Color()];\n  this.material = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\nvar RenderableSprite = function () {\n  this.id = 0;\n  this.object = null;\n  this.x = 0;\n  this.y = 0;\n  this.z = 0;\n  this.rotation = 0;\n  this.scale = new Vector2();\n  this.material = null;\n  this.renderOrder = 0;\n}; //\n\nvar Projector = function () {\n  var _object,\n    _objectCount,\n    _objectPool = [],\n    _objectPoolLength = 0,\n    _vertex,\n    _vertexCount,\n    _vertexPool = [],\n    _vertexPoolLength = 0,\n    _face,\n    _faceCount,\n    _facePool = [],\n    _facePoolLength = 0,\n    _line,\n    _lineCount,\n    _linePool = [],\n    _linePoolLength = 0,\n    _sprite,\n    _spriteCount,\n    _spritePool = [],\n    _spritePoolLength = 0,\n    _renderData = {\n      objects: [],\n      lights: [],\n      elements: []\n    },\n    _vector3 = new Vector3(),\n    _vector4 = new Vector4(),\n    _clipBox = new Box3(new Vector3(-1, -1, -1), new Vector3(1, 1, 1)),\n    _boundingBox = new Box3(),\n    _points3 = new Array(3),\n    _viewMatrix = new Matrix4(),\n    _viewProjectionMatrix = new Matrix4(),\n    _modelMatrix,\n    _modelViewProjectionMatrix = new Matrix4(),\n    _frustum = new Frustum(); //\n\n  this.projectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .projectVector() is now vector.project().');\n    vector.project(camera);\n  };\n  this.unprojectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\n    vector.unproject(camera);\n  };\n  this.pickingRay = function () {\n    console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\n  }; //\n\n  var RenderList = function () {\n    var normals = [];\n    var colors = [];\n    var uvs = [];\n    var object = null;\n    var normalMatrix = new Matrix3();\n    function setObject(value) {\n      object = value;\n      normalMatrix.getNormalMatrix(object.matrixWorld);\n      normals.length = 0;\n      colors.length = 0;\n      uvs.length = 0;\n    }\n    function projectVertex(vertex) {\n      var position = vertex.position;\n      var positionWorld = vertex.positionWorld;\n      var positionScreen = vertex.positionScreen;\n      positionWorld.copy(position).applyMatrix4(_modelMatrix);\n      positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n      var invW = 1 / positionScreen.w;\n      positionScreen.x *= invW;\n      positionScreen.y *= invW;\n      positionScreen.z *= invW;\n      vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n    }\n    function pushVertex(x, y, z) {\n      _vertex = getNextVertexInPool();\n      _vertex.position.set(x, y, z);\n      projectVertex(_vertex);\n    }\n    function pushNormal(x, y, z) {\n      normals.push(x, y, z);\n    }\n    function pushColor(r, g, b) {\n      colors.push(r, g, b);\n    }\n    function pushUv(x, y) {\n      uvs.push(x, y);\n    }\n    function checkTriangleVisibility(v1, v2, v3) {\n      if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n      _points3[0] = v1.positionScreen;\n      _points3[1] = v2.positionScreen;\n      _points3[2] = v3.positionScreen;\n      return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n    }\n    function checkBackfaceCulling(v1, v2, v3) {\n      return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n    }\n    function pushLine(a, b) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b]; // Clip\n\n      v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n      v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n      if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n        // Perform the perspective divide\n        v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n        v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n        _line = getNextLineInPool();\n        _line.id = object.id;\n        _line.v1.copy(v1);\n        _line.v2.copy(v2);\n        _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n        _line.renderOrder = object.renderOrder;\n        _line.material = object.material;\n        if (object.material.vertexColors) {\n          _line.vertexColors[0].fromArray(colors, a * 3);\n          _line.vertexColors[1].fromArray(colors, b * 3);\n        }\n        _renderData.elements.push(_line);\n      }\n    }\n    function pushTriangle(a, b, c, material) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b];\n      var v3 = _vertexPool[c];\n      if (checkTriangleVisibility(v1, v2, v3) === false) return;\n      if (material.side === DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n        _face = getNextFaceInPool();\n        _face.id = object.id;\n        _face.v1.copy(v1);\n        _face.v2.copy(v2);\n        _face.v3.copy(v3);\n        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n        _face.renderOrder = object.renderOrder; // face normal\n\n        _vector3.subVectors(v3.position, v2.position);\n        _vector4.subVectors(v1.position, v2.position);\n        _vector3.cross(_vector4);\n        _face.normalModel.copy(_vector3);\n        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n        for (let i = 0; i < 3; i++) {\n          var normal = _face.vertexNormalsModel[i];\n          normal.fromArray(normals, arguments[i] * 3);\n          normal.applyMatrix3(normalMatrix).normalize();\n          var uv = _face.uvs[i];\n          uv.fromArray(uvs, arguments[i] * 2);\n        }\n        _face.vertexNormalsLength = 3;\n        _face.material = material;\n        if (material.vertexColors) {\n          _face.color.fromArray(colors, a * 3);\n        }\n        _renderData.elements.push(_face);\n      }\n    }\n    return {\n      setObject: setObject,\n      projectVertex: projectVertex,\n      checkTriangleVisibility: checkTriangleVisibility,\n      checkBackfaceCulling: checkBackfaceCulling,\n      pushVertex: pushVertex,\n      pushNormal: pushNormal,\n      pushColor: pushColor,\n      pushUv: pushUv,\n      pushLine: pushLine,\n      pushTriangle: pushTriangle\n    };\n  };\n  var renderList = new RenderList();\n  function projectObject(object) {\n    if (object.visible === false) return;\n    if (object.isLight) {\n      _renderData.lights.push(object);\n    } else if (object.isMesh || object.isLine || object.isPoints) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n      addObject(object);\n    } else if (object.isSprite) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n      addObject(object);\n    }\n    var children = object.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      projectObject(children[i]);\n    }\n  }\n  function addObject(object) {\n    _object = getNextObjectInPool();\n    _object.id = object.id;\n    _object.object = object;\n    _vector3.setFromMatrixPosition(object.matrixWorld);\n    _vector3.applyMatrix4(_viewProjectionMatrix);\n    _object.z = _vector3.z;\n    _object.renderOrder = object.renderOrder;\n    _renderData.objects.push(_object);\n  }\n  this.projectScene = function (scene, camera, sortObjects, sortElements) {\n    _faceCount = 0;\n    _lineCount = 0;\n    _spriteCount = 0;\n    _renderData.elements.length = 0;\n    if (scene.autoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n    _viewMatrix.copy(camera.matrixWorldInverse);\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n    _frustum.setFromProjectionMatrix(_viewProjectionMatrix); //\n\n    _objectCount = 0;\n    _renderData.objects.length = 0;\n    _renderData.lights.length = 0;\n    projectObject(scene);\n    if (sortObjects === true) {\n      _renderData.objects.sort(painterSort);\n    } //\n\n    var objects = _renderData.objects;\n    for (let o = 0, ol = objects.length; o < ol; o++) {\n      var object = objects[o].object;\n      var geometry = object.geometry;\n      renderList.setObject(object);\n      _modelMatrix = object.matrixWorld;\n      _vertexCount = 0;\n      if (object.isMesh) {\n        if (geometry.isBufferGeometry) {\n          var material = object.material;\n          var isMultiMaterial = Array.isArray(material);\n          var attributes = geometry.attributes;\n          var groups = geometry.groups;\n          if (attributes.position === undefined) continue;\n          var positions = attributes.position.array;\n          for (let i = 0, l = positions.length; i < l; i += 3) {\n            var x = positions[i];\n            var y = positions[i + 1];\n            var z = positions[i + 2];\n            if (material.morphTargets === true) {\n              var morphTargets = geometry.morphAttributes.position;\n              var morphTargetsRelative = geometry.morphTargetsRelative;\n              var morphInfluences = object.morphTargetInfluences;\n              for (let t = 0, tl = morphTargets.length; t < tl; t++) {\n                var influence = morphInfluences[t];\n                if (influence === 0) continue;\n                var target = morphTargets[t];\n                if (morphTargetsRelative) {\n                  x += target.getX(i / 3) * influence;\n                  y += target.getY(i / 3) * influence;\n                  z += target.getZ(i / 3) * influence;\n                } else {\n                  x += (target.getX(i / 3) - positions[i]) * influence;\n                  y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                  z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n                }\n              }\n            }\n            renderList.pushVertex(x, y, z);\n          }\n          if (attributes.normal !== undefined) {\n            var normals = attributes.normal.array;\n            for (let i = 0, l = normals.length; i < l; i += 3) {\n              renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n            }\n          }\n          if (attributes.color !== undefined) {\n            var colors = attributes.color.array;\n            for (let i = 0, l = colors.length; i < l; i += 3) {\n              renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n            }\n          }\n          if (attributes.uv !== undefined) {\n            var uvs = attributes.uv.array;\n            for (let i = 0, l = uvs.length; i < l; i += 2) {\n              renderList.pushUv(uvs[i], uvs[i + 1]);\n            }\n          }\n          if (geometry.index !== null) {\n            var indices = geometry.index.array;\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                var group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n                }\n              }\n            } else {\n              for (let i = 0, l = indices.length; i < l; i += 3) {\n                renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n              }\n            }\n          } else {\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                var group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(i, i + 1, i + 2, material);\n                }\n              }\n            } else {\n              for (let i = 0, l = positions.length / 3; i < l; i += 3) {\n                renderList.pushTriangle(i, i + 1, i + 2, material);\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        }\n      } else if (object.isLine) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n        if (geometry.isBufferGeometry) {\n          var attributes = geometry.attributes;\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n            }\n            if (attributes.color !== undefined) {\n              var colors = attributes.color.array;\n              for (let i = 0, l = colors.length; i < l; i += 3) {\n                renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n              }\n            }\n            if (geometry.index !== null) {\n              var indices = geometry.index.array;\n              for (let i = 0, l = indices.length; i < l; i += 2) {\n                renderList.pushLine(indices[i], indices[i + 1]);\n              }\n            } else {\n              var step = object.isLineSegments ? 2 : 1;\n              for (let i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                renderList.pushLine(i, i + 1);\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        }\n      } else if (object.isPoints) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n        if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        } else if (geometry.isBufferGeometry) {\n          var attributes = geometry.attributes;\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              _vector4.set(positions[i], positions[i + 1], positions[i + 2], 1);\n              _vector4.applyMatrix4(_modelViewProjectionMatrix);\n              pushPoint(_vector4, object, camera);\n            }\n          }\n        }\n      } else if (object.isSprite) {\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n        _vector4.applyMatrix4(_viewProjectionMatrix);\n        pushPoint(_vector4, object, camera);\n      }\n    }\n    if (sortElements === true) {\n      _renderData.elements.sort(painterSort);\n    }\n    return _renderData;\n  };\n  function pushPoint(_vector4, object, camera) {\n    var invW = 1 / _vector4.w;\n    _vector4.z *= invW;\n    if (_vector4.z >= -1 && _vector4.z <= 1) {\n      _sprite = getNextSpriteInPool();\n      _sprite.id = object.id;\n      _sprite.x = _vector4.x * invW;\n      _sprite.y = _vector4.y * invW;\n      _sprite.z = _vector4.z;\n      _sprite.renderOrder = object.renderOrder;\n      _sprite.object = object;\n      _sprite.rotation = object.rotation;\n      _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n      _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n      _sprite.material = object.material;\n      _renderData.elements.push(_sprite);\n    }\n  } // Pools\n\n  function getNextObjectInPool() {\n    if (_objectCount === _objectPoolLength) {\n      var object = new RenderableObject();\n      _objectPool.push(object);\n      _objectPoolLength++;\n      _objectCount++;\n      return object;\n    }\n    return _objectPool[_objectCount++];\n  }\n  function getNextVertexInPool() {\n    if (_vertexCount === _vertexPoolLength) {\n      var vertex = new RenderableVertex();\n      _vertexPool.push(vertex);\n      _vertexPoolLength++;\n      _vertexCount++;\n      return vertex;\n    }\n    return _vertexPool[_vertexCount++];\n  }\n  function getNextFaceInPool() {\n    if (_faceCount === _facePoolLength) {\n      var face = new RenderableFace();\n      _facePool.push(face);\n      _facePoolLength++;\n      _faceCount++;\n      return face;\n    }\n    return _facePool[_faceCount++];\n  }\n  function getNextLineInPool() {\n    if (_lineCount === _linePoolLength) {\n      var line = new RenderableLine();\n      _linePool.push(line);\n      _linePoolLength++;\n      _lineCount++;\n      return line;\n    }\n    return _linePool[_lineCount++];\n  }\n  function getNextSpriteInPool() {\n    if (_spriteCount === _spritePoolLength) {\n      var sprite = new RenderableSprite();\n      _spritePool.push(sprite);\n      _spritePoolLength++;\n      _spriteCount++;\n      return sprite;\n    }\n    return _spritePool[_spriteCount++];\n  } //\n\n  function painterSort(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.z !== b.z) {\n      return b.z - a.z;\n    } else if (a.id !== b.id) {\n      return a.id - b.id;\n    } else {\n      return 0;\n    }\n  }\n  function clipLine(s1, s2) {\n    var alpha1 = 0,\n      alpha2 = 1,\n      // Calculate the boundary coordinate of each vertex for the near and far clip planes,\n      // Z = -1 and Z = +1, respectively.\n      bc1near = s1.z + s1.w,\n      bc2near = s2.z + s2.w,\n      bc1far = -s1.z + s1.w,\n      bc2far = -s2.z + s2.w;\n    if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n      // Both vertices lie entirely within all clip planes.\n      return true;\n    } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n      // Both vertices lie entirely outside one of the clip planes.\n      return false;\n    } else {\n      // The line segment spans at least one clip plane.\n      if (bc1near < 0) {\n        // v1 lies outside the near plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n      } else if (bc2near < 0) {\n        // v2 lies outside the near plane, v1 inside\n        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n      }\n      if (bc1far < 0) {\n        // v1 lies outside the far plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n      } else if (bc2far < 0) {\n        // v2 lies outside the far plane, v2 inside\n        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n      }\n      if (alpha2 < alpha1) {\n        // The line segment spans two boundaries, but is outside both of them.\n        // (This can't happen when we're only clipping against just near/far but good\n        //  to leave the check here for future usage if other clip planes are added.)\n        return false;\n      } else {\n        // Update the s1 and s2 vertices to match the clipped line segment.\n        s1.lerp(s2, alpha1);\n        s2.lerp(s1, 1 - alpha2);\n        return true;\n      }\n    }\n  }\n};\nexport { Projector, RenderableFace, RenderableLine, RenderableObject, RenderableSprite, RenderableVertex };","map":{"version":3,"names":["Vector3","Color","Vector2","Vector4","Box3","Matrix4","Frustum","Matrix3","DoubleSide","RenderableObject","id","object","z","renderOrder","RenderableFace","v1","RenderableVertex","v2","v3","normalModel","vertexNormalsModel","vertexNormalsLength","color","material","uvs","position","positionWorld","positionScreen","visible","prototype","copy","vertex","RenderableLine","vertexColors","RenderableSprite","x","y","rotation","scale","Projector","_object","_objectCount","_objectPool","_objectPoolLength","_vertex","_vertexCount","_vertexPool","_vertexPoolLength","_face","_faceCount","_facePool","_facePoolLength","_line","_lineCount","_linePool","_linePoolLength","_sprite","_spriteCount","_spritePool","_spritePoolLength","_renderData","objects","lights","elements","_vector3","_vector4","_clipBox","_boundingBox","_points3","Array","_viewMatrix","_viewProjectionMatrix","_modelMatrix","_modelViewProjectionMatrix","_frustum","projectVector","vector","camera","console","warn","project","unprojectVector","unproject","pickingRay","error","RenderList","normals","colors","normalMatrix","setObject","value","getNormalMatrix","matrixWorld","length","projectVertex","applyMatrix4","invW","w","pushVertex","getNextVertexInPool","set","pushNormal","push","pushColor","r","g","b","pushUv","checkTriangleVisibility","intersectsBox","setFromPoints","checkBackfaceCulling","pushLine","a","clipLine","multiplyScalar","getNextLineInPool","Math","max","fromArray","pushTriangle","c","side","getNextFaceInPool","subVectors","cross","applyMatrix3","normalize","i","normal","arguments","uv","renderList","projectObject","isLight","isMesh","isLine","isPoints","frustumCulled","intersectsObject","addObject","isSprite","intersectsSprite","children","l","getNextObjectInPool","setFromMatrixPosition","projectScene","scene","sortObjects","sortElements","autoUpdate","updateMatrixWorld","parent","matrixWorldInverse","multiplyMatrices","projectionMatrix","setFromProjectionMatrix","sort","painterSort","o","ol","geometry","isBufferGeometry","isMultiMaterial","isArray","attributes","groups","undefined","positions","array","morphTargets","morphAttributes","morphTargetsRelative","morphInfluences","morphTargetInfluences","t","tl","influence","target","getX","getY","getZ","index","indices","group","materialIndex","start","count","isGeometry","step","isLineSegments","pushPoint","modelViewMatrix","getNextSpriteInPool","abs","face","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","min","lerp"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/renderers/Projector.js"],"sourcesContent":["import { Vector3, Color, Vector2, Vector4, Box3, Matrix4, Frustum, Matrix3, DoubleSide } from 'three';\n\nvar RenderableObject = function () {\n  this.id = 0;\n  this.object = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableFace = function () {\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.v3 = new RenderableVertex();\n  this.normalModel = new Vector3();\n  this.vertexNormalsModel = [new Vector3(), new Vector3(), new Vector3()];\n  this.vertexNormalsLength = 0;\n  this.color = new Color();\n  this.material = null;\n  this.uvs = [new Vector2(), new Vector2(), new Vector2()];\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableVertex = function () {\n  this.position = new Vector3();\n  this.positionWorld = new Vector3();\n  this.positionScreen = new Vector4();\n  this.visible = true;\n};\n\nRenderableVertex.prototype.copy = function (vertex) {\n  this.positionWorld.copy(vertex.positionWorld);\n  this.positionScreen.copy(vertex.positionScreen);\n}; //\n\n\nvar RenderableLine = function () {\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.vertexColors = [new Color(), new Color()];\n  this.material = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableSprite = function () {\n  this.id = 0;\n  this.object = null;\n  this.x = 0;\n  this.y = 0;\n  this.z = 0;\n  this.rotation = 0;\n  this.scale = new Vector2();\n  this.material = null;\n  this.renderOrder = 0;\n}; //\n\n\nvar Projector = function () {\n  var _object,\n      _objectCount,\n      _objectPool = [],\n      _objectPoolLength = 0,\n      _vertex,\n      _vertexCount,\n      _vertexPool = [],\n      _vertexPoolLength = 0,\n      _face,\n      _faceCount,\n      _facePool = [],\n      _facePoolLength = 0,\n      _line,\n      _lineCount,\n      _linePool = [],\n      _linePoolLength = 0,\n      _sprite,\n      _spriteCount,\n      _spritePool = [],\n      _spritePoolLength = 0,\n      _renderData = {\n    objects: [],\n    lights: [],\n    elements: []\n  },\n      _vector3 = new Vector3(),\n      _vector4 = new Vector4(),\n      _clipBox = new Box3(new Vector3(-1, -1, -1), new Vector3(1, 1, 1)),\n      _boundingBox = new Box3(),\n      _points3 = new Array(3),\n      _viewMatrix = new Matrix4(),\n      _viewProjectionMatrix = new Matrix4(),\n      _modelMatrix,\n      _modelViewProjectionMatrix = new Matrix4(),\n      _frustum = new Frustum(); //\n\n\n  this.projectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .projectVector() is now vector.project().');\n    vector.project(camera);\n  };\n\n  this.unprojectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\n    vector.unproject(camera);\n  };\n\n  this.pickingRay = function () {\n    console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\n  }; //\n\n\n  var RenderList = function () {\n    var normals = [];\n    var colors = [];\n    var uvs = [];\n    var object = null;\n    var normalMatrix = new Matrix3();\n\n    function setObject(value) {\n      object = value;\n      normalMatrix.getNormalMatrix(object.matrixWorld);\n      normals.length = 0;\n      colors.length = 0;\n      uvs.length = 0;\n    }\n\n    function projectVertex(vertex) {\n      var position = vertex.position;\n      var positionWorld = vertex.positionWorld;\n      var positionScreen = vertex.positionScreen;\n      positionWorld.copy(position).applyMatrix4(_modelMatrix);\n      positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n      var invW = 1 / positionScreen.w;\n      positionScreen.x *= invW;\n      positionScreen.y *= invW;\n      positionScreen.z *= invW;\n      vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n    }\n\n    function pushVertex(x, y, z) {\n      _vertex = getNextVertexInPool();\n\n      _vertex.position.set(x, y, z);\n\n      projectVertex(_vertex);\n    }\n\n    function pushNormal(x, y, z) {\n      normals.push(x, y, z);\n    }\n\n    function pushColor(r, g, b) {\n      colors.push(r, g, b);\n    }\n\n    function pushUv(x, y) {\n      uvs.push(x, y);\n    }\n\n    function checkTriangleVisibility(v1, v2, v3) {\n      if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n      _points3[0] = v1.positionScreen;\n      _points3[1] = v2.positionScreen;\n      _points3[2] = v3.positionScreen;\n      return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n    }\n\n    function checkBackfaceCulling(v1, v2, v3) {\n      return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n    }\n\n    function pushLine(a, b) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b]; // Clip\n\n      v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n      v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n\n      if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n        // Perform the perspective divide\n        v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n        v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n        _line = getNextLineInPool();\n        _line.id = object.id;\n\n        _line.v1.copy(v1);\n\n        _line.v2.copy(v2);\n\n        _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n        _line.renderOrder = object.renderOrder;\n        _line.material = object.material;\n\n        if (object.material.vertexColors) {\n          _line.vertexColors[0].fromArray(colors, a * 3);\n\n          _line.vertexColors[1].fromArray(colors, b * 3);\n        }\n\n        _renderData.elements.push(_line);\n      }\n    }\n\n    function pushTriangle(a, b, c, material) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b];\n      var v3 = _vertexPool[c];\n      if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\n      if (material.side === DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n        _face = getNextFaceInPool();\n        _face.id = object.id;\n\n        _face.v1.copy(v1);\n\n        _face.v2.copy(v2);\n\n        _face.v3.copy(v3);\n\n        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n        _face.renderOrder = object.renderOrder; // face normal\n\n        _vector3.subVectors(v3.position, v2.position);\n\n        _vector4.subVectors(v1.position, v2.position);\n\n        _vector3.cross(_vector4);\n\n        _face.normalModel.copy(_vector3);\n\n        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\n        for (let i = 0; i < 3; i++) {\n          var normal = _face.vertexNormalsModel[i];\n          normal.fromArray(normals, arguments[i] * 3);\n          normal.applyMatrix3(normalMatrix).normalize();\n          var uv = _face.uvs[i];\n          uv.fromArray(uvs, arguments[i] * 2);\n        }\n\n        _face.vertexNormalsLength = 3;\n        _face.material = material;\n\n        if (material.vertexColors) {\n          _face.color.fromArray(colors, a * 3);\n        }\n\n        _renderData.elements.push(_face);\n      }\n    }\n\n    return {\n      setObject: setObject,\n      projectVertex: projectVertex,\n      checkTriangleVisibility: checkTriangleVisibility,\n      checkBackfaceCulling: checkBackfaceCulling,\n      pushVertex: pushVertex,\n      pushNormal: pushNormal,\n      pushColor: pushColor,\n      pushUv: pushUv,\n      pushLine: pushLine,\n      pushTriangle: pushTriangle\n    };\n  };\n\n  var renderList = new RenderList();\n\n  function projectObject(object) {\n    if (object.visible === false) return;\n\n    if (object.isLight) {\n      _renderData.lights.push(object);\n    } else if (object.isMesh || object.isLine || object.isPoints) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n      addObject(object);\n    } else if (object.isSprite) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n      addObject(object);\n    }\n\n    var children = object.children;\n\n    for (let i = 0, l = children.length; i < l; i++) {\n      projectObject(children[i]);\n    }\n  }\n\n  function addObject(object) {\n    _object = getNextObjectInPool();\n    _object.id = object.id;\n    _object.object = object;\n\n    _vector3.setFromMatrixPosition(object.matrixWorld);\n\n    _vector3.applyMatrix4(_viewProjectionMatrix);\n\n    _object.z = _vector3.z;\n    _object.renderOrder = object.renderOrder;\n\n    _renderData.objects.push(_object);\n  }\n\n  this.projectScene = function (scene, camera, sortObjects, sortElements) {\n    _faceCount = 0;\n    _lineCount = 0;\n    _spriteCount = 0;\n    _renderData.elements.length = 0;\n    if (scene.autoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n\n    _viewMatrix.copy(camera.matrixWorldInverse);\n\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n    _frustum.setFromProjectionMatrix(_viewProjectionMatrix); //\n\n\n    _objectCount = 0;\n    _renderData.objects.length = 0;\n    _renderData.lights.length = 0;\n    projectObject(scene);\n\n    if (sortObjects === true) {\n      _renderData.objects.sort(painterSort);\n    } //\n\n\n    var objects = _renderData.objects;\n\n    for (let o = 0, ol = objects.length; o < ol; o++) {\n      var object = objects[o].object;\n      var geometry = object.geometry;\n      renderList.setObject(object);\n      _modelMatrix = object.matrixWorld;\n      _vertexCount = 0;\n\n      if (object.isMesh) {\n        if (geometry.isBufferGeometry) {\n          var material = object.material;\n          var isMultiMaterial = Array.isArray(material);\n          var attributes = geometry.attributes;\n          var groups = geometry.groups;\n          if (attributes.position === undefined) continue;\n          var positions = attributes.position.array;\n\n          for (let i = 0, l = positions.length; i < l; i += 3) {\n            var x = positions[i];\n            var y = positions[i + 1];\n            var z = positions[i + 2];\n\n            if (material.morphTargets === true) {\n              var morphTargets = geometry.morphAttributes.position;\n              var morphTargetsRelative = geometry.morphTargetsRelative;\n              var morphInfluences = object.morphTargetInfluences;\n\n              for (let t = 0, tl = morphTargets.length; t < tl; t++) {\n                var influence = morphInfluences[t];\n                if (influence === 0) continue;\n                var target = morphTargets[t];\n\n                if (morphTargetsRelative) {\n                  x += target.getX(i / 3) * influence;\n                  y += target.getY(i / 3) * influence;\n                  z += target.getZ(i / 3) * influence;\n                } else {\n                  x += (target.getX(i / 3) - positions[i]) * influence;\n                  y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                  z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n                }\n              }\n            }\n\n            renderList.pushVertex(x, y, z);\n          }\n\n          if (attributes.normal !== undefined) {\n            var normals = attributes.normal.array;\n\n            for (let i = 0, l = normals.length; i < l; i += 3) {\n              renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n            }\n          }\n\n          if (attributes.color !== undefined) {\n            var colors = attributes.color.array;\n\n            for (let i = 0, l = colors.length; i < l; i += 3) {\n              renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n            }\n          }\n\n          if (attributes.uv !== undefined) {\n            var uvs = attributes.uv.array;\n\n            for (let i = 0, l = uvs.length; i < l; i += 2) {\n              renderList.pushUv(uvs[i], uvs[i + 1]);\n            }\n          }\n\n          if (geometry.index !== null) {\n            var indices = geometry.index.array;\n\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                var group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n                }\n              }\n            } else {\n              for (let i = 0, l = indices.length; i < l; i += 3) {\n                renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n              }\n            }\n          } else {\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                var group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(i, i + 1, i + 2, material);\n                }\n              }\n            } else {\n              for (let i = 0, l = positions.length / 3; i < l; i += 3) {\n                renderList.pushTriangle(i, i + 1, i + 2, material);\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        }\n      } else if (object.isLine) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        if (geometry.isBufferGeometry) {\n          var attributes = geometry.attributes;\n\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n            }\n\n            if (attributes.color !== undefined) {\n              var colors = attributes.color.array;\n\n              for (let i = 0, l = colors.length; i < l; i += 3) {\n                renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n              }\n            }\n\n            if (geometry.index !== null) {\n              var indices = geometry.index.array;\n\n              for (let i = 0, l = indices.length; i < l; i += 2) {\n                renderList.pushLine(indices[i], indices[i + 1]);\n              }\n            } else {\n              var step = object.isLineSegments ? 2 : 1;\n\n              for (let i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                renderList.pushLine(i, i + 1);\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        }\n      } else if (object.isPoints) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        } else if (geometry.isBufferGeometry) {\n          var attributes = geometry.attributes;\n\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              _vector4.set(positions[i], positions[i + 1], positions[i + 2], 1);\n\n              _vector4.applyMatrix4(_modelViewProjectionMatrix);\n\n              pushPoint(_vector4, object, camera);\n            }\n          }\n        }\n      } else if (object.isSprite) {\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\n        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\n        _vector4.applyMatrix4(_viewProjectionMatrix);\n\n        pushPoint(_vector4, object, camera);\n      }\n    }\n\n    if (sortElements === true) {\n      _renderData.elements.sort(painterSort);\n    }\n\n    return _renderData;\n  };\n\n  function pushPoint(_vector4, object, camera) {\n    var invW = 1 / _vector4.w;\n    _vector4.z *= invW;\n\n    if (_vector4.z >= -1 && _vector4.z <= 1) {\n      _sprite = getNextSpriteInPool();\n      _sprite.id = object.id;\n      _sprite.x = _vector4.x * invW;\n      _sprite.y = _vector4.y * invW;\n      _sprite.z = _vector4.z;\n      _sprite.renderOrder = object.renderOrder;\n      _sprite.object = object;\n      _sprite.rotation = object.rotation;\n      _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n      _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n      _sprite.material = object.material;\n\n      _renderData.elements.push(_sprite);\n    }\n  } // Pools\n\n\n  function getNextObjectInPool() {\n    if (_objectCount === _objectPoolLength) {\n      var object = new RenderableObject();\n\n      _objectPool.push(object);\n\n      _objectPoolLength++;\n      _objectCount++;\n      return object;\n    }\n\n    return _objectPool[_objectCount++];\n  }\n\n  function getNextVertexInPool() {\n    if (_vertexCount === _vertexPoolLength) {\n      var vertex = new RenderableVertex();\n\n      _vertexPool.push(vertex);\n\n      _vertexPoolLength++;\n      _vertexCount++;\n      return vertex;\n    }\n\n    return _vertexPool[_vertexCount++];\n  }\n\n  function getNextFaceInPool() {\n    if (_faceCount === _facePoolLength) {\n      var face = new RenderableFace();\n\n      _facePool.push(face);\n\n      _facePoolLength++;\n      _faceCount++;\n      return face;\n    }\n\n    return _facePool[_faceCount++];\n  }\n\n  function getNextLineInPool() {\n    if (_lineCount === _linePoolLength) {\n      var line = new RenderableLine();\n\n      _linePool.push(line);\n\n      _linePoolLength++;\n      _lineCount++;\n      return line;\n    }\n\n    return _linePool[_lineCount++];\n  }\n\n  function getNextSpriteInPool() {\n    if (_spriteCount === _spritePoolLength) {\n      var sprite = new RenderableSprite();\n\n      _spritePool.push(sprite);\n\n      _spritePoolLength++;\n      _spriteCount++;\n      return sprite;\n    }\n\n    return _spritePool[_spriteCount++];\n  } //\n\n\n  function painterSort(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.z !== b.z) {\n      return b.z - a.z;\n    } else if (a.id !== b.id) {\n      return a.id - b.id;\n    } else {\n      return 0;\n    }\n  }\n\n  function clipLine(s1, s2) {\n    var alpha1 = 0,\n        alpha2 = 1,\n        // Calculate the boundary coordinate of each vertex for the near and far clip planes,\n    // Z = -1 and Z = +1, respectively.\n    bc1near = s1.z + s1.w,\n        bc2near = s2.z + s2.w,\n        bc1far = -s1.z + s1.w,\n        bc2far = -s2.z + s2.w;\n\n    if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n      // Both vertices lie entirely within all clip planes.\n      return true;\n    } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n      // Both vertices lie entirely outside one of the clip planes.\n      return false;\n    } else {\n      // The line segment spans at least one clip plane.\n      if (bc1near < 0) {\n        // v1 lies outside the near plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n      } else if (bc2near < 0) {\n        // v2 lies outside the near plane, v1 inside\n        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n      }\n\n      if (bc1far < 0) {\n        // v1 lies outside the far plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n      } else if (bc2far < 0) {\n        // v2 lies outside the far plane, v2 inside\n        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n      }\n\n      if (alpha2 < alpha1) {\n        // The line segment spans two boundaries, but is outside both of them.\n        // (This can't happen when we're only clipping against just near/far but good\n        //  to leave the check here for future usage if other clip planes are added.)\n        return false;\n      } else {\n        // Update the s1 and s2 vertices to match the clipped line segment.\n        s1.lerp(s2, alpha1);\n        s2.lerp(s1, 1 - alpha2);\n        return true;\n      }\n    }\n  }\n};\n\nexport { Projector, RenderableFace, RenderableLine, RenderableObject, RenderableSprite, RenderableVertex };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}