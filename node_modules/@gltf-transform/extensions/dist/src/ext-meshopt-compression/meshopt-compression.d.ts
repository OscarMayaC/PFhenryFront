import { Extension, PropertyType, ReaderContext, WriterContext } from '@gltf-transform/core';
/**
 * # MeshoptCompression
 *
 * [`EXT_meshopt_compression`](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Vendor/EXT_meshopt_compression/)
 * provides compression and fast decoding for geometry, morph targets, and animations.
 *
 * [[include:VENDOR_EXTENSIONS_NOTE.md]]
 *
 * Meshopt compression (based on the [meshoptimizer](https://github.com/zeux/meshoptimizer)
 * library) offers a lightweight decoder with very fast runtime decompression, and is
 * appropriate for models of any size. Meshopt can reduce the transmission sizes of geometry,
 * morph targets, animation, and other numeric data stored in buffer views. When textures are
 * large, other complementary compression methods should be used as well.
 *
 * For the full benefits of meshopt compression, **apply gzip, brotli, or another lossless
 * compression method** to the resulting .glb, .gltf, or .bin files. Meshopt specifically
 * pre-optimizes assets for this purpose — without this secondary compression, the size
 * reduction is considerably less.
 *
 * Be aware that decompression happens before uploading to the GPU. While Meshopt decoding is
 * considerably faster than Draco decoding, neither compression method will improve runtime
 * performance directly. To improve framerate, you'll need to simplify the geometry by reducing
 * vertex count or draw calls — not just compress it. Finally, be aware that Meshopt compression is
 * lossy: repeatedly compressing and decompressing a model in a pipeline will lose precision, so
 * compression should generally be the last stage of an art workflow, and uncompressed original
 * files should be kept.
 *
 * The meshopt decoder is included by default when this extension is installed in a {@link WebIO}
 * or {@link NodeIO} instance. Encoding/compression is not yet supported, but can be applied
 * with the [gltfpack](https://github.com/zeux/meshoptimizer/tree/master/gltf) tool.
 *
 * ### Example
 *
 * ```typescript
 * import { NodeIO } from '@gltf-transform/core';
 * import { MeshoptCompression } from '@gltf-transform/extensions';
 *
 * const io = new NodeIO()
 *	.registerExtensions([MeshoptCompression]);
 *
 * // Read and decode.
 * const doc = io.read('compressed.glb');
 * ```
 */
export declare class MeshoptCompression extends Extension {
    readonly extensionName = "EXT_meshopt_compression";
    readonly prereadTypes: PropertyType[];
    readonly readDependencies: string[];
    static readonly EXTENSION_NAME = "EXT_meshopt_compression";
    private _decoder;
    private _fallbackBufferMap;
    install(key: string, dependency: unknown): this;
    preread(context: ReaderContext, propertyType: PropertyType): this;
    read(_context: ReaderContext): this;
    write(_context: WriterContext): this;
}
