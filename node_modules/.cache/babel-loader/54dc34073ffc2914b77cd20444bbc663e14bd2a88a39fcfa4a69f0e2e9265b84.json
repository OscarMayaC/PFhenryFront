{"ast":null,"code":"import * as React from \"react\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nfunction traverseFiber(fiber, ascending, selector) {\n  if (!fiber) return;\n  if (selector(fiber) === true) return fiber;\n  let child = ascending ? fiber.return : fiber.child;\n  while (child) {\n    const match = traverseFiber(child, ascending, selector);\n    if (match) return match;\n    child = ascending ? null : child.sibling;\n  }\n}\nfunction wrapContext(context) {\n  try {\n    return Object.defineProperties(context, {\n      _currentRenderer: {\n        get() {\n          return null;\n        },\n        set() {}\n      },\n      _currentRenderer2: {\n        get() {\n          return null;\n        },\n        set() {}\n      }\n    });\n  } catch (_) {\n    return context;\n  }\n}\nconst FiberContext = wrapContext(React.createContext(null));\nclass FiberProvider extends React.Component {\n  render() {\n    return /* @__PURE__ */React.createElement(FiberContext.Provider, {\n      value: this._reactInternals\n    }, this.props.children);\n  }\n}\nconst {\n  ReactCurrentOwner,\n  ReactCurrentDispatcher\n} = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\nfunction useFiber() {\n  const root = React.useContext(FiberContext);\n  if (root === null) throw new Error(\"its-fine: useFiber must be called within a <FiberProvider />!\");\n  const id = React.useId();\n  const fiber = React.useMemo(() => {\n    var _a;\n    return (_a = ReactCurrentOwner == null ? void 0 : ReactCurrentOwner.current) != null ? _a : traverseFiber(root, false, node => {\n      let state = node.memoizedState;\n      while (state) {\n        if (state.memoizedState === id) return true;\n        state = state.next;\n      }\n    });\n  }, [root, id]);\n  return fiber;\n}\nfunction useContainer() {\n  const fiber = useFiber();\n  const root = React.useMemo(() => traverseFiber(fiber, true, node => {\n    var _a;\n    return ((_a = node.stateNode) == null ? void 0 : _a.containerInfo) != null;\n  }), [fiber]);\n  return root == null ? void 0 : root.stateNode.containerInfo;\n}\nfunction useNearestChild(type) {\n  const fiber = useFiber();\n  const childRef = React.useRef();\n  React.useLayoutEffect(() => {\n    var _a;\n    childRef.current = (_a = traverseFiber(fiber, false, node => typeof node.type === \"string\" && (type === void 0 || node.type === type))) == null ? void 0 : _a.stateNode;\n  }, [fiber]);\n  return childRef;\n}\nfunction useNearestParent(type) {\n  const fiber = useFiber();\n  const parentRef = React.useRef();\n  React.useLayoutEffect(() => {\n    var _a;\n    parentRef.current = (_a = traverseFiber(fiber, true, node => typeof node.type === \"string\" && (type === void 0 || node.type === type))) == null ? void 0 : _a.stateNode;\n  }, [fiber]);\n  return parentRef;\n}\nfunction useContextMap() {\n  var _a, _b;\n  const fiber = useFiber();\n  const [contextMap] = React.useState(() => /* @__PURE__ */new Map());\n  contextMap.clear();\n  let node = fiber;\n  while (node) {\n    const context = (_a = node.type) == null ? void 0 : _a._context;\n    if (context && context !== FiberContext && !contextMap.has(context)) {\n      contextMap.set(context, (_b = ReactCurrentDispatcher == null ? void 0 : ReactCurrentDispatcher.current) == null ? void 0 : _b.readContext(wrapContext(context)));\n    }\n    node = node.return;\n  }\n  return contextMap;\n}\nfunction useContextBridge() {\n  const contextMap = useContextMap();\n  return React.useMemo(() => Array.from(contextMap.keys()).reduce((Prev, context) => props => /* @__PURE__ */React.createElement(Prev, null, /* @__PURE__ */React.createElement(context.Provider, __spreadProps(__spreadValues({}, props), {\n    value: contextMap.get(context)\n  }))), props => /* @__PURE__ */React.createElement(FiberProvider, __spreadValues({}, props))), [contextMap]);\n}\nexport { FiberProvider, traverseFiber, useContainer, useContextBridge, useContextMap, useFiber, useNearestChild, useNearestParent };","map":{"version":3,"names":["traverseFiber","fiber","ascending","selector","child","return","match","sibling","wrapContext","context","Object","defineProperties","_currentRenderer","get","set","_currentRenderer2","_","FiberContext","React","createContext","FiberProvider","Component","render","createElement","Provider","value","_reactInternals","props","children","ReactCurrentOwner","ReactCurrentDispatcher","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","useFiber","root","useContext","Error","id","useId","useMemo","_a","current","node","state","memoizedState","next","useContainer","stateNode","containerInfo","useNearestChild","type","childRef","useRef","useLayoutEffect","useNearestParent","parentRef","useContextMap","_b","contextMap","useState","Map","clear","_context","has","readContext","useContextBridge","Array","from","keys","reduce","Prev","__spreadProps","__spreadValues"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/its-fine/src/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport type ReactReconciler from 'react-reconciler'\n\n/**\n * Represents a react-internal Fiber node.\n */\nexport type Fiber<T = any> = Omit<ReactReconciler.Fiber, 'stateNode'> & { stateNode: T }\n\n/**\n * Represents a {@link Fiber} node selector for traversal.\n */\nexport type FiberSelector<T = any> = (\n  /** The current {@link Fiber} node. */\n  node: Fiber<T | null>,\n) => boolean | void\n\n/**\n * Traverses up or down a {@link Fiber}, return `true` to stop and select a node.\n */\nexport function traverseFiber<T = any>(\n  /** Input {@link Fiber} to traverse. */\n  fiber: Fiber | undefined,\n  /** Whether to ascend and walk up the tree. Will walk down if `false`. */\n  ascending: boolean,\n  /** A {@link Fiber} node selector, returns the first match when `true` is passed. */\n  selector: FiberSelector<T>,\n): Fiber<T> | undefined {\n  if (!fiber) return\n  if (selector(fiber) === true) return fiber\n\n  let child = ascending ? fiber.return : fiber.child\n  while (child) {\n    const match = traverseFiber(child, ascending, selector)\n    if (match) return match\n\n    child = ascending ? null : child.sibling\n  }\n}\n\n// In development, React will warn about using contexts between renderers.\n// Hide the warning because its-fine fixes this issue\n// https://github.com/facebook/react/pull/12779\nfunction wrapContext<T>(context: React.Context<T>): React.Context<T> {\n  try {\n    return Object.defineProperties(context, {\n      _currentRenderer: {\n        get() {\n          return null\n        },\n        set() {},\n      },\n      _currentRenderer2: {\n        get() {\n          return null\n        },\n        set() {},\n      },\n    })\n  } catch (_) {\n    return context\n  }\n}\n\nconst FiberContext = wrapContext(React.createContext<Fiber>(null!))\n\n/**\n * A react-internal {@link Fiber} provider. This component binds React children to the React Fiber tree. Call its-fine hooks within this.\n */\nexport class FiberProvider extends React.Component<{ children?: React.ReactNode }> {\n  private _reactInternals!: Fiber\n\n  render() {\n    return <FiberContext.Provider value={this._reactInternals}>{this.props.children}</FiberContext.Provider>\n  }\n}\n\ninterface ReactInternal {\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n    ReactCurrentOwner: React.RefObject<Fiber>\n    ReactCurrentDispatcher: React.RefObject<{ readContext<T>(context: React.Context<T>): T }>\n  }\n}\n\nconst { ReactCurrentOwner, ReactCurrentDispatcher } = (React as unknown as ReactInternal)\n  .__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n\n/**\n * Returns the current react-internal {@link Fiber}. This is an implementation detail of [react-reconciler](https://github.com/facebook/react/tree/main/packages/react-reconciler).\n */\nexport function useFiber(): Fiber<null> | undefined {\n  const root = React.useContext(FiberContext)\n  if (root === null) throw new Error('its-fine: useFiber must be called within a <FiberProvider />!')\n\n  // In development mode, React will expose the current component's Fiber as ReactCurrentOwner.\n  // In production, we don't have this luxury and must traverse from FiberProvider via useId\n  const id = React.useId()\n  const fiber = React.useMemo(\n    () =>\n      ReactCurrentOwner?.current ??\n      traverseFiber<null>(root, false, (node) => {\n        let state = node.memoizedState\n        while (state) {\n          if (state.memoizedState === id) return true\n          state = state.next\n        }\n      }),\n    [root, id],\n  )\n\n  return fiber\n}\n\n/**\n * Represents a react-reconciler container instance.\n */\nexport interface ContainerInstance<T = any> {\n  containerInfo: T\n}\n\n/**\n * Returns the current react-reconciler container info passed to {@link ReactReconciler.Reconciler.createContainer}.\n *\n * In react-dom, a container will point to the root DOM element; in react-three-fiber, it will point to the root Zustand store.\n */\nexport function useContainer<T = any>(): T | undefined {\n  const fiber = useFiber()\n  const root = React.useMemo(\n    () => traverseFiber<ContainerInstance<T>>(fiber, true, (node) => node.stateNode?.containerInfo != null),\n    [fiber],\n  )\n\n  return root?.stateNode.containerInfo\n}\n\n/**\n * Returns the nearest react-reconciler child instance or the node created from {@link ReactReconciler.HostConfig.createInstance}.\n *\n * In react-dom, this would be a DOM element; in react-three-fiber this would be an instance descriptor.\n */\nexport function useNearestChild<T = any>(\n  /** An optional element type to filter to. */\n  type?: keyof JSX.IntrinsicElements,\n): React.MutableRefObject<T | undefined> {\n  const fiber = useFiber()\n  const childRef = React.useRef<T>()\n\n  React.useLayoutEffect(() => {\n    childRef.current = traverseFiber<T>(\n      fiber,\n      false,\n      (node) => typeof node.type === 'string' && (type === undefined || node.type === type),\n    )?.stateNode\n  }, [fiber])\n\n  return childRef\n}\n\n/**\n * Returns the nearest react-reconciler parent instance or the node created from {@link ReactReconciler.HostConfig.createInstance}.\n *\n * In react-dom, this would be a DOM element; in react-three-fiber this would be an instance descriptor.\n */\nexport function useNearestParent<T = any>(\n  /** An optional element type to filter to. */\n  type?: keyof JSX.IntrinsicElements,\n): React.MutableRefObject<T | undefined> {\n  const fiber = useFiber()\n  const parentRef = React.useRef<T>()\n\n  React.useLayoutEffect(() => {\n    parentRef.current = traverseFiber<T>(\n      fiber,\n      true,\n      (node) => typeof node.type === 'string' && (type === undefined || node.type === type),\n    )?.stateNode\n  }, [fiber])\n\n  return parentRef\n}\n\nexport type ContextMap = Map<React.Context<any>, any> & {\n  get<T>(context: React.Context<T>): T | undefined\n}\n\n/**\n * Returns a map of all contexts and their values.\n */\nexport function useContextMap(): ContextMap {\n  const fiber = useFiber()\n  const [contextMap] = React.useState(() => new Map<React.Context<any>, any>())\n\n  // Collect live context\n  contextMap.clear()\n  let node = fiber\n  while (node) {\n    const context = node.type?._context\n    if (context && context !== FiberContext && !contextMap.has(context)) {\n      contextMap.set(context, ReactCurrentDispatcher?.current?.readContext(wrapContext(context)))\n    }\n    node = node.return!\n  }\n\n  return contextMap\n}\n\n/**\n * Represents a react-context bridge provider component.\n */\nexport type ContextBridge = React.FC<React.PropsWithChildren<{}>>\n\n/**\n * React Context currently cannot be shared across [React renderers](https://reactjs.org/docs/codebase-overview.html#renderers) but explicitly forwarded between providers (see [react#17275](https://github.com/facebook/react/issues/17275)). This hook returns a {@link ContextBridge} of live context providers to pierce Context across renderers.\n *\n * Pass {@link ContextBridge} as a component to a secondary renderer to enable context-sharing within its children.\n */\nexport function useContextBridge(): ContextBridge {\n  const contextMap = useContextMap()\n\n  // Flatten context and their memoized values into a `ContextBridge` provider\n  return React.useMemo(\n    () =>\n      Array.from(contextMap.keys()).reduce(\n        (Prev, context) => (props) =>\n          (\n            <Prev>\n              <context.Provider {...props} value={contextMap.get(context)} />\n            </Prev>\n          ),\n        (props) => <FiberProvider {...props} />,\n      ),\n    [contextMap],\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}