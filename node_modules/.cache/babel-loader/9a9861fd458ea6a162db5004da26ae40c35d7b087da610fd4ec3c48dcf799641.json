{"ast":null,"code":"import { Scene, Camera, Mesh, PlaneGeometry, ShaderMaterial, WebGLRenderTarget, RGBAFormat, DataTexture, FloatType, NearestFilter, ClampToEdgeWrapping } from 'three';\n\n/**\n * GPUComputationRenderer, based on SimulationRenderer by zz85\n *\n * The GPUComputationRenderer uses the concept of variables. These variables are RGBA float textures that hold 4 floats\n * for each compute element (texel)\n *\n * Each variable has a fragment shader that defines the computation made to obtain the variable in question.\n * You can use as many variables you need, and make dependencies so you can use textures of other variables in the shader\n * (the sampler uniforms are added automatically) Most of the variables will need themselves as dependency.\n *\n * The renderer has actually two render targets per variable, to make ping-pong. Textures from the current frame are used\n * as inputs to render the textures of the next frame.\n *\n * The render targets of the variables can be used as input textures for your visualization shaders.\n *\n * Variable names should be valid identifiers and should not collide with THREE GLSL used identifiers.\n * a common approach could be to use 'texture' prefixing the variable name; i.e texturePosition, textureVelocity...\n *\n * The size of the computation (sizeX * sizeY) is defined as 'resolution' automatically in the shader. For example:\n * #DEFINE resolution vec2( 1024.0, 1024.0 )\n *\n * -------------\n *\n * Basic use:\n *\n * // Initialization...\n *\n * // Create computation renderer\n * var gpuCompute = new GPUComputationRenderer( 1024, 1024, renderer );\n *\n * // Create initial state float textures\n * var pos0 = gpuCompute.createTexture();\n * var vel0 = gpuCompute.createTexture();\n * // and fill in here the texture data...\n *\n * // Add texture variables\n * var velVar = gpuCompute.addVariable( \"textureVelocity\", fragmentShaderVel, pos0 );\n * var posVar = gpuCompute.addVariable( \"texturePosition\", fragmentShaderPos, vel0 );\n *\n * // Add variable dependencies\n * gpuCompute.setVariableDependencies( velVar, [ velVar, posVar ] );\n * gpuCompute.setVariableDependencies( posVar, [ velVar, posVar ] );\n *\n * // Add custom uniforms\n * velVar.material.uniforms.time = { value: 0.0 };\n *\n * // Check for completeness\n * var error = gpuCompute.init();\n * if ( error !== null ) {\n *\t\tconsole.error( error );\n * }\n *\n *\n * // In each frame...\n *\n * // Compute!\n * gpuCompute.compute();\n *\n * // Update texture uniforms in your visualization materials with the gpu renderer output\n * myMaterial.uniforms.myTexture.value = gpuCompute.getCurrentRenderTarget( posVar ).texture;\n *\n * // Do your rendering\n * renderer.render( myScene, myCamera );\n *\n * -------------\n *\n * Also, you can use utility functions to create ShaderMaterial and perform computations (rendering between textures)\n * Note that the shaders can have multiple input textures.\n *\n * var myFilter1 = gpuCompute.createShaderMaterial( myFilterFragmentShader1, { theTexture: { value: null } } );\n * var myFilter2 = gpuCompute.createShaderMaterial( myFilterFragmentShader2, { theTexture: { value: null } } );\n *\n * var inputTexture = gpuCompute.createTexture();\n *\n * // Fill in here inputTexture...\n *\n * myFilter1.uniforms.theTexture.value = inputTexture;\n *\n * var myRenderTarget = gpuCompute.createRenderTarget();\n * myFilter2.uniforms.theTexture.value = myRenderTarget.texture;\n *\n * var outputRenderTarget = gpuCompute.createRenderTarget();\n *\n * // Now use the output texture where you want:\n * myMaterial.uniforms.map.value = outputRenderTarget.texture;\n *\n * // And compute each frame, before rendering to screen:\n * gpuCompute.doRenderTarget( myFilter1, myRenderTarget );\n * gpuCompute.doRenderTarget( myFilter2, outputRenderTarget );\n *\n *\n *\n * @param {int} sizeX Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {int} sizeY Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {WebGLRenderer} renderer The renderer\n */\n\nvar GPUComputationRenderer = function (sizeX, sizeY, renderer) {\n  this.variables = [];\n  this.currentTextureIndex = 0;\n  var dataType = FloatType;\n  var scene = new Scene();\n  var camera = new Camera();\n  camera.position.z = 1;\n  var passThruUniforms = {\n    passThruTexture: {\n      value: null\n    }\n  };\n  var passThruShader = createShaderMaterial(getPassThroughFragmentShader(), passThruUniforms);\n  var mesh = new Mesh(new PlaneGeometry(2, 2), passThruShader);\n  scene.add(mesh);\n  this.setDataType = function (type) {\n    dataType = type;\n    return this;\n  };\n  this.addVariable = function (variableName, computeFragmentShader, initialValueTexture) {\n    var material = this.createShaderMaterial(computeFragmentShader);\n    var variable = {\n      name: variableName,\n      initialValueTexture: initialValueTexture,\n      material: material,\n      dependencies: null,\n      renderTargets: [],\n      wrapS: null,\n      wrapT: null,\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    };\n    this.variables.push(variable);\n    return variable;\n  };\n  this.setVariableDependencies = function (variable, dependencies) {\n    variable.dependencies = dependencies;\n  };\n  this.init = function () {\n    if (renderer.capabilities.isWebGL2 === false && renderer.extensions.has('OES_texture_float') === false) {\n      return 'No OES_texture_float support for float textures.';\n    }\n    if (renderer.capabilities.maxVertexTextures === 0) {\n      return 'No support for vertex shader textures.';\n    }\n    for (let i = 0; i < this.variables.length; i++) {\n      var variable = this.variables[i]; // Creates rendertargets and initialize them with input texture\n\n      variable.renderTargets[0] = this.createRenderTarget(sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter);\n      variable.renderTargets[1] = this.createRenderTarget(sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter);\n      this.renderTexture(variable.initialValueTexture, variable.renderTargets[0]);\n      this.renderTexture(variable.initialValueTexture, variable.renderTargets[1]); // Adds dependencies uniforms to the ShaderMaterial\n\n      var material = variable.material;\n      var uniforms = material.uniforms;\n      if (variable.dependencies !== null) {\n        for (let d = 0; d < variable.dependencies.length; d++) {\n          var depVar = variable.dependencies[d];\n          if (depVar.name !== variable.name) {\n            // Checks if variable exists\n            var found = false;\n            for (let j = 0; j < this.variables.length; j++) {\n              if (depVar.name === this.variables[j].name) {\n                found = true;\n                break;\n              }\n            }\n            if (!found) {\n              return 'Variable dependency not found. Variable=' + variable.name + ', dependency=' + depVar.name;\n            }\n          }\n          uniforms[depVar.name] = {\n            value: null\n          };\n          material.fragmentShader = '\\nuniform sampler2D ' + depVar.name + ';\\n' + material.fragmentShader;\n        }\n      }\n    }\n    this.currentTextureIndex = 0;\n    return null;\n  };\n  this.compute = function () {\n    var currentTextureIndex = this.currentTextureIndex;\n    var nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\n    for (let i = 0, il = this.variables.length; i < il; i++) {\n      var variable = this.variables[i]; // Sets texture dependencies uniforms\n\n      if (variable.dependencies !== null) {\n        var uniforms = variable.material.uniforms;\n        for (let d = 0, dl = variable.dependencies.length; d < dl; d++) {\n          var depVar = variable.dependencies[d];\n          uniforms[depVar.name].value = depVar.renderTargets[currentTextureIndex].texture;\n        }\n      } // Performs the computation for this variable\n\n      this.doRenderTarget(variable.material, variable.renderTargets[nextTextureIndex]);\n    }\n    this.currentTextureIndex = nextTextureIndex;\n  };\n  this.getCurrentRenderTarget = function (variable) {\n    return variable.renderTargets[this.currentTextureIndex];\n  };\n  this.getAlternateRenderTarget = function (variable) {\n    return variable.renderTargets[this.currentTextureIndex === 0 ? 1 : 0];\n  };\n  function addResolutionDefine(materialShader) {\n    materialShader.defines.resolution = 'vec2( ' + sizeX.toFixed(1) + ', ' + sizeY.toFixed(1) + ' )';\n  }\n  this.addResolutionDefine = addResolutionDefine; // The following functions can be used to compute things manually\n\n  function createShaderMaterial(computeFragmentShader, uniforms) {\n    uniforms = uniforms || {};\n    var material = new ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: getPassThroughVertexShader(),\n      fragmentShader: computeFragmentShader\n    });\n    addResolutionDefine(material);\n    return material;\n  }\n  this.createShaderMaterial = createShaderMaterial;\n  this.createRenderTarget = function (sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter) {\n    sizeXTexture = sizeXTexture || sizeX;\n    sizeYTexture = sizeYTexture || sizeY;\n    wrapS = wrapS || ClampToEdgeWrapping;\n    wrapT = wrapT || ClampToEdgeWrapping;\n    minFilter = minFilter || NearestFilter;\n    magFilter = magFilter || NearestFilter;\n    var renderTarget = new WebGLRenderTarget(sizeXTexture, sizeYTexture, {\n      wrapS: wrapS,\n      wrapT: wrapT,\n      minFilter: minFilter,\n      magFilter: magFilter,\n      format: RGBAFormat,\n      type: dataType,\n      depthBuffer: false\n    });\n    return renderTarget;\n  };\n  this.createTexture = function () {\n    var data = new Float32Array(sizeX * sizeY * 4);\n    return new DataTexture(data, sizeX, sizeY, RGBAFormat, FloatType);\n  };\n  this.renderTexture = function (input, output) {\n    // Takes a texture, and render out in rendertarget\n    // input = Texture\n    // output = RenderTarget\n    passThruUniforms.passThruTexture.value = input;\n    this.doRenderTarget(passThruShader, output);\n    passThruUniforms.passThruTexture.value = null;\n  };\n  this.doRenderTarget = function (material, output) {\n    var currentRenderTarget = renderer.getRenderTarget();\n    mesh.material = material;\n    renderer.setRenderTarget(output);\n    renderer.render(scene, camera);\n    mesh.material = passThruShader;\n    renderer.setRenderTarget(currentRenderTarget);\n  }; // Shaders\n\n  function getPassThroughVertexShader() {\n    return 'void main()\t{\\n' + '\\n' + '\tgl_Position = vec4( position, 1.0 );\\n' + '\\n' + '}\\n';\n  }\n  function getPassThroughFragmentShader() {\n    return 'uniform sampler2D passThruTexture;\\n' + '\\n' + 'void main() {\\n' + '\\n' + '\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n' + '\\n' + '\tgl_FragColor = texture2D( passThruTexture, uv );\\n' + '\\n' + '}\\n';\n  }\n};\nexport { GPUComputationRenderer };","map":{"version":3,"names":["Scene","Camera","Mesh","PlaneGeometry","ShaderMaterial","WebGLRenderTarget","RGBAFormat","DataTexture","FloatType","NearestFilter","ClampToEdgeWrapping","GPUComputationRenderer","sizeX","sizeY","renderer","variables","currentTextureIndex","dataType","scene","camera","position","z","passThruUniforms","passThruTexture","value","passThruShader","createShaderMaterial","getPassThroughFragmentShader","mesh","add","setDataType","type","addVariable","variableName","computeFragmentShader","initialValueTexture","material","variable","name","dependencies","renderTargets","wrapS","wrapT","minFilter","magFilter","push","setVariableDependencies","init","capabilities","isWebGL2","extensions","has","maxVertexTextures","i","length","createRenderTarget","renderTexture","uniforms","d","depVar","found","j","fragmentShader","compute","nextTextureIndex","il","dl","texture","doRenderTarget","getCurrentRenderTarget","getAlternateRenderTarget","addResolutionDefine","materialShader","defines","resolution","toFixed","vertexShader","getPassThroughVertexShader","sizeXTexture","sizeYTexture","renderTarget","format","depthBuffer","createTexture","data","Float32Array","input","output","currentRenderTarget","getRenderTarget","setRenderTarget","render"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/misc/GPUComputationRenderer.js"],"sourcesContent":["import { Scene, Camera, Mesh, PlaneGeometry, ShaderMaterial, WebGLRenderTarget, RGBAFormat, DataTexture, FloatType, NearestFilter, ClampToEdgeWrapping } from 'three';\n\n/**\n * GPUComputationRenderer, based on SimulationRenderer by zz85\n *\n * The GPUComputationRenderer uses the concept of variables. These variables are RGBA float textures that hold 4 floats\n * for each compute element (texel)\n *\n * Each variable has a fragment shader that defines the computation made to obtain the variable in question.\n * You can use as many variables you need, and make dependencies so you can use textures of other variables in the shader\n * (the sampler uniforms are added automatically) Most of the variables will need themselves as dependency.\n *\n * The renderer has actually two render targets per variable, to make ping-pong. Textures from the current frame are used\n * as inputs to render the textures of the next frame.\n *\n * The render targets of the variables can be used as input textures for your visualization shaders.\n *\n * Variable names should be valid identifiers and should not collide with THREE GLSL used identifiers.\n * a common approach could be to use 'texture' prefixing the variable name; i.e texturePosition, textureVelocity...\n *\n * The size of the computation (sizeX * sizeY) is defined as 'resolution' automatically in the shader. For example:\n * #DEFINE resolution vec2( 1024.0, 1024.0 )\n *\n * -------------\n *\n * Basic use:\n *\n * // Initialization...\n *\n * // Create computation renderer\n * var gpuCompute = new GPUComputationRenderer( 1024, 1024, renderer );\n *\n * // Create initial state float textures\n * var pos0 = gpuCompute.createTexture();\n * var vel0 = gpuCompute.createTexture();\n * // and fill in here the texture data...\n *\n * // Add texture variables\n * var velVar = gpuCompute.addVariable( \"textureVelocity\", fragmentShaderVel, pos0 );\n * var posVar = gpuCompute.addVariable( \"texturePosition\", fragmentShaderPos, vel0 );\n *\n * // Add variable dependencies\n * gpuCompute.setVariableDependencies( velVar, [ velVar, posVar ] );\n * gpuCompute.setVariableDependencies( posVar, [ velVar, posVar ] );\n *\n * // Add custom uniforms\n * velVar.material.uniforms.time = { value: 0.0 };\n *\n * // Check for completeness\n * var error = gpuCompute.init();\n * if ( error !== null ) {\n *\t\tconsole.error( error );\n * }\n *\n *\n * // In each frame...\n *\n * // Compute!\n * gpuCompute.compute();\n *\n * // Update texture uniforms in your visualization materials with the gpu renderer output\n * myMaterial.uniforms.myTexture.value = gpuCompute.getCurrentRenderTarget( posVar ).texture;\n *\n * // Do your rendering\n * renderer.render( myScene, myCamera );\n *\n * -------------\n *\n * Also, you can use utility functions to create ShaderMaterial and perform computations (rendering between textures)\n * Note that the shaders can have multiple input textures.\n *\n * var myFilter1 = gpuCompute.createShaderMaterial( myFilterFragmentShader1, { theTexture: { value: null } } );\n * var myFilter2 = gpuCompute.createShaderMaterial( myFilterFragmentShader2, { theTexture: { value: null } } );\n *\n * var inputTexture = gpuCompute.createTexture();\n *\n * // Fill in here inputTexture...\n *\n * myFilter1.uniforms.theTexture.value = inputTexture;\n *\n * var myRenderTarget = gpuCompute.createRenderTarget();\n * myFilter2.uniforms.theTexture.value = myRenderTarget.texture;\n *\n * var outputRenderTarget = gpuCompute.createRenderTarget();\n *\n * // Now use the output texture where you want:\n * myMaterial.uniforms.map.value = outputRenderTarget.texture;\n *\n * // And compute each frame, before rendering to screen:\n * gpuCompute.doRenderTarget( myFilter1, myRenderTarget );\n * gpuCompute.doRenderTarget( myFilter2, outputRenderTarget );\n *\n *\n *\n * @param {int} sizeX Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {int} sizeY Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {WebGLRenderer} renderer The renderer\n */\n\nvar GPUComputationRenderer = function (sizeX, sizeY, renderer) {\n  this.variables = [];\n  this.currentTextureIndex = 0;\n  var dataType = FloatType;\n  var scene = new Scene();\n  var camera = new Camera();\n  camera.position.z = 1;\n  var passThruUniforms = {\n    passThruTexture: {\n      value: null\n    }\n  };\n  var passThruShader = createShaderMaterial(getPassThroughFragmentShader(), passThruUniforms);\n  var mesh = new Mesh(new PlaneGeometry(2, 2), passThruShader);\n  scene.add(mesh);\n\n  this.setDataType = function (type) {\n    dataType = type;\n    return this;\n  };\n\n  this.addVariable = function (variableName, computeFragmentShader, initialValueTexture) {\n    var material = this.createShaderMaterial(computeFragmentShader);\n    var variable = {\n      name: variableName,\n      initialValueTexture: initialValueTexture,\n      material: material,\n      dependencies: null,\n      renderTargets: [],\n      wrapS: null,\n      wrapT: null,\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    };\n    this.variables.push(variable);\n    return variable;\n  };\n\n  this.setVariableDependencies = function (variable, dependencies) {\n    variable.dependencies = dependencies;\n  };\n\n  this.init = function () {\n    if (renderer.capabilities.isWebGL2 === false && renderer.extensions.has('OES_texture_float') === false) {\n      return 'No OES_texture_float support for float textures.';\n    }\n\n    if (renderer.capabilities.maxVertexTextures === 0) {\n      return 'No support for vertex shader textures.';\n    }\n\n    for (let i = 0; i < this.variables.length; i++) {\n      var variable = this.variables[i]; // Creates rendertargets and initialize them with input texture\n\n      variable.renderTargets[0] = this.createRenderTarget(sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter);\n      variable.renderTargets[1] = this.createRenderTarget(sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter);\n      this.renderTexture(variable.initialValueTexture, variable.renderTargets[0]);\n      this.renderTexture(variable.initialValueTexture, variable.renderTargets[1]); // Adds dependencies uniforms to the ShaderMaterial\n\n      var material = variable.material;\n      var uniforms = material.uniforms;\n\n      if (variable.dependencies !== null) {\n        for (let d = 0; d < variable.dependencies.length; d++) {\n          var depVar = variable.dependencies[d];\n\n          if (depVar.name !== variable.name) {\n            // Checks if variable exists\n            var found = false;\n\n            for (let j = 0; j < this.variables.length; j++) {\n              if (depVar.name === this.variables[j].name) {\n                found = true;\n                break;\n              }\n            }\n\n            if (!found) {\n              return 'Variable dependency not found. Variable=' + variable.name + ', dependency=' + depVar.name;\n            }\n          }\n\n          uniforms[depVar.name] = {\n            value: null\n          };\n          material.fragmentShader = '\\nuniform sampler2D ' + depVar.name + ';\\n' + material.fragmentShader;\n        }\n      }\n    }\n\n    this.currentTextureIndex = 0;\n    return null;\n  };\n\n  this.compute = function () {\n    var currentTextureIndex = this.currentTextureIndex;\n    var nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\n\n    for (let i = 0, il = this.variables.length; i < il; i++) {\n      var variable = this.variables[i]; // Sets texture dependencies uniforms\n\n      if (variable.dependencies !== null) {\n        var uniforms = variable.material.uniforms;\n\n        for (let d = 0, dl = variable.dependencies.length; d < dl; d++) {\n          var depVar = variable.dependencies[d];\n          uniforms[depVar.name].value = depVar.renderTargets[currentTextureIndex].texture;\n        }\n      } // Performs the computation for this variable\n\n\n      this.doRenderTarget(variable.material, variable.renderTargets[nextTextureIndex]);\n    }\n\n    this.currentTextureIndex = nextTextureIndex;\n  };\n\n  this.getCurrentRenderTarget = function (variable) {\n    return variable.renderTargets[this.currentTextureIndex];\n  };\n\n  this.getAlternateRenderTarget = function (variable) {\n    return variable.renderTargets[this.currentTextureIndex === 0 ? 1 : 0];\n  };\n\n  function addResolutionDefine(materialShader) {\n    materialShader.defines.resolution = 'vec2( ' + sizeX.toFixed(1) + ', ' + sizeY.toFixed(1) + ' )';\n  }\n\n  this.addResolutionDefine = addResolutionDefine; // The following functions can be used to compute things manually\n\n  function createShaderMaterial(computeFragmentShader, uniforms) {\n    uniforms = uniforms || {};\n    var material = new ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: getPassThroughVertexShader(),\n      fragmentShader: computeFragmentShader\n    });\n    addResolutionDefine(material);\n    return material;\n  }\n\n  this.createShaderMaterial = createShaderMaterial;\n\n  this.createRenderTarget = function (sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter) {\n    sizeXTexture = sizeXTexture || sizeX;\n    sizeYTexture = sizeYTexture || sizeY;\n    wrapS = wrapS || ClampToEdgeWrapping;\n    wrapT = wrapT || ClampToEdgeWrapping;\n    minFilter = minFilter || NearestFilter;\n    magFilter = magFilter || NearestFilter;\n    var renderTarget = new WebGLRenderTarget(sizeXTexture, sizeYTexture, {\n      wrapS: wrapS,\n      wrapT: wrapT,\n      minFilter: minFilter,\n      magFilter: magFilter,\n      format: RGBAFormat,\n      type: dataType,\n      depthBuffer: false\n    });\n    return renderTarget;\n  };\n\n  this.createTexture = function () {\n    var data = new Float32Array(sizeX * sizeY * 4);\n    return new DataTexture(data, sizeX, sizeY, RGBAFormat, FloatType);\n  };\n\n  this.renderTexture = function (input, output) {\n    // Takes a texture, and render out in rendertarget\n    // input = Texture\n    // output = RenderTarget\n    passThruUniforms.passThruTexture.value = input;\n    this.doRenderTarget(passThruShader, output);\n    passThruUniforms.passThruTexture.value = null;\n  };\n\n  this.doRenderTarget = function (material, output) {\n    var currentRenderTarget = renderer.getRenderTarget();\n    mesh.material = material;\n    renderer.setRenderTarget(output);\n    renderer.render(scene, camera);\n    mesh.material = passThruShader;\n    renderer.setRenderTarget(currentRenderTarget);\n  }; // Shaders\n\n\n  function getPassThroughVertexShader() {\n    return 'void main()\t{\\n' + '\\n' + '\tgl_Position = vec4( position, 1.0 );\\n' + '\\n' + '}\\n';\n  }\n\n  function getPassThroughFragmentShader() {\n    return 'uniform sampler2D passThruTexture;\\n' + '\\n' + 'void main() {\\n' + '\\n' + '\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n' + '\\n' + '\tgl_FragColor = texture2D( passThruTexture, uv );\\n' + '\\n' + '}\\n';\n  }\n};\n\nexport { GPUComputationRenderer };\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,MAAM,EAAEC,IAAI,EAAEC,aAAa,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,UAAU,EAAEC,WAAW,EAAEC,SAAS,EAAEC,aAAa,EAAEC,mBAAmB,QAAQ,OAAO;;AAErK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,sBAAsB,GAAG,SAAAA,CAAUC,KAAK,EAAEC,KAAK,EAAEC,QAAQ,EAAE;EAC7D,IAAI,CAACC,SAAS,GAAG,EAAE;EACnB,IAAI,CAACC,mBAAmB,GAAG,CAAC;EAC5B,IAAIC,QAAQ,GAAGT,SAAS;EACxB,IAAIU,KAAK,GAAG,IAAIlB,KAAK,EAAE;EACvB,IAAImB,MAAM,GAAG,IAAIlB,MAAM,EAAE;EACzBkB,MAAM,CAACC,QAAQ,CAACC,CAAC,GAAG,CAAC;EACrB,IAAIC,gBAAgB,GAAG;IACrBC,eAAe,EAAE;MACfC,KAAK,EAAE;IACT;EACF,CAAC;EACD,IAAIC,cAAc,GAAGC,oBAAoB,CAACC,4BAA4B,EAAE,EAAEL,gBAAgB,CAAC;EAC3F,IAAIM,IAAI,GAAG,IAAI1B,IAAI,CAAC,IAAIC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEsB,cAAc,CAAC;EAC5DP,KAAK,CAACW,GAAG,CAACD,IAAI,CAAC;EAEf,IAAI,CAACE,WAAW,GAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}