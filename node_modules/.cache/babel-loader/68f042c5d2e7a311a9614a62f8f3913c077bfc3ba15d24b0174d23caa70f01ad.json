{"ast":null,"code":"/**\n * Gamma Correction Shader\n * http://en.wikipedia.org/wiki/gamma_correction\n */\nconst GammaCorrectionShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 tex = texture2D( tDiffuse, vUv );', '\tgl_FragColor = LinearTosRGB( tex );', '}'].join('\\n')\n};\nexport { GammaCorrectionShader };","map":{"version":3,"names":["GammaCorrectionShader","uniforms","tDiffuse","value","vertexShader","join","fragmentShader"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/shaders/GammaCorrectionShader.js"],"sourcesContent":["/**\n * Gamma Correction Shader\n * http://en.wikipedia.org/wiki/gamma_correction\n */\nconst GammaCorrectionShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 tex = texture2D( tDiffuse, vUv );', '\tgl_FragColor = LinearTosRGB( tex );', '}'].join('\\n')\n};\n\nexport { GammaCorrectionShader };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,qBAAqB,GAAG;EAC5BC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MACRC,KAAK,EAAE;IACT;EACF,CAAC;EACDC,YAAY,EAAE,CAAC,mBAAmB,EAAE,eAAe,EAAE,YAAY,EAAE,4EAA4E,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAChKC,cAAc,EAAE,CAAC,6BAA6B,EAAE,mBAAmB,EAAE,eAAe,EAAE,yCAAyC,EAAE,sCAAsC,EAAE,GAAG,CAAC,CAACD,IAAI,CAAC,IAAI;AACzL,CAAC;AAED,SAASL,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}