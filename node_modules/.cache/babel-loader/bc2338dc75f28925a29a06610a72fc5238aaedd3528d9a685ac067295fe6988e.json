{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Sphere, Box3 } from 'three';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = 'index-finger-tip';\nclass OculusHandModel extends Object3D {\n  constructor(controller, leftModelPath, rightModelPath) {\n    super();\n    _defineProperty(this, \"controller\", void 0);\n    _defineProperty(this, \"motionController\", void 0);\n    _defineProperty(this, \"envMap\", void 0);\n    _defineProperty(this, \"mesh\", void 0);\n    _defineProperty(this, \"xrInputSource\", void 0);\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.xrInputSource = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(this, controller, undefined, xrInputSource.handedness, xrInputSource.handedness === 'left' ? leftModelPath : rightModelPath);\n      }\n    });\n    controller.addEventListener('disconnected', () => {\n      this.dispose();\n    });\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n  getPointerPosition() {\n    // @ts-ignore XRController needs to extend Group\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n  dispose() {\n    this.clear();\n    this.motionController = null;\n  }\n}\nexport { OculusHandModel };","map":{"version":3,"names":["_defineProperty","Object3D","Sphere","Box3","XRHandMeshModel","TOUCH_RADIUS","POINTING_JOINT","OculusHandModel","constructor","controller","leftModelPath","rightModelPath","motionController","envMap","mesh","xrInputSource","addEventListener","event","data","hand","undefined","handedness","dispose","updateMatrixWorld","force","updateMesh","getPointerPosition","indexFingerTip","joints","position","intersectBoxObject","boxObject","pointerPosition","indexSphere","box","setFromObject","intersectsBox","checkButton","button","onPress","onClear","isPressed","whilePressed","clear"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/webxr/OculusHandModel.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Sphere, Box3 } from 'three';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\n\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = 'index-finger-tip';\n\nclass OculusHandModel extends Object3D {\n  constructor(controller, leftModelPath, rightModelPath) {\n    super();\n\n    _defineProperty(this, \"controller\", void 0);\n\n    _defineProperty(this, \"motionController\", void 0);\n\n    _defineProperty(this, \"envMap\", void 0);\n\n    _defineProperty(this, \"mesh\", void 0);\n\n    _defineProperty(this, \"xrInputSource\", void 0);\n\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.xrInputSource = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(this, controller, undefined, xrInputSource.handedness, xrInputSource.handedness === 'left' ? leftModelPath : rightModelPath);\n      }\n    });\n    controller.addEventListener('disconnected', () => {\n      this.dispose();\n    });\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n\n  getPointerPosition() {\n    // @ts-ignore XRController needs to extend Group\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n\n  dispose() {\n    this.clear();\n    this.motionController = null;\n  }\n\n}\n\nexport { OculusHandModel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}