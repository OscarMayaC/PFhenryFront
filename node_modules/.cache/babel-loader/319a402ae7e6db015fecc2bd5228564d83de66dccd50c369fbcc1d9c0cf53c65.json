{"ast":null,"code":"import { Loader, FileLoader, TextureLoader, LoaderUtils, Group, Color, Matrix4, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, MeshStandardMaterial, sRGBEncoding, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nclass ThreeMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.availableExtensions = [];\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(data) {\n    const scope = this;\n    const textureLoader = new TextureLoader(this.manager);\n    function loadDocument(data) {\n      let zip = null;\n      let file = null;\n      let relsName;\n      let modelRelsName;\n      const modelPartNames = [];\n      const texturesPartNames = [];\n      let modelRels;\n      const modelParts = {};\n      const printTicketParts = {};\n      const texturesParts = {};\n      const otherParts = {};\n      try {\n        zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error('THREE.3MFLoader: fflate missing and file is compressed.');\n          return null;\n        }\n      }\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) ;else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        } else if (file.match(/^3D\\/Other\\/.*/)) ;\n      } //\n\n      const relsView = zip[relsName];\n      const relsFileText = LoaderUtils.decodeText(relsView);\n      const rels = parseRelsXml(relsFileText); //\n\n      if (modelRelsName) {\n        const relsView = zip[modelRelsName];\n        const relsFileText = LoaderUtils.decodeText(relsView);\n        modelRels = parseRelsXml(relsFileText);\n      } //\n\n      for (let i = 0; i < modelPartNames.length; i++) {\n        const modelPart = modelPartNames[i];\n        const view = zip[modelPart];\n        const fileText = LoaderUtils.decodeText(view);\n        const xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n          console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n        }\n        const modelNode = xmlData.querySelector('model');\n        const extensions = {};\n        for (let i = 0; i < modelNode.attributes.length; i++) {\n          const attr = modelNode.attributes[i];\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n        const modelData = parseModelNode(modelNode);\n        modelData['xml'] = modelNode;\n        if (0 < Object.keys(extensions).length) {\n          modelData['extensions'] = extensions;\n        }\n        modelParts[modelPart] = modelData;\n      } //\n\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        const texturesPartName = texturesPartNames[i];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n      return {\n        rels: rels,\n        modelRels: modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts,\n        other: otherParts\n      };\n    }\n    function parseRelsXml(relsFileText) {\n      const relationships = [];\n      const relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n      const relsNodes = relsXmlData.querySelectorAll('Relationship');\n      for (let i = 0; i < relsNodes.length; i++) {\n        const relsNode = relsNodes[i];\n        const relationship = {\n          target: relsNode.getAttribute('Target'),\n          //required\n          id: relsNode.getAttribute('Id'),\n          //required\n          type: relsNode.getAttribute('Type') //required\n        };\n\n        relationships.push(relationship);\n      }\n      return relationships;\n    }\n    function parseMetadataNodes(metadataNodes) {\n      const metadataData = {};\n      for (let i = 0; i < metadataNodes.length; i++) {\n        const metadataNode = metadataNodes[i];\n        const name = metadataNode.getAttribute('name');\n        const validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n      return metadataData;\n    }\n    function parseBasematerialsNode(basematerialsNode) {\n      const basematerialsData = {\n        id: basematerialsNode.getAttribute('id'),\n        // required\n        basematerials: []\n      };\n      const basematerialNodes = basematerialsNode.querySelectorAll('base');\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        const basematerialNode = basematerialNodes[i];\n        const basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\n        basematerialsData.basematerials.push(basematerialData);\n      }\n      return basematerialsData;\n    }\n    function parseTexture2DNode(texture2DNode) {\n      const texture2dData = {\n        id: texture2DNode.getAttribute('id'),\n        // required\n        path: texture2DNode.getAttribute('path'),\n        // required\n        contenttype: texture2DNode.getAttribute('contenttype'),\n        // required\n        tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n        tilestylev: texture2DNode.getAttribute('tilestylev'),\n        filter: texture2DNode.getAttribute('filter')\n      };\n      return texture2dData;\n    }\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      const texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute('id'),\n        // required\n        texid: texture2DGroupNode.getAttribute('texid'),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n      };\n      const tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n      const uvs = [];\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        const tex2coordNode = tex2coordNodes[i];\n        const u = tex2coordNode.getAttribute('u');\n        const v = tex2coordNode.getAttribute('v');\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n      texture2DGroupData['uvs'] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n    function parseColorGroupNode(colorGroupNode) {\n      const colorGroupData = {\n        id: colorGroupNode.getAttribute('id'),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n      };\n      const colorNodes = colorGroupNode.querySelectorAll('color');\n      const colors = [];\n      const colorObject = new Color();\n      for (let i = 0; i < colorNodes.length; i++) {\n        const colorNode = colorNodes[i];\n        const color = colorNode.getAttribute('color');\n        colorObject.setStyle(color.substring(0, 7));\n        colorObject.convertSRGBToLinear(); // color is in sRGB\n\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n      colorGroupData['colors'] = new Float32Array(colors);\n      return colorGroupData;\n    }\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      const metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute('id') // required\n      };\n\n      const metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n      const metallicData = [];\n      for (let i = 0; i < metallicNodes.length; i++) {\n        const metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute('name'),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\n        });\n      }\n\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n    function parseBasematerialNode(basematerialNode) {\n      const basematerialData = {};\n      basematerialData['name'] = basematerialNode.getAttribute('name'); // required\n\n      basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\n\n      basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n      return basematerialData;\n    }\n    function parseMeshNode(meshNode) {\n      const meshData = {};\n      const vertices = [];\n      const vertexNodes = meshNode.querySelectorAll('vertices vertex');\n      for (let i = 0; i < vertexNodes.length; i++) {\n        const vertexNode = vertexNodes[i];\n        const x = vertexNode.getAttribute('x');\n        const y = vertexNode.getAttribute('y');\n        const z = vertexNode.getAttribute('z');\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n      meshData['vertices'] = new Float32Array(vertices);\n      const triangleProperties = [];\n      const triangles = [];\n      const triangleNodes = meshNode.querySelectorAll('triangles triangle');\n      for (let i = 0; i < triangleNodes.length; i++) {\n        const triangleNode = triangleNodes[i];\n        const v1 = triangleNode.getAttribute('v1');\n        const v2 = triangleNode.getAttribute('v2');\n        const v3 = triangleNode.getAttribute('v3');\n        const p1 = triangleNode.getAttribute('p1');\n        const p2 = triangleNode.getAttribute('p2');\n        const p3 = triangleNode.getAttribute('p3');\n        const pid = triangleNode.getAttribute('pid');\n        const triangleProperty = {};\n        triangleProperty['v1'] = parseInt(v1, 10);\n        triangleProperty['v2'] = parseInt(v2, 10);\n        triangleProperty['v3'] = parseInt(v3, 10);\n        triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']); // optional\n\n        if (p1) {\n          triangleProperty['p1'] = parseInt(p1, 10);\n        }\n        if (p2) {\n          triangleProperty['p2'] = parseInt(p2, 10);\n        }\n        if (p3) {\n          triangleProperty['p3'] = parseInt(p3, 10);\n        }\n        if (pid) {\n          triangleProperty['pid'] = pid;\n        }\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n      meshData['triangleProperties'] = triangleProperties;\n      meshData['triangles'] = new Uint32Array(triangles);\n      return meshData;\n    }\n    function parseComponentsNode(componentsNode) {\n      const components = [];\n      const componentNodes = componentsNode.querySelectorAll('component');\n      for (let i = 0; i < componentNodes.length; i++) {\n        const componentNode = componentNodes[i];\n        const componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n      return components;\n    }\n    function parseComponentNode(componentNode) {\n      const componentData = {};\n      componentData['objectId'] = componentNode.getAttribute('objectid'); // required\n\n      const transform = componentNode.getAttribute('transform');\n      if (transform) {\n        componentData['transform'] = parseTransform(transform);\n      }\n      return componentData;\n    }\n    function parseTransform(transform) {\n      const t = [];\n      transform.split(' ').forEach(function (s) {\n        t.push(parseFloat(s));\n      });\n      const matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\n      return matrix;\n    }\n    function parseObjectNode(objectNode) {\n      const objectData = {\n        type: objectNode.getAttribute('type')\n      };\n      const id = objectNode.getAttribute('id');\n      if (id) {\n        objectData['id'] = id;\n      }\n      const pid = objectNode.getAttribute('pid');\n      if (pid) {\n        objectData['pid'] = pid;\n      }\n      const pindex = objectNode.getAttribute('pindex');\n      if (pindex) {\n        objectData['pindex'] = pindex;\n      }\n      const thumbnail = objectNode.getAttribute('thumbnail');\n      if (thumbnail) {\n        objectData['thumbnail'] = thumbnail;\n      }\n      const partnumber = objectNode.getAttribute('partnumber');\n      if (partnumber) {\n        objectData['partnumber'] = partnumber;\n      }\n      const name = objectNode.getAttribute('name');\n      if (name) {\n        objectData['name'] = name;\n      }\n      const meshNode = objectNode.querySelector('mesh');\n      if (meshNode) {\n        objectData['mesh'] = parseMeshNode(meshNode);\n      }\n      const componentsNode = objectNode.querySelector('components');\n      if (componentsNode) {\n        objectData['components'] = parseComponentsNode(componentsNode);\n      }\n      return objectData;\n    }\n    function parseResourcesNode(resourcesNode) {\n      const resourcesData = {};\n      resourcesData['basematerials'] = {};\n      const basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        const basematerialsNode = basematerialsNodes[i];\n        const basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n      } //\n\n      resourcesData['texture2d'] = {};\n      const textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        const textures2DNode = textures2DNodes[i];\n        const texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n      } //\n\n      resourcesData['colorgroup'] = {};\n      const colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        const colorGroupNode = colorGroupNodes[i];\n        const colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n      } //\n\n      resourcesData['pbmetallicdisplayproperties'] = {};\n      const pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        const pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n        const pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n      } //\n\n      resourcesData['texture2dgroup'] = {};\n      const textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        const textures2DGroupNode = textures2DGroupNodes[i];\n        const textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n      } //\n\n      resourcesData['object'] = {};\n      const objectNodes = resourcesNode.querySelectorAll('object');\n      for (let i = 0; i < objectNodes.length; i++) {\n        const objectNode = objectNodes[i];\n        const objectData = parseObjectNode(objectNode);\n        resourcesData['object'][objectData['id']] = objectData;\n      }\n      return resourcesData;\n    }\n    function parseBuildNode(buildNode) {\n      const buildData = [];\n      const itemNodes = buildNode.querySelectorAll('item');\n      for (let i = 0; i < itemNodes.length; i++) {\n        const itemNode = itemNodes[i];\n        const buildItem = {\n          objectId: itemNode.getAttribute('objectid')\n        };\n        const transform = itemNode.getAttribute('transform');\n        if (transform) {\n          buildItem['transform'] = parseTransform(transform);\n        }\n        buildData.push(buildItem);\n      }\n      return buildData;\n    }\n    function parseModelNode(modelNode) {\n      const modelData = {\n        unit: modelNode.getAttribute('unit') || 'millimeter'\n      };\n      const metadataNodes = modelNode.querySelectorAll('metadata');\n      if (metadataNodes) {\n        modelData['metadata'] = parseMetadataNodes(metadataNodes);\n      }\n      const resourcesNode = modelNode.querySelector('resources');\n      if (resourcesNode) {\n        modelData['resources'] = parseResourcesNode(resourcesNode);\n      }\n      const buildNode = modelNode.querySelector('build');\n      if (buildNode) {\n        modelData['build'] = parseBuildNode(buildNode);\n      }\n      return modelData;\n    }\n    function buildTexture(texture2dgroup, objects, modelData, textureData) {\n      const texid = texture2dgroup.texid;\n      const texture2ds = modelData.resources.texture2d;\n      const texture2d = texture2ds[texid];\n      if (texture2d) {\n        const data = textureData[texture2d.path];\n        const type = texture2d.contenttype;\n        const blob = new Blob([data], {\n          type: type\n        });\n        const sourceURI = URL.createObjectURL(blob);\n        const texture = textureLoader.load(sourceURI, function () {\n          URL.revokeObjectURL(sourceURI);\n        });\n        texture.encoding = sRGBEncoding; // texture parameters\n\n        switch (texture2d.tilestyleu) {\n          case 'wrap':\n            texture.wrapS = RepeatWrapping;\n            break;\n          case 'mirror':\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n          case 'none':\n          case 'clamp':\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n        switch (texture2d.tilestylev) {\n          case 'wrap':\n            texture.wrapT = RepeatWrapping;\n            break;\n          case 'mirror':\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n          case 'none':\n          case 'clamp':\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n        switch (texture2d.filter) {\n          case 'auto':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n          case 'linear':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n          case 'nearest':\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n        return texture;\n      } else {\n        return null;\n      }\n    }\n    function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n      const objectPindex = objectData.pindex;\n      const materialMap = {};\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === undefined) materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      } //\n\n      const keys = Object.keys(materialMap);\n      const meshes = [];\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const materialIndex = keys[i];\n        const trianglePropertiesProps = materialMap[materialIndex];\n        const basematerialData = basematerials.basematerials[materialIndex];\n        const material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial); //\n\n        const geometry = new BufferGeometry();\n        const positionData = [];\n        const vertices = meshData.vertices;\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          const triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3)); //\n\n        const mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n      return meshes;\n    }\n    function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n      // geometry\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const uvData = [];\n      const vertices = meshData.vertices;\n      const uvs = texture2dgroup.uvs;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]); //\n\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('uv', new Float32BufferAttribute(uvData, 2)); // material\n\n      const texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n      const material = new MeshPhongMaterial({\n        map: texture,\n        flatShading: true\n      }); // mesh\n\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData) {\n      // geometry\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const colorData = [];\n      const vertices = meshData.vertices;\n      const colors = colorgroup.colors;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const v1 = triangleProperty.v1;\n        const v2 = triangleProperty.v2;\n        const v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]); //\n\n        const p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\n        const p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\n        const p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colorData, 3)); // material\n\n      const material = new MeshPhongMaterial({\n        vertexColors: true,\n        flatShading: true\n      }); // mesh\n\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildDefaultMesh(meshData) {\n      const geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData['triangles'], 1));\n      geometry.setAttribute('position', new BufferAttribute(meshData['vertices'], 3));\n      const material = new MeshPhongMaterial({\n        color: 0xaaaaff,\n        flatShading: true\n      });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData) {\n      const keys = Object.keys(resourceMap);\n      const meshes = [];\n      for (let i = 0, il = keys.length; i < il; i++) {\n        const resourceId = keys[i];\n        const triangleProperties = resourceMap[resourceId];\n        const resourceType = getResourceType(resourceId, modelData);\n        switch (resourceType) {\n          case 'material':\n            const basematerials = modelData.resources.basematerials[resourceId];\n            const newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData);\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n            break;\n          case 'texture':\n            const texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData));\n            break;\n          case 'vertexColors':\n            const colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData));\n            break;\n          case 'default':\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n          default:\n            console.error('THREE.3MFLoader: Unsupported resource type.');\n        }\n      }\n      return meshes;\n    }\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== undefined) {\n        return 'texture';\n      } else if (modelData.resources.basematerials[pid] !== undefined) {\n        return 'material';\n      } else if (modelData.resources.colorgroup[pid] !== undefined) {\n        return 'vertexColors';\n      } else if (pid === 'default') {\n        return 'default';\n      } else {\n        return undefined;\n      }\n    }\n    function analyzeObject(modelData, meshData, objectData) {\n      const resourceMap = {};\n      const triangleProperties = meshData['triangleProperties'];\n      const objectPid = objectData.pid;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        let pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n        if (pid === undefined) pid = 'default';\n        if (resourceMap[pid] === undefined) resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n      return resourceMap;\n    }\n    function buildGroup(meshData, objects, modelData, textureData, objectData) {\n      const group = new Group();\n      const resourceMap = analyzeObject(modelData, meshData, objectData);\n      const meshes = buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData);\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n      return group;\n    }\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n      const availableExtensions = [];\n      const keys = Object.keys(extensions);\n      for (let i = 0; i < keys.length; i++) {\n        const ns = keys[i];\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          const extension = scope.availableExtensions[j];\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n      for (let i = 0; i < availableExtensions.length; i++) {\n        const extension = availableExtensions[i];\n        extension.apply(modelXml, extensions[extension['ns']], meshData);\n      }\n    }\n    function getBuild(data, objects, modelData, textureData, objectData, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data, objects, modelData, textureData, objectData);\n      return data.build;\n    }\n    function buildBasematerial(materialData, objects, modelData) {\n      let material;\n      const displaypropertiesid = materialData.displaypropertiesid;\n      const pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n        // metallic display property, use StandardMaterial\n        const pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        const metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        // otherwise use PhongMaterial\n        material = new MeshPhongMaterial({\n          flatShading: true\n        });\n      }\n      material.name = materialData.name; // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n      const displaycolor = materialData.displaycolor;\n      const color = displaycolor.substring(0, 7);\n      material.color.setStyle(color);\n      material.color.convertSRGBToLinear(); // displaycolor is in sRGB\n      // process alpha if set\n\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n      return material;\n    }\n    function buildComposite(compositeData, objects, modelData, textureData) {\n      const composite = new Group();\n      for (let j = 0; j < compositeData.length; j++) {\n        const component = compositeData[j];\n        let build = objects[component.objectId];\n        if (build === undefined) {\n          buildObject(component.objectId, objects, modelData, textureData);\n          build = objects[component.objectId];\n        }\n        const object3D = build.clone(); // apply component transform\n\n        const transform = component.transform;\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n        composite.add(object3D);\n      }\n      return composite;\n    }\n    function buildObject(objectId, objects, modelData, textureData) {\n      const objectData = modelData['resources']['object'][objectId];\n      if (objectData['mesh']) {\n        const meshData = objectData['mesh'];\n        const extensions = modelData['extensions'];\n        const modelXml = modelData['xml'];\n        applyExtensions(extensions, meshData, modelXml);\n        objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n      } else {\n        const compositeData = objectData['components'];\n        objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n      }\n    }\n    function buildObjects(data3mf) {\n      const modelsData = data3mf.model;\n      const modelRels = data3mf.modelRels;\n      const objects = {};\n      const modelsKeys = Object.keys(modelsData);\n      const textureData = {}; // evaluate model relationships to textures\n\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          const modelRel = modelRels[i];\n          const textureKey = modelRel.target.substring(1);\n          if (data3mf.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf.texture[textureKey];\n          }\n        }\n      } // start build\n\n      for (let i = 0; i < modelsKeys.length; i++) {\n        const modelsKey = modelsKeys[i];\n        const modelData = modelsData[modelsKey];\n        const objectIds = Object.keys(modelData['resources']['object']);\n        for (let j = 0; j < objectIds.length; j++) {\n          const objectId = objectIds[j];\n          buildObject(objectId, objects, modelData, textureData);\n        }\n      }\n      return objects;\n    }\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        const rel = rels[i];\n        const extension = rel.target.split('.').pop();\n        if (extension.toLowerCase() === 'model') return rel;\n      }\n    }\n    function build(objects, data3mf) {\n      const group = new Group();\n      const relationship = fetch3DModelPart(data3mf['rels']);\n      const buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n      for (let i = 0; i < buildData.length; i++) {\n        const buildItem = buildData[i];\n        const object3D = objects[buildItem['objectId']]; // apply transform\n\n        const transform = buildItem['transform'];\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n        group.add(object3D);\n      }\n      return group;\n    }\n    const data3mf = loadDocument(data);\n    const objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  }\n  addExtension(extension) {\n    this.availableExtensions.push(extension);\n  }\n}\nexport { ThreeMFLoader };","map":{"version":3,"names":["Loader","FileLoader","TextureLoader","LoaderUtils","Group","Color","Matrix4","BufferGeometry","Float32BufferAttribute","Mesh","MeshPhongMaterial","BufferAttribute","MeshStandardMaterial","sRGBEncoding","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","LinearFilter","LinearMipmapLinearFilter","NearestFilter","unzipSync","ThreeMFLoader","constructor","manager","availableExtensions","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","data","textureLoader","loadDocument","zip","file","relsName","modelRelsName","modelPartNames","texturesPartNames","modelRels","modelParts","printTicketParts","texturesParts","otherParts","Uint8Array","ReferenceError","match","push","relsView","relsFileText","decodeText","rels","parseRelsXml","i","length","modelPart","view","fileText","xmlData","DOMParser","parseFromString","documentElement","nodeName","toLowerCase","modelNode","querySelector","extensions","attributes","attr","name","value","RegExp","$1","modelData","parseModelNode","Object","keys","texturesPartName","model","printTicket","texture","other","relationships","relsXmlData","relsNodes","querySelectorAll","relsNode","relationship","target","getAttribute","id","type","parseMetadataNodes","metadataNodes","metadataData","metadataNode","validNames","indexOf","textContent","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","index","parseTexture2DNode","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","filter","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","colorNode","color","setStyle","substring","convertSRGBToLinear","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","roughness","parseMeshNode","meshNode","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","pid","triangleProperty","parseInt","Uint32Array","parseComponentsNode","componentsNode","components","componentNodes","componentNode","componentData","parseComponentNode","transform","parseTransform","t","split","forEach","s","matrix","set","parseObjectNode","objectNode","objectData","pindex","thumbnail","partnumber","parseResourcesNode","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseBuildNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","unit","buildTexture","texture2dgroup","objects","textureData","texture2ds","resources","texture2d","blob","Blob","sourceURI","URL","createObjectURL","revokeObjectURL","encoding","wrapS","wrapT","magFilter","minFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","undefined","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","positionData","j","jl","setAttribute","mesh","buildTexturedMesh","uvData","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","buildMeshes","resourceMap","il","resourceId","resourceType","getResourceType","newMeshes","analyzeObject","objectPid","buildGroup","group","add","applyExtensions","modelXml","ns","extension","apply","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","buildObject","object3D","clone","applyMatrix4","buildObjects","data3mf","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","fetch3DModelPart","rel","pop","addExtension"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/loaders/3MFLoader.js"],"sourcesContent":["import { Loader, FileLoader, TextureLoader, LoaderUtils, Group, Color, Matrix4, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, MeshStandardMaterial, sRGBEncoding, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nclass ThreeMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.availableExtensions = [];\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    const scope = this;\n    const textureLoader = new TextureLoader(this.manager);\n\n    function loadDocument(data) {\n      let zip = null;\n      let file = null;\n      let relsName;\n      let modelRelsName;\n      const modelPartNames = [];\n      const texturesPartNames = [];\n      let modelRels;\n      const modelParts = {};\n      const printTicketParts = {};\n      const texturesParts = {};\n      const otherParts = {};\n\n      try {\n        zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error('THREE.3MFLoader: fflate missing and file is compressed.');\n          return null;\n        }\n      }\n\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) ; else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        } else if (file.match(/^3D\\/Other\\/.*/)) ;\n      } //\n\n\n      const relsView = zip[relsName];\n      const relsFileText = LoaderUtils.decodeText(relsView);\n      const rels = parseRelsXml(relsFileText); //\n\n      if (modelRelsName) {\n        const relsView = zip[modelRelsName];\n        const relsFileText = LoaderUtils.decodeText(relsView);\n        modelRels = parseRelsXml(relsFileText);\n      } //\n\n\n      for (let i = 0; i < modelPartNames.length; i++) {\n        const modelPart = modelPartNames[i];\n        const view = zip[modelPart];\n        const fileText = LoaderUtils.decodeText(view);\n        const xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n          console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n        }\n\n        const modelNode = xmlData.querySelector('model');\n        const extensions = {};\n\n        for (let i = 0; i < modelNode.attributes.length; i++) {\n          const attr = modelNode.attributes[i];\n\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n\n        const modelData = parseModelNode(modelNode);\n        modelData['xml'] = modelNode;\n\n        if (0 < Object.keys(extensions).length) {\n          modelData['extensions'] = extensions;\n        }\n\n        modelParts[modelPart] = modelData;\n      } //\n\n\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        const texturesPartName = texturesPartNames[i];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n\n      return {\n        rels: rels,\n        modelRels: modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts,\n        other: otherParts\n      };\n    }\n\n    function parseRelsXml(relsFileText) {\n      const relationships = [];\n      const relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n      const relsNodes = relsXmlData.querySelectorAll('Relationship');\n\n      for (let i = 0; i < relsNodes.length; i++) {\n        const relsNode = relsNodes[i];\n        const relationship = {\n          target: relsNode.getAttribute('Target'),\n          //required\n          id: relsNode.getAttribute('Id'),\n          //required\n          type: relsNode.getAttribute('Type') //required\n\n        };\n        relationships.push(relationship);\n      }\n\n      return relationships;\n    }\n\n    function parseMetadataNodes(metadataNodes) {\n      const metadataData = {};\n\n      for (let i = 0; i < metadataNodes.length; i++) {\n        const metadataNode = metadataNodes[i];\n        const name = metadataNode.getAttribute('name');\n        const validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\n\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n\n      return metadataData;\n    }\n\n    function parseBasematerialsNode(basematerialsNode) {\n      const basematerialsData = {\n        id: basematerialsNode.getAttribute('id'),\n        // required\n        basematerials: []\n      };\n      const basematerialNodes = basematerialsNode.querySelectorAll('base');\n\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        const basematerialNode = basematerialNodes[i];\n        const basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\n        basematerialsData.basematerials.push(basematerialData);\n      }\n\n      return basematerialsData;\n    }\n\n    function parseTexture2DNode(texture2DNode) {\n      const texture2dData = {\n        id: texture2DNode.getAttribute('id'),\n        // required\n        path: texture2DNode.getAttribute('path'),\n        // required\n        contenttype: texture2DNode.getAttribute('contenttype'),\n        // required\n        tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n        tilestylev: texture2DNode.getAttribute('tilestylev'),\n        filter: texture2DNode.getAttribute('filter')\n      };\n      return texture2dData;\n    }\n\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      const texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute('id'),\n        // required\n        texid: texture2DGroupNode.getAttribute('texid'),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n      };\n      const tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n      const uvs = [];\n\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        const tex2coordNode = tex2coordNodes[i];\n        const u = tex2coordNode.getAttribute('u');\n        const v = tex2coordNode.getAttribute('v');\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n\n      texture2DGroupData['uvs'] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n\n    function parseColorGroupNode(colorGroupNode) {\n      const colorGroupData = {\n        id: colorGroupNode.getAttribute('id'),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n      };\n      const colorNodes = colorGroupNode.querySelectorAll('color');\n      const colors = [];\n      const colorObject = new Color();\n\n      for (let i = 0; i < colorNodes.length; i++) {\n        const colorNode = colorNodes[i];\n        const color = colorNode.getAttribute('color');\n        colorObject.setStyle(color.substring(0, 7));\n        colorObject.convertSRGBToLinear(); // color is in sRGB\n\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n\n      colorGroupData['colors'] = new Float32Array(colors);\n      return colorGroupData;\n    }\n\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      const metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute('id') // required\n\n      };\n      const metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n      const metallicData = [];\n\n      for (let i = 0; i < metallicNodes.length; i++) {\n        const metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute('name'),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\n\n        });\n      }\n\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n\n    function parseBasematerialNode(basematerialNode) {\n      const basematerialData = {};\n      basematerialData['name'] = basematerialNode.getAttribute('name'); // required\n\n      basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\n\n      basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n      return basematerialData;\n    }\n\n    function parseMeshNode(meshNode) {\n      const meshData = {};\n      const vertices = [];\n      const vertexNodes = meshNode.querySelectorAll('vertices vertex');\n\n      for (let i = 0; i < vertexNodes.length; i++) {\n        const vertexNode = vertexNodes[i];\n        const x = vertexNode.getAttribute('x');\n        const y = vertexNode.getAttribute('y');\n        const z = vertexNode.getAttribute('z');\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n\n      meshData['vertices'] = new Float32Array(vertices);\n      const triangleProperties = [];\n      const triangles = [];\n      const triangleNodes = meshNode.querySelectorAll('triangles triangle');\n\n      for (let i = 0; i < triangleNodes.length; i++) {\n        const triangleNode = triangleNodes[i];\n        const v1 = triangleNode.getAttribute('v1');\n        const v2 = triangleNode.getAttribute('v2');\n        const v3 = triangleNode.getAttribute('v3');\n        const p1 = triangleNode.getAttribute('p1');\n        const p2 = triangleNode.getAttribute('p2');\n        const p3 = triangleNode.getAttribute('p3');\n        const pid = triangleNode.getAttribute('pid');\n        const triangleProperty = {};\n        triangleProperty['v1'] = parseInt(v1, 10);\n        triangleProperty['v2'] = parseInt(v2, 10);\n        triangleProperty['v3'] = parseInt(v3, 10);\n        triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']); // optional\n\n        if (p1) {\n          triangleProperty['p1'] = parseInt(p1, 10);\n        }\n\n        if (p2) {\n          triangleProperty['p2'] = parseInt(p2, 10);\n        }\n\n        if (p3) {\n          triangleProperty['p3'] = parseInt(p3, 10);\n        }\n\n        if (pid) {\n          triangleProperty['pid'] = pid;\n        }\n\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n\n      meshData['triangleProperties'] = triangleProperties;\n      meshData['triangles'] = new Uint32Array(triangles);\n      return meshData;\n    }\n\n    function parseComponentsNode(componentsNode) {\n      const components = [];\n      const componentNodes = componentsNode.querySelectorAll('component');\n\n      for (let i = 0; i < componentNodes.length; i++) {\n        const componentNode = componentNodes[i];\n        const componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n\n      return components;\n    }\n\n    function parseComponentNode(componentNode) {\n      const componentData = {};\n      componentData['objectId'] = componentNode.getAttribute('objectid'); // required\n\n      const transform = componentNode.getAttribute('transform');\n\n      if (transform) {\n        componentData['transform'] = parseTransform(transform);\n      }\n\n      return componentData;\n    }\n\n    function parseTransform(transform) {\n      const t = [];\n      transform.split(' ').forEach(function (s) {\n        t.push(parseFloat(s));\n      });\n      const matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\n      return matrix;\n    }\n\n    function parseObjectNode(objectNode) {\n      const objectData = {\n        type: objectNode.getAttribute('type')\n      };\n      const id = objectNode.getAttribute('id');\n\n      if (id) {\n        objectData['id'] = id;\n      }\n\n      const pid = objectNode.getAttribute('pid');\n\n      if (pid) {\n        objectData['pid'] = pid;\n      }\n\n      const pindex = objectNode.getAttribute('pindex');\n\n      if (pindex) {\n        objectData['pindex'] = pindex;\n      }\n\n      const thumbnail = objectNode.getAttribute('thumbnail');\n\n      if (thumbnail) {\n        objectData['thumbnail'] = thumbnail;\n      }\n\n      const partnumber = objectNode.getAttribute('partnumber');\n\n      if (partnumber) {\n        objectData['partnumber'] = partnumber;\n      }\n\n      const name = objectNode.getAttribute('name');\n\n      if (name) {\n        objectData['name'] = name;\n      }\n\n      const meshNode = objectNode.querySelector('mesh');\n\n      if (meshNode) {\n        objectData['mesh'] = parseMeshNode(meshNode);\n      }\n\n      const componentsNode = objectNode.querySelector('components');\n\n      if (componentsNode) {\n        objectData['components'] = parseComponentsNode(componentsNode);\n      }\n\n      return objectData;\n    }\n\n    function parseResourcesNode(resourcesNode) {\n      const resourcesData = {};\n      resourcesData['basematerials'] = {};\n      const basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        const basematerialsNode = basematerialsNodes[i];\n        const basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n      } //\n\n\n      resourcesData['texture2d'] = {};\n      const textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        const textures2DNode = textures2DNodes[i];\n        const texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n      } //\n\n\n      resourcesData['colorgroup'] = {};\n      const colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        const colorGroupNode = colorGroupNodes[i];\n        const colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n      } //\n\n\n      resourcesData['pbmetallicdisplayproperties'] = {};\n      const pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        const pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n        const pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n      } //\n\n\n      resourcesData['texture2dgroup'] = {};\n      const textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        const textures2DGroupNode = textures2DGroupNodes[i];\n        const textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n      } //\n\n\n      resourcesData['object'] = {};\n      const objectNodes = resourcesNode.querySelectorAll('object');\n\n      for (let i = 0; i < objectNodes.length; i++) {\n        const objectNode = objectNodes[i];\n        const objectData = parseObjectNode(objectNode);\n        resourcesData['object'][objectData['id']] = objectData;\n      }\n\n      return resourcesData;\n    }\n\n    function parseBuildNode(buildNode) {\n      const buildData = [];\n      const itemNodes = buildNode.querySelectorAll('item');\n\n      for (let i = 0; i < itemNodes.length; i++) {\n        const itemNode = itemNodes[i];\n        const buildItem = {\n          objectId: itemNode.getAttribute('objectid')\n        };\n        const transform = itemNode.getAttribute('transform');\n\n        if (transform) {\n          buildItem['transform'] = parseTransform(transform);\n        }\n\n        buildData.push(buildItem);\n      }\n\n      return buildData;\n    }\n\n    function parseModelNode(modelNode) {\n      const modelData = {\n        unit: modelNode.getAttribute('unit') || 'millimeter'\n      };\n      const metadataNodes = modelNode.querySelectorAll('metadata');\n\n      if (metadataNodes) {\n        modelData['metadata'] = parseMetadataNodes(metadataNodes);\n      }\n\n      const resourcesNode = modelNode.querySelector('resources');\n\n      if (resourcesNode) {\n        modelData['resources'] = parseResourcesNode(resourcesNode);\n      }\n\n      const buildNode = modelNode.querySelector('build');\n\n      if (buildNode) {\n        modelData['build'] = parseBuildNode(buildNode);\n      }\n\n      return modelData;\n    }\n\n    function buildTexture(texture2dgroup, objects, modelData, textureData) {\n      const texid = texture2dgroup.texid;\n      const texture2ds = modelData.resources.texture2d;\n      const texture2d = texture2ds[texid];\n\n      if (texture2d) {\n        const data = textureData[texture2d.path];\n        const type = texture2d.contenttype;\n        const blob = new Blob([data], {\n          type: type\n        });\n        const sourceURI = URL.createObjectURL(blob);\n        const texture = textureLoader.load(sourceURI, function () {\n          URL.revokeObjectURL(sourceURI);\n        });\n        texture.encoding = sRGBEncoding; // texture parameters\n\n        switch (texture2d.tilestyleu) {\n          case 'wrap':\n            texture.wrapS = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n\n        switch (texture2d.tilestylev) {\n          case 'wrap':\n            texture.wrapT = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n\n        switch (texture2d.filter) {\n          case 'auto':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n\n          case 'linear':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n\n          case 'nearest':\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n\n        return texture;\n      } else {\n        return null;\n      }\n    }\n\n    function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n      const objectPindex = objectData.pindex;\n      const materialMap = {};\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === undefined) materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      } //\n\n\n      const keys = Object.keys(materialMap);\n      const meshes = [];\n\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const materialIndex = keys[i];\n        const trianglePropertiesProps = materialMap[materialIndex];\n        const basematerialData = basematerials.basematerials[materialIndex];\n        const material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial); //\n\n        const geometry = new BufferGeometry();\n        const positionData = [];\n        const vertices = meshData.vertices;\n\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          const triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3)); //\n\n        const mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n\n      return meshes;\n    }\n\n    function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n      // geometry\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const uvData = [];\n      const vertices = meshData.vertices;\n      const uvs = texture2dgroup.uvs;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]); //\n\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('uv', new Float32BufferAttribute(uvData, 2)); // material\n\n      const texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n      const material = new MeshPhongMaterial({\n        map: texture,\n        flatShading: true\n      }); // mesh\n\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData) {\n      // geometry\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const colorData = [];\n      const vertices = meshData.vertices;\n      const colors = colorgroup.colors;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const v1 = triangleProperty.v1;\n        const v2 = triangleProperty.v2;\n        const v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]); //\n\n        const p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\n        const p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\n        const p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colorData, 3)); // material\n\n      const material = new MeshPhongMaterial({\n        vertexColors: true,\n        flatShading: true\n      }); // mesh\n\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildDefaultMesh(meshData) {\n      const geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData['triangles'], 1));\n      geometry.setAttribute('position', new BufferAttribute(meshData['vertices'], 3));\n      const material = new MeshPhongMaterial({\n        color: 0xaaaaff,\n        flatShading: true\n      });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData) {\n      const keys = Object.keys(resourceMap);\n      const meshes = [];\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        const resourceId = keys[i];\n        const triangleProperties = resourceMap[resourceId];\n        const resourceType = getResourceType(resourceId, modelData);\n\n        switch (resourceType) {\n          case 'material':\n            const basematerials = modelData.resources.basematerials[resourceId];\n            const newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData);\n\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n\n            break;\n\n          case 'texture':\n            const texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData));\n            break;\n\n          case 'vertexColors':\n            const colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData));\n            break;\n\n          case 'default':\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n\n          default:\n            console.error('THREE.3MFLoader: Unsupported resource type.');\n        }\n      }\n\n      return meshes;\n    }\n\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== undefined) {\n        return 'texture';\n      } else if (modelData.resources.basematerials[pid] !== undefined) {\n        return 'material';\n      } else if (modelData.resources.colorgroup[pid] !== undefined) {\n        return 'vertexColors';\n      } else if (pid === 'default') {\n        return 'default';\n      } else {\n        return undefined;\n      }\n    }\n\n    function analyzeObject(modelData, meshData, objectData) {\n      const resourceMap = {};\n      const triangleProperties = meshData['triangleProperties'];\n      const objectPid = objectData.pid;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        let pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n        if (pid === undefined) pid = 'default';\n        if (resourceMap[pid] === undefined) resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n\n      return resourceMap;\n    }\n\n    function buildGroup(meshData, objects, modelData, textureData, objectData) {\n      const group = new Group();\n      const resourceMap = analyzeObject(modelData, meshData, objectData);\n      const meshes = buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData);\n\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n\n      return group;\n    }\n\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n\n      const availableExtensions = [];\n      const keys = Object.keys(extensions);\n\n      for (let i = 0; i < keys.length; i++) {\n        const ns = keys[i];\n\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          const extension = scope.availableExtensions[j];\n\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n\n      for (let i = 0; i < availableExtensions.length; i++) {\n        const extension = availableExtensions[i];\n        extension.apply(modelXml, extensions[extension['ns']], meshData);\n      }\n    }\n\n    function getBuild(data, objects, modelData, textureData, objectData, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data, objects, modelData, textureData, objectData);\n      return data.build;\n    }\n\n    function buildBasematerial(materialData, objects, modelData) {\n      let material;\n      const displaypropertiesid = materialData.displaypropertiesid;\n      const pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n        // metallic display property, use StandardMaterial\n        const pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        const metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        // otherwise use PhongMaterial\n        material = new MeshPhongMaterial({\n          flatShading: true\n        });\n      }\n\n      material.name = materialData.name; // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n      const displaycolor = materialData.displaycolor;\n      const color = displaycolor.substring(0, 7);\n      material.color.setStyle(color);\n      material.color.convertSRGBToLinear(); // displaycolor is in sRGB\n      // process alpha if set\n\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n\n      return material;\n    }\n\n    function buildComposite(compositeData, objects, modelData, textureData) {\n      const composite = new Group();\n\n      for (let j = 0; j < compositeData.length; j++) {\n        const component = compositeData[j];\n        let build = objects[component.objectId];\n\n        if (build === undefined) {\n          buildObject(component.objectId, objects, modelData, textureData);\n          build = objects[component.objectId];\n        }\n\n        const object3D = build.clone(); // apply component transform\n\n        const transform = component.transform;\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        composite.add(object3D);\n      }\n\n      return composite;\n    }\n\n    function buildObject(objectId, objects, modelData, textureData) {\n      const objectData = modelData['resources']['object'][objectId];\n\n      if (objectData['mesh']) {\n        const meshData = objectData['mesh'];\n        const extensions = modelData['extensions'];\n        const modelXml = modelData['xml'];\n        applyExtensions(extensions, meshData, modelXml);\n        objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n      } else {\n        const compositeData = objectData['components'];\n        objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n      }\n    }\n\n    function buildObjects(data3mf) {\n      const modelsData = data3mf.model;\n      const modelRels = data3mf.modelRels;\n      const objects = {};\n      const modelsKeys = Object.keys(modelsData);\n      const textureData = {}; // evaluate model relationships to textures\n\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          const modelRel = modelRels[i];\n          const textureKey = modelRel.target.substring(1);\n\n          if (data3mf.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf.texture[textureKey];\n          }\n        }\n      } // start build\n\n\n      for (let i = 0; i < modelsKeys.length; i++) {\n        const modelsKey = modelsKeys[i];\n        const modelData = modelsData[modelsKey];\n        const objectIds = Object.keys(modelData['resources']['object']);\n\n        for (let j = 0; j < objectIds.length; j++) {\n          const objectId = objectIds[j];\n          buildObject(objectId, objects, modelData, textureData);\n        }\n      }\n\n      return objects;\n    }\n\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        const rel = rels[i];\n        const extension = rel.target.split('.').pop();\n        if (extension.toLowerCase() === 'model') return rel;\n      }\n    }\n\n    function build(objects, data3mf) {\n      const group = new Group();\n      const relationship = fetch3DModelPart(data3mf['rels']);\n      const buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n\n      for (let i = 0; i < buildData.length; i++) {\n        const buildItem = buildData[i];\n        const object3D = objects[buildItem['objectId']]; // apply transform\n\n        const transform = buildItem['transform'];\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        group.add(object3D);\n      }\n\n      return group;\n    }\n\n    const data3mf = loadDocument(data);\n    const objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  }\n\n  addExtension(extension) {\n    this.availableExtensions.push(extension);\n  }\n\n}\n\nexport { ThreeMFLoader };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,UAAU,EAAEC,aAAa,EAAEC,WAAW,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,cAAc,EAAEC,sBAAsB,EAAEC,IAAI,EAAEC,iBAAiB,EAAEC,eAAe,EAAEC,oBAAoB,EAAEC,YAAY,EAAEC,cAAc,EAAEC,mBAAmB,EAAEC,sBAAsB,EAAEC,YAAY,EAAEC,wBAAwB,EAAEC,aAAa,QAAQ,OAAO;AACvU,SAASC,SAAS,QAAQ,QAAQ;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,aAAa,SAASrB,MAAM,CAAC;EACjCsB,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACC,mBAAmB,GAAG,EAAE;EAC/B;EAEAC,IAAIA,CAACC,GAAG,EAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAE;IACrC,MAAMC,KAAK,GAAG,IAAI;IAClB,MAAMC,MAAM,GAAG,IAAI9B,UAAU,CAAC6B,KAAK,CAACP,OAAO,CAAC;IAC5CQ,MAAM,CAACC,OAAO,CAACF,KAAK,CAACG,IAAI,CAAC;IAC1BF,MAAM,CAACG,eAAe,CAAC,aAAa,CAAC;IACrCH,MAAM,CAACI,gBAAgB,CAACL,KAAK,CAACM,aAAa,CAAC;IAC5CL,MAAM,CAACM,kBAAkB,CAACP,KAAK,CAACQ,eAAe,CAAC;IAChDP,MAAM,CAACN,IAAI,CAACC,GAAG,EAAE,UAAUa,MAAM,EAAE;MACjC,IAAI;QACFZ,MAAM,CAACG,KAAK,CAACU,KAAK,CAACD,MAAM,CAAC,CAAC;MAC7B,CAAC,CAAC,OAAOE,CAAC,EAAE;QACV,IAAIZ,OAAO,EAAE;UACXA,OAAO,CAACY,CAAC,CAAC;QACZ,CAAC,MAAM;UACLC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;QAClB;QAEAX,KAAK,CAACP,OAAO,CAACqB,SAAS,CAAClB,GAAG,CAAC;MAC9B;IACF,CAAC,EAAEE,UAAU,EAAEC,OAAO,CAAC;EACzB;EAEAW,KAAKA,CAACK,IAAI,EAAE;IACV,MAAMf,KAAK,GAAG,IAAI;IAClB,MAAMgB,aAAa,GAAG,IAAI5C,aAAa,CAAC,IAAI,CAACqB,OAAO,CAAC;IAErD,SAASwB,YAAYA,CAACF,IAAI,EAAE;MAC1B,IAAIG,GAAG,GAAG,IAAI;MACd,IAAIC,IAAI,GAAG,IAAI;MACf,IAAIC,QAAQ;MACZ,IAAIC,aAAa;MACjB,MAAMC,cAAc,GAAG,EAAE;MACzB,MAAMC,iBAAiB,GAAG,EAAE;MAC5B,IAAIC,SAAS;MACb,MAAMC,UAAU,GAAG,CAAC,CAAC;MACrB,MAAMC,gBAAgB,GAAG,CAAC,CAAC;MAC3B,MAAMC,aAAa,GAAG,CAAC,CAAC;MACxB,MAAMC,UAAU,GAAG,CAAC,CAAC;MAErB,IAAI;QACFV,GAAG,GAAG5B,SAAS,CAAC,IAAIuC,UAAU,CAACd,IAAI,CAAC,CAAC,CAAC,CAAC;MACzC,CAAC,CAAC,OAAOJ,CAAC,EAAE;QACV,IAAIA,CAAC,YAAYmB,cAAc,EAAE;UAC/BlB,OAAO,CAACC,KAAK,CAAC,yDAAyD,CAAC;UACxE,OAAO,IAAI;QACb;MACF;MAEA,KAAKM,IAAI,IAAID,GAAG,EAAE;QAChB,IAAIC,IAAI,CAACY,KAAK,CAAC,gBAAgB,CAAC,EAAE;UAChCX,QAAQ,GAAGD,IAAI;QACjB,CAAC,MAAM,IAAIA,IAAI,CAACY,KAAK,CAAC,6BAA6B,CAAC,EAAE;UACpDV,aAAa,GAAGF,IAAI;QACtB,CAAC,MAAM,IAAIA,IAAI,CAACY,KAAK,CAAC,iBAAiB,CAAC,EAAE;UACxCT,cAAc,CAACU,IAAI,CAACb,IAAI,CAAC;QAC3B,CAAC,MAAM,IAAIA,IAAI,CAACY,KAAK,CAAC,yBAAyB,CAAC,EAAE,CAAC,KAAM,IAAIZ,IAAI,CAACY,KAAK,CAAC,oBAAoB,CAAC,EAAE;UAC7FR,iBAAiB,CAACS,IAAI,CAACb,IAAI,CAAC;QAC9B,CAAC,MAAM,IAAIA,IAAI,CAACY,KAAK,CAAC,gBAAgB,CAAC,EAAE;MAC3C,CAAC,CAAC;;MAGF,MAAME,QAAQ,GAAGf,GAAG,CAACE,QAAQ,CAAC;MAC9B,MAAMc,YAAY,GAAG7D,WAAW,CAAC8D,UAAU,CAACF,QAAQ,CAAC;MACrD,MAAMG,IAAI,GAAGC,YAAY,CAACH,YAAY,CAAC,CAAC,CAAC;;MAEzC,IAAIb,aAAa,EAAE;QACjB,MAAMY,QAAQ,GAAGf,GAAG,CAACG,aAAa,CAAC;QACnC,MAAMa,YAAY,GAAG7D,WAAW,CAAC8D,UAAU,CAACF,QAAQ,CAAC;QACrDT,SAAS,GAAGa,YAAY,CAACH,YAAY,CAAC;MACxC,CAAC,CAAC;;MAGF,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,cAAc,CAACiB,MAAM,EAAED,CAAC,EAAE,EAAE;QAC9C,MAAME,SAAS,GAAGlB,cAAc,CAACgB,CAAC,CAAC;QACnC,MAAMG,IAAI,GAAGvB,GAAG,CAACsB,SAAS,CAAC;QAC3B,MAAME,QAAQ,GAAGrE,WAAW,CAAC8D,UAAU,CAACM,IAAI,CAAC;QAC7C,MAAME,OAAO,GAAG,IAAIC,SAAS,EAAE,CAACC,eAAe,CAACH,QAAQ,EAAE,iBAAiB,CAAC;QAE5E,IAAIC,OAAO,CAACG,eAAe,CAACC,QAAQ,CAACC,WAAW,EAAE,KAAK,OAAO,EAAE;UAC9DpC,OAAO,CAACC,KAAK,CAAC,8DAA8D,EAAE2B,SAAS,CAAC;QAC1F;QAEA,MAAMS,SAAS,GAAGN,OAAO,CAACO,aAAa,CAAC,OAAO,CAAC;QAChD,MAAMC,UAAU,GAAG,CAAC,CAAC;QAErB,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGW,SAAS,CAACG,UAAU,CAACb,MAAM,EAAED,CAAC,EAAE,EAAE;UACpD,MAAMe,IAAI,GAAGJ,SAAS,CAACG,UAAU,CAACd,CAAC,CAAC;UAEpC,IAAIe,IAAI,CAACC,IAAI,CAACvB,KAAK,CAAC,cAAc,CAAC,EAAE;YACnCoB,UAAU,CAACE,IAAI,CAACE,KAAK,CAAC,GAAGC,MAAM,CAACC,EAAE;UACpC;QACF;QAEA,MAAMC,SAAS,GAAGC,cAAc,CAACV,SAAS,CAAC;QAC3CS,SAAS,CAAC,KAAK,CAAC,GAAGT,SAAS;QAE5B,IAAI,CAAC,GAAGW,MAAM,CAACC,IAAI,CAACV,UAAU,CAAC,CAACZ,MAAM,EAAE;UACtCmB,SAAS,CAAC,YAAY,CAAC,GAAGP,UAAU;QACtC;QAEA1B,UAAU,CAACe,SAAS,CAAC,GAAGkB,SAAS;MACnC,CAAC,CAAC;;MAGF,KAAK,IAAIpB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,iBAAiB,CAACgB,MAAM,EAAED,CAAC,EAAE,EAAE;QACjD,MAAMwB,gBAAgB,GAAGvC,iBAAiB,CAACe,CAAC,CAAC;QAC7CX,aAAa,CAACmC,gBAAgB,CAAC,GAAG5C,GAAG,CAAC4C,gBAAgB,CAAC,CAACrD,MAAM;MAChE;MAEA,OAAO;QACL2B,IAAI,EAAEA,IAAI;QACVZ,SAAS,EAAEA,SAAS;QACpBuC,KAAK,EAAEtC,UAAU;QACjBuC,WAAW,EAAEtC,gBAAgB;QAC7BuC,OAAO,EAAEtC,aAAa;QACtBuC,KAAK,EAAEtC;MACT,CAAC;IACH;IAEA,SAASS,YAAYA,CAACH,YAAY,EAAE;MAClC,MAAMiC,aAAa,GAAG,EAAE;MACxB,MAAMC,WAAW,GAAG,IAAIxB,SAAS,EAAE,CAACC,eAAe,CAACX,YAAY,EAAE,iBAAiB,CAAC;MACpF,MAAMmC,SAAS,GAAGD,WAAW,CAACE,gBAAgB,CAAC,cAAc,CAAC;MAE9D,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,SAAS,CAAC9B,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC,MAAMiC,QAAQ,GAAGF,SAAS,CAAC/B,CAAC,CAAC;QAC7B,MAAMkC,YAAY,GAAG;UACnBC,MAAM,EAAEF,QAAQ,CAACG,YAAY,CAAC,QAAQ,CAAC;UACvC;UACAC,EAAE,EAAEJ,QAAQ,CAACG,YAAY,CAAC,IAAI,CAAC;UAC/B;UACAE,IAAI,EAAEL,QAAQ,CAACG,YAAY,CAAC,MAAM,CAAC,CAAC;QAEtC,CAAC;;QACDP,aAAa,CAACnC,IAAI,CAACwC,YAAY,CAAC;MAClC;MAEA,OAAOL,aAAa;IACtB;IAEA,SAASU,kBAAkBA,CAACC,aAAa,EAAE;MACzC,MAAMC,YAAY,GAAG,CAAC,CAAC;MAEvB,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwC,aAAa,CAACvC,MAAM,EAAED,CAAC,EAAE,EAAE;QAC7C,MAAM0C,YAAY,GAAGF,aAAa,CAACxC,CAAC,CAAC;QACrC,MAAMgB,IAAI,GAAG0B,YAAY,CAACN,YAAY,CAAC,MAAM,CAAC;QAC9C,MAAMO,UAAU,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,WAAW,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,kBAAkB,CAAC;QAElI,IAAI,CAAC,IAAIA,UAAU,CAACC,OAAO,CAAC5B,IAAI,CAAC,EAAE;UACjCyB,YAAY,CAACzB,IAAI,CAAC,GAAG0B,YAAY,CAACG,WAAW;QAC/C;MACF;MAEA,OAAOJ,YAAY;IACrB;IAEA,SAASK,sBAAsBA,CAACC,iBAAiB,EAAE;MACjD,MAAMC,iBAAiB,GAAG;QACxBX,EAAE,EAAEU,iBAAiB,CAACX,YAAY,CAAC,IAAI,CAAC;QACxC;QACAa,aAAa,EAAE;MACjB,CAAC;MACD,MAAMC,iBAAiB,GAAGH,iBAAiB,CAACf,gBAAgB,CAAC,MAAM,CAAC;MAEpE,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkD,iBAAiB,CAACjD,MAAM,EAAED,CAAC,EAAE,EAAE;QACjD,MAAMmD,gBAAgB,GAAGD,iBAAiB,CAAClD,CAAC,CAAC;QAC7C,MAAMoD,gBAAgB,GAAGC,qBAAqB,CAACF,gBAAgB,CAAC;QAChEC,gBAAgB,CAACE,KAAK,GAAGtD,CAAC,CAAC,CAAC;;QAE5BgD,iBAAiB,CAACC,aAAa,CAACvD,IAAI,CAAC0D,gBAAgB,CAAC;MACxD;MAEA,OAAOJ,iBAAiB;IAC1B;IAEA,SAASO,kBAAkBA,CAACC,aAAa,EAAE;MACzC,MAAMC,aAAa,GAAG;QACpBpB,EAAE,EAAEmB,aAAa,CAACpB,YAAY,CAAC,IAAI,CAAC;QACpC;QACAvE,IAAI,EAAE2F,aAAa,CAACpB,YAAY,CAAC,MAAM,CAAC;QACxC;QACAsB,WAAW,EAAEF,aAAa,CAACpB,YAAY,CAAC,aAAa,CAAC;QACtD;QACAuB,UAAU,EAAEH,aAAa,CAACpB,YAAY,CAAC,YAAY,CAAC;QACpDwB,UAAU,EAAEJ,aAAa,CAACpB,YAAY,CAAC,YAAY,CAAC;QACpDyB,MAAM,EAAEL,aAAa,CAACpB,YAAY,CAAC,QAAQ;MAC7C,CAAC;MACD,OAAOqB,aAAa;IACtB;IAEA,SAASK,wBAAwBA,CAACC,kBAAkB,EAAE;MACpD,MAAMC,kBAAkB,GAAG;QACzB3B,EAAE,EAAE0B,kBAAkB,CAAC3B,YAAY,CAAC,IAAI,CAAC;QACzC;QACA6B,KAAK,EAAEF,kBAAkB,CAAC3B,YAAY,CAAC,OAAO,CAAC;QAC/C;QACA8B,mBAAmB,EAAEH,kBAAkB,CAAC3B,YAAY,CAAC,qBAAqB;MAC5E,CAAC;MACD,MAAM+B,cAAc,GAAGJ,kBAAkB,CAAC/B,gBAAgB,CAAC,WAAW,CAAC;MACvE,MAAMoC,GAAG,GAAG,EAAE;MAEd,KAAK,IAAIpE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmE,cAAc,CAAClE,MAAM,EAAED,CAAC,EAAE,EAAE;QAC9C,MAAMqE,aAAa,GAAGF,cAAc,CAACnE,CAAC,CAAC;QACvC,MAAMsE,CAAC,GAAGD,aAAa,CAACjC,YAAY,CAAC,GAAG,CAAC;QACzC,MAAMmC,CAAC,GAAGF,aAAa,CAACjC,YAAY,CAAC,GAAG,CAAC;QACzCgC,GAAG,CAAC1E,IAAI,CAAC8E,UAAU,CAACF,CAAC,CAAC,EAAEE,UAAU,CAACD,CAAC,CAAC,CAAC;MACxC;MAEAP,kBAAkB,CAAC,KAAK,CAAC,GAAG,IAAIS,YAAY,CAACL,GAAG,CAAC;MACjD,OAAOJ,kBAAkB;IAC3B;IAEA,SAASU,mBAAmBA,CAACC,cAAc,EAAE;MAC3C,MAAMC,cAAc,GAAG;QACrBvC,EAAE,EAAEsC,cAAc,CAACvC,YAAY,CAAC,IAAI,CAAC;QACrC;QACA8B,mBAAmB,EAAES,cAAc,CAACvC,YAAY,CAAC,qBAAqB;MACxE,CAAC;MACD,MAAMyC,UAAU,GAAGF,cAAc,CAAC3C,gBAAgB,CAAC,OAAO,CAAC;MAC3D,MAAM8C,MAAM,GAAG,EAAE;MACjB,MAAMC,WAAW,GAAG,IAAI9I,KAAK,EAAE;MAE/B,KAAK,IAAI+D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6E,UAAU,CAAC5E,MAAM,EAAED,CAAC,EAAE,EAAE;QAC1C,MAAMgF,SAAS,GAAGH,UAAU,CAAC7E,CAAC,CAAC;QAC/B,MAAMiF,KAAK,GAAGD,SAAS,CAAC5C,YAAY,CAAC,OAAO,CAAC;QAC7C2C,WAAW,CAACG,QAAQ,CAACD,KAAK,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3CJ,WAAW,CAACK,mBAAmB,EAAE,CAAC,CAAC;;QAEnCN,MAAM,CAACpF,IAAI,CAACqF,WAAW,CAACM,CAAC,EAAEN,WAAW,CAACO,CAAC,EAAEP,WAAW,CAACQ,CAAC,CAAC;MAC1D;MAEAX,cAAc,CAAC,QAAQ,CAAC,GAAG,IAAIH,YAAY,CAACK,MAAM,CAAC;MACnD,OAAOF,cAAc;IACvB;IAEA,SAASY,kCAAkCA,CAACC,4BAA4B,EAAE;MACxE,MAAMC,6BAA6B,GAAG;QACpCrD,EAAE,EAAEoD,4BAA4B,CAACrD,YAAY,CAAC,IAAI,CAAC,CAAC;MAEtD,CAAC;;MACD,MAAMuD,aAAa,GAAGF,4BAA4B,CAACzD,gBAAgB,CAAC,YAAY,CAAC;MACjF,MAAM4D,YAAY,GAAG,EAAE;MAEvB,KAAK,IAAI5F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2F,aAAa,CAAC1F,MAAM,EAAED,CAAC,EAAE,EAAE;QAC7C,MAAM6F,YAAY,GAAGF,aAAa,CAAC3F,CAAC,CAAC;QACrC4F,YAAY,CAAClG,IAAI,CAAC;UAChBsB,IAAI,EAAE6E,YAAY,CAACzD,YAAY,CAAC,MAAM,CAAC;UACvC;UACA0D,YAAY,EAAEtB,UAAU,CAACqB,YAAY,CAACzD,YAAY,CAAC,cAAc,CAAC,CAAC;UACnE;UACA2D,SAAS,EAAEvB,UAAU,CAACqB,YAAY,CAACzD,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC;QAEhE,CAAC,CAAC;MACJ;;MAEAsD,6BAA6B,CAACjH,IAAI,GAAGmH,YAAY;MACjD,OAAOF,6BAA6B;IACtC;IAEA,SAASrC,qBAAqBA,CAACF,gBAAgB,EAAE;MAC/C,MAAMC,gBAAgB,GAAG,CAAC,CAAC;MAC3BA,gBAAgB,CAAC,MAAM,CAAC,GAAGD,gBAAgB,CAACf,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;;MAElEgB,gBAAgB,CAAC,cAAc,CAAC,GAAGD,gBAAgB,CAACf,YAAY,CAAC,cAAc,CAAC,CAAC,CAAC;;MAElFgB,gBAAgB,CAAC,qBAAqB,CAAC,GAAGD,gBAAgB,CAACf,YAAY,CAAC,qBAAqB,CAAC;MAC9F,OAAOgB,gBAAgB;IACzB;IAEA,SAAS4C,aAAaA,CAACC,QAAQ,EAAE;MAC/B,MAAMC,QAAQ,GAAG,CAAC,CAAC;MACnB,MAAMC,QAAQ,GAAG,EAAE;MACnB,MAAMC,WAAW,GAAGH,QAAQ,CAACjE,gBAAgB,CAAC,iBAAiB,CAAC;MAEhE,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoG,WAAW,CAACnG,MAAM,EAAED,CAAC,EAAE,EAAE;QAC3C,MAAMqG,UAAU,GAAGD,WAAW,CAACpG,CAAC,CAAC;QACjC,MAAMsG,CAAC,GAAGD,UAAU,CAACjE,YAAY,CAAC,GAAG,CAAC;QACtC,MAAMmE,CAAC,GAAGF,UAAU,CAACjE,YAAY,CAAC,GAAG,CAAC;QACtC,MAAMoE,CAAC,GAAGH,UAAU,CAACjE,YAAY,CAAC,GAAG,CAAC;QACtC+D,QAAQ,CAACzG,IAAI,CAAC8E,UAAU,CAAC8B,CAAC,CAAC,EAAE9B,UAAU,CAAC+B,CAAC,CAAC,EAAE/B,UAAU,CAACgC,CAAC,CAAC,CAAC;MAC5D;MAEAN,QAAQ,CAAC,UAAU,CAAC,GAAG,IAAIzB,YAAY,CAAC0B,QAAQ,CAAC;MACjD,MAAMM,kBAAkB,GAAG,EAAE;MAC7B,MAAMC,SAAS,GAAG,EAAE;MACpB,MAAMC,aAAa,GAAGV,QAAQ,CAACjE,gBAAgB,CAAC,oBAAoB,CAAC;MAErE,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2G,aAAa,CAAC1G,MAAM,EAAED,CAAC,EAAE,EAAE;QAC7C,MAAM4G,YAAY,GAAGD,aAAa,CAAC3G,CAAC,CAAC;QACrC,MAAM6G,EAAE,GAAGD,YAAY,CAACxE,YAAY,CAAC,IAAI,CAAC;QAC1C,MAAM0E,EAAE,GAAGF,YAAY,CAACxE,YAAY,CAAC,IAAI,CAAC;QAC1C,MAAM2E,EAAE,GAAGH,YAAY,CAACxE,YAAY,CAAC,IAAI,CAAC;QAC1C,MAAM4E,EAAE,GAAGJ,YAAY,CAACxE,YAAY,CAAC,IAAI,CAAC;QAC1C,MAAM6E,EAAE,GAAGL,YAAY,CAACxE,YAAY,CAAC,IAAI,CAAC;QAC1C,MAAM8E,EAAE,GAAGN,YAAY,CAACxE,YAAY,CAAC,IAAI,CAAC;QAC1C,MAAM+E,GAAG,GAAGP,YAAY,CAACxE,YAAY,CAAC,KAAK,CAAC;QAC5C,MAAMgF,gBAAgB,GAAG,CAAC,CAAC;QAC3BA,gBAAgB,CAAC,IAAI,CAAC,GAAGC,QAAQ,CAACR,EAAE,EAAE,EAAE,CAAC;QACzCO,gBAAgB,CAAC,IAAI,CAAC,GAAGC,QAAQ,CAACP,EAAE,EAAE,EAAE,CAAC;QACzCM,gBAAgB,CAAC,IAAI,CAAC,GAAGC,QAAQ,CAACN,EAAE,EAAE,EAAE,CAAC;QACzCL,SAAS,CAAChH,IAAI,CAAC0H,gBAAgB,CAAC,IAAI,CAAC,EAAEA,gBAAgB,CAAC,IAAI,CAAC,EAAEA,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;QAExF,IAAIJ,EAAE,EAAE;UACNI,gBAAgB,CAAC,IAAI,CAAC,GAAGC,QAAQ,CAACL,EAAE,EAAE,EAAE,CAAC;QAC3C;QAEA,IAAIC,EAAE,EAAE;UACNG,gBAAgB,CAAC,IAAI,CAAC,GAAGC,QAAQ,CAACJ,EAAE,EAAE,EAAE,CAAC;QAC3C;QAEA,IAAIC,EAAE,EAAE;UACNE,gBAAgB,CAAC,IAAI,CAAC,GAAGC,QAAQ,CAACH,EAAE,EAAE,EAAE,CAAC;QAC3C;QAEA,IAAIC,GAAG,EAAE;UACPC,gBAAgB,CAAC,KAAK,CAAC,GAAGD,GAAG;QAC/B;QAEA,IAAI,CAAC,GAAG7F,MAAM,CAACC,IAAI,CAAC6F,gBAAgB,CAAC,CAACnH,MAAM,EAAE;UAC5CwG,kBAAkB,CAAC/G,IAAI,CAAC0H,gBAAgB,CAAC;QAC3C;MACF;MAEAlB,QAAQ,CAAC,oBAAoB,CAAC,GAAGO,kBAAkB;MACnDP,QAAQ,CAAC,WAAW,CAAC,GAAG,IAAIoB,WAAW,CAACZ,SAAS,CAAC;MAClD,OAAOR,QAAQ;IACjB;IAEA,SAASqB,mBAAmBA,CAACC,cAAc,EAAE;MAC3C,MAAMC,UAAU,GAAG,EAAE;MACrB,MAAMC,cAAc,GAAGF,cAAc,CAACxF,gBAAgB,CAAC,WAAW,CAAC;MAEnE,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0H,cAAc,CAACzH,MAAM,EAAED,CAAC,EAAE,EAAE;QAC9C,MAAM2H,aAAa,GAAGD,cAAc,CAAC1H,CAAC,CAAC;QACvC,MAAM4H,aAAa,GAAGC,kBAAkB,CAACF,aAAa,CAAC;QACvDF,UAAU,CAAC/H,IAAI,CAACkI,aAAa,CAAC;MAChC;MAEA,OAAOH,UAAU;IACnB;IAEA,SAASI,kBAAkBA,CAACF,aAAa,EAAE;MACzC,MAAMC,aAAa,GAAG,CAAC,CAAC;MACxBA,aAAa,CAAC,UAAU,CAAC,GAAGD,aAAa,CAACvF,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;;MAEpE,MAAM0F,SAAS,GAAGH,aAAa,CAACvF,YAAY,CAAC,WAAW,CAAC;MAEzD,IAAI0F,SAAS,EAAE;QACbF,aAAa,CAAC,WAAW,CAAC,GAAGG,cAAc,CAACD,SAAS,CAAC;MACxD;MAEA,OAAOF,aAAa;IACtB;IAEA,SAASG,cAAcA,CAACD,SAAS,EAAE;MACjC,MAAME,CAAC,GAAG,EAAE;MACZF,SAAS,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,UAAUC,CAAC,EAAE;QACxCH,CAAC,CAACtI,IAAI,CAAC8E,UAAU,CAAC2D,CAAC,CAAC,CAAC;MACvB,CAAC,CAAC;MACF,MAAMC,MAAM,GAAG,IAAIlM,OAAO,EAAE;MAC5BkM,MAAM,CAACC,GAAG,CAACL,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,EAAE,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;MACxG,OAAOI,MAAM;IACf;IAEA,SAASE,eAAeA,CAACC,UAAU,EAAE;MACnC,MAAMC,UAAU,GAAG;QACjBlG,IAAI,EAAEiG,UAAU,CAACnG,YAAY,CAAC,MAAM;MACtC,CAAC;MACD,MAAMC,EAAE,GAAGkG,UAAU,CAACnG,YAAY,CAAC,IAAI,CAAC;MAExC,IAAIC,EAAE,EAAE;QACNmG,UAAU,CAAC,IAAI,CAAC,GAAGnG,EAAE;MACvB;MAEA,MAAM8E,GAAG,GAAGoB,UAAU,CAACnG,YAAY,CAAC,KAAK,CAAC;MAE1C,IAAI+E,GAAG,EAAE;QACPqB,UAAU,CAAC,KAAK,CAAC,GAAGrB,GAAG;MACzB;MAEA,MAAMsB,MAAM,GAAGF,UAAU,CAACnG,YAAY,CAAC,QAAQ,CAAC;MAEhD,IAAIqG,MAAM,EAAE;QACVD,UAAU,CAAC,QAAQ,CAAC,GAAGC,MAAM;MAC/B;MAEA,MAAMC,SAAS,GAAGH,UAAU,CAACnG,YAAY,CAAC,WAAW,CAAC;MAEtD,IAAIsG,SAAS,EAAE;QACbF,UAAU,CAAC,WAAW,CAAC,GAAGE,SAAS;MACrC;MAEA,MAAMC,UAAU,GAAGJ,UAAU,CAACnG,YAAY,CAAC,YAAY,CAAC;MAExD,IAAIuG,UAAU,EAAE;QACdH,UAAU,CAAC,YAAY,CAAC,GAAGG,UAAU;MACvC;MAEA,MAAM3H,IAAI,GAAGuH,UAAU,CAACnG,YAAY,CAAC,MAAM,CAAC;MAE5C,IAAIpB,IAAI,EAAE;QACRwH,UAAU,CAAC,MAAM,CAAC,GAAGxH,IAAI;MAC3B;MAEA,MAAMiF,QAAQ,GAAGsC,UAAU,CAAC3H,aAAa,CAAC,MAAM,CAAC;MAEjD,IAAIqF,QAAQ,EAAE;QACZuC,UAAU,CAAC,MAAM,CAAC,GAAGxC,aAAa,CAACC,QAAQ,CAAC;MAC9C;MAEA,MAAMuB,cAAc,GAAGe,UAAU,CAAC3H,aAAa,CAAC,YAAY,CAAC;MAE7D,IAAI4G,cAAc,EAAE;QAClBgB,UAAU,CAAC,YAAY,CAAC,GAAGjB,mBAAmB,CAACC,cAAc,CAAC;MAChE;MAEA,OAAOgB,UAAU;IACnB;IAEA,SAASI,kBAAkBA,CAACC,aAAa,EAAE;MACzC,MAAMC,aAAa,GAAG,CAAC,CAAC;MACxBA,aAAa,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;MACnC,MAAMC,kBAAkB,GAAGF,aAAa,CAAC7G,gBAAgB,CAAC,eAAe,CAAC;MAE1E,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+I,kBAAkB,CAAC9I,MAAM,EAAED,CAAC,EAAE,EAAE;QAClD,MAAM+C,iBAAiB,GAAGgG,kBAAkB,CAAC/I,CAAC,CAAC;QAC/C,MAAMgD,iBAAiB,GAAGF,sBAAsB,CAACC,iBAAiB,CAAC;QACnE+F,aAAa,CAAC,eAAe,CAAC,CAAC9F,iBAAiB,CAAC,IAAI,CAAC,CAAC,GAAGA,iBAAiB;MAC7E,CAAC,CAAC;;MAGF8F,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;MAC/B,MAAME,eAAe,GAAGH,aAAa,CAAC7G,gBAAgB,CAAC,WAAW,CAAC;MAEnE,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgJ,eAAe,CAAC/I,MAAM,EAAED,CAAC,EAAE,EAAE;QAC/C,MAAMiJ,cAAc,GAAGD,eAAe,CAAChJ,CAAC,CAAC;QACzC,MAAMkJ,aAAa,GAAG3F,kBAAkB,CAAC0F,cAAc,CAAC;QACxDH,aAAa,CAAC,WAAW,CAAC,CAACI,aAAa,CAAC,IAAI,CAAC,CAAC,GAAGA,aAAa;MACjE,CAAC,CAAC;;MAGFJ,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;MAChC,MAAMK,eAAe,GAAGN,aAAa,CAAC7G,gBAAgB,CAAC,YAAY,CAAC;MAEpE,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmJ,eAAe,CAAClJ,MAAM,EAAED,CAAC,EAAE,EAAE;QAC/C,MAAM2E,cAAc,GAAGwE,eAAe,CAACnJ,CAAC,CAAC;QACzC,MAAM4E,cAAc,GAAGF,mBAAmB,CAACC,cAAc,CAAC;QAC1DmE,aAAa,CAAC,YAAY,CAAC,CAAClE,cAAc,CAAC,IAAI,CAAC,CAAC,GAAGA,cAAc;MACpE,CAAC,CAAC;;MAGFkE,aAAa,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC;MACjD,MAAMM,gCAAgC,GAAGP,aAAa,CAAC7G,gBAAgB,CAAC,6BAA6B,CAAC;MAEtG,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoJ,gCAAgC,CAACnJ,MAAM,EAAED,CAAC,EAAE,EAAE;QAChE,MAAMqJ,+BAA+B,GAAGD,gCAAgC,CAACpJ,CAAC,CAAC;QAC3E,MAAMsJ,+BAA+B,GAAG9D,kCAAkC,CAAC6D,+BAA+B,CAAC;QAC3GP,aAAa,CAAC,6BAA6B,CAAC,CAACQ,+BAA+B,CAAC,IAAI,CAAC,CAAC,GAAGA,+BAA+B;MACvH,CAAC,CAAC;;MAGFR,aAAa,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;MACpC,MAAMS,oBAAoB,GAAGV,aAAa,CAAC7G,gBAAgB,CAAC,gBAAgB,CAAC;MAE7E,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuJ,oBAAoB,CAACtJ,MAAM,EAAED,CAAC,EAAE,EAAE;QACpD,MAAMwJ,mBAAmB,GAAGD,oBAAoB,CAACvJ,CAAC,CAAC;QACnD,MAAMyJ,mBAAmB,GAAG3F,wBAAwB,CAAC0F,mBAAmB,CAAC;QACzEV,aAAa,CAAC,gBAAgB,CAAC,CAACW,mBAAmB,CAAC,IAAI,CAAC,CAAC,GAAGA,mBAAmB;MAClF,CAAC,CAAC;;MAGFX,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;MAC5B,MAAMY,WAAW,GAAGb,aAAa,CAAC7G,gBAAgB,CAAC,QAAQ,CAAC;MAE5D,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0J,WAAW,CAACzJ,MAAM,EAAED,CAAC,EAAE,EAAE;QAC3C,MAAMuI,UAAU,GAAGmB,WAAW,CAAC1J,CAAC,CAAC;QACjC,MAAMwI,UAAU,GAAGF,eAAe,CAACC,UAAU,CAAC;QAC9CO,aAAa,CAAC,QAAQ,CAAC,CAACN,UAAU,CAAC,IAAI,CAAC,CAAC,GAAGA,UAAU;MACxD;MAEA,OAAOM,aAAa;IACtB;IAEA,SAASa,cAAcA,CAACC,SAAS,EAAE;MACjC,MAAMC,SAAS,GAAG,EAAE;MACpB,MAAMC,SAAS,GAAGF,SAAS,CAAC5H,gBAAgB,CAAC,MAAM,CAAC;MAEpD,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8J,SAAS,CAAC7J,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC,MAAM+J,QAAQ,GAAGD,SAAS,CAAC9J,CAAC,CAAC;QAC7B,MAAMgK,SAAS,GAAG;UAChBC,QAAQ,EAAEF,QAAQ,CAAC3H,YAAY,CAAC,UAAU;QAC5C,CAAC;QACD,MAAM0F,SAAS,GAAGiC,QAAQ,CAAC3H,YAAY,CAAC,WAAW,CAAC;QAEpD,IAAI0F,SAAS,EAAE;UACbkC,SAAS,CAAC,WAAW,CAAC,GAAGjC,cAAc,CAACD,SAAS,CAAC;QACpD;QAEA+B,SAAS,CAACnK,IAAI,CAACsK,SAAS,CAAC;MAC3B;MAEA,OAAOH,SAAS;IAClB;IAEA,SAASxI,cAAcA,CAACV,SAAS,EAAE;MACjC,MAAMS,SAAS,GAAG;QAChB8I,IAAI,EAAEvJ,SAAS,CAACyB,YAAY,CAAC,MAAM,CAAC,IAAI;MAC1C,CAAC;MACD,MAAMI,aAAa,GAAG7B,SAAS,CAACqB,gBAAgB,CAAC,UAAU,CAAC;MAE5D,IAAIQ,aAAa,EAAE;QACjBpB,SAAS,CAAC,UAAU,CAAC,GAAGmB,kBAAkB,CAACC,aAAa,CAAC;MAC3D;MAEA,MAAMqG,aAAa,GAAGlI,SAAS,CAACC,aAAa,CAAC,WAAW,CAAC;MAE1D,IAAIiI,aAAa,EAAE;QACjBzH,SAAS,CAAC,WAAW,CAAC,GAAGwH,kBAAkB,CAACC,aAAa,CAAC;MAC5D;MAEA,MAAMe,SAAS,GAAGjJ,SAAS,CAACC,aAAa,CAAC,OAAO,CAAC;MAElD,IAAIgJ,SAAS,EAAE;QACbxI,SAAS,CAAC,OAAO,CAAC,GAAGuI,cAAc,CAACC,SAAS,CAAC;MAChD;MAEA,OAAOxI,SAAS;IAClB;IAEA,SAAS+I,YAAYA,CAACC,cAAc,EAAEC,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE;MACrE,MAAMrG,KAAK,GAAGmG,cAAc,CAACnG,KAAK;MAClC,MAAMsG,UAAU,GAAGnJ,SAAS,CAACoJ,SAAS,CAACC,SAAS;MAChD,MAAMA,SAAS,GAAGF,UAAU,CAACtG,KAAK,CAAC;MAEnC,IAAIwG,SAAS,EAAE;QACb,MAAMhM,IAAI,GAAG6L,WAAW,CAACG,SAAS,CAAC5M,IAAI,CAAC;QACxC,MAAMyE,IAAI,GAAGmI,SAAS,CAAC/G,WAAW;QAClC,MAAMgH,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAClM,IAAI,CAAC,EAAE;UAC5B6D,IAAI,EAAEA;QACR,CAAC,CAAC;QACF,MAAMsI,SAAS,GAAGC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;QAC3C,MAAM/I,OAAO,GAAGjD,aAAa,CAACrB,IAAI,CAACuN,SAAS,EAAE,YAAY;UACxDC,GAAG,CAACE,eAAe,CAACH,SAAS,CAAC;QAChC,CAAC,CAAC;QACFjJ,OAAO,CAACqJ,QAAQ,GAAGvO,YAAY,CAAC,CAAC;;QAEjC,QAAQgO,SAAS,CAAC9G,UAAU;UAC1B,KAAK,MAAM;YACThC,OAAO,CAACsJ,KAAK,GAAGvO,cAAc;YAC9B;UAEF,KAAK,QAAQ;YACXiF,OAAO,CAACsJ,KAAK,GAAGrO,sBAAsB;YACtC;UAEF,KAAK,MAAM;UACX,KAAK,OAAO;YACV+E,OAAO,CAACsJ,KAAK,GAAGtO,mBAAmB;YACnC;UAEF;YACEgF,OAAO,CAACsJ,KAAK,GAAGvO,cAAc;QAAC;QAGnC,QAAQ+N,SAAS,CAAC7G,UAAU;UAC1B,KAAK,MAAM;YACTjC,OAAO,CAACuJ,KAAK,GAAGxO,cAAc;YAC9B;UAEF,KAAK,QAAQ;YACXiF,OAAO,CAACuJ,KAAK,GAAGtO,sBAAsB;YACtC;UAEF,KAAK,MAAM;UACX,KAAK,OAAO;YACV+E,OAAO,CAACuJ,KAAK,GAAGvO,mBAAmB;YACnC;UAEF;YACEgF,OAAO,CAACuJ,KAAK,GAAGxO,cAAc;QAAC;QAGnC,QAAQ+N,SAAS,CAAC5G,MAAM;UACtB,KAAK,MAAM;YACTlC,OAAO,CAACwJ,SAAS,GAAGtO,YAAY;YAChC8E,OAAO,CAACyJ,SAAS,GAAGtO,wBAAwB;YAC5C;UAEF,KAAK,QAAQ;YACX6E,OAAO,CAACwJ,SAAS,GAAGtO,YAAY;YAChC8E,OAAO,CAACyJ,SAAS,GAAGvO,YAAY;YAChC;UAEF,KAAK,SAAS;YACZ8E,OAAO,CAACwJ,SAAS,GAAGpO,aAAa;YACjC4E,OAAO,CAACyJ,SAAS,GAAGrO,aAAa;YACjC;UAEF;YACE4E,OAAO,CAACwJ,SAAS,GAAGtO,YAAY;YAChC8E,OAAO,CAACyJ,SAAS,GAAGtO,wBAAwB;QAAC;QAGjD,OAAO6E,OAAO;MAChB,CAAC,MAAM;QACL,OAAO,IAAI;MACb;IACF;IAEA,SAAS0J,wBAAwBA,CAACpI,aAAa,EAAEwD,kBAAkB,EAAEP,QAAQ,EAAEmE,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE9B,UAAU,EAAE;MAC1H,MAAM8C,YAAY,GAAG9C,UAAU,CAACC,MAAM;MACtC,MAAM8C,WAAW,GAAG,CAAC,CAAC;MAEtB,KAAK,IAAIvL,CAAC,GAAG,CAAC,EAAEwL,CAAC,GAAG/E,kBAAkB,CAACxG,MAAM,EAAED,CAAC,GAAGwL,CAAC,EAAExL,CAAC,EAAE,EAAE;QACzD,MAAMoH,gBAAgB,GAAGX,kBAAkB,CAACzG,CAAC,CAAC;QAC9C,MAAMyI,MAAM,GAAGrB,gBAAgB,CAACJ,EAAE,KAAKyE,SAAS,GAAGrE,gBAAgB,CAACJ,EAAE,GAAGsE,YAAY;QACrF,IAAIC,WAAW,CAAC9C,MAAM,CAAC,KAAKgD,SAAS,EAAEF,WAAW,CAAC9C,MAAM,CAAC,GAAG,EAAE;QAC/D8C,WAAW,CAAC9C,MAAM,CAAC,CAAC/I,IAAI,CAAC0H,gBAAgB,CAAC;MAC5C,CAAC,CAAC;;MAGF,MAAM7F,IAAI,GAAGD,MAAM,CAACC,IAAI,CAACgK,WAAW,CAAC;MACrC,MAAMG,MAAM,GAAG,EAAE;MAEjB,KAAK,IAAI1L,CAAC,GAAG,CAAC,EAAEwL,CAAC,GAAGjK,IAAI,CAACtB,MAAM,EAAED,CAAC,GAAGwL,CAAC,EAAExL,CAAC,EAAE,EAAE;QAC3C,MAAM2L,aAAa,GAAGpK,IAAI,CAACvB,CAAC,CAAC;QAC7B,MAAM4L,uBAAuB,GAAGL,WAAW,CAACI,aAAa,CAAC;QAC1D,MAAMvI,gBAAgB,GAAGH,aAAa,CAACA,aAAa,CAAC0I,aAAa,CAAC;QACnE,MAAME,QAAQ,GAAGC,QAAQ,CAAC1I,gBAAgB,EAAEiH,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE9B,UAAU,EAAEuD,iBAAiB,CAAC,CAAC,CAAC;;QAE7G,MAAMC,QAAQ,GAAG,IAAI7P,cAAc,EAAE;QACrC,MAAM8P,YAAY,GAAG,EAAE;QACvB,MAAM9F,QAAQ,GAAGD,QAAQ,CAACC,QAAQ;QAElC,KAAK,IAAI+F,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGP,uBAAuB,CAAC3L,MAAM,EAAEiM,CAAC,GAAGC,EAAE,EAAED,CAAC,EAAE,EAAE;UAChE,MAAM9E,gBAAgB,GAAGwE,uBAAuB,CAACM,CAAC,CAAC;UACnDD,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACP,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;UACxDoF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACP,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;UACxDoF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACP,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;UACxDoF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACN,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;UACxDmF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACN,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;UACxDmF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACN,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;UACxDmF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACL,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;UACxDkF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACL,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;UACxDkF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACL,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1D;QAEAiF,QAAQ,CAACI,YAAY,CAAC,UAAU,EAAE,IAAIhQ,sBAAsB,CAAC6P,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEhF,MAAMI,IAAI,GAAG,IAAIhQ,IAAI,CAAC2P,QAAQ,EAAEH,QAAQ,CAAC;QACzCH,MAAM,CAAChM,IAAI,CAAC2M,IAAI,CAAC;MACnB;MAEA,OAAOX,MAAM;IACf;IAEA,SAASY,iBAAiBA,CAAClC,cAAc,EAAE3D,kBAAkB,EAAEP,QAAQ,EAAEmE,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE9B,UAAU,EAAE;MACpH;MACA,MAAMwD,QAAQ,GAAG,IAAI7P,cAAc,EAAE;MACrC,MAAM8P,YAAY,GAAG,EAAE;MACvB,MAAMM,MAAM,GAAG,EAAE;MACjB,MAAMpG,QAAQ,GAAGD,QAAQ,CAACC,QAAQ;MAClC,MAAM/B,GAAG,GAAGgG,cAAc,CAAChG,GAAG;MAE9B,KAAK,IAAIpE,CAAC,GAAG,CAAC,EAAEwL,CAAC,GAAG/E,kBAAkB,CAACxG,MAAM,EAAED,CAAC,GAAGwL,CAAC,EAAExL,CAAC,EAAE,EAAE;QACzD,MAAMoH,gBAAgB,GAAGX,kBAAkB,CAACzG,CAAC,CAAC;QAC9CiM,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACP,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACxDoF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACP,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACxDoF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACP,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACxDoF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACN,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACxDmF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACN,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACxDmF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACN,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACxDmF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACL,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACxDkF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACL,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACxDkF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACiB,gBAAgB,CAACL,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;QAE1DwF,MAAM,CAAC7M,IAAI,CAAC0E,GAAG,CAACgD,gBAAgB,CAACJ,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7CuF,MAAM,CAAC7M,IAAI,CAAC0E,GAAG,CAACgD,gBAAgB,CAACJ,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7CuF,MAAM,CAAC7M,IAAI,CAAC0E,GAAG,CAACgD,gBAAgB,CAACH,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7CsF,MAAM,CAAC7M,IAAI,CAAC0E,GAAG,CAACgD,gBAAgB,CAACH,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7CsF,MAAM,CAAC7M,IAAI,CAAC0E,GAAG,CAACgD,gBAAgB,CAACF,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7CqF,MAAM,CAAC7M,IAAI,CAAC0E,GAAG,CAACgD,gBAAgB,CAACF,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAC/C;MAEA8E,QAAQ,CAACI,YAAY,CAAC,UAAU,EAAE,IAAIhQ,sBAAsB,CAAC6P,YAAY,EAAE,CAAC,CAAC,CAAC;MAC9ED,QAAQ,CAACI,YAAY,CAAC,IAAI,EAAE,IAAIhQ,sBAAsB,CAACmQ,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;MAEpE,MAAM5K,OAAO,GAAGmK,QAAQ,CAAC1B,cAAc,EAAEC,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE9B,UAAU,EAAE2B,YAAY,CAAC;MACnG,MAAM0B,QAAQ,GAAG,IAAIvP,iBAAiB,CAAC;QACrCkQ,GAAG,EAAE7K,OAAO;QACZ8K,WAAW,EAAE;MACf,CAAC,CAAC,CAAC,CAAC;;MAEJ,MAAMJ,IAAI,GAAG,IAAIhQ,IAAI,CAAC2P,QAAQ,EAAEH,QAAQ,CAAC;MACzC,OAAOQ,IAAI;IACb;IAEA,SAASK,oBAAoBA,CAACC,UAAU,EAAElG,kBAAkB,EAAEP,QAAQ,EAAEmE,OAAO,EAAEjJ,SAAS,EAAEoH,UAAU,EAAE;MACtG;MACA,MAAMwD,QAAQ,GAAG,IAAI7P,cAAc,EAAE;MACrC,MAAM8P,YAAY,GAAG,EAAE;MACvB,MAAMW,SAAS,GAAG,EAAE;MACpB,MAAMzG,QAAQ,GAAGD,QAAQ,CAACC,QAAQ;MAClC,MAAMrB,MAAM,GAAG6H,UAAU,CAAC7H,MAAM;MAEhC,KAAK,IAAI9E,CAAC,GAAG,CAAC,EAAEwL,CAAC,GAAG/E,kBAAkB,CAACxG,MAAM,EAAED,CAAC,GAAGwL,CAAC,EAAExL,CAAC,EAAE,EAAE;QACzD,MAAMoH,gBAAgB,GAAGX,kBAAkB,CAACzG,CAAC,CAAC;QAC9C,MAAM6G,EAAE,GAAGO,gBAAgB,CAACP,EAAE;QAC9B,MAAMC,EAAE,GAAGM,gBAAgB,CAACN,EAAE;QAC9B,MAAMC,EAAE,GAAGK,gBAAgB,CAACL,EAAE;QAC9BkF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACU,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvCoF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACU,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvCoF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACU,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvCoF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACW,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvCmF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACW,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvCmF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACW,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvCmF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACY,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvCkF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACY,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvCkF,YAAY,CAACvM,IAAI,CAACyG,QAAQ,CAACY,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEzC,MAAMC,EAAE,GAAGI,gBAAgB,CAACJ,EAAE,KAAKyE,SAAS,GAAGrE,gBAAgB,CAACJ,EAAE,GAAGwB,UAAU,CAACC,MAAM;QACtF,MAAMxB,EAAE,GAAGG,gBAAgB,CAACH,EAAE,KAAKwE,SAAS,GAAGrE,gBAAgB,CAACH,EAAE,GAAGD,EAAE;QACvE,MAAME,EAAE,GAAGE,gBAAgB,CAACF,EAAE,KAAKuE,SAAS,GAAGrE,gBAAgB,CAACF,EAAE,GAAGF,EAAE;QACvE4F,SAAS,CAAClN,IAAI,CAACoF,MAAM,CAACkC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC4F,SAAS,CAAClN,IAAI,CAACoF,MAAM,CAACkC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC4F,SAAS,CAAClN,IAAI,CAACoF,MAAM,CAACkC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC4F,SAAS,CAAClN,IAAI,CAACoF,MAAM,CAACmC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC2F,SAAS,CAAClN,IAAI,CAACoF,MAAM,CAACmC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC2F,SAAS,CAAClN,IAAI,CAACoF,MAAM,CAACmC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC2F,SAAS,CAAClN,IAAI,CAACoF,MAAM,CAACoC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC0F,SAAS,CAAClN,IAAI,CAACoF,MAAM,CAACoC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC0F,SAAS,CAAClN,IAAI,CAACoF,MAAM,CAACoC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MACpC;MAEA8E,QAAQ,CAACI,YAAY,CAAC,UAAU,EAAE,IAAIhQ,sBAAsB,CAAC6P,YAAY,EAAE,CAAC,CAAC,CAAC;MAC9ED,QAAQ,CAACI,YAAY,CAAC,OAAO,EAAE,IAAIhQ,sBAAsB,CAACwQ,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE1E,MAAMf,QAAQ,GAAG,IAAIvP,iBAAiB,CAAC;QACrCuQ,YAAY,EAAE,IAAI;QAClBJ,WAAW,EAAE;MACf,CAAC,CAAC,CAAC,CAAC;;MAEJ,MAAMJ,IAAI,GAAG,IAAIhQ,IAAI,CAAC2P,QAAQ,EAAEH,QAAQ,CAAC;MACzC,OAAOQ,IAAI;IACb;IAEA,SAASS,gBAAgBA,CAAC5G,QAAQ,EAAE;MAClC,MAAM8F,QAAQ,GAAG,IAAI7P,cAAc,EAAE;MACrC6P,QAAQ,CAACe,QAAQ,CAAC,IAAIxQ,eAAe,CAAC2J,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;MAChE8F,QAAQ,CAACI,YAAY,CAAC,UAAU,EAAE,IAAI7P,eAAe,CAAC2J,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;MAC/E,MAAM2F,QAAQ,GAAG,IAAIvP,iBAAiB,CAAC;QACrC2I,KAAK,EAAE,QAAQ;QACfwH,WAAW,EAAE;MACf,CAAC,CAAC;MACF,MAAMJ,IAAI,GAAG,IAAIhQ,IAAI,CAAC2P,QAAQ,EAAEH,QAAQ,CAAC;MACzC,OAAOQ,IAAI;IACb;IAEA,SAASW,WAAWA,CAACC,WAAW,EAAE/G,QAAQ,EAAEmE,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE9B,UAAU,EAAE;MACvF,MAAMjH,IAAI,GAAGD,MAAM,CAACC,IAAI,CAAC0L,WAAW,CAAC;MACrC,MAAMvB,MAAM,GAAG,EAAE;MAEjB,KAAK,IAAI1L,CAAC,GAAG,CAAC,EAAEkN,EAAE,GAAG3L,IAAI,CAACtB,MAAM,EAAED,CAAC,GAAGkN,EAAE,EAAElN,CAAC,EAAE,EAAE;QAC7C,MAAMmN,UAAU,GAAG5L,IAAI,CAACvB,CAAC,CAAC;QAC1B,MAAMyG,kBAAkB,GAAGwG,WAAW,CAACE,UAAU,CAAC;QAClD,MAAMC,YAAY,GAAGC,eAAe,CAACF,UAAU,EAAE/L,SAAS,CAAC;QAE3D,QAAQgM,YAAY;UAClB,KAAK,UAAU;YACb,MAAMnK,aAAa,GAAG7B,SAAS,CAACoJ,SAAS,CAACvH,aAAa,CAACkK,UAAU,CAAC;YACnE,MAAMG,SAAS,GAAGjC,wBAAwB,CAACpI,aAAa,EAAEwD,kBAAkB,EAAEP,QAAQ,EAAEmE,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE9B,UAAU,CAAC;YAEpI,KAAK,IAAI0D,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGmB,SAAS,CAACrN,MAAM,EAAEiM,CAAC,GAAGC,EAAE,EAAED,CAAC,EAAE,EAAE;cAClDR,MAAM,CAAChM,IAAI,CAAC4N,SAAS,CAACpB,CAAC,CAAC,CAAC;YAC3B;YAEA;UAEF,KAAK,SAAS;YACZ,MAAM9B,cAAc,GAAGhJ,SAAS,CAACoJ,SAAS,CAACJ,cAAc,CAAC+C,UAAU,CAAC;YACrEzB,MAAM,CAAChM,IAAI,CAAC4M,iBAAiB,CAAClC,cAAc,EAAE3D,kBAAkB,EAAEP,QAAQ,EAAEmE,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE9B,UAAU,CAAC,CAAC;YACzH;UAEF,KAAK,cAAc;YACjB,MAAMmE,UAAU,GAAGvL,SAAS,CAACoJ,SAAS,CAACmC,UAAU,CAACQ,UAAU,CAAC;YAC7DzB,MAAM,CAAChM,IAAI,CAACgN,oBAAoB,CAACC,UAAU,EAAElG,kBAAkB,EAAEP,QAAQ,EAAEmE,OAAO,EAAEjJ,SAAS,EAAEoH,UAAU,CAAC,CAAC;YAC3G;UAEF,KAAK,SAAS;YACZkD,MAAM,CAAChM,IAAI,CAACoN,gBAAgB,CAAC5G,QAAQ,CAAC,CAAC;YACvC;UAEF;YACE5H,OAAO,CAACC,KAAK,CAAC,6CAA6C,CAAC;QAAC;MAEnE;MAEA,OAAOmN,MAAM;IACf;IAEA,SAAS2B,eAAeA,CAAClG,GAAG,EAAE/F,SAAS,EAAE;MACvC,IAAIA,SAAS,CAACoJ,SAAS,CAACJ,cAAc,CAACjD,GAAG,CAAC,KAAKsE,SAAS,EAAE;QACzD,OAAO,SAAS;MAClB,CAAC,MAAM,IAAIrK,SAAS,CAACoJ,SAAS,CAACvH,aAAa,CAACkE,GAAG,CAAC,KAAKsE,SAAS,EAAE;QAC/D,OAAO,UAAU;MACnB,CAAC,MAAM,IAAIrK,SAAS,CAACoJ,SAAS,CAACmC,UAAU,CAACxF,GAAG,CAAC,KAAKsE,SAAS,EAAE;QAC5D,OAAO,cAAc;MACvB,CAAC,MAAM,IAAItE,GAAG,KAAK,SAAS,EAAE;QAC5B,OAAO,SAAS;MAClB,CAAC,MAAM;QACL,OAAOsE,SAAS;MAClB;IACF;IAEA,SAAS8B,aAAaA,CAACnM,SAAS,EAAE8E,QAAQ,EAAEsC,UAAU,EAAE;MACtD,MAAMyE,WAAW,GAAG,CAAC,CAAC;MACtB,MAAMxG,kBAAkB,GAAGP,QAAQ,CAAC,oBAAoB,CAAC;MACzD,MAAMsH,SAAS,GAAGhF,UAAU,CAACrB,GAAG;MAEhC,KAAK,IAAInH,CAAC,GAAG,CAAC,EAAEwL,CAAC,GAAG/E,kBAAkB,CAACxG,MAAM,EAAED,CAAC,GAAGwL,CAAC,EAAExL,CAAC,EAAE,EAAE;QACzD,MAAMoH,gBAAgB,GAAGX,kBAAkB,CAACzG,CAAC,CAAC;QAC9C,IAAImH,GAAG,GAAGC,gBAAgB,CAACD,GAAG,KAAKsE,SAAS,GAAGrE,gBAAgB,CAACD,GAAG,GAAGqG,SAAS;QAC/E,IAAIrG,GAAG,KAAKsE,SAAS,EAAEtE,GAAG,GAAG,SAAS;QACtC,IAAI8F,WAAW,CAAC9F,GAAG,CAAC,KAAKsE,SAAS,EAAEwB,WAAW,CAAC9F,GAAG,CAAC,GAAG,EAAE;QACzD8F,WAAW,CAAC9F,GAAG,CAAC,CAACzH,IAAI,CAAC0H,gBAAgB,CAAC;MACzC;MAEA,OAAO6F,WAAW;IACpB;IAEA,SAASQ,UAAUA,CAACvH,QAAQ,EAAEmE,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE9B,UAAU,EAAE;MACzE,MAAMkF,KAAK,GAAG,IAAI1R,KAAK,EAAE;MACzB,MAAMiR,WAAW,GAAGM,aAAa,CAACnM,SAAS,EAAE8E,QAAQ,EAAEsC,UAAU,CAAC;MAClE,MAAMkD,MAAM,GAAGsB,WAAW,CAACC,WAAW,EAAE/G,QAAQ,EAAEmE,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE9B,UAAU,CAAC;MAE9F,KAAK,IAAIxI,CAAC,GAAG,CAAC,EAAEwL,CAAC,GAAGE,MAAM,CAACzL,MAAM,EAAED,CAAC,GAAGwL,CAAC,EAAExL,CAAC,EAAE,EAAE;QAC7C0N,KAAK,CAACC,GAAG,CAACjC,MAAM,CAAC1L,CAAC,CAAC,CAAC;MACtB;MAEA,OAAO0N,KAAK;IACd;IAEA,SAASE,eAAeA,CAAC/M,UAAU,EAAEqF,QAAQ,EAAE2H,QAAQ,EAAE;MACvD,IAAI,CAAChN,UAAU,EAAE;QACf;MACF;MAEA,MAAMzD,mBAAmB,GAAG,EAAE;MAC9B,MAAMmE,IAAI,GAAGD,MAAM,CAACC,IAAI,CAACV,UAAU,CAAC;MAEpC,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuB,IAAI,CAACtB,MAAM,EAAED,CAAC,EAAE,EAAE;QACpC,MAAM8N,EAAE,GAAGvM,IAAI,CAACvB,CAAC,CAAC;QAElB,KAAK,IAAIkM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxO,KAAK,CAACN,mBAAmB,CAAC6C,MAAM,EAAEiM,CAAC,EAAE,EAAE;UACzD,MAAM6B,SAAS,GAAGrQ,KAAK,CAACN,mBAAmB,CAAC8O,CAAC,CAAC;UAE9C,IAAI6B,SAAS,CAACD,EAAE,KAAKA,EAAE,EAAE;YACvB1Q,mBAAmB,CAACsC,IAAI,CAACqO,SAAS,CAAC;UACrC;QACF;MACF;MAEA,KAAK,IAAI/N,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5C,mBAAmB,CAAC6C,MAAM,EAAED,CAAC,EAAE,EAAE;QACnD,MAAM+N,SAAS,GAAG3Q,mBAAmB,CAAC4C,CAAC,CAAC;QACxC+N,SAAS,CAACC,KAAK,CAACH,QAAQ,EAAEhN,UAAU,CAACkN,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE7H,QAAQ,CAAC;MAClE;IACF;IAEA,SAAS4F,QAAQA,CAACrN,IAAI,EAAE4L,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE9B,UAAU,EAAEyF,OAAO,EAAE;MAC5E,IAAIxP,IAAI,CAACyP,KAAK,KAAKzC,SAAS,EAAE,OAAOhN,IAAI,CAACyP,KAAK;MAC/CzP,IAAI,CAACyP,KAAK,GAAGD,OAAO,CAACxP,IAAI,EAAE4L,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE9B,UAAU,CAAC;MACvE,OAAO/J,IAAI,CAACyP,KAAK;IACnB;IAEA,SAASnC,iBAAiBA,CAACoC,YAAY,EAAE9D,OAAO,EAAEjJ,SAAS,EAAE;MAC3D,IAAIyK,QAAQ;MACZ,MAAM3H,mBAAmB,GAAGiK,YAAY,CAACjK,mBAAmB;MAC5D,MAAMkK,2BAA2B,GAAGhN,SAAS,CAACoJ,SAAS,CAAC4D,2BAA2B;MAEnF,IAAIlK,mBAAmB,KAAK,IAAI,IAAIkK,2BAA2B,CAAClK,mBAAmB,CAAC,KAAKuH,SAAS,EAAE;QAClG;QACA,MAAM4C,yBAAyB,GAAGD,2BAA2B,CAAClK,mBAAmB,CAAC;QAClF,MAAM0B,YAAY,GAAGyI,yBAAyB,CAAC5P,IAAI,CAAC0P,YAAY,CAAC7K,KAAK,CAAC;QACvEuI,QAAQ,GAAG,IAAIrP,oBAAoB,CAAC;UAClCiQ,WAAW,EAAE,IAAI;UACjB1G,SAAS,EAAEH,YAAY,CAACG,SAAS;UACjCuI,SAAS,EAAE1I,YAAY,CAACE;QAC1B,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACA+F,QAAQ,GAAG,IAAIvP,iBAAiB,CAAC;UAC/BmQ,WAAW,EAAE;QACf,CAAC,CAAC;MACJ;MAEAZ,QAAQ,CAAC7K,IAAI,GAAGmN,YAAY,CAACnN,IAAI,CAAC,CAAC;;MAEnC,MAAMuN,YAAY,GAAGJ,YAAY,CAACI,YAAY;MAC9C,MAAMtJ,KAAK,GAAGsJ,YAAY,CAACpJ,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;MAC1C0G,QAAQ,CAAC5G,KAAK,CAACC,QAAQ,CAACD,KAAK,CAAC;MAC9B4G,QAAQ,CAAC5G,KAAK,CAACG,mBAAmB,EAAE,CAAC,CAAC;MACtC;;MAEA,IAAImJ,YAAY,CAACtO,MAAM,KAAK,CAAC,EAAE;QAC7B4L,QAAQ,CAAC2C,OAAO,GAAGnH,QAAQ,CAACkH,YAAY,CAACE,MAAM,CAAC,CAAC,CAAC,GAAGF,YAAY,CAACE,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG;MACxF;MAEA,OAAO5C,QAAQ;IACjB;IAEA,SAAS6C,cAAcA,CAACC,aAAa,EAAEtE,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE;MACtE,MAAMsE,SAAS,GAAG,IAAI5S,KAAK,EAAE;MAE7B,KAAK,IAAIkQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyC,aAAa,CAAC1O,MAAM,EAAEiM,CAAC,EAAE,EAAE;QAC7C,MAAM2C,SAAS,GAAGF,aAAa,CAACzC,CAAC,CAAC;QAClC,IAAIgC,KAAK,GAAG7D,OAAO,CAACwE,SAAS,CAAC5E,QAAQ,CAAC;QAEvC,IAAIiE,KAAK,KAAKzC,SAAS,EAAE;UACvBqD,WAAW,CAACD,SAAS,CAAC5E,QAAQ,EAAEI,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,CAAC;UAChE4D,KAAK,GAAG7D,OAAO,CAACwE,SAAS,CAAC5E,QAAQ,CAAC;QACrC;QAEA,MAAM8E,QAAQ,GAAGb,KAAK,CAACc,KAAK,EAAE,CAAC,CAAC;;QAEhC,MAAMlH,SAAS,GAAG+G,SAAS,CAAC/G,SAAS;QAErC,IAAIA,SAAS,EAAE;UACbiH,QAAQ,CAACE,YAAY,CAACnH,SAAS,CAAC;QAClC;QAEA8G,SAAS,CAACjB,GAAG,CAACoB,QAAQ,CAAC;MACzB;MAEA,OAAOH,SAAS;IAClB;IAEA,SAASE,WAAWA,CAAC7E,QAAQ,EAAEI,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE;MAC9D,MAAM9B,UAAU,GAAGpH,SAAS,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,CAAC6I,QAAQ,CAAC;MAE7D,IAAIzB,UAAU,CAAC,MAAM,CAAC,EAAE;QACtB,MAAMtC,QAAQ,GAAGsC,UAAU,CAAC,MAAM,CAAC;QACnC,MAAM3H,UAAU,GAAGO,SAAS,CAAC,YAAY,CAAC;QAC1C,MAAMyM,QAAQ,GAAGzM,SAAS,CAAC,KAAK,CAAC;QACjCwM,eAAe,CAAC/M,UAAU,EAAEqF,QAAQ,EAAE2H,QAAQ,CAAC;QAC/CxD,OAAO,CAAC7B,UAAU,CAACnG,EAAE,CAAC,GAAGyJ,QAAQ,CAAC5F,QAAQ,EAAEmE,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE9B,UAAU,EAAEiF,UAAU,CAAC;MACtG,CAAC,MAAM;QACL,MAAMkB,aAAa,GAAGnG,UAAU,CAAC,YAAY,CAAC;QAC9C6B,OAAO,CAAC7B,UAAU,CAACnG,EAAE,CAAC,GAAGyJ,QAAQ,CAAC6C,aAAa,EAAEtE,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,EAAE9B,UAAU,EAAEkG,cAAc,CAAC;MAC/G;IACF;IAEA,SAASQ,YAAYA,CAACC,OAAO,EAAE;MAC7B,MAAMC,UAAU,GAAGD,OAAO,CAAC1N,KAAK;MAChC,MAAMvC,SAAS,GAAGiQ,OAAO,CAACjQ,SAAS;MACnC,MAAMmL,OAAO,GAAG,CAAC,CAAC;MAClB,MAAMgF,UAAU,GAAG/N,MAAM,CAACC,IAAI,CAAC6N,UAAU,CAAC;MAC1C,MAAM9E,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;;MAExB,IAAIpL,SAAS,EAAE;QACb,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEwL,CAAC,GAAGtM,SAAS,CAACe,MAAM,EAAED,CAAC,GAAGwL,CAAC,EAAExL,CAAC,EAAE,EAAE;UAChD,MAAMsP,QAAQ,GAAGpQ,SAAS,CAACc,CAAC,CAAC;UAC7B,MAAMuP,UAAU,GAAGD,QAAQ,CAACnN,MAAM,CAACgD,SAAS,CAAC,CAAC,CAAC;UAE/C,IAAIgK,OAAO,CAACxN,OAAO,CAAC4N,UAAU,CAAC,EAAE;YAC/BjF,WAAW,CAACgF,QAAQ,CAACnN,MAAM,CAAC,GAAGgN,OAAO,CAACxN,OAAO,CAAC4N,UAAU,CAAC;UAC5D;QACF;MACF,CAAC,CAAC;;MAGF,KAAK,IAAIvP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqP,UAAU,CAACpP,MAAM,EAAED,CAAC,EAAE,EAAE;QAC1C,MAAMwP,SAAS,GAAGH,UAAU,CAACrP,CAAC,CAAC;QAC/B,MAAMoB,SAAS,GAAGgO,UAAU,CAACI,SAAS,CAAC;QACvC,MAAMC,SAAS,GAAGnO,MAAM,CAACC,IAAI,CAACH,SAAS,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,CAAC;QAE/D,KAAK,IAAI8K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuD,SAAS,CAACxP,MAAM,EAAEiM,CAAC,EAAE,EAAE;UACzC,MAAMjC,QAAQ,GAAGwF,SAAS,CAACvD,CAAC,CAAC;UAC7B4C,WAAW,CAAC7E,QAAQ,EAAEI,OAAO,EAAEjJ,SAAS,EAAEkJ,WAAW,CAAC;QACxD;MACF;MAEA,OAAOD,OAAO;IAChB;IAEA,SAASqF,gBAAgBA,CAAC5P,IAAI,EAAE;MAC9B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;QACpC,MAAM2P,GAAG,GAAG7P,IAAI,CAACE,CAAC,CAAC;QACnB,MAAM+N,SAAS,GAAG4B,GAAG,CAACxN,MAAM,CAAC8F,KAAK,CAAC,GAAG,CAAC,CAAC2H,GAAG,EAAE;QAC7C,IAAI7B,SAAS,CAACrN,WAAW,EAAE,KAAK,OAAO,EAAE,OAAOiP,GAAG;MACrD;IACF;IAEA,SAASzB,KAAKA,CAAC7D,OAAO,EAAE8E,OAAO,EAAE;MAC/B,MAAMzB,KAAK,GAAG,IAAI1R,KAAK,EAAE;MACzB,MAAMkG,YAAY,GAAGwN,gBAAgB,CAACP,OAAO,CAAC,MAAM,CAAC,CAAC;MACtD,MAAMtF,SAAS,GAAGsF,OAAO,CAAC1N,KAAK,CAACS,YAAY,CAAC,QAAQ,CAAC,CAACiD,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;MAE7E,KAAK,IAAInF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6J,SAAS,CAAC5J,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC,MAAMgK,SAAS,GAAGH,SAAS,CAAC7J,CAAC,CAAC;QAC9B,MAAM+O,QAAQ,GAAG1E,OAAO,CAACL,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;QAEjD,MAAMlC,SAAS,GAAGkC,SAAS,CAAC,WAAW,CAAC;QAExC,IAAIlC,SAAS,EAAE;UACbiH,QAAQ,CAACE,YAAY,CAACnH,SAAS,CAAC;QAClC;QAEA4F,KAAK,CAACC,GAAG,CAACoB,QAAQ,CAAC;MACrB;MAEA,OAAOrB,KAAK;IACd;IAEA,MAAMyB,OAAO,GAAGxQ,YAAY,CAACF,IAAI,CAAC;IAClC,MAAM4L,OAAO,GAAG6E,YAAY,CAACC,OAAO,CAAC;IACrC,OAAOjB,KAAK,CAAC7D,OAAO,EAAE8E,OAAO,CAAC;EAChC;EAEAU,YAAYA,CAAC9B,SAAS,EAAE;IACtB,IAAI,CAAC3Q,mBAAmB,CAACsC,IAAI,CAACqO,SAAS,CAAC;EAC1C;AAEF;AAEA,SAAS9Q,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}