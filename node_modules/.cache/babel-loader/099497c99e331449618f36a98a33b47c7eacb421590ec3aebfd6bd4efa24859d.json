{"ast":null,"code":"import { Vector3 } from 'three';\n\n/**\n * Generates 2D-Coordinates in a very fast way.\n *\n * Based on work by:\n * @link http://www.openprocessing.org/sketch/15493\n *\n * @param center     Center of Hilbert curve.\n * @param size       Total width of Hilbert curve.\n * @param iterations Number of subdivisions.\n * @param v0         Corner index -X, -Z.\n * @param v1         Corner index -X, +Z.\n * @param v2         Corner index +X, +Z.\n * @param v3         Corner index +X, -Z.\n */\n\nconst hilbert2D = function () {\n  let center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(0, 0, 0);\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  let iterations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let v0 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let v1 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  let v2 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2;\n  let v3 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 3;\n  // Default Vars\n  const half = size / 2;\n  const vec_s = [new Vector3(center.x - half, center.y, center.z - half), new Vector3(center.x - half, center.y, center.z + half), new Vector3(center.x + half, center.y, center.z + half), new Vector3(center.x + half, center.y, center.z - half)];\n  const vec = [vec_s[v0], vec_s[v1], vec_s[v2], vec_s[v3]]; // Recurse iterations\n\n  if (0 <= --iterations) {\n    const tmp = [];\n    Array.prototype.push.apply(tmp, hilbert2D(vec[0], half, iterations, v0, v3, v2, v1));\n    Array.prototype.push.apply(tmp, hilbert2D(vec[1], half, iterations, v0, v1, v2, v3));\n    Array.prototype.push.apply(tmp, hilbert2D(vec[2], half, iterations, v0, v1, v2, v3));\n    Array.prototype.push.apply(tmp, hilbert2D(vec[3], half, iterations, v2, v1, v0, v3)); // Return recursive call\n\n    return tmp;\n  } // Return complete Hilbert Curve.\n\n  return vec;\n};\n/**\n * Generates 3D-Coordinates in a very fast way.\n *\n * Based on work by:\n * @link http://www.openprocessing.org/visuals/?visualID=15599\n *\n * @param center     Center of Hilbert curve.\n * @param size       Total width of Hilbert curve.\n * @param iterations Number of subdivisions.\n * @param v0         Corner index -X, +Y, -Z.\n * @param v1         Corner index -X, +Y, +Z.\n * @param v2         Corner index -X, -Y, +Z.\n * @param v3         Corner index -X, -Y, -Z.\n * @param v4         Corner index +X, -Y, -Z.\n * @param v5         Corner index +X, -Y, +Z.\n * @param v6         Corner index +X, +Y, +Z.\n * @param v7         Corner index +X, +Y, -Z.\n */\n\nconst hilbert3D = function () {\n  let center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(0, 0, 0);\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  let iterations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let v0 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let v1 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  let v2 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2;\n  let v3 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 3;\n  let v4 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 4;\n  let v5 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 5;\n  let v6 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 6;\n  let v7 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 7;\n  // Default Vars\n  const half = size / 2;\n  const vec_s = [new Vector3(center.x - half, center.y + half, center.z - half), new Vector3(center.x - half, center.y + half, center.z + half), new Vector3(center.x - half, center.y - half, center.z + half), new Vector3(center.x - half, center.y - half, center.z - half), new Vector3(center.x + half, center.y - half, center.z - half), new Vector3(center.x + half, center.y - half, center.z + half), new Vector3(center.x + half, center.y + half, center.z + half), new Vector3(center.x + half, center.y + half, center.z - half)];\n  const vec = [vec_s[v0], vec_s[v1], vec_s[v2], vec_s[v3], vec_s[v4], vec_s[v5], vec_s[v6], vec_s[v7]]; // Recurse iterations\n\n  if (--iterations >= 0) {\n    const tmp = [];\n    Array.prototype.push.apply(tmp, hilbert3D(vec[0], half, iterations, v0, v3, v4, v7, v6, v5, v2, v1));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[1], half, iterations, v0, v7, v6, v1, v2, v5, v4, v3));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[2], half, iterations, v0, v7, v6, v1, v2, v5, v4, v3));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[3], half, iterations, v2, v3, v0, v1, v6, v7, v4, v5));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[4], half, iterations, v2, v3, v0, v1, v6, v7, v4, v5));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[5], half, iterations, v4, v3, v2, v5, v6, v1, v0, v7));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[6], half, iterations, v4, v3, v2, v5, v6, v1, v0, v7));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[7], half, iterations, v6, v5, v2, v1, v0, v3, v4, v7)); // Return recursive call\n\n    return tmp;\n  } // Return complete Hilbert Curve.\n\n  return vec;\n};\n/**\n * Generates a Gosper curve (lying in the XY plane)\n *\n * https://gist.github.com/nitaku/6521802\n *\n * @param size The size of a single gosper island.\n */\n\nconst gosper = function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  function fractalize(config) {\n    let output = '';\n    let input = config.axiom;\n    for (let i = 0, il = config.steps; 0 <= il ? i < il : i > il; 0 <= il ? i++ : i--) {\n      output = '';\n      for (let j = 0, jl = input.length; j < jl; j++) {\n        const char = input[j];\n        if (char in config.rules) {\n          output += config.rules[char];\n        } else {\n          output += char;\n        }\n      }\n      input = output;\n    }\n    return output;\n  }\n  function toPoints(config) {\n    let currX = 0;\n    let currY = 0;\n    let angle = 0;\n    const path = [0, 0, 0];\n    const fractal = config.fractal;\n    for (let i = 0, l = fractal.length; i < l; i++) {\n      const char = fractal[i];\n      if (char === '+') {\n        angle += config.angle;\n      } else if (char === '-') {\n        angle -= config.angle;\n      } else if (char === 'F') {\n        currX += config.size * Math.cos(angle);\n        currY += -config.size * Math.sin(angle);\n        path.push(currX, currY, 0);\n      }\n    }\n    return path;\n  } //\n\n  const gosper = fractalize({\n    axiom: 'A',\n    steps: 4,\n    rules: {\n      A: 'A+BF++BF-FA--FAFA-BF+',\n      B: '-FA+BFBF++BF+FA--FA-B'\n    }\n  });\n  const points = toPoints({\n    fractal: gosper,\n    size: size,\n    angle: Math.PI / 3 // 60 degrees\n  });\n\n  return points;\n};\nconst GeometryUtils = {\n  hilbert3D,\n  gosper,\n  hilbert2D\n};\nexport { GeometryUtils };","map":{"version":3,"names":["Vector3","hilbert2D","center","arguments","length","undefined","size","iterations","v0","v1","v2","v3","half","vec_s","x","y","z","vec","tmp","Array","prototype","push","apply","hilbert3D","v4","v5","v6","v7","gosper","fractalize","config","output","input","axiom","i","il","steps","j","jl","char","rules","toPoints","currX","currY","angle","path","fractal","l","Math","cos","sin","A","B","points","PI","GeometryUtils"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/utils/GeometryUtils.js"],"sourcesContent":["import { Vector3 } from 'three';\n\n/**\n * Generates 2D-Coordinates in a very fast way.\n *\n * Based on work by:\n * @link http://www.openprocessing.org/sketch/15493\n *\n * @param center     Center of Hilbert curve.\n * @param size       Total width of Hilbert curve.\n * @param iterations Number of subdivisions.\n * @param v0         Corner index -X, -Z.\n * @param v1         Corner index -X, +Z.\n * @param v2         Corner index +X, +Z.\n * @param v3         Corner index +X, -Z.\n */\n\nconst hilbert2D = (center = new Vector3(0, 0, 0), size = 10, iterations = 1, v0 = 0, v1 = 1, v2 = 2, v3 = 3) => {\n  // Default Vars\n  const half = size / 2;\n  const vec_s = [new Vector3(center.x - half, center.y, center.z - half), new Vector3(center.x - half, center.y, center.z + half), new Vector3(center.x + half, center.y, center.z + half), new Vector3(center.x + half, center.y, center.z - half)];\n  const vec = [vec_s[v0], vec_s[v1], vec_s[v2], vec_s[v3]]; // Recurse iterations\n\n  if (0 <= --iterations) {\n    const tmp = [];\n    Array.prototype.push.apply(tmp, hilbert2D(vec[0], half, iterations, v0, v3, v2, v1));\n    Array.prototype.push.apply(tmp, hilbert2D(vec[1], half, iterations, v0, v1, v2, v3));\n    Array.prototype.push.apply(tmp, hilbert2D(vec[2], half, iterations, v0, v1, v2, v3));\n    Array.prototype.push.apply(tmp, hilbert2D(vec[3], half, iterations, v2, v1, v0, v3)); // Return recursive call\n\n    return tmp;\n  } // Return complete Hilbert Curve.\n\n\n  return vec;\n};\n/**\n * Generates 3D-Coordinates in a very fast way.\n *\n * Based on work by:\n * @link http://www.openprocessing.org/visuals/?visualID=15599\n *\n * @param center     Center of Hilbert curve.\n * @param size       Total width of Hilbert curve.\n * @param iterations Number of subdivisions.\n * @param v0         Corner index -X, +Y, -Z.\n * @param v1         Corner index -X, +Y, +Z.\n * @param v2         Corner index -X, -Y, +Z.\n * @param v3         Corner index -X, -Y, -Z.\n * @param v4         Corner index +X, -Y, -Z.\n * @param v5         Corner index +X, -Y, +Z.\n * @param v6         Corner index +X, +Y, +Z.\n * @param v7         Corner index +X, +Y, -Z.\n */\n\n\nconst hilbert3D = (center = new Vector3(0, 0, 0), size = 10, iterations = 1, v0 = 0, v1 = 1, v2 = 2, v3 = 3, v4 = 4, v5 = 5, v6 = 6, v7 = 7) => {\n  // Default Vars\n  const half = size / 2;\n  const vec_s = [new Vector3(center.x - half, center.y + half, center.z - half), new Vector3(center.x - half, center.y + half, center.z + half), new Vector3(center.x - half, center.y - half, center.z + half), new Vector3(center.x - half, center.y - half, center.z - half), new Vector3(center.x + half, center.y - half, center.z - half), new Vector3(center.x + half, center.y - half, center.z + half), new Vector3(center.x + half, center.y + half, center.z + half), new Vector3(center.x + half, center.y + half, center.z - half)];\n  const vec = [vec_s[v0], vec_s[v1], vec_s[v2], vec_s[v3], vec_s[v4], vec_s[v5], vec_s[v6], vec_s[v7]]; // Recurse iterations\n\n  if (--iterations >= 0) {\n    const tmp = [];\n    Array.prototype.push.apply(tmp, hilbert3D(vec[0], half, iterations, v0, v3, v4, v7, v6, v5, v2, v1));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[1], half, iterations, v0, v7, v6, v1, v2, v5, v4, v3));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[2], half, iterations, v0, v7, v6, v1, v2, v5, v4, v3));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[3], half, iterations, v2, v3, v0, v1, v6, v7, v4, v5));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[4], half, iterations, v2, v3, v0, v1, v6, v7, v4, v5));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[5], half, iterations, v4, v3, v2, v5, v6, v1, v0, v7));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[6], half, iterations, v4, v3, v2, v5, v6, v1, v0, v7));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[7], half, iterations, v6, v5, v2, v1, v0, v3, v4, v7)); // Return recursive call\n\n    return tmp;\n  } // Return complete Hilbert Curve.\n\n\n  return vec;\n};\n/**\n * Generates a Gosper curve (lying in the XY plane)\n *\n * https://gist.github.com/nitaku/6521802\n *\n * @param size The size of a single gosper island.\n */\n\n\nconst gosper = (size = 1) => {\n  function fractalize(config) {\n    let output = '';\n    let input = config.axiom;\n\n    for (let i = 0, il = config.steps; 0 <= il ? i < il : i > il; 0 <= il ? i++ : i--) {\n      output = '';\n\n      for (let j = 0, jl = input.length; j < jl; j++) {\n        const char = input[j];\n\n        if (char in config.rules) {\n          output += config.rules[char];\n        } else {\n          output += char;\n        }\n      }\n\n      input = output;\n    }\n\n    return output;\n  }\n\n  function toPoints(config) {\n    let currX = 0;\n    let currY = 0;\n    let angle = 0;\n    const path = [0, 0, 0];\n    const fractal = config.fractal;\n\n    for (let i = 0, l = fractal.length; i < l; i++) {\n      const char = fractal[i];\n\n      if (char === '+') {\n        angle += config.angle;\n      } else if (char === '-') {\n        angle -= config.angle;\n      } else if (char === 'F') {\n        currX += config.size * Math.cos(angle);\n        currY += -config.size * Math.sin(angle);\n        path.push(currX, currY, 0);\n      }\n    }\n\n    return path;\n  } //\n\n\n  const gosper = fractalize({\n    axiom: 'A',\n    steps: 4,\n    rules: {\n      A: 'A+BF++BF-FA--FAFA-BF+',\n      B: '-FA+BFBF++BF+FA--FA-B'\n    }\n  });\n  const points = toPoints({\n    fractal: gosper,\n    size: size,\n    angle: Math.PI / 3 // 60 degrees\n\n  });\n  return points;\n};\n\nconst GeometryUtils = {\n  hilbert3D,\n  gosper,\n  hilbert2D\n};\n\nexport { GeometryUtils };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}