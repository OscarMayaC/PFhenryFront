{"ast":null,"code":"import { DataTextureLoader, LinearMipmapLinearFilter } from 'three';\nclass TGALoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n  parse(buffer) {\n    // reference from vthibault, https://github.com/vthibault/roBrowser/blob/master/src/Loaders/Targa.js\n    function tgaCheckHeader(header) {\n      switch (header.image_type) {\n        // check indexed type\n        case TGA_TYPE_INDEXED:\n        case TGA_TYPE_RLE_INDEXED:\n          if (header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1) {\n            console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');\n          }\n          break;\n        // check colormap type\n\n        case TGA_TYPE_RGB:\n        case TGA_TYPE_GREY:\n        case TGA_TYPE_RLE_RGB:\n        case TGA_TYPE_RLE_GREY:\n          if (header.colormap_type) {\n            console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');\n          }\n          break;\n        // What the need of a file without data ?\n\n        case TGA_TYPE_NO_DATA:\n          console.error('THREE.TGALoader: No data.');\n        // Invalid type ?\n\n        default:\n          console.error('THREE.TGALoader: Invalid type \"%s\".', header.image_type);\n      } // check image width and height\n\n      if (header.width <= 0 || header.height <= 0) {\n        console.error('THREE.TGALoader: Invalid image size.');\n      } // check image pixel size\n\n      if (header.pixel_size !== 8 && header.pixel_size !== 16 && header.pixel_size !== 24 && header.pixel_size !== 32) {\n        console.error('THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size);\n      }\n    } // parse tga image buffer\n\n    function tgaParse(use_rle, use_pal, header, offset, data) {\n      let pixel_data, palettes;\n      const pixel_size = header.pixel_size >> 3;\n      const pixel_total = header.width * header.height * pixel_size; // read palettes\n\n      if (use_pal) {\n        palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\n      } // read RLE\n\n      if (use_rle) {\n        pixel_data = new Uint8Array(pixel_total);\n        let c, count, i;\n        let shift = 0;\n        const pixels = new Uint8Array(pixel_size);\n        while (shift < pixel_total) {\n          c = data[offset++];\n          count = (c & 0x7f) + 1; // RLE pixels\n\n          if (c & 0x80) {\n            // bind pixel tmp array\n            for (i = 0; i < pixel_size; ++i) {\n              pixels[i] = data[offset++];\n            } // copy pixel array\n\n            for (i = 0; i < count; ++i) {\n              pixel_data.set(pixels, shift + i * pixel_size);\n            }\n            shift += pixel_size * count;\n          } else {\n            // raw pixels\n            count *= pixel_size;\n            for (i = 0; i < count; ++i) {\n              pixel_data[shift + i] = data[offset++];\n            }\n            shift += count;\n          }\n        }\n      } else {\n        // raw pixels\n        pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);\n      }\n      return {\n        pixel_data: pixel_data,\n        palettes: palettes\n      };\n    }\n    function tgaGetImageData8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {\n      const colormap = palettes;\n      let color,\n        i = 0,\n        x,\n        y;\n      const width = header.width;\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i++) {\n          color = image[i];\n          imageData[(x + width * y) * 4 + 3] = 255;\n          imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n          imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n          imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n        }\n      }\n      return imageData;\n    }\n    function tgaGetImageData16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let color,\n        i = 0,\n        x,\n        y;\n      const width = header.width;\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\n          color = image[i + 0] + (image[i + 1] << 8); // Inversed ?\n\n          imageData[(x + width * y) * 4 + 0] = (color & 0x7c00) >> 7;\n          imageData[(x + width * y) * 4 + 1] = (color & 0x03e0) >> 2;\n          imageData[(x + width * y) * 4 + 2] = (color & 0x001f) >> 3;\n          imageData[(x + width * y) * 4 + 3] = color & 0x8000 ? 0 : 255;\n        }\n      }\n      return imageData;\n    }\n    function tgaGetImageData24bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n        x,\n        y;\n      const width = header.width;\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 3) {\n          imageData[(x + width * y) * 4 + 3] = 255;\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 1];\n          imageData[(x + width * y) * 4 + 0] = image[i + 2];\n        }\n      }\n      return imageData;\n    }\n    function tgaGetImageData32bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n        x,\n        y;\n      const width = header.width;\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 4) {\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 1];\n          imageData[(x + width * y) * 4 + 0] = image[i + 2];\n          imageData[(x + width * y) * 4 + 3] = image[i + 3];\n        }\n      }\n      return imageData;\n    }\n    function tgaGetImageDataGrey8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let color,\n        i = 0,\n        x,\n        y;\n      const width = header.width;\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i++) {\n          color = image[i];\n          imageData[(x + width * y) * 4 + 0] = color;\n          imageData[(x + width * y) * 4 + 1] = color;\n          imageData[(x + width * y) * 4 + 2] = color;\n          imageData[(x + width * y) * 4 + 3] = 255;\n        }\n      }\n      return imageData;\n    }\n    function tgaGetImageDataGrey16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n        x,\n        y;\n      const width = header.width;\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\n          imageData[(x + width * y) * 4 + 0] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 0];\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 3] = image[i + 1];\n        }\n      }\n      return imageData;\n    }\n    function getTgaRGBA(data, width, height, image, palette) {\n      let x_start, y_start, x_step, y_step, x_end, y_end;\n      switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {\n        default:\n        case TGA_ORIGIN_UL:\n          x_start = 0;\n          x_step = 1;\n          x_end = width;\n          y_start = 0;\n          y_step = 1;\n          y_end = height;\n          break;\n        case TGA_ORIGIN_BL:\n          x_start = 0;\n          x_step = 1;\n          x_end = width;\n          y_start = height - 1;\n          y_step = -1;\n          y_end = -1;\n          break;\n        case TGA_ORIGIN_UR:\n          x_start = width - 1;\n          x_step = -1;\n          x_end = -1;\n          y_start = 0;\n          y_step = 1;\n          y_end = height;\n          break;\n        case TGA_ORIGIN_BR:\n          x_start = width - 1;\n          x_step = -1;\n          x_end = -1;\n          y_start = height - 1;\n          y_step = -1;\n          y_end = -1;\n          break;\n      }\n      if (use_grey) {\n        switch (header.pixel_size) {\n          case 8:\n            tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n          case 16:\n            tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n          default:\n            console.error('THREE.TGALoader: Format not supported.');\n            break;\n        }\n      } else {\n        switch (header.pixel_size) {\n          case 8:\n            tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);\n            break;\n          case 16:\n            tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n          case 24:\n            tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n          case 32:\n            tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n          default:\n            console.error('THREE.TGALoader: Format not supported.');\n            break;\n        }\n      } // Load image data according to specific method\n      // let func = 'tgaGetImageData' + (use_grey ? 'Grey' : '') + (header.pixel_size) + 'bits';\n      // func(data, y_start, y_step, y_end, x_start, x_step, x_end, width, image, palette );\n\n      return data;\n    } // TGA constants\n\n    const TGA_TYPE_NO_DATA = 0,\n      TGA_TYPE_INDEXED = 1,\n      TGA_TYPE_RGB = 2,\n      TGA_TYPE_GREY = 3,\n      TGA_TYPE_RLE_INDEXED = 9,\n      TGA_TYPE_RLE_RGB = 10,\n      TGA_TYPE_RLE_GREY = 11,\n      TGA_ORIGIN_MASK = 0x30,\n      TGA_ORIGIN_SHIFT = 0x04,\n      TGA_ORIGIN_BL = 0x00,\n      TGA_ORIGIN_BR = 0x01,\n      TGA_ORIGIN_UL = 0x02,\n      TGA_ORIGIN_UR = 0x03;\n    if (buffer.length < 19) console.error('THREE.TGALoader: Not enough data to contain header.');\n    let offset = 0;\n    const content = new Uint8Array(buffer),\n      header = {\n        id_length: content[offset++],\n        colormap_type: content[offset++],\n        image_type: content[offset++],\n        colormap_index: content[offset++] | content[offset++] << 8,\n        colormap_length: content[offset++] | content[offset++] << 8,\n        colormap_size: content[offset++],\n        origin: [content[offset++] | content[offset++] << 8, content[offset++] | content[offset++] << 8],\n        width: content[offset++] | content[offset++] << 8,\n        height: content[offset++] | content[offset++] << 8,\n        pixel_size: content[offset++],\n        flags: content[offset++]\n      }; // check tga if it is valid format\n\n    tgaCheckHeader(header);\n    if (header.id_length + offset > buffer.length) {\n      console.error('THREE.TGALoader: No data.');\n    } // skip the needn't data\n\n    offset += header.id_length; // get targa information about RLE compression and palette\n\n    let use_rle = false,\n      use_pal = false,\n      use_grey = false;\n    switch (header.image_type) {\n      case TGA_TYPE_RLE_INDEXED:\n        use_rle = true;\n        use_pal = true;\n        break;\n      case TGA_TYPE_INDEXED:\n        use_pal = true;\n        break;\n      case TGA_TYPE_RLE_RGB:\n        use_rle = true;\n        break;\n      case TGA_TYPE_RGB:\n        break;\n      case TGA_TYPE_RLE_GREY:\n        use_rle = true;\n        use_grey = true;\n        break;\n      case TGA_TYPE_GREY:\n        use_grey = true;\n        break;\n    } //\n\n    const imageData = new Uint8Array(header.width * header.height * 4);\n    const result = tgaParse(use_rle, use_pal, header, offset, content);\n    getTgaRGBA(imageData, header.width, header.height, result.pixel_data, result.palettes);\n    return {\n      data: imageData,\n      width: header.width,\n      height: header.height,\n      flipY: true,\n      generateMipmaps: true,\n      minFilter: LinearMipmapLinearFilter\n    };\n  }\n}\nexport { TGALoader };","map":{"version":3,"names":["DataTextureLoader","LinearMipmapLinearFilter","TGALoader","constructor","manager","parse","buffer","tgaCheckHeader","header","image_type","TGA_TYPE_INDEXED","TGA_TYPE_RLE_INDEXED","colormap_length","colormap_size","colormap_type","console","error","TGA_TYPE_RGB","TGA_TYPE_GREY","TGA_TYPE_RLE_RGB","TGA_TYPE_RLE_GREY","TGA_TYPE_NO_DATA","width","height","pixel_size","tgaParse","use_rle","use_pal","offset","data","pixel_data","palettes","pixel_total","subarray","Uint8Array","c","count","i","shift","pixels","set","tgaGetImageData8bits","imageData","y_start","y_step","y_end","x_start","x_step","x_end","image","colormap","color","x","y","tgaGetImageData16bits","tgaGetImageData24bits","tgaGetImageData32bits","tgaGetImageDataGrey8bits","tgaGetImageDataGrey16bits","getTgaRGBA","palette","flags","TGA_ORIGIN_MASK","TGA_ORIGIN_SHIFT","TGA_ORIGIN_UL","TGA_ORIGIN_BL","TGA_ORIGIN_UR","TGA_ORIGIN_BR","use_grey","length","content","id_length","colormap_index","origin","result","flipY","generateMipmaps","minFilter"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/loaders/TGALoader.js"],"sourcesContent":["import { DataTextureLoader, LinearMipmapLinearFilter } from 'three';\n\nclass TGALoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  parse(buffer) {\n    // reference from vthibault, https://github.com/vthibault/roBrowser/blob/master/src/Loaders/Targa.js\n    function tgaCheckHeader(header) {\n      switch (header.image_type) {\n        // check indexed type\n        case TGA_TYPE_INDEXED:\n        case TGA_TYPE_RLE_INDEXED:\n          if (header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1) {\n            console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');\n          }\n\n          break;\n        // check colormap type\n\n        case TGA_TYPE_RGB:\n        case TGA_TYPE_GREY:\n        case TGA_TYPE_RLE_RGB:\n        case TGA_TYPE_RLE_GREY:\n          if (header.colormap_type) {\n            console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');\n          }\n\n          break;\n        // What the need of a file without data ?\n\n        case TGA_TYPE_NO_DATA:\n          console.error('THREE.TGALoader: No data.');\n        // Invalid type ?\n\n        default:\n          console.error('THREE.TGALoader: Invalid type \"%s\".', header.image_type);\n      } // check image width and height\n\n\n      if (header.width <= 0 || header.height <= 0) {\n        console.error('THREE.TGALoader: Invalid image size.');\n      } // check image pixel size\n\n\n      if (header.pixel_size !== 8 && header.pixel_size !== 16 && header.pixel_size !== 24 && header.pixel_size !== 32) {\n        console.error('THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size);\n      }\n    } // parse tga image buffer\n\n\n    function tgaParse(use_rle, use_pal, header, offset, data) {\n      let pixel_data, palettes;\n      const pixel_size = header.pixel_size >> 3;\n      const pixel_total = header.width * header.height * pixel_size; // read palettes\n\n      if (use_pal) {\n        palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\n      } // read RLE\n\n\n      if (use_rle) {\n        pixel_data = new Uint8Array(pixel_total);\n        let c, count, i;\n        let shift = 0;\n        const pixels = new Uint8Array(pixel_size);\n\n        while (shift < pixel_total) {\n          c = data[offset++];\n          count = (c & 0x7f) + 1; // RLE pixels\n\n          if (c & 0x80) {\n            // bind pixel tmp array\n            for (i = 0; i < pixel_size; ++i) {\n              pixels[i] = data[offset++];\n            } // copy pixel array\n\n\n            for (i = 0; i < count; ++i) {\n              pixel_data.set(pixels, shift + i * pixel_size);\n            }\n\n            shift += pixel_size * count;\n          } else {\n            // raw pixels\n            count *= pixel_size;\n\n            for (i = 0; i < count; ++i) {\n              pixel_data[shift + i] = data[offset++];\n            }\n\n            shift += count;\n          }\n        }\n      } else {\n        // raw pixels\n        pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);\n      }\n\n      return {\n        pixel_data: pixel_data,\n        palettes: palettes\n      };\n    }\n\n    function tgaGetImageData8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {\n      const colormap = palettes;\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i++) {\n          color = image[i];\n          imageData[(x + width * y) * 4 + 3] = 255;\n          imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n          imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n          imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\n          color = image[i + 0] + (image[i + 1] << 8); // Inversed ?\n\n          imageData[(x + width * y) * 4 + 0] = (color & 0x7c00) >> 7;\n          imageData[(x + width * y) * 4 + 1] = (color & 0x03e0) >> 2;\n          imageData[(x + width * y) * 4 + 2] = (color & 0x001f) >> 3;\n          imageData[(x + width * y) * 4 + 3] = color & 0x8000 ? 0 : 255;\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData24bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 3) {\n          imageData[(x + width * y) * 4 + 3] = 255;\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 1];\n          imageData[(x + width * y) * 4 + 0] = image[i + 2];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData32bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 4) {\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 1];\n          imageData[(x + width * y) * 4 + 0] = image[i + 2];\n          imageData[(x + width * y) * 4 + 3] = image[i + 3];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageDataGrey8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i++) {\n          color = image[i];\n          imageData[(x + width * y) * 4 + 0] = color;\n          imageData[(x + width * y) * 4 + 1] = color;\n          imageData[(x + width * y) * 4 + 2] = color;\n          imageData[(x + width * y) * 4 + 3] = 255;\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageDataGrey16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\n          imageData[(x + width * y) * 4 + 0] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 0];\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 3] = image[i + 1];\n        }\n      }\n\n      return imageData;\n    }\n\n    function getTgaRGBA(data, width, height, image, palette) {\n      let x_start, y_start, x_step, y_step, x_end, y_end;\n\n      switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {\n        default:\n        case TGA_ORIGIN_UL:\n          x_start = 0;\n          x_step = 1;\n          x_end = width;\n          y_start = 0;\n          y_step = 1;\n          y_end = height;\n          break;\n\n        case TGA_ORIGIN_BL:\n          x_start = 0;\n          x_step = 1;\n          x_end = width;\n          y_start = height - 1;\n          y_step = -1;\n          y_end = -1;\n          break;\n\n        case TGA_ORIGIN_UR:\n          x_start = width - 1;\n          x_step = -1;\n          x_end = -1;\n          y_start = 0;\n          y_step = 1;\n          y_end = height;\n          break;\n\n        case TGA_ORIGIN_BR:\n          x_start = width - 1;\n          x_step = -1;\n          x_end = -1;\n          y_start = height - 1;\n          y_step = -1;\n          y_end = -1;\n          break;\n      }\n\n      if (use_grey) {\n        switch (header.pixel_size) {\n          case 8:\n            tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 16:\n            tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          default:\n            console.error('THREE.TGALoader: Format not supported.');\n            break;\n        }\n      } else {\n        switch (header.pixel_size) {\n          case 8:\n            tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);\n            break;\n\n          case 16:\n            tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 24:\n            tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 32:\n            tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          default:\n            console.error('THREE.TGALoader: Format not supported.');\n            break;\n        }\n      } // Load image data according to specific method\n      // let func = 'tgaGetImageData' + (use_grey ? 'Grey' : '') + (header.pixel_size) + 'bits';\n      // func(data, y_start, y_step, y_end, x_start, x_step, x_end, width, image, palette );\n\n\n      return data;\n    } // TGA constants\n\n\n    const TGA_TYPE_NO_DATA = 0,\n          TGA_TYPE_INDEXED = 1,\n          TGA_TYPE_RGB = 2,\n          TGA_TYPE_GREY = 3,\n          TGA_TYPE_RLE_INDEXED = 9,\n          TGA_TYPE_RLE_RGB = 10,\n          TGA_TYPE_RLE_GREY = 11,\n          TGA_ORIGIN_MASK = 0x30,\n          TGA_ORIGIN_SHIFT = 0x04,\n          TGA_ORIGIN_BL = 0x00,\n          TGA_ORIGIN_BR = 0x01,\n          TGA_ORIGIN_UL = 0x02,\n          TGA_ORIGIN_UR = 0x03;\n    if (buffer.length < 19) console.error('THREE.TGALoader: Not enough data to contain header.');\n    let offset = 0;\n    const content = new Uint8Array(buffer),\n          header = {\n      id_length: content[offset++],\n      colormap_type: content[offset++],\n      image_type: content[offset++],\n      colormap_index: content[offset++] | content[offset++] << 8,\n      colormap_length: content[offset++] | content[offset++] << 8,\n      colormap_size: content[offset++],\n      origin: [content[offset++] | content[offset++] << 8, content[offset++] | content[offset++] << 8],\n      width: content[offset++] | content[offset++] << 8,\n      height: content[offset++] | content[offset++] << 8,\n      pixel_size: content[offset++],\n      flags: content[offset++]\n    }; // check tga if it is valid format\n\n    tgaCheckHeader(header);\n\n    if (header.id_length + offset > buffer.length) {\n      console.error('THREE.TGALoader: No data.');\n    } // skip the needn't data\n\n\n    offset += header.id_length; // get targa information about RLE compression and palette\n\n    let use_rle = false,\n        use_pal = false,\n        use_grey = false;\n\n    switch (header.image_type) {\n      case TGA_TYPE_RLE_INDEXED:\n        use_rle = true;\n        use_pal = true;\n        break;\n\n      case TGA_TYPE_INDEXED:\n        use_pal = true;\n        break;\n\n      case TGA_TYPE_RLE_RGB:\n        use_rle = true;\n        break;\n\n      case TGA_TYPE_RGB:\n        break;\n\n      case TGA_TYPE_RLE_GREY:\n        use_rle = true;\n        use_grey = true;\n        break;\n\n      case TGA_TYPE_GREY:\n        use_grey = true;\n        break;\n    } //\n\n\n    const imageData = new Uint8Array(header.width * header.height * 4);\n    const result = tgaParse(use_rle, use_pal, header, offset, content);\n    getTgaRGBA(imageData, header.width, header.height, result.pixel_data, result.palettes);\n    return {\n      data: imageData,\n      width: header.width,\n      height: header.height,\n      flipY: true,\n      generateMipmaps: true,\n      minFilter: LinearMipmapLinearFilter\n    };\n  }\n\n}\n\nexport { TGALoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}