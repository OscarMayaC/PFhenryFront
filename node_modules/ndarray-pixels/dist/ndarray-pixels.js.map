{"version":3,"file":"ndarray-pixels.js","sources":["../src/index.ts"],"sourcesContent":["import getPixelsInternal from 'get-pixels';\nimport type { NdArray } from 'ndarray';\nimport savePixelsInternal from 'save-pixels';\n\n/**\n * Decodes image data to an `ndarray`.\n *\n * MIME type is optional when given a path or URL, and required when given a Uint8Array.\n *\n * Accepts `image/png` or `image/jpeg` in Node.js, and additional formats on browsers with\n * the necessary support in Canvas 2D.\n *\n * @param data\n * @param mimeType `image/jpeg`, `image/png`, etc.\n * @returns\n */\nasync function getPixels (data: string | Uint8Array, mimeType?: string): Promise<NdArray> {\n    // In Node.js, get-pixels needs a Buffer and won't accept Uint8Array.\n    if (data instanceof Uint8Array && typeof Buffer !== 'undefined') {\n        data = Buffer.from(data);\n    }\n\n    return new Promise((resolve, reject) => {\n        getPixelsInternal(data, mimeType!, (err: Error | null, pixels: NdArray) => {\n            if (pixels && !err) {\n                resolve(pixels);\n            } else {\n                reject(err);\n            }\n        });\n    });\n}\n\n/**\n * Encodes an `ndarray` as image data in the given format.\n *\n * If the source `ndarray` was constructed manually with default stride, use\n * `ndarray.transpose(1, 0)` to reshape it and ensure an identical result from getPixels(). For an\n * ndarray created by getPixels(), this isn't necessary.\n *\n * Accepts `image/png` or `image/jpeg` in Node.js, and additional formats on browsers with\n * the necessary support in Canvas 2D.\n *\n * @param pixels ndarray of shape W x H x 4.\n * @param mimeType `image/jpeg`, `image/png`, etc.\n * @returns\n */\nasync function savePixels (pixels: NdArray, mimeType: string): Promise<Uint8Array> {\n    return new Promise((resolve, reject) => {\n        const chunks: Uint8Array[] = [];\n        const internalType = mimeType.replace('image/', '') as 'png' | 'gif';\n        savePixelsInternal(pixels, internalType)\n            .on('data', (d: Uint8Array) => chunks.push(d))\n            .on('end', () => resolve(concat(chunks)))\n            .on('error', (e: Error) => reject(e));\n    });\n}\n\nfunction concat (arrays: Uint8Array[]): Uint8Array {\n    let totalByteLength = 0;\n    for (const array of arrays) {\n        totalByteLength += array.byteLength;\n    }\n\n    const result = new Uint8Array(totalByteLength);\n\n    let byteOffset = 0;\n    for (const array of arrays) {\n        result.set(array, byteOffset);\n        byteOffset += array.byteLength;\n    }\n\n    return result;\n}\n\nexport {getPixels, savePixels};\n"],"names":["getPixels","data","mimeType","Uint8Array","Buffer","from","Promise","resolve","reject","getPixelsInternal","err","pixels","savePixels","chunks","internalType","replace","savePixelsInternal","on","d","push","concat","e","arrays","totalByteLength","array","byteLength","result","byteOffset","set"],"mappings":";;;;;;;;AAIA;;;;;;;;;;;;;AAYA,eAAeA,SAAf,CAA0BC,IAA1B,EAAqDC,QAArD;AACI;AACA,MAAID,IAAI,YAAYE,UAAhB,IAA8B,OAAOC,MAAP,KAAkB,WAApD,EAAiE;AAC7DH,IAAAA,IAAI,GAAGG,MAAM,CAACC,IAAP,CAAYJ,IAAZ,CAAP;AACH;;AAED,SAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV;AACfC,IAAAA,qCAAiB,CAACR,IAAD,EAAOC,QAAP,EAAkB,CAACQ,GAAD,EAAoBC,MAApB;AAC/B,UAAIA,MAAM,IAAI,CAACD,GAAf,EAAoB;AAChBH,QAAAA,OAAO,CAACI,MAAD,CAAP;AACH,OAFD,MAEO;AACHH,QAAAA,MAAM,CAACE,GAAD,CAAN;AACH;AACJ,KANgB,CAAjB;AAOH,GARM,CAAP;AASH;AAED;;;;;;;;;;;;;;;;AAcA,eAAeE,UAAf,CAA2BD,MAA3B,EAA4CT,QAA5C;AACI,SAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV;AACf,UAAMK,MAAM,GAAiB,EAA7B;AACA,UAAMC,YAAY,GAAGZ,QAAQ,CAACa,OAAT,CAAiB,QAAjB,EAA2B,EAA3B,CAArB;AACAC,IAAAA,sCAAkB,CAACL,MAAD,EAASG,YAAT,CAAlB,CACKG,EADL,CACQ,MADR,EACiBC,CAAD,IAAmBL,MAAM,CAACM,IAAP,CAAYD,CAAZ,CADnC,EAEKD,EAFL,CAEQ,KAFR,EAEe,MAAMV,OAAO,CAACa,MAAM,CAACP,MAAD,CAAP,CAF5B,EAGKI,EAHL,CAGQ,OAHR,EAGkBI,CAAD,IAAcb,MAAM,CAACa,CAAD,CAHrC;AAIH,GAPM,CAAP;AAQH;;AAED,SAASD,MAAT,CAAiBE,MAAjB;AACI,MAAIC,eAAe,GAAG,CAAtB;;AACA,OAAK,MAAMC,KAAX,IAAoBF,MAApB,EAA4B;AACxBC,IAAAA,eAAe,IAAIC,KAAK,CAACC,UAAzB;AACH;;AAED,QAAMC,MAAM,GAAG,IAAIvB,UAAJ,CAAeoB,eAAf,CAAf;AAEA,MAAII,UAAU,GAAG,CAAjB;;AACA,OAAK,MAAMH,KAAX,IAAoBF,MAApB,EAA4B;AACxBI,IAAAA,MAAM,CAACE,GAAP,CAAWJ,KAAX,EAAkBG,UAAlB;AACAA,IAAAA,UAAU,IAAIH,KAAK,CAACC,UAApB;AACH;;AAED,SAAOC,MAAP;AACH;;;;;"}