{"ast":null,"code":"import { Frustum, Vector3 } from 'three';\n\n/**\n * This is a class to check whether objects are in a selection area in 3D space\n */\n\nconst SelectionBox = (() => {\n  const frustum = new Frustum();\n  const center = new Vector3();\n  const tmpPoint = new Vector3();\n  const vecNear = new Vector3();\n  const vecTopLeft = new Vector3();\n  const vecTopRight = new Vector3();\n  const vecDownRight = new Vector3();\n  const vecDownLeft = new Vector3();\n  const vecFarTopLeft = new Vector3();\n  const vecFarTopRight = new Vector3();\n  const vecFarDownRight = new Vector3();\n  const vecFarDownLeft = new Vector3();\n  const vectemp1 = new Vector3();\n  const vectemp2 = new Vector3();\n  const vectemp3 = new Vector3();\n  class SelectionBox {\n    constructor(camera, scene, deep) {\n      this.camera = camera;\n      this.scene = scene;\n      this.startPoint = new Vector3();\n      this.endPoint = new Vector3();\n      this.collection = [];\n      this.deep = deep || Number.MAX_VALUE;\n    }\n    select(startPoint, endPoint) {\n      this.startPoint = startPoint || this.startPoint;\n      this.endPoint = endPoint || this.endPoint;\n      this.collection = [];\n      this.updateFrustum(this.startPoint, this.endPoint);\n      this.searchChildInFrustum(frustum, this.scene);\n      return this.collection;\n    }\n    updateFrustum(startPoint, endPoint) {\n      startPoint = startPoint || this.startPoint;\n      endPoint = endPoint || this.endPoint; // Avoid invalid frustum\n\n      if (startPoint.x === endPoint.x) {\n        endPoint.x += Number.EPSILON;\n      }\n      if (startPoint.y === endPoint.y) {\n        endPoint.y += Number.EPSILON;\n      }\n      this.camera.updateProjectionMatrix();\n      this.camera.updateMatrixWorld();\n      if (this.camera.isPerspectiveCamera) {\n        tmpPoint.copy(startPoint);\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x);\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y);\n        endPoint.x = Math.max(startPoint.x, endPoint.x);\n        endPoint.y = Math.min(startPoint.y, endPoint.y);\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld);\n        vecTopLeft.copy(tmpPoint);\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0);\n        vecDownRight.copy(endPoint);\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0);\n        vecTopLeft.unproject(this.camera);\n        vecTopRight.unproject(this.camera);\n        vecDownRight.unproject(this.camera);\n        vecDownLeft.unproject(this.camera);\n        vectemp1.copy(vecTopLeft).sub(vecNear);\n        vectemp2.copy(vecTopRight).sub(vecNear);\n        vectemp3.copy(vecDownRight).sub(vecNear);\n        vectemp1.normalize();\n        vectemp2.normalize();\n        vectemp3.normalize();\n        vectemp1.multiplyScalar(this.deep);\n        vectemp2.multiplyScalar(this.deep);\n        vectemp3.multiplyScalar(this.deep);\n        vectemp1.add(vecNear);\n        vectemp2.add(vecNear);\n        vectemp3.add(vecNear);\n        var planes = frustum.planes;\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight);\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight);\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear);\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear);\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft);\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1);\n        planes[5].normal.multiplyScalar(-1);\n      } else if (this.camera.isOrthographicCamera) {\n        const left = Math.min(startPoint.x, endPoint.x);\n        const top = Math.max(startPoint.y, endPoint.y);\n        const right = Math.max(startPoint.x, endPoint.x);\n        const down = Math.min(startPoint.y, endPoint.y);\n        vecTopLeft.set(left, top, -1);\n        vecTopRight.set(right, top, -1);\n        vecDownRight.set(right, down, -1);\n        vecDownLeft.set(left, down, -1);\n        vecFarTopLeft.set(left, top, 1);\n        vecFarTopRight.set(right, top, 1);\n        vecFarDownRight.set(right, down, 1);\n        vecFarDownLeft.set(left, down, 1);\n        vecTopLeft.unproject(this.camera);\n        vecTopRight.unproject(this.camera);\n        vecDownRight.unproject(this.camera);\n        vecDownLeft.unproject(this.camera);\n        vecFarTopLeft.unproject(this.camera);\n        vecFarTopRight.unproject(this.camera);\n        vecFarDownRight.unproject(this.camera);\n        vecFarDownLeft.unproject(this.camera);\n        var planes = frustum.planes;\n        planes[0].setFromCoplanarPoints(vecTopLeft, vecFarTopLeft, vecFarTopRight);\n        planes[1].setFromCoplanarPoints(vecTopRight, vecFarTopRight, vecFarDownRight);\n        planes[2].setFromCoplanarPoints(vecFarDownRight, vecFarDownLeft, vecDownLeft);\n        planes[3].setFromCoplanarPoints(vecFarDownLeft, vecFarTopLeft, vecTopLeft);\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft);\n        planes[5].setFromCoplanarPoints(vecFarDownRight, vecFarTopRight, vecFarTopLeft);\n        planes[5].normal.multiplyScalar(-1);\n      } else {\n        console.error('THREE.SelectionBox: Unsupported camera type.');\n      }\n    }\n    searchChildInFrustum(frustum, object) {\n      if (object.isMesh || object.isLine || object.isPoints) {\n        if (object.material !== undefined) {\n          if (object.geometry.boundingSphere === null) object.geometry.computeBoundingSphere();\n          center.copy(object.geometry.boundingSphere.center);\n          center.applyMatrix4(object.matrixWorld);\n          if (frustum.containsPoint(center)) {\n            this.collection.push(object);\n          }\n        }\n      }\n      if (object.children.length > 0) {\n        for (let x = 0; x < object.children.length; x++) {\n          this.searchChildInFrustum(frustum, object.children[x]);\n        }\n      }\n    }\n  }\n  return SelectionBox;\n})();\nexport { SelectionBox };","map":{"version":3,"names":["Frustum","Vector3","SelectionBox","frustum","center","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","vecFarTopLeft","vecFarTopRight","vecFarDownRight","vecFarDownLeft","vectemp1","vectemp2","vectemp3","constructor","camera","scene","deep","startPoint","endPoint","collection","Number","MAX_VALUE","select","updateFrustum","searchChildInFrustum","x","EPSILON","y","updateProjectionMatrix","updateMatrixWorld","isPerspectiveCamera","copy","Math","min","max","setFromMatrixPosition","matrixWorld","set","unproject","sub","normalize","multiplyScalar","add","planes","setFromCoplanarPoints","normal","isOrthographicCamera","left","top","right","down","console","error","object","isMesh","isLine","isPoints","material","undefined","geometry","boundingSphere","computeBoundingSphere","applyMatrix4","containsPoint","push","children","length"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/interactive/SelectionBox.js"],"sourcesContent":["import { Frustum, Vector3 } from 'three';\n\n/**\n * This is a class to check whether objects are in a selection area in 3D space\n */\n\nconst SelectionBox = (() => {\n  const frustum = new Frustum();\n  const center = new Vector3();\n  const tmpPoint = new Vector3();\n  const vecNear = new Vector3();\n  const vecTopLeft = new Vector3();\n  const vecTopRight = new Vector3();\n  const vecDownRight = new Vector3();\n  const vecDownLeft = new Vector3();\n  const vecFarTopLeft = new Vector3();\n  const vecFarTopRight = new Vector3();\n  const vecFarDownRight = new Vector3();\n  const vecFarDownLeft = new Vector3();\n  const vectemp1 = new Vector3();\n  const vectemp2 = new Vector3();\n  const vectemp3 = new Vector3();\n\n  class SelectionBox {\n    constructor(camera, scene, deep) {\n      this.camera = camera;\n      this.scene = scene;\n      this.startPoint = new Vector3();\n      this.endPoint = new Vector3();\n      this.collection = [];\n      this.deep = deep || Number.MAX_VALUE;\n    }\n\n    select(startPoint, endPoint) {\n      this.startPoint = startPoint || this.startPoint;\n      this.endPoint = endPoint || this.endPoint;\n      this.collection = [];\n      this.updateFrustum(this.startPoint, this.endPoint);\n      this.searchChildInFrustum(frustum, this.scene);\n      return this.collection;\n    }\n\n    updateFrustum(startPoint, endPoint) {\n      startPoint = startPoint || this.startPoint;\n      endPoint = endPoint || this.endPoint; // Avoid invalid frustum\n\n      if (startPoint.x === endPoint.x) {\n        endPoint.x += Number.EPSILON;\n      }\n\n      if (startPoint.y === endPoint.y) {\n        endPoint.y += Number.EPSILON;\n      }\n\n      this.camera.updateProjectionMatrix();\n      this.camera.updateMatrixWorld();\n\n      if (this.camera.isPerspectiveCamera) {\n        tmpPoint.copy(startPoint);\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x);\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y);\n        endPoint.x = Math.max(startPoint.x, endPoint.x);\n        endPoint.y = Math.min(startPoint.y, endPoint.y);\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld);\n        vecTopLeft.copy(tmpPoint);\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0);\n        vecDownRight.copy(endPoint);\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0);\n        vecTopLeft.unproject(this.camera);\n        vecTopRight.unproject(this.camera);\n        vecDownRight.unproject(this.camera);\n        vecDownLeft.unproject(this.camera);\n        vectemp1.copy(vecTopLeft).sub(vecNear);\n        vectemp2.copy(vecTopRight).sub(vecNear);\n        vectemp3.copy(vecDownRight).sub(vecNear);\n        vectemp1.normalize();\n        vectemp2.normalize();\n        vectemp3.normalize();\n        vectemp1.multiplyScalar(this.deep);\n        vectemp2.multiplyScalar(this.deep);\n        vectemp3.multiplyScalar(this.deep);\n        vectemp1.add(vecNear);\n        vectemp2.add(vecNear);\n        vectemp3.add(vecNear);\n        var planes = frustum.planes;\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight);\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight);\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear);\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear);\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft);\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1);\n        planes[5].normal.multiplyScalar(-1);\n      } else if (this.camera.isOrthographicCamera) {\n        const left = Math.min(startPoint.x, endPoint.x);\n        const top = Math.max(startPoint.y, endPoint.y);\n        const right = Math.max(startPoint.x, endPoint.x);\n        const down = Math.min(startPoint.y, endPoint.y);\n        vecTopLeft.set(left, top, -1);\n        vecTopRight.set(right, top, -1);\n        vecDownRight.set(right, down, -1);\n        vecDownLeft.set(left, down, -1);\n        vecFarTopLeft.set(left, top, 1);\n        vecFarTopRight.set(right, top, 1);\n        vecFarDownRight.set(right, down, 1);\n        vecFarDownLeft.set(left, down, 1);\n        vecTopLeft.unproject(this.camera);\n        vecTopRight.unproject(this.camera);\n        vecDownRight.unproject(this.camera);\n        vecDownLeft.unproject(this.camera);\n        vecFarTopLeft.unproject(this.camera);\n        vecFarTopRight.unproject(this.camera);\n        vecFarDownRight.unproject(this.camera);\n        vecFarDownLeft.unproject(this.camera);\n        var planes = frustum.planes;\n        planes[0].setFromCoplanarPoints(vecTopLeft, vecFarTopLeft, vecFarTopRight);\n        planes[1].setFromCoplanarPoints(vecTopRight, vecFarTopRight, vecFarDownRight);\n        planes[2].setFromCoplanarPoints(vecFarDownRight, vecFarDownLeft, vecDownLeft);\n        planes[3].setFromCoplanarPoints(vecFarDownLeft, vecFarTopLeft, vecTopLeft);\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft);\n        planes[5].setFromCoplanarPoints(vecFarDownRight, vecFarTopRight, vecFarTopLeft);\n        planes[5].normal.multiplyScalar(-1);\n      } else {\n        console.error('THREE.SelectionBox: Unsupported camera type.');\n      }\n    }\n\n    searchChildInFrustum(frustum, object) {\n      if (object.isMesh || object.isLine || object.isPoints) {\n        if (object.material !== undefined) {\n          if (object.geometry.boundingSphere === null) object.geometry.computeBoundingSphere();\n          center.copy(object.geometry.boundingSphere.center);\n          center.applyMatrix4(object.matrixWorld);\n\n          if (frustum.containsPoint(center)) {\n            this.collection.push(object);\n          }\n        }\n      }\n\n      if (object.children.length > 0) {\n        for (let x = 0; x < object.children.length; x++) {\n          this.searchChildInFrustum(frustum, object.children[x]);\n        }\n      }\n    }\n\n  }\n\n  return SelectionBox;\n})();\n\nexport { SelectionBox };\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,OAAO,QAAQ,OAAO;;AAExC;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG,CAAC,MAAM;EAC1B,MAAMC,OAAO,GAAG,IAAIH,OAAO,EAAE;EAC7B,MAAMI,MAAM,GAAG,IAAIH,OAAO,EAAE;EAC5B,MAAMI,QAAQ,GAAG,IAAIJ,OAAO,EAAE;EAC9B,MAAMK,OAAO,GAAG,IAAIL,OAAO,EAAE;EAC7B,MAAMM,UAAU,GAAG,IAAIN,OAAO,EAAE;EAChC,MAAMO,WAAW,GAAG,IAAIP,OAAO,EAAE;EACjC,MAAMQ,YAAY,GAAG,IAAIR,OAAO,EAAE;EAClC,MAAMS,WAAW,GAAG,IAAIT,OAAO,EAAE;EACjC,MAAMU,aAAa,GAAG,IAAIV,OAAO,EAAE;EACnC,MAAMW,cAAc,GAAG,IAAIX,OAAO,EAAE;EACpC,MAAMY,eAAe,GAAG,IAAIZ,OAAO,EAAE;EACrC,MAAMa,cAAc,GAAG,IAAIb,OAAO,EAAE;EACpC,MAAMc,QAAQ,GAAG,IAAId,OAAO,EAAE;EAC9B,MAAMe,QAAQ,GAAG,IAAIf,OAAO,EAAE;EAC9B,MAAMgB,QAAQ,GAAG,IAAIhB,OAAO,EAAE;EAE9B,MAAMC,YAAY,CAAC;IACjBgB,WAAWA,CAACC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAE;MAC/B,IAAI,CAACF,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACE,UAAU,GAAG,IAAIrB,OAAO,EAAE;MAC/B,IAAI,CAACsB,QAAQ,GAAG,IAAItB,OAAO,EAAE;MAC7B,IAAI,CAACuB,UAAU,GAAG,EAAE;MACpB,IAAI,CAACH,IAAI,GAAGA,IAAI,IAAII,MAAM,CAACC,SAAS;IACtC;IAEAC,MAAMA,CAACL,UAAU,EAAEC,QAAQ,EAAE;MAC3B,IAAI,CAACD,UAAU,GAAGA,UAAU,IAAI,IAAI,CAACA,UAAU;MAC/C,IAAI,CAACC,QAAQ,GAAGA,QAAQ,IAAI,IAAI,CAACA,QAAQ;MACzC,IAAI,CAACC,UAAU,GAAG,EAAE;MACpB,IAAI,CAACI,aAAa,CAAC,IAAI,CAACN,UAAU,EAAE,IAAI,CAACC,QAAQ,CAAC;MAClD,IAAI,CAACM,oBAAoB,CAAC1B,OAAO,EAAE,IAAI,CAACiB,KAAK,CAAC;MAC9C,OAAO,IAAI,CAACI,UAAU;IACxB;IAEAI,aAAaA,CAACN,UAAU,EAAEC,QAAQ,EAAE;MAClCD,UAAU,GAAGA,UAAU,IAAI,IAAI,CAACA,UAAU;MAC1CC,QAAQ,GAAGA,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAAC,CAAC;;MAEtC,IAAID,UAAU,CAACQ,CAAC,KAAKP,QAAQ,CAACO,CAAC,EAAE;QAC/BP,QAAQ,CAACO,CAAC,IAAIL,MAAM,CAACM,OAAO;MAC9B;MAEA,IAAIT,UAAU,CAACU,CAAC,KAAKT,QAAQ,CAACS,CAAC,EAAE;QAC/BT,QAAQ,CAACS,CAAC,IAAIP,MAAM,CAACM,OAAO;MAC9B;MAEA,IAAI,CAACZ,MAAM,CAACc,sBAAsB,EAAE;MACpC,IAAI,CAACd,MAAM,CAACe,iBAAiB,EAAE;MAE/B,IAAI,IAAI,CAACf,MAAM,CAACgB,mBAAmB,EAAE;QACnC9B,QAAQ,CAAC+B,IAAI,CAACd,UAAU,CAAC;QACzBjB,QAAQ,CAACyB,CAAC,GAAGO,IAAI,CAACC,GAAG,CAAChB,UAAU,CAACQ,CAAC,EAAEP,QAAQ,CAACO,CAAC,CAAC;QAC/CzB,QAAQ,CAAC2B,CAAC,GAAGK,IAAI,CAACE,GAAG,CAACjB,UAAU,CAACU,CAAC,EAAET,QAAQ,CAACS,CAAC,CAAC;QAC/CT,QAAQ,CAACO,CAAC,GAAGO,IAAI,CAACE,GAAG,CAACjB,UAAU,CAACQ,CAAC,EAAEP,QAAQ,CAACO,CAAC,CAAC;QAC/CP,QAAQ,CAACS,CAAC,GAAGK,IAAI,CAACC,GAAG,CAAChB,UAAU,CAACU,CAAC,EAAET,QAAQ,CAACS,CAAC,CAAC;QAC/C1B,OAAO,CAACkC,qBAAqB,CAAC,IAAI,CAACrB,MAAM,CAACsB,WAAW,CAAC;QACtDlC,UAAU,CAAC6B,IAAI,CAAC/B,QAAQ,CAAC;QACzBG,WAAW,CAACkC,GAAG,CAACnB,QAAQ,CAACO,CAAC,EAAEzB,QAAQ,CAAC2B,CAAC,EAAE,CAAC,CAAC;QAC1CvB,YAAY,CAAC2B,IAAI,CAACb,QAAQ,CAAC;QAC3Bb,WAAW,CAACgC,GAAG,CAACrC,QAAQ,CAACyB,CAAC,EAAEP,QAAQ,CAACS,CAAC,EAAE,CAAC,CAAC;QAC1CzB,UAAU,CAACoC,SAAS,CAAC,IAAI,CAACxB,MAAM,CAAC;QACjCX,WAAW,CAACmC,SAAS,CAAC,IAAI,CAACxB,MAAM,CAAC;QAClCV,YAAY,CAACkC,SAAS,CAAC,IAAI,CAACxB,MAAM,CAAC;QACnCT,WAAW,CAACiC,SAAS,CAAC,IAAI,CAACxB,MAAM,CAAC;QAClCJ,QAAQ,CAACqB,IAAI,CAAC7B,UAAU,CAAC,CAACqC,GAAG,CAACtC,OAAO,CAAC;QACtCU,QAAQ,CAACoB,IAAI,CAAC5B,WAAW,CAAC,CAACoC,GAAG,CAACtC,OAAO,CAAC;QACvCW,QAAQ,CAACmB,IAAI,CAAC3B,YAAY,CAAC,CAACmC,GAAG,CAACtC,OAAO,CAAC;QACxCS,QAAQ,CAAC8B,SAAS,EAAE;QACpB7B,QAAQ,CAAC6B,SAAS,EAAE;QACpB5B,QAAQ,CAAC4B,SAAS,EAAE;QACpB9B,QAAQ,CAAC+B,cAAc,CAAC,IAAI,CAACzB,IAAI,CAAC;QAClCL,QAAQ,CAAC8B,cAAc,CAAC,IAAI,CAACzB,IAAI,CAAC;QAClCJ,QAAQ,CAAC6B,cAAc,CAAC,IAAI,CAACzB,IAAI,CAAC;QAClCN,QAAQ,CAACgC,GAAG,CAACzC,OAAO,CAAC;QACrBU,QAAQ,CAAC+B,GAAG,CAACzC,OAAO,CAAC;QACrBW,QAAQ,CAAC8B,GAAG,CAACzC,OAAO,CAAC;QACrB,IAAI0C,MAAM,GAAG7C,OAAO,CAAC6C,MAAM;QAC3BA,MAAM,CAAC,CAAC,CAAC,CAACC,qBAAqB,CAAC3C,OAAO,EAAEC,UAAU,EAAEC,WAAW,CAAC;QACjEwC,MAAM,CAAC,CAAC,CAAC,CAACC,qBAAqB,CAAC3C,OAAO,EAAEE,WAAW,EAAEC,YAAY,CAAC;QACnEuC,MAAM,CAAC,CAAC,CAAC,CAACC,qBAAqB,CAACxC,YAAY,EAAEC,WAAW,EAAEJ,OAAO,CAAC;QACnE0C,MAAM,CAAC,CAAC,CAAC,CAACC,qBAAqB,CAACvC,WAAW,EAAEH,UAAU,EAAED,OAAO,CAAC;QACjE0C,MAAM,CAAC,CAAC,CAAC,CAACC,qBAAqB,CAACzC,WAAW,EAAEC,YAAY,EAAEC,WAAW,CAAC;QACvEsC,MAAM,CAAC,CAAC,CAAC,CAACC,qBAAqB,CAAChC,QAAQ,EAAED,QAAQ,EAAED,QAAQ,CAAC;QAC7DiC,MAAM,CAAC,CAAC,CAAC,CAACE,MAAM,CAACJ,cAAc,CAAC,CAAC,CAAC,CAAC;MACrC,CAAC,MAAM,IAAI,IAAI,CAAC3B,MAAM,CAACgC,oBAAoB,EAAE;QAC3C,MAAMC,IAAI,GAAGf,IAAI,CAACC,GAAG,CAAChB,UAAU,CAACQ,CAAC,EAAEP,QAAQ,CAACO,CAAC,CAAC;QAC/C,MAAMuB,GAAG,GAAGhB,IAAI,CAACE,GAAG,CAACjB,UAAU,CAACU,CAAC,EAAET,QAAQ,CAACS,CAAC,CAAC;QAC9C,MAAMsB,KAAK,GAAGjB,IAAI,CAACE,GAAG,CAACjB,UAAU,CAACQ,CAAC,EAAEP,QAAQ,CAACO,CAAC,CAAC;QAChD,MAAMyB,IAAI,GAAGlB,IAAI,CAACC,GAAG,CAAChB,UAAU,CAACU,CAAC,EAAET,QAAQ,CAACS,CAAC,CAAC;QAC/CzB,UAAU,CAACmC,GAAG,CAACU,IAAI,EAAEC,GAAG,EAAE,CAAC,CAAC,CAAC;QAC7B7C,WAAW,CAACkC,GAAG,CAACY,KAAK,EAAED,GAAG,EAAE,CAAC,CAAC,CAAC;QAC/B5C,YAAY,CAACiC,GAAG,CAACY,KAAK,EAAEC,IAAI,EAAE,CAAC,CAAC,CAAC;QACjC7C,WAAW,CAACgC,GAAG,CAACU,IAAI,EAAEG,IAAI,EAAE,CAAC,CAAC,CAAC;QAC/B5C,aAAa,CAAC+B,GAAG,CAACU,IAAI,EAAEC,GAAG,EAAE,CAAC,CAAC;QAC/BzC,cAAc,CAAC8B,GAAG,CAACY,KAAK,EAAED,GAAG,EAAE,CAAC,CAAC;QACjCxC,eAAe,CAAC6B,GAAG,CAACY,KAAK,EAAEC,IAAI,EAAE,CAAC,CAAC;QACnCzC,cAAc,CAAC4B,GAAG,CAACU,IAAI,EAAEG,IAAI,EAAE,CAAC,CAAC;QACjChD,UAAU,CAACoC,SAAS,CAAC,IAAI,CAACxB,MAAM,CAAC;QACjCX,WAAW,CAACmC,SAAS,CAAC,IAAI,CAACxB,MAAM,CAAC;QAClCV,YAAY,CAACkC,SAAS,CAAC,IAAI,CAACxB,MAAM,CAAC;QACnCT,WAAW,CAACiC,SAAS,CAAC,IAAI,CAACxB,MAAM,CAAC;QAClCR,aAAa,CAACgC,SAAS,CAAC,IAAI,CAACxB,MAAM,CAAC;QACpCP,cAAc,CAAC+B,SAAS,CAAC,IAAI,CAACxB,MAAM,CAAC;QACrCN,eAAe,CAAC8B,SAAS,CAAC,IAAI,CAACxB,MAAM,CAAC;QACtCL,cAAc,CAAC6B,SAAS,CAAC,IAAI,CAACxB,MAAM,CAAC;QACrC,IAAI6B,MAAM,GAAG7C,OAAO,CAAC6C,MAAM;QAC3BA,MAAM,CAAC,CAAC,CAAC,CAACC,qBAAqB,CAAC1C,UAAU,EAAEI,aAAa,EAAEC,cAAc,CAAC;QAC1EoC,MAAM,CAAC,CAAC,CAAC,CAACC,qBAAqB,CAACzC,WAAW,EAAEI,cAAc,EAAEC,eAAe,CAAC;QAC7EmC,MAAM,CAAC,CAAC,CAAC,CAACC,qBAAqB,CAACpC,eAAe,EAAEC,cAAc,EAAEJ,WAAW,CAAC;QAC7EsC,MAAM,CAAC,CAAC,CAAC,CAACC,qBAAqB,CAACnC,cAAc,EAAEH,aAAa,EAAEJ,UAAU,CAAC;QAC1EyC,MAAM,CAAC,CAAC,CAAC,CAACC,qBAAqB,CAACzC,WAAW,EAAEC,YAAY,EAAEC,WAAW,CAAC;QACvEsC,MAAM,CAAC,CAAC,CAAC,CAACC,qBAAqB,CAACpC,eAAe,EAAED,cAAc,EAAED,aAAa,CAAC;QAC/EqC,MAAM,CAAC,CAAC,CAAC,CAACE,MAAM,CAACJ,cAAc,CAAC,CAAC,CAAC,CAAC;MACrC,CAAC,MAAM;QACLU,OAAO,CAACC,KAAK,CAAC,8CAA8C,CAAC;MAC/D;IACF;IAEA5B,oBAAoBA,CAAC1B,OAAO,EAAEuD,MAAM,EAAE;MACpC,IAAIA,MAAM,CAACC,MAAM,IAAID,MAAM,CAACE,MAAM,IAAIF,MAAM,CAACG,QAAQ,EAAE;QACrD,IAAIH,MAAM,CAACI,QAAQ,KAAKC,SAAS,EAAE;UACjC,IAAIL,MAAM,CAACM,QAAQ,CAACC,cAAc,KAAK,IAAI,EAAEP,MAAM,CAACM,QAAQ,CAACE,qBAAqB,EAAE;UACpF9D,MAAM,CAACgC,IAAI,CAACsB,MAAM,CAACM,QAAQ,CAACC,cAAc,CAAC7D,MAAM,CAAC;UAClDA,MAAM,CAAC+D,YAAY,CAACT,MAAM,CAACjB,WAAW,CAAC;UAEvC,IAAItC,OAAO,CAACiE,aAAa,CAAChE,MAAM,CAAC,EAAE;YACjC,IAAI,CAACoB,UAAU,CAAC6C,IAAI,CAACX,MAAM,CAAC;UAC9B;QACF;MACF;MAEA,IAAIA,MAAM,CAACY,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;QAC9B,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4B,MAAM,CAACY,QAAQ,CAACC,MAAM,EAAEzC,CAAC,EAAE,EAAE;UAC/C,IAAI,CAACD,oBAAoB,CAAC1B,OAAO,EAAEuD,MAAM,CAACY,QAAQ,CAACxC,CAAC,CAAC,CAAC;QACxD;MACF;IACF;EAEF;EAEA,OAAO5B,YAAY;AACrB,CAAC,GAAG;AAEJ,SAASA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}