{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Matrix4, EventDispatcher, EllipseCurve, BufferGeometry, MathUtils, Vector3, GridHelper, LineBasicMaterial, Line, Raycaster, Vector2, Quaternion, Group, Box3, Sphere } from 'three';\n\n//trackball state\nconst STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nconst INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n}; //cursor center coordinates\n\nconst _center = {\n  x: 0,\n  y: 0\n}; //transformation matrices for gizmos and camera\n\nconst _transformation = {\n  camera: new Matrix4(),\n  gizmos: new Matrix4()\n}; //events\n\nconst _changeEvent = {\n  type: 'change'\n};\nconst _startEvent = {\n  type: 'start'\n};\nconst _endEvent = {\n  type: 'end'\n};\n/**\n *\n * @param {CamOrthographicCamera | PerspectiveCameraera} camera Virtual camera used in the scene\n * @param {HTMLElement=null} domElement Renderer's dom element\n * @param {Scene=null} scene The scene to be rendered\n */\n\nclass ArcballControls extends EventDispatcher {\n  constructor(_camera) {\n    var _this;\n    let _domElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let scene = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    super();\n    _this = this;\n    _defineProperty(this, \"camera\", void 0);\n    _defineProperty(this, \"domElement\", void 0);\n    _defineProperty(this, \"scene\", void 0);\n    _defineProperty(this, \"mouseActions\", void 0);\n    _defineProperty(this, \"_mouseOp\", void 0);\n    _defineProperty(this, \"_v2_1\", void 0);\n    _defineProperty(this, \"_v3_1\", void 0);\n    _defineProperty(this, \"_v3_2\", void 0);\n    _defineProperty(this, \"_m4_1\", void 0);\n    _defineProperty(this, \"_m4_2\", void 0);\n    _defineProperty(this, \"_quat\", void 0);\n    _defineProperty(this, \"_translationMatrix\", void 0);\n    _defineProperty(this, \"_rotationMatrix\", void 0);\n    _defineProperty(this, \"_scaleMatrix\", void 0);\n    _defineProperty(this, \"_rotationAxis\", void 0);\n    _defineProperty(this, \"_cameraMatrixState\", void 0);\n    _defineProperty(this, \"_cameraProjectionState\", void 0);\n    _defineProperty(this, \"_fovState\", void 0);\n    _defineProperty(this, \"_upState\", void 0);\n    _defineProperty(this, \"_zoomState\", void 0);\n    _defineProperty(this, \"_nearPos\", void 0);\n    _defineProperty(this, \"_farPos\", void 0);\n    _defineProperty(this, \"_gizmoMatrixState\", void 0);\n    _defineProperty(this, \"_up0\", void 0);\n    _defineProperty(this, \"_zoom0\", void 0);\n    _defineProperty(this, \"_fov0\", void 0);\n    _defineProperty(this, \"_initialNear\", void 0);\n    _defineProperty(this, \"_nearPos0\", void 0);\n    _defineProperty(this, \"_initialFar\", void 0);\n    _defineProperty(this, \"_farPos0\", void 0);\n    _defineProperty(this, \"_cameraMatrixState0\", void 0);\n    _defineProperty(this, \"_gizmoMatrixState0\", void 0);\n    _defineProperty(this, \"_button\", void 0);\n    _defineProperty(this, \"_touchStart\", void 0);\n    _defineProperty(this, \"_touchCurrent\", void 0);\n    _defineProperty(this, \"_input\", void 0);\n    _defineProperty(this, \"_switchSensibility\", void 0);\n    _defineProperty(this, \"_startFingerDistance\", void 0);\n    _defineProperty(this, \"_currentFingerDistance\", void 0);\n    _defineProperty(this, \"_startFingerRotation\", void 0);\n    _defineProperty(this, \"_currentFingerRotation\", void 0);\n    _defineProperty(this, \"_devPxRatio\", void 0);\n    _defineProperty(this, \"_downValid\", void 0);\n    _defineProperty(this, \"_nclicks\", void 0);\n    _defineProperty(this, \"_downEvents\", void 0);\n    _defineProperty(this, \"_clickStart\", void 0);\n    _defineProperty(this, \"_maxDownTime\", void 0);\n    _defineProperty(this, \"_maxInterval\", void 0);\n    _defineProperty(this, \"_posThreshold\", void 0);\n    _defineProperty(this, \"_movementThreshold\", void 0);\n    _defineProperty(this, \"_currentCursorPosition\", void 0);\n    _defineProperty(this, \"_startCursorPosition\", void 0);\n    _defineProperty(this, \"_grid\", void 0);\n    _defineProperty(this, \"_gridPosition\", void 0);\n    _defineProperty(this, \"_gizmos\", void 0);\n    _defineProperty(this, \"_curvePts\", void 0);\n    _defineProperty(this, \"_timeStart\", void 0);\n    _defineProperty(this, \"_animationId\", void 0);\n    _defineProperty(this, \"focusAnimationTime\", void 0);\n    _defineProperty(this, \"_timePrev\", void 0);\n    _defineProperty(this, \"_timeCurrent\", void 0);\n    _defineProperty(this, \"_anglePrev\", void 0);\n    _defineProperty(this, \"_angleCurrent\", void 0);\n    _defineProperty(this, \"_cursorPosPrev\", void 0);\n    _defineProperty(this, \"_cursorPosCurr\", void 0);\n    _defineProperty(this, \"_wPrev\", void 0);\n    _defineProperty(this, \"_wCurr\", void 0);\n    _defineProperty(this, \"adjustNearFar\", void 0);\n    _defineProperty(this, \"scaleFactor\", void 0);\n    _defineProperty(this, \"dampingFactor\", void 0);\n    _defineProperty(this, \"wMax\", void 0);\n    _defineProperty(this, \"enableAnimations\", void 0);\n    _defineProperty(this, \"enableGrid\", void 0);\n    _defineProperty(this, \"cursorZoom\", void 0);\n    _defineProperty(this, \"minFov\", void 0);\n    _defineProperty(this, \"maxFov\", void 0);\n    _defineProperty(this, \"enabled\", void 0);\n    _defineProperty(this, \"enablePan\", void 0);\n    _defineProperty(this, \"enableRotate\", void 0);\n    _defineProperty(this, \"enableZoom\", void 0);\n    _defineProperty(this, \"minDistance\", void 0);\n    _defineProperty(this, \"maxDistance\", void 0);\n    _defineProperty(this, \"minZoom\", void 0);\n    _defineProperty(this, \"maxZoom\", void 0);\n    _defineProperty(this, \"target\", void 0);\n    _defineProperty(this, \"_currentTarget\", void 0);\n    _defineProperty(this, \"_tbRadius\", void 0);\n    _defineProperty(this, \"_state\", void 0);\n    _defineProperty(this, \"onWindowResize\", () => {\n      const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n      if (this.camera) {\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n      }\n      const newRadius = this._tbRadius / scale; // @ts-expect-error\n\n      const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n      for (const gizmo in this._gizmos.children) {\n        const child = this._gizmos.children[gizmo];\n        child.geometry = curveGeometry;\n      }\n      this.dispatchEvent(_changeEvent);\n    });\n    _defineProperty(this, \"onContextMenu\", event => {\n      if (!this.enabled) {\n        return;\n      }\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == 2) {\n          //prevent only if button 2 is actually used\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n    _defineProperty(this, \"onPointerCancel\", () => {\n      this._touchStart.splice(0, this._touchStart.length);\n      this._touchCurrent.splice(0, this._touchCurrent.length);\n      this._input = INPUT.NONE;\n    });\n    _defineProperty(this, \"onPointerDown\", event => {\n      if (event.button == 0 && event.isPrimary) {\n        this._downValid = true;\n        this._downEvents.push(event);\n      } else {\n        this._downValid = false;\n      }\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        this._touchStart.push(event);\n        this._touchCurrent.push(event);\n        switch (this._input) {\n          case INPUT.NONE:\n            //singleStart\n            this._input = INPUT.ONE_FINGER;\n            this.onSinglePanStart(event, 'ROTATE');\n            window.addEventListener('pointermove', this.onPointerMove);\n            window.addEventListener('pointerup', this.onPointerUp);\n            break;\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //doubleStart\n            this._input = INPUT.TWO_FINGER;\n            this.onRotateStart();\n            this.onPinchStart();\n            this.onDoublePanStart();\n            break;\n          case INPUT.TWO_FINGER:\n            //multipleStart\n            this._input = INPUT.MULT_FINGER;\n            this.onTriplePanStart();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.NONE) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n        this._mouseOp = this.getOpFromAction(event.button, modifier);\n        if (this._mouseOp) {\n          window.addEventListener('pointermove', this.onPointerMove);\n          window.addEventListener('pointerup', this.onPointerUp); //singleStart\n\n          this._input = INPUT.CURSOR;\n          this._button = event.button;\n          this.onSinglePanStart(event, this._mouseOp);\n        }\n      }\n    });\n    _defineProperty(this, \"onPointerMove\", event => {\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n            //singleMove\n            this.updateTouchEvent(event);\n            this.onSinglePanMove(event, STATE.ROTATE);\n            break;\n          case INPUT.ONE_FINGER_SWITCHED:\n            const movement = this.calculatePointersDistance(this._touchCurrent[0], event) * this._devPxRatio;\n            if (movement >= this._switchSensibility) {\n              //singleMove\n              this._input = INPUT.ONE_FINGER;\n              this.updateTouchEvent(event);\n              this.onSinglePanStart(event, 'ROTATE');\n              break;\n            }\n            break;\n          case INPUT.TWO_FINGER:\n            //rotate/pan/pinchMove\n            this.updateTouchEvent(event);\n            this.onRotateMove();\n            this.onPinchMove();\n            this.onDoublePanMove();\n            break;\n          case INPUT.MULT_FINGER:\n            //multMove\n            this.updateTouchEvent(event);\n            this.onTriplePanMove();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n        const mouseOpState = this.getOpStateFromAction(this._button, modifier);\n        if (mouseOpState) {\n          this.onSinglePanMove(event, mouseOpState);\n        }\n      } //checkDistance\n\n      if (this._downValid) {\n        const movement = this.calculatePointersDistance(this._downEvents[this._downEvents.length - 1], event) * this._devPxRatio;\n        if (movement > this._movementThreshold) {\n          this._downValid = false;\n        }\n      }\n    });\n    _defineProperty(this, \"onPointerUp\", event => {\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        const nTouch = this._touchCurrent.length;\n        for (let i = 0; i < nTouch; i++) {\n          if (this._touchCurrent[i].pointerId == event.pointerId) {\n            this._touchCurrent.splice(i, 1);\n            this._touchStart.splice(i, 1);\n            break;\n          }\n        }\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //singleEnd\n            window.removeEventListener('pointermove', this.onPointerMove);\n            window.removeEventListener('pointerup', this.onPointerUp);\n            this._input = INPUT.NONE;\n            this.onSinglePanEnd();\n            break;\n          case INPUT.TWO_FINGER:\n            //doubleEnd\n            this.onDoublePanEnd();\n            this.onPinchEnd();\n            this.onRotateEnd(); //switching to singleStart\n\n            this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n          case INPUT.MULT_FINGER:\n            if (this._touchCurrent.length == 0) {\n              window.removeEventListener('pointermove', this.onPointerMove);\n              window.removeEventListener('pointerup', this.onPointerUp); //multCancel\n\n              this._input = INPUT.NONE;\n              this.onTriplePanEnd();\n            }\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\n        window.removeEventListener('pointermove', this.onPointerMove);\n        window.removeEventListener('pointerup', this.onPointerUp);\n        this._input = INPUT.NONE;\n        this.onSinglePanEnd();\n        this._button = -1;\n      }\n      if (event.isPrimary) {\n        if (this._downValid) {\n          const downTime = event.timeStamp - this._downEvents[this._downEvents.length - 1].timeStamp;\n          if (downTime <= this._maxDownTime) {\n            if (this._nclicks == 0) {\n              //first valid click detected\n              this._nclicks = 1;\n              this._clickStart = performance.now();\n            } else {\n              const clickInterval = event.timeStamp - this._clickStart;\n              const movement = this.calculatePointersDistance(this._downEvents[1], this._downEvents[0]) * this._devPxRatio;\n              if (clickInterval <= this._maxInterval && movement <= this._posThreshold) {\n                //second valid click detected\n                //fire double tap and reset values\n                this._nclicks = 0;\n                this._downEvents.splice(0, this._downEvents.length);\n                this.onDoubleTap(event);\n              } else {\n                //new 'first click'\n                this._nclicks = 1;\n                this._downEvents.shift();\n                this._clickStart = performance.now();\n              }\n            }\n          } else {\n            this._downValid = false;\n            this._nclicks = 0;\n            this._downEvents.splice(0, this._downEvents.length);\n          }\n        } else {\n          this._nclicks = 0;\n          this._downEvents.splice(0, this._downEvents.length);\n        }\n      }\n    });\n    _defineProperty(this, \"onWheel\", event => {\n      var _this$camera3;\n      if (this.enabled && this.enableZoom && this.domElement) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n        const mouseOp = this.getOpFromAction('WHEEL', modifier);\n        if (mouseOp) {\n          event.preventDefault();\n          this.dispatchEvent(_startEvent);\n          const notchDeltaY = 125; //distance of one notch of mouse wheel\n\n          let sgn = event.deltaY / notchDeltaY;\n          let size = 1;\n          if (sgn > 0) {\n            size = 1 / this.scaleFactor;\n          } else if (sgn < 0) {\n            size = this.scaleFactor;\n          }\n          switch (mouseOp) {\n            case 'ZOOM':\n              this.updateTbState(STATE.SCALE, true);\n              if (sgn > 0) {\n                size = 1 / Math.pow(this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(this.scaleFactor, -sgn);\n              }\n              if (this.cursorZoom && this.enablePan) {\n                var _this$camera, _this$camera2;\n                let scalePoint;\n                if (((_this$camera = this.camera) === null || _this$camera === void 0 ? void 0 : _this$camera.type) === 'OrthographicCamera') {\n                  var _this$unprojectOnTbPl;\n                  scalePoint = (_this$unprojectOnTbPl = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl === void 0 ? void 0 : _this$unprojectOnTbPl.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n                }\n                if (((_this$camera2 = this.camera) === null || _this$camera2 === void 0 ? void 0 : _this$camera2.type) === 'PerspectiveCamera') {\n                  var _this$unprojectOnTbPl2;\n                  scalePoint = (_this$unprojectOnTbPl2 = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl2 === void 0 ? void 0 : _this$unprojectOnTbPl2.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n                }\n                if (scalePoint !== undefined) this.applyTransformMatrix(this.applyScale(size, scalePoint));\n              } else {\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n            case 'FOV':\n              if (((_this$camera3 = this.camera) === null || _this$camera3 === void 0 ? void 0 : _this$camera3.type) === 'PerspectiveCamera') {\n                this.updateTbState(STATE.FOV, true); //Vertigo effect\n                //\t  fov / 2\n                //\t\t|\\\n                //\t\t| \\\n                //\t\t|  \\\n                //\tx\t|\t\\\n                //\t\t| \t \\\n                //\t\t| \t  \\\n                //\t\t| _ _ _\\\n                //\t\t\ty\n                //check for iOs shift shortcut\n\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(this.scaleFactor, -sgn);\n                  }\n                }\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this.camera.fov * 0.5); //calculate new fov\n\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                if (newFov > this.maxFov) {\n                  newFov = this.maxFov;\n                } else if (newFov < this.minFov) {\n                  newFov = this.minFov;\n                }\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position, false));\n              }\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n          }\n        }\n      }\n    });\n    _defineProperty(this, \"onSinglePanStart\", (event, operation) => {\n      var _this$camera4;\n      if (this.enabled && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        switch (operation) {\n          case 'PAN':\n            if (!this.enablePan) return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n            if (this.camera) {\n              this.updateTbState(STATE.PAN, true);\n              const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n              if (rayDir !== undefined) {\n                this._startCursorPosition.copy(rayDir);\n              }\n              if (this.enableGrid) {\n                this.drawGrid();\n                this.dispatchEvent(_changeEvent);\n              }\n            }\n            break;\n          case 'ROTATE':\n            if (!this.enableRotate) return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n            }\n            if (this.camera) {\n              this.updateTbState(STATE.ROTATE, true);\n              const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n              if (rayDir !== undefined) {\n                this._startCursorPosition.copy(rayDir);\n              }\n              this.activateGizmos(true);\n              if (this.enableAnimations) {\n                this._timePrev = this._timeCurrent = performance.now();\n                this._angleCurrent = this._anglePrev = 0;\n                this._cursorPosPrev.copy(this._startCursorPosition);\n                this._cursorPosCurr.copy(this._cursorPosPrev);\n                this._wCurr = 0;\n                this._wPrev = this._wCurr;\n              }\n            }\n            this.dispatchEvent(_changeEvent);\n            break;\n          case 'FOV':\n            if (!this.enableZoom) return;\n            if (((_this$camera4 = this.camera) === null || _this$camera4 === void 0 ? void 0 : _this$camera4.type) === 'PerspectiveCamera') {\n              if (this._animationId != -1) {\n                cancelAnimationFrame(this._animationId);\n                this._animationId = -1;\n                this._timeStart = -1;\n                this.activateGizmos(false);\n                this.dispatchEvent(_changeEvent);\n              }\n              this.updateTbState(STATE.FOV, true);\n              this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n              this._currentCursorPosition.copy(this._startCursorPosition);\n            }\n            break;\n          case 'ZOOM':\n            if (!this.enableZoom) return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n            this.updateTbState(STATE.SCALE, true);\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n            this._currentCursorPosition.copy(this._startCursorPosition);\n            break;\n        }\n      }\n    });\n    _defineProperty(this, \"onSinglePanMove\", (event, opState) => {\n      var _this$camera5;\n      if (this.enabled && this.domElement) {\n        const restart = opState != this._state;\n        this.setCenter(event.clientX, event.clientY);\n        switch (opState) {\n          case STATE.PAN:\n            if (this.enablePan && this.camera) {\n              if (restart) {\n                //switch to pan operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n                if (rayDir !== undefined) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n                if (this.enableGrid) {\n                  this.drawGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                //continue with pan operation\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n                if (rayDir !== undefined) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n                this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition));\n              }\n            }\n            break;\n          case STATE.ROTATE:\n            if (this.enableRotate && this.camera) {\n              if (restart) {\n                //switch to rotate operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n                if (rayDir !== undefined) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(true);\n              } else {\n                //continue with rotate operation\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n                if (rayDir !== undefined) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n                const distance = this._startCursorPosition.distanceTo(this._currentCursorPosition);\n                const angle = this._startCursorPosition.angleTo(this._currentCursorPosition);\n                const amount = Math.max(distance / this._tbRadius, angle); //effective rotation angle\n\n                this.applyTransformMatrix(this.rotate(this.calculateRotationAxis(this._startCursorPosition, this._currentCursorPosition), amount));\n                if (this.enableAnimations) {\n                  this._timePrev = this._timeCurrent;\n                  this._timeCurrent = performance.now();\n                  this._anglePrev = this._angleCurrent;\n                  this._angleCurrent = amount;\n                  this._cursorPosPrev.copy(this._cursorPosCurr);\n                  this._cursorPosCurr.copy(this._currentCursorPosition);\n                  this._wPrev = this._wCurr;\n                  this._wCurr = this.calculateAngularSpeed(this._anglePrev, this._angleCurrent, this._timePrev, this._timeCurrent);\n                }\n              }\n            }\n            break;\n          case STATE.SCALE:\n            if (this.enableZoom) {\n              if (restart) {\n                //switch to zoom operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                this._currentCursorPosition.copy(this._startCursorPosition);\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                //continue with zoom operation\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n            }\n            break;\n          case STATE.FOV:\n            if (this.enableZoom && ((_this$camera5 = this.camera) === null || _this$camera5 === void 0 ? void 0 : _this$camera5.type) === 'PerspectiveCamera') {\n              if (restart) {\n                //switch to fov operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                this._currentCursorPosition.copy(this._startCursorPosition);\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                //continue with fov operation\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\n\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\n\n                const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n                this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n            break;\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    _defineProperty(this, \"onSinglePanEnd\", () => {\n      if (this._state == STATE.ROTATE) {\n        if (!this.enableRotate) {\n          return;\n        }\n        if (this.enableAnimations) {\n          //perform rotation animation\n          const deltaTime = performance.now() - this._timeCurrent;\n          if (deltaTime < 120) {\n            const w = Math.abs((this._wPrev + this._wCurr) / 2);\n            const self = this;\n            this._animationId = window.requestAnimationFrame(function (t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              const rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            //cursor has been standing still for over 120 ms since last movement\n            this.updateTbState(STATE.IDLE, false);\n            this.activateGizmos(false);\n            this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else if (this._state == STATE.PAN || this._state == STATE.IDLE) {\n        this.updateTbState(STATE.IDLE, false);\n        if (this.enableGrid) {\n          this.disposeGrid();\n        }\n        this.activateGizmos(false);\n        this.dispatchEvent(_changeEvent);\n      }\n      this.dispatchEvent(_endEvent);\n    });\n    _defineProperty(this, \"onDoubleTap\", event => {\n      if (this.enabled && this.enablePan && this.scene && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        const hitP = this.unprojectOnObj(this.getCursorNDC(_center.x, _center.y, this.domElement), this.camera);\n        if (hitP && this.enableAnimations) {\n          const self = this;\n          if (this._animationId != -1) {\n            window.cancelAnimationFrame(this._animationId);\n          }\n          this._timeStart = -1;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP && !this.enableAnimations) {\n          this.updateTbState(STATE.FOCUS, true);\n          this.focus(hitP, this.scaleFactor);\n          this.updateTbState(STATE.IDLE, false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n      this.dispatchEvent(_endEvent);\n    });\n    _defineProperty(this, \"onDoublePanStart\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.PAN, true);\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== undefined) {\n          this._startCursorPosition.copy(rayDir);\n        }\n        this._currentCursorPosition.copy(this._startCursorPosition);\n        this.activateGizmos(false);\n      }\n    });\n    _defineProperty(this, \"onDoublePanMove\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        if (this._state != STATE.PAN) {\n          this.updateTbState(STATE.PAN, true);\n          this._startCursorPosition.copy(this._currentCursorPosition);\n        }\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== undefined) this._currentCursorPosition.copy(rayDir);\n        this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition, true));\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    _defineProperty(this, \"onDoublePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    _defineProperty(this, \"onRotateStart\", () => {\n      if (this.enabled && this.enableRotate) {\n        var _this$camera6;\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.ZROTATE, true); //this._startFingerRotation = event.rotation;\n\n        this._startFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        this._currentFingerRotation = this._startFingerRotation;\n        (_this$camera6 = this.camera) === null || _this$camera6 === void 0 ? void 0 : _this$camera6.getWorldDirection(this._rotationAxis); //rotation axis\n\n        if (!this.enablePan && !this.enableZoom) {\n          this.activateGizmos(true);\n        }\n      }\n    });\n    _defineProperty(this, \"onRotateMove\", () => {\n      if (this.enabled && this.enableRotate && this.camera && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        let rotationPoint;\n        if (this._state != STATE.ZROTATE) {\n          this.updateTbState(STATE.ZROTATE, true);\n          this._startFingerRotation = this._currentFingerRotation;\n        } //this._currentFingerRotation = event.rotation;\n\n        this._currentFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        if (!this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(this._gizmoMatrixState);\n        } else if (this.camera) {\n          var _this$unprojectOnTbPl3;\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n          rotationPoint = (_this$unprojectOnTbPl3 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl3 === void 0 ? void 0 : _this$unprojectOnTbPl3.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._v3_2);\n        }\n        const amount = MathUtils.DEG2RAD * (this._startFingerRotation - this._currentFingerRotation);\n        if (rotationPoint !== undefined) {\n          this.applyTransformMatrix(this.zRotate(rotationPoint, amount));\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    _defineProperty(this, \"onRotateEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.activateGizmos(false);\n      this.dispatchEvent(_endEvent);\n    });\n    _defineProperty(this, \"onPinchStart\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        this._startFingerDistance = this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]);\n        this._currentFingerDistance = this._startFingerDistance;\n        this.activateGizmos(false);\n      }\n    });\n    _defineProperty(this, \"onPinchMove\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const minDistance = 12; //minimum distance between fingers (in css pixels)\n\n        if (this._state != STATE.SCALE) {\n          this._startFingerDistance = this._currentFingerDistance;\n          this.updateTbState(STATE.SCALE, true);\n        }\n        this._currentFingerDistance = Math.max(this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]), minDistance * this._devPxRatio);\n        const amount = this._currentFingerDistance / this._startFingerDistance;\n        let scalePoint;\n        if (!this.enablePan) {\n          scalePoint = this._gizmos.position;\n        } else {\n          var _this$camera7, _this$camera8;\n          if (((_this$camera7 = this.camera) === null || _this$camera7 === void 0 ? void 0 : _this$camera7.type) === 'OrthographicCamera') {\n            var _this$unprojectOnTbPl4;\n            scalePoint = (_this$unprojectOnTbPl4 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl4 === void 0 ? void 0 : _this$unprojectOnTbPl4.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n          } else if (((_this$camera8 = this.camera) === null || _this$camera8 === void 0 ? void 0 : _this$camera8.type) === 'PerspectiveCamera') {\n            var _this$unprojectOnTbPl5;\n            scalePoint = (_this$unprojectOnTbPl5 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl5 === void 0 ? void 0 : _this$unprojectOnTbPl5.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n          }\n        }\n        if (scalePoint !== undefined) {\n          this.applyTransformMatrix(this.applyScale(amount, scalePoint));\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    _defineProperty(this, \"onPinchEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    _defineProperty(this, \"onTriplePanStart\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true); //const center = event.center;\n\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n        this._currentCursorPosition.copy(this._startCursorPosition);\n      }\n    });\n    _defineProperty(this, \"onTriplePanMove\", () => {\n      if (this.enabled && this.enableZoom && this.camera && this.domElement) {\n        //\t  fov / 2\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\tx\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t\t| _ _ _\\\n        //\t\t\ty\n        //const center = event.center;\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n        this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n        const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n        let size = 1;\n        if (movement < 0) {\n          size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(this.scaleFactor, movement * screenNotches);\n        }\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n        const x = this._v3_1.distanceTo(this._gizmos.position);\n        let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n        //check min and max distance\n\n        xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n        const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\n\n        let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n        newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n        const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n        this.setFov(newFov);\n        this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\n\n        const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    _defineProperty(this, \"onTriplePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent); //this.dispatchEvent( _changeEvent );\n    });\n\n    _defineProperty(this, \"setCenter\", (clientX, clientY) => {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n    _defineProperty(this, \"initializeMouseActions\", () => {\n      this.setMouseAction('PAN', 0, 'CTRL');\n      this.setMouseAction('PAN', 2);\n      this.setMouseAction('ROTATE', 0);\n      this.setMouseAction('ZOOM', 'WHEEL');\n      this.setMouseAction('ZOOM', 1);\n      this.setMouseAction('FOV', 'WHEEL', 'SHIFT');\n      this.setMouseAction('FOV', 1, 'SHIFT');\n    });\n    _defineProperty(this, \"setMouseAction\", function (operation, mouse) {\n      let key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      const operationInput = ['PAN', 'ROTATE', 'ZOOM', 'FOV'];\n      const mouseInput = [0, 1, 2, 'WHEEL'];\n      const keyInput = ['CTRL', 'SHIFT', null];\n      let state;\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        //invalid parameters\n        return false;\n      }\n      if (mouse == 'WHEEL') {\n        if (operation != 'ZOOM' && operation != 'FOV') {\n          //cannot associate 2D operation to 1D input\n          return false;\n        }\n      }\n      switch (operation) {\n        case 'PAN':\n          state = STATE.PAN;\n          break;\n        case 'ROTATE':\n          state = STATE.ROTATE;\n          break;\n        case 'ZOOM':\n          state = STATE.SCALE;\n          break;\n        case 'FOV':\n          state = STATE.FOV;\n          break;\n      }\n      const action = {\n        operation: operation,\n        mouse: mouse,\n        key: key,\n        state: state\n      };\n      for (let i = 0; i < _this.mouseActions.length; i++) {\n        if (_this.mouseActions[i].mouse == action.mouse && _this.mouseActions[i].key == action.key) {\n          _this.mouseActions.splice(i, 1, action);\n          return true;\n        }\n      }\n      _this.mouseActions.push(action);\n      return true;\n    });\n    _defineProperty(this, \"getOpFromAction\", (mouse, key) => {\n      let action;\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n      return null;\n    });\n    _defineProperty(this, \"getOpStateFromAction\", (mouse, key) => {\n      let action;\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n      return null;\n    });\n    _defineProperty(this, \"getAngle\", (p1, p2) => {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n    _defineProperty(this, \"updateTouchEvent\", event => {\n      for (let i = 0; i < this._touchCurrent.length; i++) {\n        if (this._touchCurrent[i].pointerId == event.pointerId) {\n          this._touchCurrent.splice(i, 1, event);\n          break;\n        }\n      }\n    });\n    _defineProperty(this, \"calculateAngularSpeed\", (p0, p1, t0, t1) => {\n      const s = p1 - p0;\n      const t = (t1 - t0) / 1000;\n      if (t == 0) {\n        return 0;\n      }\n      return s / t;\n    });\n    _defineProperty(this, \"calculatePointersDistance\", (p0, p1) => {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n    _defineProperty(this, \"calculateRotationAxis\", (vec1, vec2) => {\n      this._rotationMatrix.extractRotation(this._cameraMatrixState);\n      this._quat.setFromRotationMatrix(this._rotationMatrix);\n      this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(this._quat);\n      return this._rotationAxis.normalize().clone();\n    });\n    _defineProperty(this, \"calculateTbRadius\", camera => {\n      const factor = 0.67;\n      const distance = camera.position.distanceTo(this._gizmos.position);\n      if (camera.type == 'PerspectiveCamera') {\n        const halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5; //vertical fov/2 in radians\n\n        const halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV)); //horizontal fov/2 in radians\n\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera.type == 'OrthographicCamera') {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n    _defineProperty(this, \"focus\", function (point, size) {\n      let amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      if (_this.camera) {\n        const focusPoint = point.clone(); //move center of camera (along with gizmos) towards point of interest\n\n        focusPoint.sub(_this._gizmos.position).multiplyScalar(amount);\n        _this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n        const gizmoStateTemp = _this._gizmoMatrixState.clone();\n        _this._gizmoMatrixState.premultiply(_this._translationMatrix);\n        _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n        const cameraStateTemp = _this._cameraMatrixState.clone();\n        _this._cameraMatrixState.premultiply(_this._translationMatrix);\n        _this._cameraMatrixState.decompose(_this.camera.position, _this.camera.quaternion, _this.camera.scale); //apply zoom\n\n        if (_this.enableZoom) {\n          _this.applyTransformMatrix(_this.applyScale(size, _this._gizmos.position));\n        }\n        _this._gizmoMatrixState.copy(gizmoStateTemp);\n        _this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n    _defineProperty(this, \"drawGrid\", () => {\n      if (this.scene) {\n        var _this$camera9, _this$camera10;\n        const color = 0x888888;\n        const multiplier = 3;\n        let size, divisions, maxLength, tick;\n        if (((_this$camera9 = this.camera) === null || _this$camera9 === void 0 ? void 0 : _this$camera9.type) === 'OrthographicCamera') {\n          const width = this.camera.right - this.camera.left;\n          const height = this.camera.bottom - this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / this.camera.zoom * multiplier;\n          divisions = size / tick * this.camera.zoom;\n        } else if (((_this$camera10 = this.camera) === null || _this$camera10 === void 0 ? void 0 : _this$camera10.type) === 'PerspectiveCamera') {\n          const distance = this.camera.position.distanceTo(this._gizmos.position);\n          const halfFovV = MathUtils.DEG2RAD * this.camera.fov * 0.5;\n          const halfFovH = Math.atan(this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n        if (this._grid == null && this.camera) {\n          this._grid = new GridHelper(size, divisions, color, color);\n          this._grid.position.copy(this._gizmos.position);\n          this._gridPosition.copy(this._grid.position);\n          this._grid.quaternion.copy(this.camera.quaternion);\n          this._grid.rotateX(Math.PI * 0.5);\n          this.scene.add(this._grid);\n        }\n      }\n    });\n    _defineProperty(this, \"connect\", domElement => {\n      // https://github.com/mrdoob/three.js/issues/20575\n      if (domElement === document) {\n        console.error('THREE.ArcballControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      }\n      this.domElement = domElement; // disables touch scroll\n      // touch-action needs to be defined for pointer events to work on mobile\n      // https://stackoverflow.com/a/48254578\n\n      this.domElement.style.touchAction = 'none';\n      this.domElement.addEventListener('contextmenu', this.onContextMenu);\n      this.domElement.addEventListener('pointerdown', this.onPointerDown);\n      this.domElement.addEventListener('pointercancel', this.onPointerCancel);\n      this.domElement.addEventListener('wheel', this.onWheel);\n    });\n    _defineProperty(this, \"dispose\", () => {\n      var _this$domElement, _this$domElement2, _this$domElement3, _this$domElement4, _this$scene;\n      if (this._animationId != -1) {\n        window.cancelAnimationFrame(this._animationId);\n      }\n      (_this$domElement = this.domElement) === null || _this$domElement === void 0 ? void 0 : _this$domElement.removeEventListener('pointerdown', this.onPointerDown);\n      (_this$domElement2 = this.domElement) === null || _this$domElement2 === void 0 ? void 0 : _this$domElement2.removeEventListener('pointercancel', this.onPointerCancel);\n      (_this$domElement3 = this.domElement) === null || _this$domElement3 === void 0 ? void 0 : _this$domElement3.removeEventListener('wheel', this.onWheel);\n      (_this$domElement4 = this.domElement) === null || _this$domElement4 === void 0 ? void 0 : _this$domElement4.removeEventListener('contextmenu', this.onContextMenu);\n      window.removeEventListener('pointermove', this.onPointerMove);\n      window.removeEventListener('pointerup', this.onPointerUp);\n      window.removeEventListener('resize', this.onWindowResize);\n      (_this$scene = this.scene) === null || _this$scene === void 0 ? void 0 : _this$scene.remove(this._gizmos);\n      this.disposeGrid();\n    });\n    _defineProperty(this, \"disposeGrid\", () => {\n      if (this._grid && this.scene) {\n        this.scene.remove(this._grid);\n        this._grid = null;\n      }\n    });\n    _defineProperty(this, \"easeOutCubic\", t => {\n      return 1 - Math.pow(1 - t, 3);\n    });\n    _defineProperty(this, \"activateGizmos\", isActive => {\n      for (const gizmo of this._gizmos.children) {\n        gizmo.material.setValues({\n          opacity: isActive ? 1 : 0.6\n        });\n      }\n    });\n    _defineProperty(this, \"getCursorNDC\", (cursorX, cursorY, canvas) => {\n      const canvasRect = canvas.getBoundingClientRect();\n      this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n      this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n      return this._v2_1.clone();\n    });\n    _defineProperty(this, \"getCursorPosition\", (cursorX, cursorY, canvas) => {\n      var _this$camera11;\n      this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n      if (((_this$camera11 = this.camera) === null || _this$camera11 === void 0 ? void 0 : _this$camera11.type) === 'OrthographicCamera') {\n        this._v2_1.x *= (this.camera.right - this.camera.left) * 0.5;\n        this._v2_1.y *= (this.camera.top - this.camera.bottom) * 0.5;\n      }\n      return this._v2_1.clone();\n    });\n    _defineProperty(this, \"setCamera\", camera => {\n      if (camera) {\n        camera.lookAt(this.target);\n        camera.updateMatrix(); //setting state\n\n        if ((camera === null || camera === void 0 ? void 0 : camera.type) == 'PerspectiveCamera') {\n          this._fov0 = camera.fov;\n          this._fovState = camera.fov;\n        }\n        this._cameraMatrixState0.copy(camera.matrix);\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n        this._cameraProjectionState.copy(camera.projectionMatrix);\n        this._zoom0 = camera.zoom;\n        this._zoomState = this._zoom0;\n        this._initialNear = camera.near;\n        this._nearPos0 = camera.position.distanceTo(this.target) - camera.near;\n        this._nearPos = this._initialNear;\n        this._initialFar = camera.far;\n        this._farPos0 = camera.position.distanceTo(this.target) - camera.far;\n        this._farPos = this._initialFar;\n        this._up0.copy(camera.up);\n        this._upState.copy(camera.up);\n        this.camera = camera;\n        this.camera.updateProjectionMatrix(); //making gizmos\n\n        const tbRadius = this.calculateTbRadius(camera);\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n      }\n    });\n    _defineProperty(this, \"makeGizmos\", (tbCenter, tbRadius) => {\n      // @ts-expect-error\n      const curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      const points = curve.getPoints(this._curvePts); //geometry\n\n      const curveGeometry = new BufferGeometry().setFromPoints(points); //material\n\n      const curveMaterialX = new LineBasicMaterial({\n        color: 0xff8080,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialY = new LineBasicMaterial({\n        color: 0x80ff80,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialZ = new LineBasicMaterial({\n        color: 0x8080ff,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      }); //line\n\n      const gizmoX = new Line(curveGeometry, curveMaterialX);\n      const gizmoY = new Line(curveGeometry, curveMaterialY);\n      const gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      const rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation; //setting state\n\n      this._gizmoMatrixState0.identity().setPosition(tbCenter);\n      this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n      if (this.camera && this.camera.zoom != 1) {\n        //adapt gizmos size to camera zoom\n        const size = 1 / this.camera.zoom;\n        this._scaleMatrix.makeScale(size, size, size);\n        this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n        this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix);\n        this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n      }\n      this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n      this._gizmos.clear();\n      this._gizmos.add(gizmoX);\n      this._gizmos.add(gizmoY);\n      this._gizmos.add(gizmoZ);\n    });\n    _defineProperty(this, \"onFocusAnim\", (time, point, cameraMatrix, gizmoMatrix) => {\n      if (this._timeStart == -1) {\n        //animation start\n        this._timeStart = time;\n      }\n      if (this._state == STATE.ANIMATION_FOCUS) {\n        const deltaTime = time - this._timeStart;\n        const animTime = deltaTime / this.focusAnimationTime;\n        this._gizmoMatrixState.copy(gizmoMatrix);\n        if (animTime >= 1) {\n          //animation end\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n          this.focus(point, this.scaleFactor);\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        } else {\n          const amount = this.easeOutCubic(animTime);\n          const size = 1 - amount + this.scaleFactor * amount;\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n          this.focus(point, size, amount);\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        //interrupt animation\n        this._animationId = -1;\n        this._timeStart = -1;\n      }\n    });\n    _defineProperty(this, \"onRotationAnim\", (time, rotationAxis, w0) => {\n      if (this._timeStart == -1) {\n        //animation start\n        this._anglePrev = 0;\n        this._angleCurrent = 0;\n        this._timeStart = time;\n      }\n      if (this._state == STATE.ANIMATION_ROTATE) {\n        //w = w0 + alpha * t\n        const deltaTime = (time - this._timeStart) / 1000;\n        const w = w0 + -this.dampingFactor * deltaTime;\n        if (w > 0) {\n          //tetha = 0.5 * alpha * t^2 + w0 * t + tetha0\n          this._angleCurrent = 0.5 * -this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n          this.applyTransformMatrix(this.rotate(rotationAxis, this._angleCurrent));\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          this._animationId = -1;\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        //interrupt animation\n        this._animationId = -1;\n        this._timeStart = -1;\n        if (this._state != STATE.ROTATE) {\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n    _defineProperty(this, \"pan\", function (p0, p1) {\n      let adjust = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (_this.camera) {\n        const movement = p0.clone().sub(p1);\n        if (_this.camera.type === 'OrthographicCamera') {\n          //adjust movement amount\n          movement.multiplyScalar(1 / _this.camera.zoom);\n        }\n        if (_this.camera.type === 'PerspectiveCamera' && adjust) {\n          //adjust movement amount\n          _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState0); //camera's initial position\n\n          _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState0); //gizmo's initial position\n\n          const distanceFactor = _this._v3_1.distanceTo(_this._v3_2) / _this.camera.position.distanceTo(_this._gizmos.position);\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n        _this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(_this.camera.quaternion);\n        _this._m4_1.makeTranslation(_this._v3_1.x, _this._v3_1.y, _this._v3_1.z);\n        _this.setTransformationMatrices(_this._m4_1, _this._m4_1);\n      }\n      return _transformation;\n    });\n    _defineProperty(this, \"reset\", () => {\n      if (this.camera) {\n        this.camera.zoom = this._zoom0;\n        if (this.camera.type === 'PerspectiveCamera') {\n          this.camera.fov = this._fov0;\n        }\n        this.camera.near = this._nearPos;\n        this.camera.far = this._farPos;\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        this.camera.up.copy(this._up0);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n        this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n        this._gizmoMatrixState0.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        this._gizmos.updateMatrix();\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    _defineProperty(this, \"rotate\", (axis, angle) => {\n      const point = this._gizmos.position; //rotation center\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n      this._rotationMatrix.makeRotationAxis(axis, -angle); //rotate camera\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n      this._m4_1.multiply(this._rotationMatrix);\n      this._m4_1.multiply(this._translationMatrix);\n      this.setTransformationMatrices(this._m4_1);\n      return _transformation;\n    });\n    _defineProperty(this, \"copyState\", () => {\n      if (this.camera) {\n        var _this$camera12;\n        const state = JSON.stringify(((_this$camera12 = this.camera) === null || _this$camera12 === void 0 ? void 0 : _this$camera12.type) === 'OrthographicCamera' ? {\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        } : {\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraFov: this.camera.fov,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        });\n        navigator.clipboard.writeText(state);\n      }\n    });\n    _defineProperty(this, \"pasteState\", () => {\n      const self = this;\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n    _defineProperty(this, \"saveState\", () => {\n      if (!this.camera) return;\n      this._cameraMatrixState0.copy(this.camera.matrix);\n      this._gizmoMatrixState0.copy(this._gizmos.matrix);\n      this._nearPos = this.camera.near;\n      this._farPos = this.camera.far;\n      this._zoom0 = this.camera.zoom;\n      this._up0.copy(this.camera.up);\n      if (this.camera.type === 'PerspectiveCamera') {\n        this._fov0 = this.camera.fov;\n      }\n    });\n    _defineProperty(this, \"applyScale\", function (size, point) {\n      let scaleGizmos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (!_this.camera) return;\n      const scalePoint = point.clone();\n      let sizeInverse = 1 / size;\n      if (_this.camera.type === 'OrthographicCamera') {\n        //camera zoom\n        _this.camera.zoom = _this._zoomState;\n        _this.camera.zoom *= size; //check min and max zoom\n\n        if (_this.camera.zoom > _this.maxZoom) {\n          _this.camera.zoom = _this.maxZoom;\n          sizeInverse = _this._zoomState / _this.maxZoom;\n        } else if (_this.camera.zoom < _this.minZoom) {\n          _this.camera.zoom = _this.minZoom;\n          sizeInverse = _this._zoomState / _this.minZoom;\n        }\n        _this.camera.updateProjectionMatrix();\n        _this._v3_1.setFromMatrixPosition(_this._gizmoMatrixState); //gizmos position\n        //scale gizmos so they appear in the same spot having the same dimension\n\n        _this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n        _this._translationMatrix.makeTranslation(-_this._v3_1.x, -_this._v3_1.y, -_this._v3_1.z);\n        _this._m4_2.makeTranslation(_this._v3_1.x, _this._v3_1.y, _this._v3_1.z).multiply(_this._scaleMatrix);\n        _this._m4_2.multiply(_this._translationMatrix); //move camera and gizmos to obtain pinch effect\n\n        scalePoint.sub(_this._v3_1);\n        const amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n        _this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n        _this._m4_2.premultiply(_this._m4_1);\n        _this.setTransformationMatrices(_this._m4_1, _this._m4_2);\n        return _transformation;\n      }\n      if (_this.camera.type === 'PerspectiveCamera') {\n        _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState);\n        _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState); //move camera\n\n        let distance = _this._v3_1.distanceTo(scalePoint);\n        let amount = distance - distance * sizeInverse; //check min and max distance\n\n        const newDistance = distance - amount;\n        if (newDistance < _this.minDistance) {\n          sizeInverse = _this.minDistance / distance;\n          amount = distance - distance * sizeInverse;\n        } else if (newDistance > _this.maxDistance) {\n          sizeInverse = _this.maxDistance / distance;\n          amount = distance - distance * sizeInverse;\n        }\n        let direction = scalePoint.clone().sub(_this._v3_1).normalize().multiplyScalar(amount);\n        _this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n        if (scaleGizmos) {\n          //scale gizmos so they appear in the same spot having the same dimension\n          const pos = _this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(_this._v3_2).normalize().multiplyScalar(amount);\n          _this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n          _this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n          _this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(_this._translationMatrix);\n          _this._m4_2.multiply(_this._scaleMatrix);\n          _this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n          _this._m4_2.multiply(_this._translationMatrix);\n          _this.setTransformationMatrices(_this._m4_1, _this._m4_2);\n        } else {\n          _this.setTransformationMatrices(_this._m4_1);\n        }\n        return _transformation;\n      }\n    });\n    _defineProperty(this, \"setFov\", value => {\n      var _this$camera13;\n      if (((_this$camera13 = this.camera) === null || _this$camera13 === void 0 ? void 0 : _this$camera13.type) === 'PerspectiveCamera') {\n        this.camera.fov = MathUtils.clamp(value, this.minFov, this.maxFov);\n        this.camera.updateProjectionMatrix();\n      }\n    });\n    _defineProperty(this, \"setTarget\", (x, y, z) => {\n      if (this.camera) {\n        this.target.set(x, y, z);\n        this._gizmos.position.set(x, y, z); //for correct radius calculation\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n        this.camera.lookAt(this.target);\n      }\n    });\n    _defineProperty(this, \"zRotate\", (point, angle) => {\n      this._rotationMatrix.makeRotationAxis(this._rotationAxis, angle);\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n      this._m4_1.multiply(this._rotationMatrix);\n      this._m4_1.multiply(this._translationMatrix);\n      this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(point); //vector from rotation center to gizmos position\n\n      this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis, angle); //apply rotation\n\n      this._v3_2.sub(this._v3_1);\n      this._m4_2.makeTranslation(this._v3_2.x, this._v3_2.y, this._v3_2.z);\n      this.setTransformationMatrices(this._m4_1, this._m4_2);\n      return _transformation;\n    });\n    _defineProperty(this, \"unprojectOnObj\", (cursor, camera) => {\n      if (!this.scene) return null;\n      const raycaster = new Raycaster();\n      raycaster.near = camera.near;\n      raycaster.far = camera.far;\n      raycaster.setFromCamera(cursor, camera);\n      const intersect = raycaster.intersectObjects(this.scene.children, true);\n      for (let i = 0; i < intersect.length; i++) {\n        if (intersect[i].object.uuid != this._gizmos.uuid && intersect[i].face) {\n          return intersect[i].point.clone();\n        }\n      }\n      return null;\n    });\n    _defineProperty(this, \"unprojectOnTbSurface\", (camera, cursorX, cursorY, canvas, tbRadius) => {\n      if (camera.type == 'OrthographicCamera') {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n        const x2 = Math.pow(this._v2_1.x, 2);\n        const y2 = Math.pow(this._v2_1.y, 2);\n        const r2 = Math.pow(this._tbRadius, 2);\n        if (x2 + y2 <= r2 * 0.5) {\n          //intersection with sphere\n          this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          //intersection with hyperboloid\n          this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n        return this._v3_1;\n      }\n      if (camera.type == 'PerspectiveCamera') {\n        //unproject cursor on the near plane\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n\n        const cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        const radius2 = Math.pow(tbRadius, 2); //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(this._v3_1.x, this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        /*\n         * calculate intersection point between unprojected ray and trackball surface\n         *|y = m * x + q\n         *|x^2 + y^2 = r^2\n         *\n         * (m^2 + 1) * x^2 + (2 * m * q) * x + q^2 - r^2 = 0\n         */\n\n        let a = Math.pow(m, 2) + 1;\n        let b = 2 * m * q;\n        let c = Math.pow(q, 2) - radius2;\n        let delta = Math.pow(b, 2) - 4 * a * c;\n        if (delta >= 0) {\n          //intersection with sphere\n          this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n          this._v2_1.setY(m * this._v2_1.x + q);\n          const angle = MathUtils.RAD2DEG * this._v2_1.angle();\n          if (angle >= 45) {\n            //if angle between intersection point and X' axis is >= 45°, return that point\n            //otherwise, calculate intersection point with hyperboloid\n            const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n            rayDir.multiplyScalar(rayLength);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        } //intersection with hyperboloid\n\n        /*\n         *|y = m * x + q\n         *|y = (1 / x) * (r^2 / 2)\n         *\n         * m * x^2 + q * x - r^2 / 2 = 0\n         */\n\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n        this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n        this._v2_1.setY(m * this._v2_1.x + q);\n        const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n    _defineProperty(this, \"unprojectOnTbPlane\", function (camera, cursorX, cursorY, canvas) {\n      let initialDistance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      if (camera.type == 'OrthographicCamera') {\n        _this._v2_1.copy(_this.getCursorPosition(cursorX, cursorY, canvas));\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, 0);\n        return _this._v3_1.clone();\n      }\n      if (camera.type == 'PerspectiveCamera') {\n        _this._v2_1.copy(_this.getCursorNDC(cursorX, cursorY, canvas)); //unproject cursor on the near plane\n\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, -1);\n        _this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n        const rayDir = _this._v3_1.clone().normalize(); //unprojected ray direction\n        //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n        const h = _this._v3_1.z;\n        const l = Math.sqrt(Math.pow(_this._v3_1.x, 2) + Math.pow(_this._v3_1.y, 2));\n        let cameraGizmoDistance;\n        if (initialDistance) {\n          cameraGizmoDistance = _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState0).distanceTo(_this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(_this._gizmos.position);\n        }\n        /*\n         * calculate intersection point between unprojected ray and the plane\n         *|y = mx + q\n         *|y = 0\n         *\n         * x = -q/m\n         */\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        const x = -q / m;\n        const rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n    _defineProperty(this, \"updateMatrixState\", () => {\n      if (!this.camera) return; //update camera and gizmos state\n\n      this._cameraMatrixState.copy(this.camera.matrix);\n      this._gizmoMatrixState.copy(this._gizmos.matrix);\n      if (this.camera.type === 'OrthographicCamera') {\n        this._cameraProjectionState.copy(this.camera.projectionMatrix);\n        this.camera.updateProjectionMatrix();\n        this._zoomState = this.camera.zoom;\n      }\n      if (this.camera.type === 'PerspectiveCamera') {\n        this._fovState = this.camera.fov;\n      }\n    });\n    _defineProperty(this, \"updateTbState\", (newState, updateMatrices) => {\n      this._state = newState;\n      if (updateMatrices) {\n        this.updateMatrixState();\n      }\n    });\n    _defineProperty(this, \"update\", () => {\n      const EPS = 0.000001; // Update target and gizmos state\n\n      if (!this.target.equals(this._currentTarget) && this.camera) {\n        this._gizmos.position.set(this.target.x, this.target.y, this.target.z); //for correct radius calculation\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n        this._currentTarget.copy(this.target);\n      }\n      if (!this.camera) return; //check min/max parameters\n\n      if (this.camera.type === 'OrthographicCamera') {\n        //check zoom\n        if (this.camera.zoom > this.maxZoom || this.camera.zoom < this.minZoom) {\n          const newZoom = MathUtils.clamp(this.camera.zoom, this.minZoom, this.maxZoom);\n          this.applyTransformMatrix(this.applyScale(newZoom / this.camera.zoom, this._gizmos.position, true));\n        }\n      }\n      if (this.camera.type === 'PerspectiveCamera') {\n        //check distance\n        const distance = this.camera.position.distanceTo(this._gizmos.position);\n        if (distance > this.maxDistance + EPS || distance < this.minDistance - EPS) {\n          const newDistance = MathUtils.clamp(distance, this.minDistance, this.maxDistance);\n          this.applyTransformMatrix(this.applyScale(newDistance / distance, this._gizmos.position));\n          this.updateMatrixState();\n        } //check fov\n\n        if (this.camera.fov < this.minFov || this.camera.fov > this.maxFov) {\n          this.camera.fov = MathUtils.clamp(this.camera.fov, this.minFov, this.maxFov);\n          this.camera.updateProjectionMatrix();\n        }\n        const oldRadius = this._tbRadius;\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n        if (oldRadius < this._tbRadius - EPS || oldRadius > this._tbRadius + EPS) {\n          const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n          const newRadius = this._tbRadius / scale; // @ts-expect-error\n\n          const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          const points = curve.getPoints(this._curvePts);\n          const curveGeometry = new BufferGeometry().setFromPoints(points);\n          for (const gizmo in this._gizmos.children) {\n            const child = this._gizmos.children[gizmo];\n            child.geometry = curveGeometry;\n          }\n        }\n      }\n      this.camera.lookAt(this._gizmos.position);\n    });\n    _defineProperty(this, \"setStateFromJSON\", json => {\n      const state = JSON.parse(json);\n      if (state.arcballState && this.camera) {\n        this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        this.camera.up.copy(state.arcballState.cameraUp);\n        this.camera.near = state.arcballState.cameraNear;\n        this.camera.far = state.arcballState.cameraFar;\n        this.camera.zoom = state.arcballState.cameraZoom;\n        if (this.camera.type === 'PerspectiveCamera') {\n          this.camera.fov = state.arcballState.cameraFov;\n        }\n        this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n        this._gizmos.updateMatrix();\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n        const gizmoTmp = new Matrix4().copy(this._gizmoMatrixState0);\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this._gizmoMatrixState0.copy(gizmoTmp);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    this.camera = null;\n    this.domElement = _domElement;\n    this.scene = scene;\n    this.mouseActions = [];\n    this._mouseOp = null; //global vectors and matrices that are used in some operations to avoid creating new objects every time (e.g. every time cursor moves)\n\n    this._v2_1 = new Vector2();\n    this._v3_1 = new Vector3();\n    this._v3_2 = new Vector3();\n    this._m4_1 = new Matrix4();\n    this._m4_2 = new Matrix4();\n    this._quat = new Quaternion(); //transformation matrices\n\n    this._translationMatrix = new Matrix4(); //matrix for translation operation\n\n    this._rotationMatrix = new Matrix4(); //matrix for rotation operation\n\n    this._scaleMatrix = new Matrix4(); //matrix for scaling operation\n\n    this._rotationAxis = new Vector3(); //axis for rotate operation\n    //camera state\n\n    this._cameraMatrixState = new Matrix4();\n    this._cameraProjectionState = new Matrix4();\n    this._fovState = 1;\n    this._upState = new Vector3();\n    this._zoomState = 1;\n    this._nearPos = 0;\n    this._farPos = 0;\n    this._gizmoMatrixState = new Matrix4(); //initial values\n\n    this._up0 = new Vector3();\n    this._zoom0 = 1;\n    this._fov0 = 0;\n    this._initialNear = 0;\n    this._nearPos0 = 0;\n    this._initialFar = 0;\n    this._farPos0 = 0;\n    this._cameraMatrixState0 = new Matrix4();\n    this._gizmoMatrixState0 = new Matrix4(); //pointers array\n\n    this._button = -1;\n    this._touchStart = [];\n    this._touchCurrent = [];\n    this._input = INPUT.NONE; //two fingers touch interaction\n\n    this._switchSensibility = 32; //minimum movement to be performed to fire single pan start after the second finger has been released\n\n    this._startFingerDistance = 0; //distance between two fingers\n\n    this._currentFingerDistance = 0;\n    this._startFingerRotation = 0; //amount of rotation performed with two fingers\n\n    this._currentFingerRotation = 0; //double tap\n\n    this._devPxRatio = 0;\n    this._downValid = true;\n    this._nclicks = 0;\n    this._downEvents = [];\n    this._clickStart = 0; //first click time\n\n    this._maxDownTime = 250;\n    this._maxInterval = 300;\n    this._posThreshold = 24;\n    this._movementThreshold = 24; //cursor positions\n\n    this._currentCursorPosition = new Vector3();\n    this._startCursorPosition = new Vector3(); //grid\n\n    this._grid = null; //grid to be visualized during pan operation\n\n    this._gridPosition = new Vector3(); //gizmos\n\n    this._gizmos = new Group();\n    this._curvePts = 128; //animations\n\n    this._timeStart = -1; //initial time\n\n    this._animationId = -1; //focus animation\n\n    this.focusAnimationTime = 500; //duration of focus animation in ms\n    //rotate animation\n\n    this._timePrev = 0; //time at which previous rotate operation has been detected\n\n    this._timeCurrent = 0; //time at which current rotate operation has been detected\n\n    this._anglePrev = 0; //angle of previous rotation\n\n    this._angleCurrent = 0; //angle of current rotation\n\n    this._cursorPosPrev = new Vector3(); //cursor position when previous rotate operation has been detected\n\n    this._cursorPosCurr = new Vector3(); //cursor position when current rotate operation has been detected\n\n    this._wPrev = 0; //angular velocity of the previous rotate operation\n\n    this._wCurr = 0; //angular velocity of the current rotate operation\n    //parameters\n\n    this.adjustNearFar = false;\n    this.scaleFactor = 1.1; //zoom/distance multiplier\n\n    this.dampingFactor = 25;\n    this.wMax = 20; //maximum angular velocity allowed\n\n    this.enableAnimations = true; //if animations should be performed\n\n    this.enableGrid = false; //if grid should be showed during pan operation\n\n    this.cursorZoom = false; //if wheel zoom should be cursor centered\n\n    this.minFov = 5;\n    this.maxFov = 90;\n    this.enabled = true;\n    this.enablePan = true;\n    this.enableRotate = true;\n    this.enableZoom = true;\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n    this.minZoom = 0;\n    this.maxZoom = Infinity; //trackball parameters\n\n    this.target = new Vector3(0, 0, 0);\n    this._currentTarget = new Vector3(0, 0, 0);\n    this._tbRadius = 1; //FSA\n\n    this._state = STATE.IDLE;\n    this.setCamera(_camera);\n    if (this.scene) {\n      this.scene.add(this._gizmos);\n    }\n    this._devPxRatio = window.devicePixelRatio;\n    this.initializeMouseActions();\n    if (this.domElement) this.connect(this.domElement);\n    window.addEventListener('resize', this.onWindowResize);\n  } //listeners\n\n  /**\n   * Apply a transformation matrix, to the camera and gizmos\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\n   */\n  applyTransformMatrix(transformation) {\n    if (transformation !== null && transformation !== void 0 && transformation.camera && this.camera) {\n      this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n      this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n      this.camera.updateMatrix(); //update camera up vector\n\n      if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n        this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n      }\n    }\n    if (transformation !== null && transformation !== void 0 && transformation.gizmos) {\n      this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n      this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n      this._gizmos.updateMatrix();\n    }\n    if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && this.camera) {\n      const tbRadius = this.calculateTbRadius(this.camera);\n      if (tbRadius !== undefined) {\n        this._tbRadius = tbRadius;\n      }\n      if (this.adjustNearFar) {\n        const cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n        const bb = new Box3();\n        bb.setFromObject(this._gizmos);\n        const sphere = new Sphere();\n        bb.getBoundingSphere(sphere);\n        const adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n        const regularNearPosition = cameraDistance - this._initialNear;\n        const minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n        this.camera.near = cameraDistance - minNearPos;\n        const adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n        const regularFarPosition = cameraDistance - this._initialFar;\n        const minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n        this.camera.far = cameraDistance - minFarPos;\n        this.camera.updateProjectionMatrix();\n      } else {\n        let update = false;\n        if (this.camera.near != this._initialNear) {\n          this.camera.near = this._initialNear;\n          update = true;\n        }\n        if (this.camera.far != this._initialFar) {\n          this.camera.far = this._initialFar;\n          update = true;\n        }\n        if (update) {\n          this.camera.updateProjectionMatrix();\n        }\n      }\n    }\n  }\n  /**\n   * Calculate the angular speed\n   * @param {Number} p0 Position at t0\n   * @param {Number} p1 Position at t1\n   * @param {Number} t0 Initial time in milliseconds\n   * @param {Number} t1 Ending time in milliseconds\n   */\n\n  /**\n   * Set gizmos visibility\n   * @param {Boolean} value Value of gizmos visibility\n   */\n  setGizmosVisible(value) {\n    this._gizmos.visible = value;\n    this.dispatchEvent(_changeEvent);\n  }\n  /**\n   * Creates the rotation gizmos matching trackball center and radius\n   * @param {Vector3} tbCenter The trackball center\n   * @param {number} tbRadius The trackball radius\n   */\n\n  /**\n   * Set values in transformation object\n   * @param {Matrix4} camera Transformation to be applied to the camera\n   * @param {Matrix4} gizmos Transformation to be applied to gizmos\n   */\n  setTransformationMatrices() {\n    let camera = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let gizmos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (camera) {\n      if (_transformation.camera) {\n        _transformation.camera.copy(camera);\n      } else {\n        _transformation.camera = camera.clone();\n      }\n    } else {\n      _transformation.camera = null;\n    }\n    if (gizmos) {\n      if (_transformation.gizmos) {\n        _transformation.gizmos.copy(gizmos);\n      } else {\n        _transformation.gizmos = gizmos.clone();\n      }\n    } else {\n      _transformation.gizmos = null;\n    }\n  }\n  /**\n   * Rotate camera around its direction axis passing by a given point by a given angle\n   * @param {Vector3} point The point where the rotation axis is passing trough\n   * @param {Number} angle Angle in radians\n   * @returns The computed transormation matix\n   */\n}\n\nexport { ArcballControls };","map":{"version":3,"names":["_defineProperty","Matrix4","EventDispatcher","EllipseCurve","BufferGeometry","MathUtils","Vector3","GridHelper","LineBasicMaterial","Line","Raycaster","Vector2","Quaternion","Group","Box3","Sphere","STATE","IDLE","Symbol","ROTATE","PAN","SCALE","FOV","FOCUS","ZROTATE","TOUCH_MULTI","ANIMATION_FOCUS","ANIMATION_ROTATE","INPUT","NONE","ONE_FINGER","ONE_FINGER_SWITCHED","TWO_FINGER","MULT_FINGER","CURSOR","_center","x","y","_transformation","camera","gizmos","_changeEvent","type","_startEvent","_endEvent","ArcballControls","constructor","_camera","_this","_domElement","arguments","length","undefined","scene","this","scale","_gizmos","z","tbRadius","calculateTbRadius","_tbRadius","newRadius","curve","points","getPoints","_curvePts","curveGeometry","setFromPoints","gizmo","children","child","geometry","dispatchEvent","event","enabled","i","mouseActions","mouse","preventDefault","_touchStart","splice","_touchCurrent","_input","button","isPrimary","_downValid","_downEvents","push","pointerType","onSinglePanStart","window","addEventListener","onPointerMove","onPointerUp","onRotateStart","onPinchStart","onDoublePanStart","onTriplePanStart","modifier","ctrlKey","metaKey","shiftKey","_mouseOp","getOpFromAction","_button","updateTouchEvent","onSinglePanMove","movement","calculatePointersDistance","_devPxRatio","_switchSensibility","onRotateMove","onPinchMove","onDoublePanMove","onTriplePanMove","mouseOpState","getOpStateFromAction","_movementThreshold","nTouch","pointerId","removeEventListener","onSinglePanEnd","onDoublePanEnd","onPinchEnd","onRotateEnd","onTriplePanEnd","downTime","timeStamp","_maxDownTime","_nclicks","_clickStart","performance","now","clickInterval","_maxInterval","_posThreshold","onDoubleTap","shift","_this$camera3","enableZoom","domElement","mouseOp","notchDeltaY","sgn","deltaY","size","scaleFactor","updateTbState","Math","pow","cursorZoom","enablePan","_this$camera","_this$camera2","scalePoint","_this$unprojectOnTbPl","unprojectOnTbPlane","clientX","clientY","applyQuaternion","quaternion","multiplyScalar","zoom","add","position","_this$unprojectOnTbPl2","applyTransformMatrix","applyScale","_grid","disposeGrid","drawGrid","deltaX","_v3_1","setFromMatrixPosition","_cameraMatrixState","distanceTo","xNew","clamp","minDistance","maxDistance","tan","DEG2RAD","fov","newFov","RAD2DEG","atan","maxFov","minFov","newDistance","setFov","operation","_this$camera4","setCenter","_animationId","cancelAnimationFrame","_timeStart","activateGizmos","rayDir","_startCursorPosition","copy","enableGrid","enableRotate","unprojectOnTbSurface","enableAnimations","_timePrev","_timeCurrent","_angleCurrent","_anglePrev","_cursorPosPrev","_cursorPosCurr","_wCurr","_wPrev","setY","getCursorNDC","_currentCursorPosition","opState","_this$camera5","restart","_state","pan","distance","angle","angleTo","amount","max","rotate","calculateRotationAxis","calculateAngularSpeed","screenNotches","_fovState","_v3_2","_gizmoMatrixState","direction","clone","sub","normalize","_m4_1","makeTranslation","deltaTime","w","abs","self","requestAnimationFrame","t","rotationAxis","onRotationAnim","min","wMax","hitP","unprojectOnObj","onFocusAnim","focus","_this$camera6","_startFingerRotation","getAngle","_currentFingerRotation","getWorldDirection","_rotationAxis","rotationPoint","_this$unprojectOnTbPl3","zRotate","_startFingerDistance","_currentFingerDistance","_this$camera7","_this$camera8","_this$unprojectOnTbPl4","_this$unprojectOnTbPl5","nFingers","setMouseAction","key","operationInput","mouseInput","keyInput","state","includes","action","p1","p2","atan2","PI","p0","t0","t1","s","sqrt","vec1","vec2","_rotationMatrix","extractRotation","_quat","setFromRotationMatrix","crossVectors","factor","halfFovV","halfFovH","aspect","top","right","point","focusPoint","_translationMatrix","gizmoStateTemp","premultiply","decompose","cameraStateTemp","_this$camera9","_this$camera10","color","multiplier","divisions","maxLength","tick","width","left","height","bottom","_gridPosition","rotateX","document","console","error","style","touchAction","onContextMenu","onPointerDown","onPointerCancel","onWheel","_this$domElement","_this$domElement2","_this$domElement3","_this$domElement4","_this$scene","onWindowResize","remove","isActive","material","setValues","opacity","cursorX","cursorY","canvas","canvasRect","getBoundingClientRect","_v2_1","setX","_this$camera11","lookAt","target","updateMatrix","_fov0","_cameraMatrixState0","matrix","_cameraProjectionState","projectionMatrix","_zoom0","_zoomState","_initialNear","near","_nearPos0","_nearPos","_initialFar","far","_farPos0","_farPos","_up0","up","_upState","updateProjectionMatrix","makeGizmos","tbCenter","curveMaterialX","fog","transparent","curveMaterialY","curveMaterialZ","gizmoX","gizmoY","gizmoZ","rotation","_gizmoMatrixState0","identity","setPosition","_scaleMatrix","makeScale","clear","time","cameraMatrix","gizmoMatrix","animTime","focusAnimationTime","easeOutCubic","w0","dampingFactor","adjust","distanceFactor","set","setTransformationMatrices","axis","makeRotationAxis","multiply","_this$camera12","JSON","stringify","arcballState","cameraFar","cameraNear","cameraUp","cameraZoom","cameraFov","navigator","clipboard","writeText","readText","then","resolved","value","setStateFromJSON","scaleGizmos","sizeInverse","maxZoom","minZoom","_m4_2","pos","_this$camera13","applyAxisAngle","cursor","raycaster","setFromCamera","intersect","intersectObjects","object","uuid","face","getCursorPosition","x2","y2","r2","setZ","applyMatrix4","projectionMatrixInverse","cameraGizmoDistance","radius2","h","l","m","q","a","b","c","delta","rayLength","initialDistance","newState","updateMatrices","updateMatrixState","EPS","equals","_currentTarget","newZoom","oldRadius","json","parse","fromArray","elements","gizmoTmp","adjustNearFar","Infinity","setCamera","devicePixelRatio","initializeMouseActions","connect","transformation","cameraDistance","bb","setFromObject","sphere","getBoundingSphere","adjustedNearPosition","radius","center","regularNearPosition","minNearPos","adjustedFarPosition","regularFarPosition","minFarPos","update","setGizmosVisible","visible"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/controls/ArcballControls.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Matrix4, EventDispatcher, EllipseCurve, BufferGeometry, MathUtils, Vector3, GridHelper, LineBasicMaterial, Line, Raycaster, Vector2, Quaternion, Group, Box3, Sphere } from 'three';\n\n//trackball state\nconst STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nconst INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n}; //cursor center coordinates\n\nconst _center = {\n  x: 0,\n  y: 0\n}; //transformation matrices for gizmos and camera\n\nconst _transformation = {\n  camera: new Matrix4(),\n  gizmos: new Matrix4()\n}; //events\n\nconst _changeEvent = {\n  type: 'change'\n};\nconst _startEvent = {\n  type: 'start'\n};\nconst _endEvent = {\n  type: 'end'\n};\n/**\n *\n * @param {CamOrthographicCamera | PerspectiveCameraera} camera Virtual camera used in the scene\n * @param {HTMLElement=null} domElement Renderer's dom element\n * @param {Scene=null} scene The scene to be rendered\n */\n\nclass ArcballControls extends EventDispatcher {\n  constructor(_camera, _domElement = null, scene = null) {\n    super();\n\n    _defineProperty(this, \"camera\", void 0);\n\n    _defineProperty(this, \"domElement\", void 0);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"mouseActions\", void 0);\n\n    _defineProperty(this, \"_mouseOp\", void 0);\n\n    _defineProperty(this, \"_v2_1\", void 0);\n\n    _defineProperty(this, \"_v3_1\", void 0);\n\n    _defineProperty(this, \"_v3_2\", void 0);\n\n    _defineProperty(this, \"_m4_1\", void 0);\n\n    _defineProperty(this, \"_m4_2\", void 0);\n\n    _defineProperty(this, \"_quat\", void 0);\n\n    _defineProperty(this, \"_translationMatrix\", void 0);\n\n    _defineProperty(this, \"_rotationMatrix\", void 0);\n\n    _defineProperty(this, \"_scaleMatrix\", void 0);\n\n    _defineProperty(this, \"_rotationAxis\", void 0);\n\n    _defineProperty(this, \"_cameraMatrixState\", void 0);\n\n    _defineProperty(this, \"_cameraProjectionState\", void 0);\n\n    _defineProperty(this, \"_fovState\", void 0);\n\n    _defineProperty(this, \"_upState\", void 0);\n\n    _defineProperty(this, \"_zoomState\", void 0);\n\n    _defineProperty(this, \"_nearPos\", void 0);\n\n    _defineProperty(this, \"_farPos\", void 0);\n\n    _defineProperty(this, \"_gizmoMatrixState\", void 0);\n\n    _defineProperty(this, \"_up0\", void 0);\n\n    _defineProperty(this, \"_zoom0\", void 0);\n\n    _defineProperty(this, \"_fov0\", void 0);\n\n    _defineProperty(this, \"_initialNear\", void 0);\n\n    _defineProperty(this, \"_nearPos0\", void 0);\n\n    _defineProperty(this, \"_initialFar\", void 0);\n\n    _defineProperty(this, \"_farPos0\", void 0);\n\n    _defineProperty(this, \"_cameraMatrixState0\", void 0);\n\n    _defineProperty(this, \"_gizmoMatrixState0\", void 0);\n\n    _defineProperty(this, \"_button\", void 0);\n\n    _defineProperty(this, \"_touchStart\", void 0);\n\n    _defineProperty(this, \"_touchCurrent\", void 0);\n\n    _defineProperty(this, \"_input\", void 0);\n\n    _defineProperty(this, \"_switchSensibility\", void 0);\n\n    _defineProperty(this, \"_startFingerDistance\", void 0);\n\n    _defineProperty(this, \"_currentFingerDistance\", void 0);\n\n    _defineProperty(this, \"_startFingerRotation\", void 0);\n\n    _defineProperty(this, \"_currentFingerRotation\", void 0);\n\n    _defineProperty(this, \"_devPxRatio\", void 0);\n\n    _defineProperty(this, \"_downValid\", void 0);\n\n    _defineProperty(this, \"_nclicks\", void 0);\n\n    _defineProperty(this, \"_downEvents\", void 0);\n\n    _defineProperty(this, \"_clickStart\", void 0);\n\n    _defineProperty(this, \"_maxDownTime\", void 0);\n\n    _defineProperty(this, \"_maxInterval\", void 0);\n\n    _defineProperty(this, \"_posThreshold\", void 0);\n\n    _defineProperty(this, \"_movementThreshold\", void 0);\n\n    _defineProperty(this, \"_currentCursorPosition\", void 0);\n\n    _defineProperty(this, \"_startCursorPosition\", void 0);\n\n    _defineProperty(this, \"_grid\", void 0);\n\n    _defineProperty(this, \"_gridPosition\", void 0);\n\n    _defineProperty(this, \"_gizmos\", void 0);\n\n    _defineProperty(this, \"_curvePts\", void 0);\n\n    _defineProperty(this, \"_timeStart\", void 0);\n\n    _defineProperty(this, \"_animationId\", void 0);\n\n    _defineProperty(this, \"focusAnimationTime\", void 0);\n\n    _defineProperty(this, \"_timePrev\", void 0);\n\n    _defineProperty(this, \"_timeCurrent\", void 0);\n\n    _defineProperty(this, \"_anglePrev\", void 0);\n\n    _defineProperty(this, \"_angleCurrent\", void 0);\n\n    _defineProperty(this, \"_cursorPosPrev\", void 0);\n\n    _defineProperty(this, \"_cursorPosCurr\", void 0);\n\n    _defineProperty(this, \"_wPrev\", void 0);\n\n    _defineProperty(this, \"_wCurr\", void 0);\n\n    _defineProperty(this, \"adjustNearFar\", void 0);\n\n    _defineProperty(this, \"scaleFactor\", void 0);\n\n    _defineProperty(this, \"dampingFactor\", void 0);\n\n    _defineProperty(this, \"wMax\", void 0);\n\n    _defineProperty(this, \"enableAnimations\", void 0);\n\n    _defineProperty(this, \"enableGrid\", void 0);\n\n    _defineProperty(this, \"cursorZoom\", void 0);\n\n    _defineProperty(this, \"minFov\", void 0);\n\n    _defineProperty(this, \"maxFov\", void 0);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    _defineProperty(this, \"enablePan\", void 0);\n\n    _defineProperty(this, \"enableRotate\", void 0);\n\n    _defineProperty(this, \"enableZoom\", void 0);\n\n    _defineProperty(this, \"minDistance\", void 0);\n\n    _defineProperty(this, \"maxDistance\", void 0);\n\n    _defineProperty(this, \"minZoom\", void 0);\n\n    _defineProperty(this, \"maxZoom\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"_currentTarget\", void 0);\n\n    _defineProperty(this, \"_tbRadius\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    _defineProperty(this, \"onWindowResize\", () => {\n      const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n\n      if (this.camera) {\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n      }\n\n      const newRadius = this._tbRadius / scale; // @ts-expect-error\n\n      const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n\n      for (const gizmo in this._gizmos.children) {\n        const child = this._gizmos.children[gizmo];\n        child.geometry = curveGeometry;\n      }\n\n      this.dispatchEvent(_changeEvent);\n    });\n\n    _defineProperty(this, \"onContextMenu\", event => {\n      if (!this.enabled) {\n        return;\n      }\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == 2) {\n          //prevent only if button 2 is actually used\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerCancel\", () => {\n      this._touchStart.splice(0, this._touchStart.length);\n\n      this._touchCurrent.splice(0, this._touchCurrent.length);\n\n      this._input = INPUT.NONE;\n    });\n\n    _defineProperty(this, \"onPointerDown\", event => {\n      if (event.button == 0 && event.isPrimary) {\n        this._downValid = true;\n\n        this._downEvents.push(event);\n      } else {\n        this._downValid = false;\n      }\n\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        this._touchStart.push(event);\n\n        this._touchCurrent.push(event);\n\n        switch (this._input) {\n          case INPUT.NONE:\n            //singleStart\n            this._input = INPUT.ONE_FINGER;\n            this.onSinglePanStart(event, 'ROTATE');\n            window.addEventListener('pointermove', this.onPointerMove);\n            window.addEventListener('pointerup', this.onPointerUp);\n            break;\n\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //doubleStart\n            this._input = INPUT.TWO_FINGER;\n            this.onRotateStart();\n            this.onPinchStart();\n            this.onDoublePanStart();\n            break;\n\n          case INPUT.TWO_FINGER:\n            //multipleStart\n            this._input = INPUT.MULT_FINGER;\n            this.onTriplePanStart();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.NONE) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        this._mouseOp = this.getOpFromAction(event.button, modifier);\n\n        if (this._mouseOp) {\n          window.addEventListener('pointermove', this.onPointerMove);\n          window.addEventListener('pointerup', this.onPointerUp); //singleStart\n\n          this._input = INPUT.CURSOR;\n          this._button = event.button;\n          this.onSinglePanStart(event, this._mouseOp);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerMove\", event => {\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n            //singleMove\n            this.updateTouchEvent(event);\n            this.onSinglePanMove(event, STATE.ROTATE);\n            break;\n\n          case INPUT.ONE_FINGER_SWITCHED:\n            const movement = this.calculatePointersDistance(this._touchCurrent[0], event) * this._devPxRatio;\n\n            if (movement >= this._switchSensibility) {\n              //singleMove\n              this._input = INPUT.ONE_FINGER;\n              this.updateTouchEvent(event);\n              this.onSinglePanStart(event, 'ROTATE');\n              break;\n            }\n\n            break;\n\n          case INPUT.TWO_FINGER:\n            //rotate/pan/pinchMove\n            this.updateTouchEvent(event);\n            this.onRotateMove();\n            this.onPinchMove();\n            this.onDoublePanMove();\n            break;\n\n          case INPUT.MULT_FINGER:\n            //multMove\n            this.updateTouchEvent(event);\n            this.onTriplePanMove();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        const mouseOpState = this.getOpStateFromAction(this._button, modifier);\n\n        if (mouseOpState) {\n          this.onSinglePanMove(event, mouseOpState);\n        }\n      } //checkDistance\n\n\n      if (this._downValid) {\n        const movement = this.calculatePointersDistance(this._downEvents[this._downEvents.length - 1], event) * this._devPxRatio;\n\n        if (movement > this._movementThreshold) {\n          this._downValid = false;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerUp\", event => {\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        const nTouch = this._touchCurrent.length;\n\n        for (let i = 0; i < nTouch; i++) {\n          if (this._touchCurrent[i].pointerId == event.pointerId) {\n            this._touchCurrent.splice(i, 1);\n\n            this._touchStart.splice(i, 1);\n\n            break;\n          }\n        }\n\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //singleEnd\n            window.removeEventListener('pointermove', this.onPointerMove);\n            window.removeEventListener('pointerup', this.onPointerUp);\n            this._input = INPUT.NONE;\n            this.onSinglePanEnd();\n            break;\n\n          case INPUT.TWO_FINGER:\n            //doubleEnd\n            this.onDoublePanEnd();\n            this.onPinchEnd();\n            this.onRotateEnd(); //switching to singleStart\n\n            this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n\n          case INPUT.MULT_FINGER:\n            if (this._touchCurrent.length == 0) {\n              window.removeEventListener('pointermove', this.onPointerMove);\n              window.removeEventListener('pointerup', this.onPointerUp); //multCancel\n\n              this._input = INPUT.NONE;\n              this.onTriplePanEnd();\n            }\n\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\n        window.removeEventListener('pointermove', this.onPointerMove);\n        window.removeEventListener('pointerup', this.onPointerUp);\n        this._input = INPUT.NONE;\n        this.onSinglePanEnd();\n        this._button = -1;\n      }\n\n      if (event.isPrimary) {\n        if (this._downValid) {\n          const downTime = event.timeStamp - this._downEvents[this._downEvents.length - 1].timeStamp;\n\n          if (downTime <= this._maxDownTime) {\n            if (this._nclicks == 0) {\n              //first valid click detected\n              this._nclicks = 1;\n              this._clickStart = performance.now();\n            } else {\n              const clickInterval = event.timeStamp - this._clickStart;\n\n              const movement = this.calculatePointersDistance(this._downEvents[1], this._downEvents[0]) * this._devPxRatio;\n\n              if (clickInterval <= this._maxInterval && movement <= this._posThreshold) {\n                //second valid click detected\n                //fire double tap and reset values\n                this._nclicks = 0;\n\n                this._downEvents.splice(0, this._downEvents.length);\n\n                this.onDoubleTap(event);\n              } else {\n                //new 'first click'\n                this._nclicks = 1;\n\n                this._downEvents.shift();\n\n                this._clickStart = performance.now();\n              }\n            }\n          } else {\n            this._downValid = false;\n            this._nclicks = 0;\n\n            this._downEvents.splice(0, this._downEvents.length);\n          }\n        } else {\n          this._nclicks = 0;\n\n          this._downEvents.splice(0, this._downEvents.length);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onWheel\", event => {\n      var _this$camera3;\n\n      if (this.enabled && this.enableZoom && this.domElement) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        const mouseOp = this.getOpFromAction('WHEEL', modifier);\n\n        if (mouseOp) {\n          event.preventDefault();\n          this.dispatchEvent(_startEvent);\n          const notchDeltaY = 125; //distance of one notch of mouse wheel\n\n          let sgn = event.deltaY / notchDeltaY;\n          let size = 1;\n\n          if (sgn > 0) {\n            size = 1 / this.scaleFactor;\n          } else if (sgn < 0) {\n            size = this.scaleFactor;\n          }\n\n          switch (mouseOp) {\n            case 'ZOOM':\n              this.updateTbState(STATE.SCALE, true);\n\n              if (sgn > 0) {\n                size = 1 / Math.pow(this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(this.scaleFactor, -sgn);\n              }\n\n              if (this.cursorZoom && this.enablePan) {\n                var _this$camera, _this$camera2;\n\n                let scalePoint;\n\n                if (((_this$camera = this.camera) === null || _this$camera === void 0 ? void 0 : _this$camera.type) === 'OrthographicCamera') {\n                  var _this$unprojectOnTbPl;\n\n                  scalePoint = (_this$unprojectOnTbPl = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl === void 0 ? void 0 : _this$unprojectOnTbPl.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n                }\n\n                if (((_this$camera2 = this.camera) === null || _this$camera2 === void 0 ? void 0 : _this$camera2.type) === 'PerspectiveCamera') {\n                  var _this$unprojectOnTbPl2;\n\n                  scalePoint = (_this$unprojectOnTbPl2 = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl2 === void 0 ? void 0 : _this$unprojectOnTbPl2.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n                }\n\n                if (scalePoint !== undefined) this.applyTransformMatrix(this.applyScale(size, scalePoint));\n              } else {\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n\n            case 'FOV':\n              if (((_this$camera3 = this.camera) === null || _this$camera3 === void 0 ? void 0 : _this$camera3.type) === 'PerspectiveCamera') {\n                this.updateTbState(STATE.FOV, true); //Vertigo effect\n                //\t  fov / 2\n                //\t\t|\\\n                //\t\t| \\\n                //\t\t|  \\\n                //\tx\t|\t\\\n                //\t\t| \t \\\n                //\t\t| \t  \\\n                //\t\t| _ _ _\\\n                //\t\t\ty\n                //check for iOs shift shortcut\n\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(this.scaleFactor, -sgn);\n                  }\n                }\n\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this.camera.fov * 0.5); //calculate new fov\n\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                if (newFov > this.maxFov) {\n                  newFov = this.maxFov;\n                } else if (newFov < this.minFov) {\n                  newFov = this.minFov;\n                }\n\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position, false));\n              }\n\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanStart\", (event, operation) => {\n      var _this$camera4;\n\n      if (this.enabled && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n\n        switch (operation) {\n          case 'PAN':\n            if (!this.enablePan) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            if (this.camera) {\n              this.updateTbState(STATE.PAN, true);\n              const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n              if (rayDir !== undefined) {\n                this._startCursorPosition.copy(rayDir);\n              }\n\n              if (this.enableGrid) {\n                this.drawGrid();\n                this.dispatchEvent(_changeEvent);\n              }\n            }\n\n            break;\n\n          case 'ROTATE':\n            if (!this.enableRotate) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n            }\n\n            if (this.camera) {\n              this.updateTbState(STATE.ROTATE, true);\n              const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n              if (rayDir !== undefined) {\n                this._startCursorPosition.copy(rayDir);\n              }\n\n              this.activateGizmos(true);\n\n              if (this.enableAnimations) {\n                this._timePrev = this._timeCurrent = performance.now();\n                this._angleCurrent = this._anglePrev = 0;\n\n                this._cursorPosPrev.copy(this._startCursorPosition);\n\n                this._cursorPosCurr.copy(this._cursorPosPrev);\n\n                this._wCurr = 0;\n                this._wPrev = this._wCurr;\n              }\n            }\n\n            this.dispatchEvent(_changeEvent);\n            break;\n\n          case 'FOV':\n            if (!this.enableZoom) return;\n\n            if (((_this$camera4 = this.camera) === null || _this$camera4 === void 0 ? void 0 : _this$camera4.type) === 'PerspectiveCamera') {\n              if (this._animationId != -1) {\n                cancelAnimationFrame(this._animationId);\n                this._animationId = -1;\n                this._timeStart = -1;\n                this.activateGizmos(false);\n                this.dispatchEvent(_changeEvent);\n              }\n\n              this.updateTbState(STATE.FOV, true);\n\n              this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n              this._currentCursorPosition.copy(this._startCursorPosition);\n            }\n\n            break;\n\n          case 'ZOOM':\n            if (!this.enableZoom) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            this.updateTbState(STATE.SCALE, true);\n\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n            this._currentCursorPosition.copy(this._startCursorPosition);\n\n            break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanMove\", (event, opState) => {\n      var _this$camera5;\n\n      if (this.enabled && this.domElement) {\n        const restart = opState != this._state;\n        this.setCenter(event.clientX, event.clientY);\n\n        switch (opState) {\n          case STATE.PAN:\n            if (this.enablePan && this.camera) {\n              if (restart) {\n                //switch to pan operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n                if (rayDir !== undefined) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n\n                if (this.enableGrid) {\n                  this.drawGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with pan operation\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n                if (rayDir !== undefined) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n\n                this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition));\n              }\n            }\n\n            break;\n\n          case STATE.ROTATE:\n            if (this.enableRotate && this.camera) {\n              if (restart) {\n                //switch to rotate operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n                if (rayDir !== undefined) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(true);\n              } else {\n                //continue with rotate operation\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n                if (rayDir !== undefined) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n\n                const distance = this._startCursorPosition.distanceTo(this._currentCursorPosition);\n\n                const angle = this._startCursorPosition.angleTo(this._currentCursorPosition);\n\n                const amount = Math.max(distance / this._tbRadius, angle); //effective rotation angle\n\n                this.applyTransformMatrix(this.rotate(this.calculateRotationAxis(this._startCursorPosition, this._currentCursorPosition), amount));\n\n                if (this.enableAnimations) {\n                  this._timePrev = this._timeCurrent;\n                  this._timeCurrent = performance.now();\n                  this._anglePrev = this._angleCurrent;\n                  this._angleCurrent = amount;\n\n                  this._cursorPosPrev.copy(this._cursorPosCurr);\n\n                  this._cursorPosCurr.copy(this._currentCursorPosition);\n\n                  this._wPrev = this._wCurr;\n                  this._wCurr = this.calculateAngularSpeed(this._anglePrev, this._angleCurrent, this._timePrev, this._timeCurrent);\n                }\n              }\n            }\n\n            break;\n\n          case STATE.SCALE:\n            if (this.enableZoom) {\n              if (restart) {\n                //switch to zoom operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                this._currentCursorPosition.copy(this._startCursorPosition);\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with zoom operation\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n            }\n\n            break;\n\n          case STATE.FOV:\n            if (this.enableZoom && ((_this$camera5 = this.camera) === null || _this$camera5 === void 0 ? void 0 : _this$camera5.type) === 'PerspectiveCamera') {\n              if (restart) {\n                //switch to fov operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                this._currentCursorPosition.copy(this._startCursorPosition);\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with fov operation\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\n\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n\n                this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\n\n                const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n                this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n\n            break;\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanEnd\", () => {\n      if (this._state == STATE.ROTATE) {\n        if (!this.enableRotate) {\n          return;\n        }\n\n        if (this.enableAnimations) {\n          //perform rotation animation\n          const deltaTime = performance.now() - this._timeCurrent;\n\n          if (deltaTime < 120) {\n            const w = Math.abs((this._wPrev + this._wCurr) / 2);\n            const self = this;\n            this._animationId = window.requestAnimationFrame(function (t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              const rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            //cursor has been standing still for over 120 ms since last movement\n            this.updateTbState(STATE.IDLE, false);\n            this.activateGizmos(false);\n            this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else if (this._state == STATE.PAN || this._state == STATE.IDLE) {\n        this.updateTbState(STATE.IDLE, false);\n\n        if (this.enableGrid) {\n          this.disposeGrid();\n        }\n\n        this.activateGizmos(false);\n        this.dispatchEvent(_changeEvent);\n      }\n\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onDoubleTap\", event => {\n      if (this.enabled && this.enablePan && this.scene && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        const hitP = this.unprojectOnObj(this.getCursorNDC(_center.x, _center.y, this.domElement), this.camera);\n\n        if (hitP && this.enableAnimations) {\n          const self = this;\n\n          if (this._animationId != -1) {\n            window.cancelAnimationFrame(this._animationId);\n          }\n\n          this._timeStart = -1;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP && !this.enableAnimations) {\n          this.updateTbState(STATE.FOCUS, true);\n          this.focus(hitP, this.scaleFactor);\n          this.updateTbState(STATE.IDLE, false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onDoublePanStart\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.PAN, true);\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n\n        if (rayDir !== undefined) {\n          this._startCursorPosition.copy(rayDir);\n        }\n\n        this._currentCursorPosition.copy(this._startCursorPosition);\n\n        this.activateGizmos(false);\n      }\n    });\n\n    _defineProperty(this, \"onDoublePanMove\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n\n        if (this._state != STATE.PAN) {\n          this.updateTbState(STATE.PAN, true);\n\n          this._startCursorPosition.copy(this._currentCursorPosition);\n        }\n\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== undefined) this._currentCursorPosition.copy(rayDir);\n        this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition, true));\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onDoublePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onRotateStart\", () => {\n      if (this.enabled && this.enableRotate) {\n        var _this$camera6;\n\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.ZROTATE, true); //this._startFingerRotation = event.rotation;\n\n        this._startFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        this._currentFingerRotation = this._startFingerRotation;\n        (_this$camera6 = this.camera) === null || _this$camera6 === void 0 ? void 0 : _this$camera6.getWorldDirection(this._rotationAxis); //rotation axis\n\n        if (!this.enablePan && !this.enableZoom) {\n          this.activateGizmos(true);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onRotateMove\", () => {\n      if (this.enabled && this.enableRotate && this.camera && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        let rotationPoint;\n\n        if (this._state != STATE.ZROTATE) {\n          this.updateTbState(STATE.ZROTATE, true);\n          this._startFingerRotation = this._currentFingerRotation;\n        } //this._currentFingerRotation = event.rotation;\n\n\n        this._currentFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n\n        if (!this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(this._gizmoMatrixState);\n        } else if (this.camera) {\n          var _this$unprojectOnTbPl3;\n\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n          rotationPoint = (_this$unprojectOnTbPl3 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl3 === void 0 ? void 0 : _this$unprojectOnTbPl3.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._v3_2);\n        }\n\n        const amount = MathUtils.DEG2RAD * (this._startFingerRotation - this._currentFingerRotation);\n\n        if (rotationPoint !== undefined) {\n          this.applyTransformMatrix(this.zRotate(rotationPoint, amount));\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onRotateEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.activateGizmos(false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onPinchStart\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        this._startFingerDistance = this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]);\n        this._currentFingerDistance = this._startFingerDistance;\n        this.activateGizmos(false);\n      }\n    });\n\n    _defineProperty(this, \"onPinchMove\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const minDistance = 12; //minimum distance between fingers (in css pixels)\n\n        if (this._state != STATE.SCALE) {\n          this._startFingerDistance = this._currentFingerDistance;\n          this.updateTbState(STATE.SCALE, true);\n        }\n\n        this._currentFingerDistance = Math.max(this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]), minDistance * this._devPxRatio);\n        const amount = this._currentFingerDistance / this._startFingerDistance;\n        let scalePoint;\n\n        if (!this.enablePan) {\n          scalePoint = this._gizmos.position;\n        } else {\n          var _this$camera7, _this$camera8;\n\n          if (((_this$camera7 = this.camera) === null || _this$camera7 === void 0 ? void 0 : _this$camera7.type) === 'OrthographicCamera') {\n            var _this$unprojectOnTbPl4;\n\n            scalePoint = (_this$unprojectOnTbPl4 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl4 === void 0 ? void 0 : _this$unprojectOnTbPl4.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n          } else if (((_this$camera8 = this.camera) === null || _this$camera8 === void 0 ? void 0 : _this$camera8.type) === 'PerspectiveCamera') {\n            var _this$unprojectOnTbPl5;\n\n            scalePoint = (_this$unprojectOnTbPl5 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl5 === void 0 ? void 0 : _this$unprojectOnTbPl5.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n          }\n        }\n\n        if (scalePoint !== undefined) {\n          this.applyTransformMatrix(this.applyScale(amount, scalePoint));\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onPinchEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onTriplePanStart\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true); //const center = event.center;\n\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n\n        this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n        this._currentCursorPosition.copy(this._startCursorPosition);\n      }\n    });\n\n    _defineProperty(this, \"onTriplePanMove\", () => {\n      if (this.enabled && this.enableZoom && this.camera && this.domElement) {\n        //\t  fov / 2\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\tx\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t\t| _ _ _\\\n        //\t\t\ty\n        //const center = event.center;\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n        this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n        const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n        let size = 1;\n\n        if (movement < 0) {\n          size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(this.scaleFactor, movement * screenNotches);\n        }\n\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n        const x = this._v3_1.distanceTo(this._gizmos.position);\n\n        let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n        //check min and max distance\n\n        xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n        const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\n\n        let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n        newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n        const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n        this.setFov(newFov);\n        this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\n\n        const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onTriplePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent); //this.dispatchEvent( _changeEvent );\n    });\n\n    _defineProperty(this, \"setCenter\", (clientX, clientY) => {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n\n    _defineProperty(this, \"initializeMouseActions\", () => {\n      this.setMouseAction('PAN', 0, 'CTRL');\n      this.setMouseAction('PAN', 2);\n      this.setMouseAction('ROTATE', 0);\n      this.setMouseAction('ZOOM', 'WHEEL');\n      this.setMouseAction('ZOOM', 1);\n      this.setMouseAction('FOV', 'WHEEL', 'SHIFT');\n      this.setMouseAction('FOV', 1, 'SHIFT');\n    });\n\n    _defineProperty(this, \"setMouseAction\", (operation, mouse, key = null) => {\n      const operationInput = ['PAN', 'ROTATE', 'ZOOM', 'FOV'];\n      const mouseInput = [0, 1, 2, 'WHEEL'];\n      const keyInput = ['CTRL', 'SHIFT', null];\n      let state;\n\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        //invalid parameters\n        return false;\n      }\n\n      if (mouse == 'WHEEL') {\n        if (operation != 'ZOOM' && operation != 'FOV') {\n          //cannot associate 2D operation to 1D input\n          return false;\n        }\n      }\n\n      switch (operation) {\n        case 'PAN':\n          state = STATE.PAN;\n          break;\n\n        case 'ROTATE':\n          state = STATE.ROTATE;\n          break;\n\n        case 'ZOOM':\n          state = STATE.SCALE;\n          break;\n\n        case 'FOV':\n          state = STATE.FOV;\n          break;\n      }\n\n      const action = {\n        operation: operation,\n        mouse: mouse,\n        key: key,\n        state: state\n      };\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == action.mouse && this.mouseActions[i].key == action.key) {\n          this.mouseActions.splice(i, 1, action);\n          return true;\n        }\n      }\n\n      this.mouseActions.push(action);\n      return true;\n    });\n\n    _defineProperty(this, \"getOpFromAction\", (mouse, key) => {\n      let action;\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"getOpStateFromAction\", (mouse, key) => {\n      let action;\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"getAngle\", (p1, p2) => {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n\n    _defineProperty(this, \"updateTouchEvent\", event => {\n      for (let i = 0; i < this._touchCurrent.length; i++) {\n        if (this._touchCurrent[i].pointerId == event.pointerId) {\n          this._touchCurrent.splice(i, 1, event);\n\n          break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"calculateAngularSpeed\", (p0, p1, t0, t1) => {\n      const s = p1 - p0;\n      const t = (t1 - t0) / 1000;\n\n      if (t == 0) {\n        return 0;\n      }\n\n      return s / t;\n    });\n\n    _defineProperty(this, \"calculatePointersDistance\", (p0, p1) => {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n\n    _defineProperty(this, \"calculateRotationAxis\", (vec1, vec2) => {\n      this._rotationMatrix.extractRotation(this._cameraMatrixState);\n\n      this._quat.setFromRotationMatrix(this._rotationMatrix);\n\n      this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(this._quat);\n\n      return this._rotationAxis.normalize().clone();\n    });\n\n    _defineProperty(this, \"calculateTbRadius\", camera => {\n      const factor = 0.67;\n      const distance = camera.position.distanceTo(this._gizmos.position);\n\n      if (camera.type == 'PerspectiveCamera') {\n        const halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5; //vertical fov/2 in radians\n\n        const halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV)); //horizontal fov/2 in radians\n\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera.type == 'OrthographicCamera') {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n\n    _defineProperty(this, \"focus\", (point, size, amount = 1) => {\n      if (this.camera) {\n        const focusPoint = point.clone(); //move center of camera (along with gizmos) towards point of interest\n\n        focusPoint.sub(this._gizmos.position).multiplyScalar(amount);\n\n        this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n\n        const gizmoStateTemp = this._gizmoMatrixState.clone();\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        const cameraStateTemp = this._cameraMatrixState.clone();\n\n        this._cameraMatrixState.premultiply(this._translationMatrix);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale); //apply zoom\n\n\n        if (this.enableZoom) {\n          this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n        }\n\n        this._gizmoMatrixState.copy(gizmoStateTemp);\n\n        this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n\n    _defineProperty(this, \"drawGrid\", () => {\n      if (this.scene) {\n        var _this$camera9, _this$camera10;\n\n        const color = 0x888888;\n        const multiplier = 3;\n        let size, divisions, maxLength, tick;\n\n        if (((_this$camera9 = this.camera) === null || _this$camera9 === void 0 ? void 0 : _this$camera9.type) === 'OrthographicCamera') {\n          const width = this.camera.right - this.camera.left;\n          const height = this.camera.bottom - this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / this.camera.zoom * multiplier;\n          divisions = size / tick * this.camera.zoom;\n        } else if (((_this$camera10 = this.camera) === null || _this$camera10 === void 0 ? void 0 : _this$camera10.type) === 'PerspectiveCamera') {\n          const distance = this.camera.position.distanceTo(this._gizmos.position);\n          const halfFovV = MathUtils.DEG2RAD * this.camera.fov * 0.5;\n          const halfFovH = Math.atan(this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n\n        if (this._grid == null && this.camera) {\n          this._grid = new GridHelper(size, divisions, color, color);\n\n          this._grid.position.copy(this._gizmos.position);\n\n          this._gridPosition.copy(this._grid.position);\n\n          this._grid.quaternion.copy(this.camera.quaternion);\n\n          this._grid.rotateX(Math.PI * 0.5);\n\n          this.scene.add(this._grid);\n        }\n      }\n    });\n\n    _defineProperty(this, \"connect\", domElement => {\n      // https://github.com/mrdoob/three.js/issues/20575\n      if (domElement === document) {\n        console.error('THREE.ArcballControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      }\n\n      this.domElement = domElement; // disables touch scroll\n      // touch-action needs to be defined for pointer events to work on mobile\n      // https://stackoverflow.com/a/48254578\n\n      this.domElement.style.touchAction = 'none';\n      this.domElement.addEventListener('contextmenu', this.onContextMenu);\n      this.domElement.addEventListener('pointerdown', this.onPointerDown);\n      this.domElement.addEventListener('pointercancel', this.onPointerCancel);\n      this.domElement.addEventListener('wheel', this.onWheel);\n    });\n\n    _defineProperty(this, \"dispose\", () => {\n      var _this$domElement, _this$domElement2, _this$domElement3, _this$domElement4, _this$scene;\n\n      if (this._animationId != -1) {\n        window.cancelAnimationFrame(this._animationId);\n      }\n\n      (_this$domElement = this.domElement) === null || _this$domElement === void 0 ? void 0 : _this$domElement.removeEventListener('pointerdown', this.onPointerDown);\n      (_this$domElement2 = this.domElement) === null || _this$domElement2 === void 0 ? void 0 : _this$domElement2.removeEventListener('pointercancel', this.onPointerCancel);\n      (_this$domElement3 = this.domElement) === null || _this$domElement3 === void 0 ? void 0 : _this$domElement3.removeEventListener('wheel', this.onWheel);\n      (_this$domElement4 = this.domElement) === null || _this$domElement4 === void 0 ? void 0 : _this$domElement4.removeEventListener('contextmenu', this.onContextMenu);\n      window.removeEventListener('pointermove', this.onPointerMove);\n      window.removeEventListener('pointerup', this.onPointerUp);\n      window.removeEventListener('resize', this.onWindowResize);\n      (_this$scene = this.scene) === null || _this$scene === void 0 ? void 0 : _this$scene.remove(this._gizmos);\n      this.disposeGrid();\n    });\n\n    _defineProperty(this, \"disposeGrid\", () => {\n      if (this._grid && this.scene) {\n        this.scene.remove(this._grid);\n        this._grid = null;\n      }\n    });\n\n    _defineProperty(this, \"easeOutCubic\", t => {\n      return 1 - Math.pow(1 - t, 3);\n    });\n\n    _defineProperty(this, \"activateGizmos\", isActive => {\n      for (const gizmo of this._gizmos.children) {\n        gizmo.material.setValues({\n          opacity: isActive ? 1 : 0.6\n        });\n      }\n    });\n\n    _defineProperty(this, \"getCursorNDC\", (cursorX, cursorY, canvas) => {\n      const canvasRect = canvas.getBoundingClientRect();\n\n      this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n\n      this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n\n      return this._v2_1.clone();\n    });\n\n    _defineProperty(this, \"getCursorPosition\", (cursorX, cursorY, canvas) => {\n      var _this$camera11;\n\n      this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n      if (((_this$camera11 = this.camera) === null || _this$camera11 === void 0 ? void 0 : _this$camera11.type) === 'OrthographicCamera') {\n        this._v2_1.x *= (this.camera.right - this.camera.left) * 0.5;\n        this._v2_1.y *= (this.camera.top - this.camera.bottom) * 0.5;\n      }\n\n      return this._v2_1.clone();\n    });\n\n    _defineProperty(this, \"setCamera\", camera => {\n      if (camera) {\n        camera.lookAt(this.target);\n        camera.updateMatrix(); //setting state\n\n        if ((camera === null || camera === void 0 ? void 0 : camera.type) == 'PerspectiveCamera') {\n          this._fov0 = camera.fov;\n          this._fovState = camera.fov;\n        }\n\n        this._cameraMatrixState0.copy(camera.matrix);\n\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n\n        this._cameraProjectionState.copy(camera.projectionMatrix);\n\n        this._zoom0 = camera.zoom;\n        this._zoomState = this._zoom0;\n        this._initialNear = camera.near;\n        this._nearPos0 = camera.position.distanceTo(this.target) - camera.near;\n        this._nearPos = this._initialNear;\n        this._initialFar = camera.far;\n        this._farPos0 = camera.position.distanceTo(this.target) - camera.far;\n        this._farPos = this._initialFar;\n\n        this._up0.copy(camera.up);\n\n        this._upState.copy(camera.up);\n\n        this.camera = camera;\n        this.camera.updateProjectionMatrix(); //making gizmos\n\n        const tbRadius = this.calculateTbRadius(camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n      }\n    });\n\n    _defineProperty(this, \"makeGizmos\", (tbCenter, tbRadius) => {\n      // @ts-expect-error\n      const curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      const points = curve.getPoints(this._curvePts); //geometry\n\n      const curveGeometry = new BufferGeometry().setFromPoints(points); //material\n\n      const curveMaterialX = new LineBasicMaterial({\n        color: 0xff8080,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialY = new LineBasicMaterial({\n        color: 0x80ff80,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialZ = new LineBasicMaterial({\n        color: 0x8080ff,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      }); //line\n\n      const gizmoX = new Line(curveGeometry, curveMaterialX);\n      const gizmoY = new Line(curveGeometry, curveMaterialY);\n      const gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      const rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation; //setting state\n\n      this._gizmoMatrixState0.identity().setPosition(tbCenter);\n\n      this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n\n      if (this.camera && this.camera.zoom != 1) {\n        //adapt gizmos size to camera zoom\n        const size = 1 / this.camera.zoom;\n\n        this._scaleMatrix.makeScale(size, size, size);\n\n        this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix);\n\n        this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n      }\n\n      this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n      this._gizmos.clear();\n\n      this._gizmos.add(gizmoX);\n\n      this._gizmos.add(gizmoY);\n\n      this._gizmos.add(gizmoZ);\n    });\n\n    _defineProperty(this, \"onFocusAnim\", (time, point, cameraMatrix, gizmoMatrix) => {\n      if (this._timeStart == -1) {\n        //animation start\n        this._timeStart = time;\n      }\n\n      if (this._state == STATE.ANIMATION_FOCUS) {\n        const deltaTime = time - this._timeStart;\n        const animTime = deltaTime / this.focusAnimationTime;\n\n        this._gizmoMatrixState.copy(gizmoMatrix);\n\n        if (animTime >= 1) {\n          //animation end\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n          this.focus(point, this.scaleFactor);\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        } else {\n          const amount = this.easeOutCubic(animTime);\n          const size = 1 - amount + this.scaleFactor * amount;\n\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n          this.focus(point, size, amount);\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        //interrupt animation\n        this._animationId = -1;\n        this._timeStart = -1;\n      }\n    });\n\n    _defineProperty(this, \"onRotationAnim\", (time, rotationAxis, w0) => {\n      if (this._timeStart == -1) {\n        //animation start\n        this._anglePrev = 0;\n        this._angleCurrent = 0;\n        this._timeStart = time;\n      }\n\n      if (this._state == STATE.ANIMATION_ROTATE) {\n        //w = w0 + alpha * t\n        const deltaTime = (time - this._timeStart) / 1000;\n        const w = w0 + -this.dampingFactor * deltaTime;\n\n        if (w > 0) {\n          //tetha = 0.5 * alpha * t^2 + w0 * t + tetha0\n          this._angleCurrent = 0.5 * -this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n          this.applyTransformMatrix(this.rotate(rotationAxis, this._angleCurrent));\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          this._animationId = -1;\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        //interrupt animation\n        this._animationId = -1;\n        this._timeStart = -1;\n\n        if (this._state != STATE.ROTATE) {\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n\n    _defineProperty(this, \"pan\", (p0, p1, adjust = false) => {\n      if (this.camera) {\n        const movement = p0.clone().sub(p1);\n\n        if (this.camera.type === 'OrthographicCamera') {\n          //adjust movement amount\n          movement.multiplyScalar(1 / this.camera.zoom);\n        }\n\n        if (this.camera.type === 'PerspectiveCamera' && adjust) {\n          //adjust movement amount\n          this._v3_1.setFromMatrixPosition(this._cameraMatrixState0); //camera's initial position\n\n\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0); //gizmo's initial position\n\n\n          const distanceFactor = this._v3_1.distanceTo(this._v3_2) / this.camera.position.distanceTo(this._gizmos.position);\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n\n        this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(this.camera.quaternion);\n\n        this._m4_1.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z);\n\n        this.setTransformationMatrices(this._m4_1, this._m4_1);\n      }\n\n      return _transformation;\n    });\n\n    _defineProperty(this, \"reset\", () => {\n      if (this.camera) {\n        this.camera.zoom = this._zoom0;\n\n        if (this.camera.type === 'PerspectiveCamera') {\n          this.camera.fov = this._fov0;\n        }\n\n        this.camera.near = this._nearPos;\n        this.camera.far = this._farPos;\n\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.up.copy(this._up0);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n\n        this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n\n        this._gizmoMatrixState0.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this._gizmos.updateMatrix();\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"rotate\", (axis, angle) => {\n      const point = this._gizmos.position; //rotation center\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      this._rotationMatrix.makeRotationAxis(axis, -angle); //rotate camera\n\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      this._m4_1.multiply(this._rotationMatrix);\n\n      this._m4_1.multiply(this._translationMatrix);\n\n      this.setTransformationMatrices(this._m4_1);\n      return _transformation;\n    });\n\n    _defineProperty(this, \"copyState\", () => {\n      if (this.camera) {\n        var _this$camera12;\n\n        const state = JSON.stringify(((_this$camera12 = this.camera) === null || _this$camera12 === void 0 ? void 0 : _this$camera12.type) === 'OrthographicCamera' ? {\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        } : {\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraFov: this.camera.fov,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        });\n        navigator.clipboard.writeText(state);\n      }\n    });\n\n    _defineProperty(this, \"pasteState\", () => {\n      const self = this;\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n\n    _defineProperty(this, \"saveState\", () => {\n      if (!this.camera) return;\n\n      this._cameraMatrixState0.copy(this.camera.matrix);\n\n      this._gizmoMatrixState0.copy(this._gizmos.matrix);\n\n      this._nearPos = this.camera.near;\n      this._farPos = this.camera.far;\n      this._zoom0 = this.camera.zoom;\n\n      this._up0.copy(this.camera.up);\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        this._fov0 = this.camera.fov;\n      }\n    });\n\n    _defineProperty(this, \"applyScale\", (size, point, scaleGizmos = true) => {\n      if (!this.camera) return;\n      const scalePoint = point.clone();\n      let sizeInverse = 1 / size;\n\n      if (this.camera.type === 'OrthographicCamera') {\n        //camera zoom\n        this.camera.zoom = this._zoomState;\n        this.camera.zoom *= size; //check min and max zoom\n\n        if (this.camera.zoom > this.maxZoom) {\n          this.camera.zoom = this.maxZoom;\n          sizeInverse = this._zoomState / this.maxZoom;\n        } else if (this.camera.zoom < this.minZoom) {\n          this.camera.zoom = this.minZoom;\n          sizeInverse = this._zoomState / this.minZoom;\n        }\n\n        this.camera.updateProjectionMatrix();\n\n        this._v3_1.setFromMatrixPosition(this._gizmoMatrixState); //gizmos position\n        //scale gizmos so they appear in the same spot having the same dimension\n\n\n        this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n        this._translationMatrix.makeTranslation(-this._v3_1.x, -this._v3_1.y, -this._v3_1.z);\n\n        this._m4_2.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z).multiply(this._scaleMatrix);\n\n        this._m4_2.multiply(this._translationMatrix); //move camera and gizmos to obtain pinch effect\n\n\n        scalePoint.sub(this._v3_1);\n        const amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n\n        this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n\n        this._m4_2.premultiply(this._m4_1);\n\n        this.setTransformationMatrices(this._m4_1, this._m4_2);\n        return _transformation;\n      }\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState); //move camera\n\n\n        let distance = this._v3_1.distanceTo(scalePoint);\n\n        let amount = distance - distance * sizeInverse; //check min and max distance\n\n        const newDistance = distance - amount;\n\n        if (newDistance < this.minDistance) {\n          sizeInverse = this.minDistance / distance;\n          amount = distance - distance * sizeInverse;\n        } else if (newDistance > this.maxDistance) {\n          sizeInverse = this.maxDistance / distance;\n          amount = distance - distance * sizeInverse;\n        }\n\n        let direction = scalePoint.clone().sub(this._v3_1).normalize().multiplyScalar(amount);\n\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        if (scaleGizmos) {\n          //scale gizmos so they appear in the same spot having the same dimension\n          const pos = this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(this._v3_2).normalize().multiplyScalar(amount);\n\n          this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n\n          this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n          this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(this._translationMatrix);\n\n          this._m4_2.multiply(this._scaleMatrix);\n\n          this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n\n          this._m4_2.multiply(this._translationMatrix);\n\n          this.setTransformationMatrices(this._m4_1, this._m4_2);\n        } else {\n          this.setTransformationMatrices(this._m4_1);\n        }\n\n        return _transformation;\n      }\n    });\n\n    _defineProperty(this, \"setFov\", value => {\n      var _this$camera13;\n\n      if (((_this$camera13 = this.camera) === null || _this$camera13 === void 0 ? void 0 : _this$camera13.type) === 'PerspectiveCamera') {\n        this.camera.fov = MathUtils.clamp(value, this.minFov, this.maxFov);\n        this.camera.updateProjectionMatrix();\n      }\n    });\n\n    _defineProperty(this, \"setTarget\", (x, y, z) => {\n      if (this.camera) {\n        this.target.set(x, y, z);\n\n        this._gizmos.position.set(x, y, z); //for correct radius calculation\n\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n        this.camera.lookAt(this.target);\n      }\n    });\n\n    _defineProperty(this, \"zRotate\", (point, angle) => {\n      this._rotationMatrix.makeRotationAxis(this._rotationAxis, angle);\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      this._m4_1.multiply(this._rotationMatrix);\n\n      this._m4_1.multiply(this._translationMatrix);\n\n      this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(point); //vector from rotation center to gizmos position\n\n\n      this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis, angle); //apply rotation\n\n\n      this._v3_2.sub(this._v3_1);\n\n      this._m4_2.makeTranslation(this._v3_2.x, this._v3_2.y, this._v3_2.z);\n\n      this.setTransformationMatrices(this._m4_1, this._m4_2);\n      return _transformation;\n    });\n\n    _defineProperty(this, \"unprojectOnObj\", (cursor, camera) => {\n      if (!this.scene) return null;\n      const raycaster = new Raycaster();\n      raycaster.near = camera.near;\n      raycaster.far = camera.far;\n      raycaster.setFromCamera(cursor, camera);\n      const intersect = raycaster.intersectObjects(this.scene.children, true);\n\n      for (let i = 0; i < intersect.length; i++) {\n        if (intersect[i].object.uuid != this._gizmos.uuid && intersect[i].face) {\n          return intersect[i].point.clone();\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"unprojectOnTbSurface\", (camera, cursorX, cursorY, canvas, tbRadius) => {\n      if (camera.type == 'OrthographicCamera') {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n\n        const x2 = Math.pow(this._v2_1.x, 2);\n        const y2 = Math.pow(this._v2_1.y, 2);\n        const r2 = Math.pow(this._tbRadius, 2);\n\n        if (x2 + y2 <= r2 * 0.5) {\n          //intersection with sphere\n          this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          //intersection with hyperboloid\n          this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n\n        return this._v3_1;\n      }\n\n      if (camera.type == 'PerspectiveCamera') {\n        //unproject cursor on the near plane\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n\n\n        const cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        const radius2 = Math.pow(tbRadius, 2); //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(this._v3_1.x, this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        /*\n         * calculate intersection point between unprojected ray and trackball surface\n         *|y = m * x + q\n         *|x^2 + y^2 = r^2\n         *\n         * (m^2 + 1) * x^2 + (2 * m * q) * x + q^2 - r^2 = 0\n         */\n\n        let a = Math.pow(m, 2) + 1;\n        let b = 2 * m * q;\n        let c = Math.pow(q, 2) - radius2;\n        let delta = Math.pow(b, 2) - 4 * a * c;\n\n        if (delta >= 0) {\n          //intersection with sphere\n          this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n          this._v2_1.setY(m * this._v2_1.x + q);\n\n          const angle = MathUtils.RAD2DEG * this._v2_1.angle();\n\n          if (angle >= 45) {\n            //if angle between intersection point and X' axis is >= 45°, return that point\n            //otherwise, calculate intersection point with hyperboloid\n            const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n            rayDir.multiplyScalar(rayLength);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        } //intersection with hyperboloid\n\n        /*\n         *|y = m * x + q\n         *|y = (1 / x) * (r^2 / 2)\n         *\n         * m * x^2 + q * x - r^2 / 2 = 0\n         */\n\n\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n\n        this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n        this._v2_1.setY(m * this._v2_1.x + q);\n\n        const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n\n    _defineProperty(this, \"unprojectOnTbPlane\", (camera, cursorX, cursorY, canvas, initialDistance = false) => {\n      if (camera.type == 'OrthographicCamera') {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n\n        return this._v3_1.clone();\n      }\n\n      if (camera.type == 'PerspectiveCamera') {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas)); //unproject cursor on the near plane\n\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n        //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        let cameraGizmoDistance;\n\n        if (initialDistance) {\n          cameraGizmoDistance = this._v3_1.setFromMatrixPosition(this._cameraMatrixState0).distanceTo(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        }\n        /*\n         * calculate intersection point between unprojected ray and the plane\n         *|y = mx + q\n         *|y = 0\n         *\n         * x = -q/m\n         */\n\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        const x = -q / m;\n        const rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n\n    _defineProperty(this, \"updateMatrixState\", () => {\n      if (!this.camera) return; //update camera and gizmos state\n\n      this._cameraMatrixState.copy(this.camera.matrix);\n\n      this._gizmoMatrixState.copy(this._gizmos.matrix);\n\n      if (this.camera.type === 'OrthographicCamera') {\n        this._cameraProjectionState.copy(this.camera.projectionMatrix);\n\n        this.camera.updateProjectionMatrix();\n        this._zoomState = this.camera.zoom;\n      }\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        this._fovState = this.camera.fov;\n      }\n    });\n\n    _defineProperty(this, \"updateTbState\", (newState, updateMatrices) => {\n      this._state = newState;\n\n      if (updateMatrices) {\n        this.updateMatrixState();\n      }\n    });\n\n    _defineProperty(this, \"update\", () => {\n      const EPS = 0.000001; // Update target and gizmos state\n\n      if (!this.target.equals(this._currentTarget) && this.camera) {\n        this._gizmos.position.set(this.target.x, this.target.y, this.target.z); //for correct radius calculation\n\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n\n        this._currentTarget.copy(this.target);\n      }\n\n      if (!this.camera) return; //check min/max parameters\n\n      if (this.camera.type === 'OrthographicCamera') {\n        //check zoom\n        if (this.camera.zoom > this.maxZoom || this.camera.zoom < this.minZoom) {\n          const newZoom = MathUtils.clamp(this.camera.zoom, this.minZoom, this.maxZoom);\n          this.applyTransformMatrix(this.applyScale(newZoom / this.camera.zoom, this._gizmos.position, true));\n        }\n      }\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        //check distance\n        const distance = this.camera.position.distanceTo(this._gizmos.position);\n\n        if (distance > this.maxDistance + EPS || distance < this.minDistance - EPS) {\n          const newDistance = MathUtils.clamp(distance, this.minDistance, this.maxDistance);\n          this.applyTransformMatrix(this.applyScale(newDistance / distance, this._gizmos.position));\n          this.updateMatrixState();\n        } //check fov\n\n\n        if (this.camera.fov < this.minFov || this.camera.fov > this.maxFov) {\n          this.camera.fov = MathUtils.clamp(this.camera.fov, this.minFov, this.maxFov);\n          this.camera.updateProjectionMatrix();\n        }\n\n        const oldRadius = this._tbRadius;\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        if (oldRadius < this._tbRadius - EPS || oldRadius > this._tbRadius + EPS) {\n          const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n          const newRadius = this._tbRadius / scale; // @ts-expect-error\n\n          const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          const points = curve.getPoints(this._curvePts);\n          const curveGeometry = new BufferGeometry().setFromPoints(points);\n\n          for (const gizmo in this._gizmos.children) {\n            const child = this._gizmos.children[gizmo];\n            child.geometry = curveGeometry;\n          }\n        }\n      }\n\n      this.camera.lookAt(this._gizmos.position);\n    });\n\n    _defineProperty(this, \"setStateFromJSON\", json => {\n      const state = JSON.parse(json);\n\n      if (state.arcballState && this.camera) {\n        this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.up.copy(state.arcballState.cameraUp);\n        this.camera.near = state.arcballState.cameraNear;\n        this.camera.far = state.arcballState.cameraFar;\n        this.camera.zoom = state.arcballState.cameraZoom;\n\n        if (this.camera.type === 'PerspectiveCamera') {\n          this.camera.fov = state.arcballState.cameraFov;\n        }\n\n        this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n\n        this._gizmos.updateMatrix();\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        const gizmoTmp = new Matrix4().copy(this._gizmoMatrixState0);\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n\n        this._gizmoMatrixState0.copy(gizmoTmp);\n\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    this.camera = null;\n    this.domElement = _domElement;\n    this.scene = scene;\n    this.mouseActions = [];\n    this._mouseOp = null; //global vectors and matrices that are used in some operations to avoid creating new objects every time (e.g. every time cursor moves)\n\n    this._v2_1 = new Vector2();\n    this._v3_1 = new Vector3();\n    this._v3_2 = new Vector3();\n    this._m4_1 = new Matrix4();\n    this._m4_2 = new Matrix4();\n    this._quat = new Quaternion(); //transformation matrices\n\n    this._translationMatrix = new Matrix4(); //matrix for translation operation\n\n    this._rotationMatrix = new Matrix4(); //matrix for rotation operation\n\n    this._scaleMatrix = new Matrix4(); //matrix for scaling operation\n\n    this._rotationAxis = new Vector3(); //axis for rotate operation\n    //camera state\n\n    this._cameraMatrixState = new Matrix4();\n    this._cameraProjectionState = new Matrix4();\n    this._fovState = 1;\n    this._upState = new Vector3();\n    this._zoomState = 1;\n    this._nearPos = 0;\n    this._farPos = 0;\n    this._gizmoMatrixState = new Matrix4(); //initial values\n\n    this._up0 = new Vector3();\n    this._zoom0 = 1;\n    this._fov0 = 0;\n    this._initialNear = 0;\n    this._nearPos0 = 0;\n    this._initialFar = 0;\n    this._farPos0 = 0;\n    this._cameraMatrixState0 = new Matrix4();\n    this._gizmoMatrixState0 = new Matrix4(); //pointers array\n\n    this._button = -1;\n    this._touchStart = [];\n    this._touchCurrent = [];\n    this._input = INPUT.NONE; //two fingers touch interaction\n\n    this._switchSensibility = 32; //minimum movement to be performed to fire single pan start after the second finger has been released\n\n    this._startFingerDistance = 0; //distance between two fingers\n\n    this._currentFingerDistance = 0;\n    this._startFingerRotation = 0; //amount of rotation performed with two fingers\n\n    this._currentFingerRotation = 0; //double tap\n\n    this._devPxRatio = 0;\n    this._downValid = true;\n    this._nclicks = 0;\n    this._downEvents = [];\n    this._clickStart = 0; //first click time\n\n    this._maxDownTime = 250;\n    this._maxInterval = 300;\n    this._posThreshold = 24;\n    this._movementThreshold = 24; //cursor positions\n\n    this._currentCursorPosition = new Vector3();\n    this._startCursorPosition = new Vector3(); //grid\n\n    this._grid = null; //grid to be visualized during pan operation\n\n    this._gridPosition = new Vector3(); //gizmos\n\n    this._gizmos = new Group();\n    this._curvePts = 128; //animations\n\n    this._timeStart = -1; //initial time\n\n    this._animationId = -1; //focus animation\n\n    this.focusAnimationTime = 500; //duration of focus animation in ms\n    //rotate animation\n\n    this._timePrev = 0; //time at which previous rotate operation has been detected\n\n    this._timeCurrent = 0; //time at which current rotate operation has been detected\n\n    this._anglePrev = 0; //angle of previous rotation\n\n    this._angleCurrent = 0; //angle of current rotation\n\n    this._cursorPosPrev = new Vector3(); //cursor position when previous rotate operation has been detected\n\n    this._cursorPosCurr = new Vector3(); //cursor position when current rotate operation has been detected\n\n    this._wPrev = 0; //angular velocity of the previous rotate operation\n\n    this._wCurr = 0; //angular velocity of the current rotate operation\n    //parameters\n\n    this.adjustNearFar = false;\n    this.scaleFactor = 1.1; //zoom/distance multiplier\n\n    this.dampingFactor = 25;\n    this.wMax = 20; //maximum angular velocity allowed\n\n    this.enableAnimations = true; //if animations should be performed\n\n    this.enableGrid = false; //if grid should be showed during pan operation\n\n    this.cursorZoom = false; //if wheel zoom should be cursor centered\n\n    this.minFov = 5;\n    this.maxFov = 90;\n    this.enabled = true;\n    this.enablePan = true;\n    this.enableRotate = true;\n    this.enableZoom = true;\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n    this.minZoom = 0;\n    this.maxZoom = Infinity; //trackball parameters\n\n    this.target = new Vector3(0, 0, 0);\n    this._currentTarget = new Vector3(0, 0, 0);\n    this._tbRadius = 1; //FSA\n\n    this._state = STATE.IDLE;\n    this.setCamera(_camera);\n\n    if (this.scene) {\n      this.scene.add(this._gizmos);\n    }\n\n    this._devPxRatio = window.devicePixelRatio;\n    this.initializeMouseActions();\n    if (this.domElement) this.connect(this.domElement);\n    window.addEventListener('resize', this.onWindowResize);\n  } //listeners\n\n\n  /**\n   * Apply a transformation matrix, to the camera and gizmos\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\n   */\n  applyTransformMatrix(transformation) {\n    if (transformation !== null && transformation !== void 0 && transformation.camera && this.camera) {\n      this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n\n      this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n      this.camera.updateMatrix(); //update camera up vector\n\n      if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n        this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n      }\n    }\n\n    if (transformation !== null && transformation !== void 0 && transformation.gizmos) {\n      this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n\n      this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n      this._gizmos.updateMatrix();\n    }\n\n    if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && this.camera) {\n      const tbRadius = this.calculateTbRadius(this.camera);\n\n      if (tbRadius !== undefined) {\n        this._tbRadius = tbRadius;\n      }\n\n      if (this.adjustNearFar) {\n        const cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n        const bb = new Box3();\n        bb.setFromObject(this._gizmos);\n        const sphere = new Sphere();\n        bb.getBoundingSphere(sphere);\n        const adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n        const regularNearPosition = cameraDistance - this._initialNear;\n        const minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n        this.camera.near = cameraDistance - minNearPos;\n        const adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n        const regularFarPosition = cameraDistance - this._initialFar;\n        const minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n        this.camera.far = cameraDistance - minFarPos;\n        this.camera.updateProjectionMatrix();\n      } else {\n        let update = false;\n\n        if (this.camera.near != this._initialNear) {\n          this.camera.near = this._initialNear;\n          update = true;\n        }\n\n        if (this.camera.far != this._initialFar) {\n          this.camera.far = this._initialFar;\n          update = true;\n        }\n\n        if (update) {\n          this.camera.updateProjectionMatrix();\n        }\n      }\n    }\n  }\n  /**\n   * Calculate the angular speed\n   * @param {Number} p0 Position at t0\n   * @param {Number} p1 Position at t1\n   * @param {Number} t0 Initial time in milliseconds\n   * @param {Number} t1 Ending time in milliseconds\n   */\n\n\n  /**\n   * Set gizmos visibility\n   * @param {Boolean} value Value of gizmos visibility\n   */\n  setGizmosVisible(value) {\n    this._gizmos.visible = value;\n    this.dispatchEvent(_changeEvent);\n  }\n  /**\n   * Creates the rotation gizmos matching trackball center and radius\n   * @param {Vector3} tbCenter The trackball center\n   * @param {number} tbRadius The trackball radius\n   */\n\n\n  /**\n   * Set values in transformation object\n   * @param {Matrix4} camera Transformation to be applied to the camera\n   * @param {Matrix4} gizmos Transformation to be applied to gizmos\n   */\n  setTransformationMatrices(camera = null, gizmos = null) {\n    if (camera) {\n      if (_transformation.camera) {\n        _transformation.camera.copy(camera);\n      } else {\n        _transformation.camera = camera.clone();\n      }\n    } else {\n      _transformation.camera = null;\n    }\n\n    if (gizmos) {\n      if (_transformation.gizmos) {\n        _transformation.gizmos.copy(gizmos);\n      } else {\n        _transformation.gizmos = gizmos.clone();\n      }\n    } else {\n      _transformation.gizmos = null;\n    }\n  }\n  /**\n   * Rotate camera around its direction axis passing by a given point by a given angle\n   * @param {Vector3} point The point where the rotation axis is passing trough\n   * @param {Number} angle Angle in radians\n   * @returns The computed transormation matix\n   */\n\n\n}\n\nexport { ArcballControls };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}