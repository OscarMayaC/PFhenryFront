{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Mesh, SkinnedMesh } from 'three';\n\n/**\n * Usage:\n *  const exporter = new STLExporter();\n *\n *  // second argument is a list of options\n *  const data = exporter.parse( mesh, { binary: true } );\n *\n */\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/f7ec78508c6797e42f87a4390735bc2c650a1bfd/types/three/examples/jsm/exporters/STLExporter.d.ts\n\nclass STLExporter {\n  constructor() {\n    _defineProperty(this, \"binary\", void 0);\n    _defineProperty(this, \"output\", void 0);\n    _defineProperty(this, \"offset\", void 0);\n    _defineProperty(this, \"objects\", void 0);\n    _defineProperty(this, \"triangles\", void 0);\n    _defineProperty(this, \"vA\", void 0);\n    _defineProperty(this, \"vB\", void 0);\n    _defineProperty(this, \"vC\", void 0);\n    _defineProperty(this, \"cb\", void 0);\n    _defineProperty(this, \"ab\", void 0);\n    _defineProperty(this, \"normal\", void 0);\n    this.binary = false;\n    this.output = '';\n    this.offset = 80; // skip header\n\n    this.objects = [];\n    this.triangles = 0;\n    this.vA = new Vector3();\n    this.vB = new Vector3();\n    this.vC = new Vector3();\n    this.cb = new Vector3();\n    this.ab = new Vector3();\n    this.normal = new Vector3();\n  }\n  parse(scene, options) {\n    this.binary = options.binary !== undefined ? options.binary : false; //\n\n    scene.traverse(object => {\n      if (object instanceof Mesh && object.isMesh) {\n        const geometry = object.geometry;\n        if (!geometry.isBufferGeometry) {\n          throw new Error('THREE.STLExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n        const index = geometry.index;\n        const positionAttribute = geometry.getAttribute('position');\n        this.triangles += index !== null ? index.count / 3 : positionAttribute.count / 3;\n        this.objects.push({\n          object3d: object,\n          geometry: geometry\n        });\n      }\n    });\n    if (this.binary) {\n      const bufferLength = this.triangles * 2 + this.triangles * 3 * 4 * 4 + 80 + 4;\n      const arrayBuffer = new ArrayBuffer(bufferLength);\n      this.output = new DataView(arrayBuffer);\n      this.output.setUint32(this.offset, this.triangles, true);\n      this.offset += 4;\n    } else {\n      this.output = '';\n      this.output += 'solid exported\\n';\n    }\n    for (let i = 0, il = this.objects.length; i < il; i++) {\n      const object = this.objects[i].object3d;\n      const geometry = this.objects[i].geometry;\n      const index = geometry.index;\n      const positionAttribute = geometry.getAttribute('position');\n      if (object instanceof SkinnedMesh) {\n        if (index !== null) {\n          // indexed geometry\n          for (let j = 0; j < index.count; j += 3) {\n            const a = index.getX(j + 0);\n            const b = index.getX(j + 1);\n            const c = index.getX(j + 2);\n            this.writeFace(a, b, c, positionAttribute, object);\n          }\n        } else {\n          // non-indexed geometry\n          for (let j = 0; j < positionAttribute.count; j += 3) {\n            const a = j + 0;\n            const b = j + 1;\n            const c = j + 2;\n            this.writeFace(a, b, c, positionAttribute, object);\n          }\n        }\n      }\n    }\n    if (!this.binary) {\n      this.output += 'endsolid exported\\n';\n    }\n    return this.output;\n  }\n  writeFace(a, b, c, positionAttribute, object) {\n    this.vA.fromBufferAttribute(positionAttribute, a);\n    this.vB.fromBufferAttribute(positionAttribute, b);\n    this.vC.fromBufferAttribute(positionAttribute, c);\n    if (object.isSkinnedMesh) {\n      object.boneTransform(a, this.vA);\n      object.boneTransform(b, this.vB);\n      object.boneTransform(c, this.vC);\n    }\n    this.vA.applyMatrix4(object.matrixWorld);\n    this.vB.applyMatrix4(object.matrixWorld);\n    this.vC.applyMatrix4(object.matrixWorld);\n    this.writeNormal(this.vA, this.vB, this.vC);\n    this.writeVertex(this.vA);\n    this.writeVertex(this.vB);\n    this.writeVertex(this.vC);\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setUint16(this.offset, 0, true);\n      this.offset += 2;\n    } else {\n      this.output += '\\t\\tendloop\\n';\n      this.output += '\\tendfacet\\n';\n    }\n  }\n  writeNormal(vA, vB, vC) {\n    this.cb.subVectors(vC, vB);\n    this.ab.subVectors(vA, vB);\n    this.cb.cross(this.ab).normalize();\n    this.normal.copy(this.cb).normalize();\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, this.normal.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\\tfacet normal ${this.normal.x} ${this.normal.y} ${this.normal.z}\\n`;\n      this.output += '\\t\\touter loop\\n';\n    }\n  }\n  writeVertex(vertex) {\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, vertex.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\\t\\t\\tvertex vertex.x vertex.y vertex.z\\n`;\n    }\n  }\n}\nexport { STLExporter };","map":{"version":3,"names":["_defineProperty","Vector3","Mesh","SkinnedMesh","STLExporter","constructor","binary","output","offset","objects","triangles","vA","vB","vC","cb","ab","normal","parse","scene","options","undefined","traverse","object","isMesh","geometry","isBufferGeometry","Error","index","positionAttribute","getAttribute","count","push","object3d","bufferLength","arrayBuffer","ArrayBuffer","DataView","setUint32","i","il","length","j","a","getX","b","c","writeFace","fromBufferAttribute","isSkinnedMesh","boneTransform","applyMatrix4","matrixWorld","writeNormal","writeVertex","setUint16","subVectors","cross","normalize","copy","setFloat32","x","y","z","vertex"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/exporters/STLExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Mesh, SkinnedMesh } from 'three';\n\n/**\n * Usage:\n *  const exporter = new STLExporter();\n *\n *  // second argument is a list of options\n *  const data = exporter.parse( mesh, { binary: true } );\n *\n */\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/f7ec78508c6797e42f87a4390735bc2c650a1bfd/types/three/examples/jsm/exporters/STLExporter.d.ts\n\nclass STLExporter {\n  constructor() {\n    _defineProperty(this, \"binary\", void 0);\n\n    _defineProperty(this, \"output\", void 0);\n\n    _defineProperty(this, \"offset\", void 0);\n\n    _defineProperty(this, \"objects\", void 0);\n\n    _defineProperty(this, \"triangles\", void 0);\n\n    _defineProperty(this, \"vA\", void 0);\n\n    _defineProperty(this, \"vB\", void 0);\n\n    _defineProperty(this, \"vC\", void 0);\n\n    _defineProperty(this, \"cb\", void 0);\n\n    _defineProperty(this, \"ab\", void 0);\n\n    _defineProperty(this, \"normal\", void 0);\n\n    this.binary = false;\n    this.output = '';\n    this.offset = 80; // skip header\n\n    this.objects = [];\n    this.triangles = 0;\n    this.vA = new Vector3();\n    this.vB = new Vector3();\n    this.vC = new Vector3();\n    this.cb = new Vector3();\n    this.ab = new Vector3();\n    this.normal = new Vector3();\n  }\n\n  parse(scene, options) {\n    this.binary = options.binary !== undefined ? options.binary : false; //\n\n    scene.traverse(object => {\n      if (object instanceof Mesh && object.isMesh) {\n        const geometry = object.geometry;\n\n        if (!geometry.isBufferGeometry) {\n          throw new Error('THREE.STLExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n\n        const index = geometry.index;\n        const positionAttribute = geometry.getAttribute('position');\n        this.triangles += index !== null ? index.count / 3 : positionAttribute.count / 3;\n        this.objects.push({\n          object3d: object,\n          geometry: geometry\n        });\n      }\n    });\n\n    if (this.binary) {\n      const bufferLength = this.triangles * 2 + this.triangles * 3 * 4 * 4 + 80 + 4;\n      const arrayBuffer = new ArrayBuffer(bufferLength);\n      this.output = new DataView(arrayBuffer);\n      this.output.setUint32(this.offset, this.triangles, true);\n      this.offset += 4;\n    } else {\n      this.output = '';\n      this.output += 'solid exported\\n';\n    }\n\n    for (let i = 0, il = this.objects.length; i < il; i++) {\n      const object = this.objects[i].object3d;\n      const geometry = this.objects[i].geometry;\n      const index = geometry.index;\n      const positionAttribute = geometry.getAttribute('position');\n\n      if (object instanceof SkinnedMesh) {\n        if (index !== null) {\n          // indexed geometry\n          for (let j = 0; j < index.count; j += 3) {\n            const a = index.getX(j + 0);\n            const b = index.getX(j + 1);\n            const c = index.getX(j + 2);\n            this.writeFace(a, b, c, positionAttribute, object);\n          }\n        } else {\n          // non-indexed geometry\n          for (let j = 0; j < positionAttribute.count; j += 3) {\n            const a = j + 0;\n            const b = j + 1;\n            const c = j + 2;\n            this.writeFace(a, b, c, positionAttribute, object);\n          }\n        }\n      }\n    }\n\n    if (!this.binary) {\n      this.output += 'endsolid exported\\n';\n    }\n\n    return this.output;\n  }\n\n  writeFace(a, b, c, positionAttribute, object) {\n    this.vA.fromBufferAttribute(positionAttribute, a);\n    this.vB.fromBufferAttribute(positionAttribute, b);\n    this.vC.fromBufferAttribute(positionAttribute, c);\n\n    if (object.isSkinnedMesh) {\n      object.boneTransform(a, this.vA);\n      object.boneTransform(b, this.vB);\n      object.boneTransform(c, this.vC);\n    }\n\n    this.vA.applyMatrix4(object.matrixWorld);\n    this.vB.applyMatrix4(object.matrixWorld);\n    this.vC.applyMatrix4(object.matrixWorld);\n    this.writeNormal(this.vA, this.vB, this.vC);\n    this.writeVertex(this.vA);\n    this.writeVertex(this.vB);\n    this.writeVertex(this.vC);\n\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setUint16(this.offset, 0, true);\n      this.offset += 2;\n    } else {\n      this.output += '\\t\\tendloop\\n';\n      this.output += '\\tendfacet\\n';\n    }\n  }\n\n  writeNormal(vA, vB, vC) {\n    this.cb.subVectors(vC, vB);\n    this.ab.subVectors(vA, vB);\n    this.cb.cross(this.ab).normalize();\n    this.normal.copy(this.cb).normalize();\n\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, this.normal.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\\tfacet normal ${this.normal.x} ${this.normal.y} ${this.normal.z}\\n`;\n      this.output += '\\t\\touter loop\\n';\n    }\n  }\n\n  writeVertex(vertex) {\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, vertex.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\\t\\t\\tvertex vertex.x vertex.y vertex.z\\n`;\n    }\n  }\n\n}\n\nexport { STLExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}