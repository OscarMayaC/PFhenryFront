{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { strToU8, zipSync } from 'fflate';\nimport { Mesh, MeshPhysicalMaterial } from 'three';\nclass USDZExporter {\n  constructor() {\n    _defineProperty(this, \"PRECISION\", 7);\n    _defineProperty(this, \"materials\", void 0);\n    _defineProperty(this, \"textures\", void 0);\n    _defineProperty(this, \"files\", void 0);\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n  async parse(scene) {\n    const modelFileName = 'model.usda'; // model file should be first in USDZ archive so we init it here\n\n    this.files[modelFileName] = null;\n    let output = this.buildHeader();\n    scene.traverseVisible(object => {\n      if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n        const geometry = object.geometry;\n        const material = object.material;\n        const geometryFileName = 'geometries/Geometry_' + geometry.id + '.usd';\n        if (!(geometryFileName in this.files)) {\n          const meshObject = this.buildMeshObject(geometry);\n          this.files[geometryFileName] = this.buildUSDFileAsString(meshObject);\n        }\n        if (!(material.uuid in this.materials)) {\n          this.materials[material.uuid] = material;\n        }\n        output += this.buildXform(object, geometry, material);\n      }\n    });\n    output += this.buildMaterials(this.materials);\n    this.files[modelFileName] = strToU8(output);\n    output = null;\n    for (const id in this.textures) {\n      const texture = this.textures[id];\n      const color = id.split('_')[1];\n      const isRGBA = texture.format === 1023;\n      const canvas = this.imageToCanvas(texture.image, color);\n      const blob = await new Promise(resolve => canvas === null || canvas === void 0 ? void 0 : canvas.toBlob(resolve, isRGBA ? 'image/png' : 'image/jpeg', 1));\n      if (blob) {\n        this.files[`textures/Texture_${id}.${isRGBA ? 'png' : 'jpg'}`] = new Uint8Array(await blob.arrayBuffer());\n      }\n    } // 64 byte alignment\n    // https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n    let offset = 0;\n    for (const filename in this.files) {\n      const file = this.files[filename];\n      const headerSize = 34 + filename.length;\n      offset += headerSize;\n      const offsetMod64 = offset & 63;\n      if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n        const padLength = 64 - offsetMod64;\n        const padding = new Uint8Array(padLength);\n        this.files[filename] = [file, {\n          extra: {\n            12345: padding\n          }\n        }];\n      }\n      if (file && typeof file.length === 'number') {\n        offset = file.length;\n      }\n    }\n    return zipSync(this.files, {\n      level: 0\n    });\n  }\n  imageToCanvas(image, color) {\n    if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n      const scale = 1024 / Math.max(image.width, image.height);\n      const canvas = document.createElement('canvas');\n      canvas.width = image.width * Math.min(1, scale);\n      canvas.height = image.height * Math.min(1, scale);\n      const context = canvas.getContext('2d');\n      context === null || context === void 0 ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n      if (color !== undefined) {\n        const hex = parseInt(color, 16);\n        const r = (hex >> 16 & 255) / 255;\n        const g = (hex >> 8 & 255) / 255;\n        const b = (hex & 255) / 255;\n        const imagedata = context === null || context === void 0 ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n        if (imagedata) {\n          const data = imagedata === null || imagedata === void 0 ? void 0 : imagedata.data;\n          for (let i = 0; i < data.length; i += 4) {\n            data[i + 0] = data[i + 0] * r;\n            data[i + 1] = data[i + 1] * g;\n            data[i + 2] = data[i + 2] * b;\n          }\n          context === null || context === void 0 ? void 0 : context.putImageData(imagedata, 0, 0);\n        }\n      }\n      return canvas;\n    }\n  }\n  buildHeader() {\n    return `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n`;\n  }\n  buildUSDFileAsString(dataToInsert) {\n    let output = this.buildHeader();\n    output += dataToInsert;\n    return strToU8(output);\n  } // Xform\n\n  buildXform(object, geometry, material) {\n    const name = 'Object_' + object.id;\n    const transform = this.buildMatrix(object.matrixWorld);\n    if (object.matrixWorld.determinant() < 0) {\n      console.warn('THREE.USDZExporter: USDZ does not support negative scales', object);\n    }\n    return `def Xform \"${name}\" (\n    prepend references = @./geometries/Geometry_${geometry.id}.usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ${transform}\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n    rel material:binding = </Materials/Material_${material.id}>\n}\n`;\n  }\n  buildMatrix(matrix) {\n    const array = matrix.elements;\n    return `( ${this.buildMatrixRow(array, 0)}, ${this.buildMatrixRow(array, 4)}, ${this.buildMatrixRow(array, 8)}, ${this.buildMatrixRow(array, 12)} )`;\n  }\n  buildMatrixRow(array, offset) {\n    return `(${array[offset + 0]}, ${array[offset + 1]}, ${array[offset + 2]}, ${array[offset + 3]})`;\n  } // Mesh\n\n  buildMeshObject(geometry) {\n    const mesh = this.buildMesh(geometry);\n    return `\ndef \"Geometry\"\n{\n  ${mesh}\n}\n`;\n  }\n  buildMesh(geometry) {\n    const name = 'Geometry';\n    const attributes = geometry.attributes;\n    const count = attributes.position.count;\n    return `\n    def Mesh \"${name}\"\n    {\n        int[] faceVertexCounts = [${this.buildMeshVertexCount(geometry)}]\n        int[] faceVertexIndices = [${this.buildMeshVertexIndices(geometry)}]\n        normal3f[] normals = [${this.buildVector3Array(attributes.normal, count)}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${this.buildVector3Array(attributes.position, count)}]\n        float2[] primvars:st = [${this.buildVector2Array(attributes.uv, count)}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n  }\n  buildMeshVertexCount(geometry) {\n    const count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n    return Array(count / 3).fill(3).join(', ');\n  }\n  buildMeshVertexIndices(geometry) {\n    if (geometry.index !== null) {\n      // @ts-expect-error\n      return geometry.index.array.join(', ');\n    }\n    const array = [];\n    const length = geometry.attributes.position.count;\n    for (let i = 0; i < length; i++) {\n      array.push(i);\n    }\n    return array.join(', ');\n  }\n  buildVector3Array(attribute, count) {\n    if (attribute === undefined) {\n      console.warn('USDZExporter: Normals missing.');\n      return Array(count).fill('(0, 0, 0)').join(', ');\n    }\n    const array = [];\n    const data = attribute.array;\n    for (let i = 0; i < data.length; i += 3) {\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${data[i + 1].toPrecision(this.PRECISION)}, ${data[i + 2].toPrecision(this.PRECISION)})`);\n    }\n    return array.join(', ');\n  }\n  buildVector2Array(attribute, count) {\n    if (attribute === undefined) {\n      console.warn('USDZExporter: UVs missing.');\n      return Array(count).fill('(0, 0)').join(', ');\n    }\n    const array = [];\n    const data = attribute.array;\n    for (let i = 0; i < data.length; i += 2) {\n      // @ts-expect-error\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${1 - data[i + 1].toPrecision(this.PRECISION)})`);\n    }\n    return array.join(', ');\n  } // Materials\n\n  buildMaterials(materials) {\n    const array = [];\n    for (const uuid in materials) {\n      const material = materials[uuid];\n      array.push(this.buildMaterial(material));\n    }\n    return `def \"Materials\"\n{\n${array.join('')}\n}\n`;\n  }\n  buildMaterial(material) {\n    // https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n    const pad = '            ';\n    const inputs = [];\n    const samplers = [];\n    if (material.map !== null) {\n      inputs.push(`${pad}color3f inputs:diffuseColor.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.map, 'diffuse', material.color));\n    } else {\n      inputs.push(`${pad}color3f inputs:diffuseColor = ${this.buildColor(material.color)}`);\n    }\n    if (material.emissiveMap !== null) {\n      inputs.push(`${pad}color3f inputs:emissiveColor.connect = </Materials/Material_${material.id}/Texture_${material.emissiveMap.id}_emissive.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.emissiveMap, 'emissive'));\n    } else if (material.emissive.getHex() > 0) {\n      inputs.push(`${pad}color3f inputs:emissiveColor = ${this.buildColor(material.emissive)}`);\n    }\n    if (material.normalMap !== null) {\n      inputs.push(`${pad}normal3f inputs:normal.connect = </Materials/Material_${material.id}/Texture_${material.normalMap.id}_normal.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.normalMap, 'normal'));\n    }\n    if (material.aoMap !== null) {\n      inputs.push(`${pad}float inputs:occlusion.connect = </Materials/Material_${material.id}/Texture_${material.aoMap.id}_occlusion.outputs:r>`);\n      samplers.push(this.buildTexture(material, material.aoMap, 'occlusion'));\n    }\n    if (material.roughnessMap !== null && material.roughness === 1) {\n      inputs.push(`${pad}float inputs:roughness.connect = </Materials/Material_${material.id}/Texture_${material.roughnessMap.id}_roughness.outputs:g>`);\n      samplers.push(this.buildTexture(material, material.roughnessMap, 'roughness'));\n    } else {\n      inputs.push(`${pad}float inputs:roughness = ${material.roughness}`);\n    }\n    if (material.metalnessMap !== null && material.metalness === 1) {\n      inputs.push(`${pad}float inputs:metallic.connect = </Materials/Material_${material.id}/Texture_${material.metalnessMap.id}_metallic.outputs:b>`);\n      samplers.push(this.buildTexture(material, material.metalnessMap, 'metallic'));\n    } else {\n      inputs.push(`${pad}float inputs:metallic = ${material.metalness}`);\n    }\n    inputs.push(`${pad}float inputs:opacity = ${material.opacity}`);\n    if (material instanceof MeshPhysicalMaterial) {\n      inputs.push(`${pad}float inputs:clearcoat = ${material.clearcoat}`);\n      inputs.push(`${pad}float inputs:clearcoatRoughness = ${material.clearcoatRoughness}`);\n      inputs.push(`${pad}float inputs:ior = ${material.ior}`);\n    }\n    return `\n    def Material \"Material_${material.id}\"\n    {\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${inputs.join('\\n')}\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n        token outputs:surface.connect = </Materials/Material_${material.id}/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = \"st\"\n        def Shader \"uvReader_st\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            token inputs:varname.connect = </Materials/Material_${material.id}.inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n${samplers.join('\\n')}\n    }\n`;\n  }\n  buildTexture(material, texture, mapType, color) {\n    const id = texture.id + (color ? '_' + color.getHexString() : '');\n    const isRGBA = texture.format === 1023;\n    this.textures[id] = texture;\n    return `\n      def Shader \"Transform2d_${mapType}\" (\n          sdrMetadata = {\n              string role = \"math\"\n          }\n      )\n      {\n          uniform token info:id = \"UsdTransform2d\"\n          float2 inputs:in.connect = </Materials/Material_${material.id}/uvReader_st.outputs:result>\n          float2 inputs:scale = ${this.buildVector2(texture.repeat)}\n          float2 inputs:translation = ${this.buildVector2(texture.offset)}\n          float2 outputs:result\n      }\n      def Shader \"Texture_${texture.id}_${mapType}\"\n      {\n          uniform token info:id = \"UsdUVTexture\"\n          asset inputs:file = @textures/Texture_${id}.${isRGBA ? 'png' : 'jpg'}@\n          float2 inputs:st.connect = </Materials/Material_${material.id}/Transform2d_${mapType}.outputs:result>\n          token inputs:wrapS = \"repeat\"\n          token inputs:wrapT = \"repeat\"\n          float outputs:r\n          float outputs:g\n          float outputs:b\n          float3 outputs:rgb\n      }`;\n  }\n  buildColor(color) {\n    return `(${color.r}, ${color.g}, ${color.b})`;\n  }\n  buildVector2(vector) {\n    return `(${vector.x}, ${vector.y})`;\n  }\n}\nexport { USDZExporter };","map":{"version":3,"names":["_defineProperty","strToU8","zipSync","Mesh","MeshPhysicalMaterial","USDZExporter","constructor","materials","textures","files","parse","scene","modelFileName","output","buildHeader","traverseVisible","object","isMesh","material","isMeshStandardMaterial","geometry","geometryFileName","id","meshObject","buildMeshObject","buildUSDFileAsString","uuid","buildXform","buildMaterials","texture","color","split","isRGBA","format","canvas","imageToCanvas","image","blob","Promise","resolve","toBlob","Uint8Array","arrayBuffer","offset","filename","file","headerSize","length","offsetMod64","padLength","padding","extra","level","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","scale","Math","max","width","height","document","createElement","min","context","getContext","drawImage","undefined","hex","parseInt","r","g","b","imagedata","getImageData","data","i","putImageData","dataToInsert","name","transform","buildMatrix","matrixWorld","determinant","console","warn","matrix","array","elements","buildMatrixRow","mesh","buildMesh","attributes","count","position","buildMeshVertexCount","buildMeshVertexIndices","buildVector3Array","normal","buildVector2Array","uv","index","Array","fill","join","push","attribute","toPrecision","PRECISION","buildMaterial","pad","inputs","samplers","map","buildTexture","buildColor","emissiveMap","emissive","getHex","normalMap","aoMap","roughnessMap","roughness","metalnessMap","metalness","opacity","clearcoat","clearcoatRoughness","ior","mapType","getHexString","buildVector2","repeat","vector","x","y"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/exporters/USDZExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { strToU8, zipSync } from 'fflate';\nimport { Mesh, MeshPhysicalMaterial } from 'three';\n\nclass USDZExporter {\n  constructor() {\n    _defineProperty(this, \"PRECISION\", 7);\n\n    _defineProperty(this, \"materials\", void 0);\n\n    _defineProperty(this, \"textures\", void 0);\n\n    _defineProperty(this, \"files\", void 0);\n\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n\n  async parse(scene) {\n    const modelFileName = 'model.usda'; // model file should be first in USDZ archive so we init it here\n\n    this.files[modelFileName] = null;\n    let output = this.buildHeader();\n    scene.traverseVisible(object => {\n      if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n        const geometry = object.geometry;\n        const material = object.material;\n        const geometryFileName = 'geometries/Geometry_' + geometry.id + '.usd';\n\n        if (!(geometryFileName in this.files)) {\n          const meshObject = this.buildMeshObject(geometry);\n          this.files[geometryFileName] = this.buildUSDFileAsString(meshObject);\n        }\n\n        if (!(material.uuid in this.materials)) {\n          this.materials[material.uuid] = material;\n        }\n\n        output += this.buildXform(object, geometry, material);\n      }\n    });\n    output += this.buildMaterials(this.materials);\n    this.files[modelFileName] = strToU8(output);\n    output = null;\n\n    for (const id in this.textures) {\n      const texture = this.textures[id];\n      const color = id.split('_')[1];\n      const isRGBA = texture.format === 1023;\n      const canvas = this.imageToCanvas(texture.image, color);\n      const blob = await new Promise(resolve => canvas === null || canvas === void 0 ? void 0 : canvas.toBlob(resolve, isRGBA ? 'image/png' : 'image/jpeg', 1));\n\n      if (blob) {\n        this.files[`textures/Texture_${id}.${isRGBA ? 'png' : 'jpg'}`] = new Uint8Array(await blob.arrayBuffer());\n      }\n    } // 64 byte alignment\n    // https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n\n    let offset = 0;\n\n    for (const filename in this.files) {\n      const file = this.files[filename];\n      const headerSize = 34 + filename.length;\n      offset += headerSize;\n      const offsetMod64 = offset & 63;\n\n      if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n        const padLength = 64 - offsetMod64;\n        const padding = new Uint8Array(padLength);\n        this.files[filename] = [file, {\n          extra: {\n            12345: padding\n          }\n        }];\n      }\n\n      if (file && typeof file.length === 'number') {\n        offset = file.length;\n      }\n    }\n\n    return zipSync(this.files, {\n      level: 0\n    });\n  }\n\n  imageToCanvas(image, color) {\n    if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n      const scale = 1024 / Math.max(image.width, image.height);\n      const canvas = document.createElement('canvas');\n      canvas.width = image.width * Math.min(1, scale);\n      canvas.height = image.height * Math.min(1, scale);\n      const context = canvas.getContext('2d');\n      context === null || context === void 0 ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n      if (color !== undefined) {\n        const hex = parseInt(color, 16);\n        const r = (hex >> 16 & 255) / 255;\n        const g = (hex >> 8 & 255) / 255;\n        const b = (hex & 255) / 255;\n        const imagedata = context === null || context === void 0 ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n\n        if (imagedata) {\n          const data = imagedata === null || imagedata === void 0 ? void 0 : imagedata.data;\n\n          for (let i = 0; i < data.length; i += 4) {\n            data[i + 0] = data[i + 0] * r;\n            data[i + 1] = data[i + 1] * g;\n            data[i + 2] = data[i + 2] * b;\n          }\n\n          context === null || context === void 0 ? void 0 : context.putImageData(imagedata, 0, 0);\n        }\n      }\n\n      return canvas;\n    }\n  }\n\n  buildHeader() {\n    return `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n`;\n  }\n\n  buildUSDFileAsString(dataToInsert) {\n    let output = this.buildHeader();\n    output += dataToInsert;\n    return strToU8(output);\n  } // Xform\n\n\n  buildXform(object, geometry, material) {\n    const name = 'Object_' + object.id;\n    const transform = this.buildMatrix(object.matrixWorld);\n\n    if (object.matrixWorld.determinant() < 0) {\n      console.warn('THREE.USDZExporter: USDZ does not support negative scales', object);\n    }\n\n    return `def Xform \"${name}\" (\n    prepend references = @./geometries/Geometry_${geometry.id}.usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ${transform}\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n    rel material:binding = </Materials/Material_${material.id}>\n}\n`;\n  }\n\n  buildMatrix(matrix) {\n    const array = matrix.elements;\n    return `( ${this.buildMatrixRow(array, 0)}, ${this.buildMatrixRow(array, 4)}, ${this.buildMatrixRow(array, 8)}, ${this.buildMatrixRow(array, 12)} )`;\n  }\n\n  buildMatrixRow(array, offset) {\n    return `(${array[offset + 0]}, ${array[offset + 1]}, ${array[offset + 2]}, ${array[offset + 3]})`;\n  } // Mesh\n\n\n  buildMeshObject(geometry) {\n    const mesh = this.buildMesh(geometry);\n    return `\ndef \"Geometry\"\n{\n  ${mesh}\n}\n`;\n  }\n\n  buildMesh(geometry) {\n    const name = 'Geometry';\n    const attributes = geometry.attributes;\n    const count = attributes.position.count;\n    return `\n    def Mesh \"${name}\"\n    {\n        int[] faceVertexCounts = [${this.buildMeshVertexCount(geometry)}]\n        int[] faceVertexIndices = [${this.buildMeshVertexIndices(geometry)}]\n        normal3f[] normals = [${this.buildVector3Array(attributes.normal, count)}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${this.buildVector3Array(attributes.position, count)}]\n        float2[] primvars:st = [${this.buildVector2Array(attributes.uv, count)}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n  }\n\n  buildMeshVertexCount(geometry) {\n    const count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n    return Array(count / 3).fill(3).join(', ');\n  }\n\n  buildMeshVertexIndices(geometry) {\n    if (geometry.index !== null) {\n      // @ts-expect-error\n      return geometry.index.array.join(', ');\n    }\n\n    const array = [];\n    const length = geometry.attributes.position.count;\n\n    for (let i = 0; i < length; i++) {\n      array.push(i);\n    }\n\n    return array.join(', ');\n  }\n\n  buildVector3Array(attribute, count) {\n    if (attribute === undefined) {\n      console.warn('USDZExporter: Normals missing.');\n      return Array(count).fill('(0, 0, 0)').join(', ');\n    }\n\n    const array = [];\n    const data = attribute.array;\n\n    for (let i = 0; i < data.length; i += 3) {\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${data[i + 1].toPrecision(this.PRECISION)}, ${data[i + 2].toPrecision(this.PRECISION)})`);\n    }\n\n    return array.join(', ');\n  }\n\n  buildVector2Array(attribute, count) {\n    if (attribute === undefined) {\n      console.warn('USDZExporter: UVs missing.');\n      return Array(count).fill('(0, 0)').join(', ');\n    }\n\n    const array = [];\n    const data = attribute.array;\n\n    for (let i = 0; i < data.length; i += 2) {\n      // @ts-expect-error\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${1 - data[i + 1].toPrecision(this.PRECISION)})`);\n    }\n\n    return array.join(', ');\n  } // Materials\n\n\n  buildMaterials(materials) {\n    const array = [];\n\n    for (const uuid in materials) {\n      const material = materials[uuid];\n      array.push(this.buildMaterial(material));\n    }\n\n    return `def \"Materials\"\n{\n${array.join('')}\n}\n`;\n  }\n\n  buildMaterial(material) {\n    // https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n    const pad = '            ';\n    const inputs = [];\n    const samplers = [];\n\n    if (material.map !== null) {\n      inputs.push(`${pad}color3f inputs:diffuseColor.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.map, 'diffuse', material.color));\n    } else {\n      inputs.push(`${pad}color3f inputs:diffuseColor = ${this.buildColor(material.color)}`);\n    }\n\n    if (material.emissiveMap !== null) {\n      inputs.push(`${pad}color3f inputs:emissiveColor.connect = </Materials/Material_${material.id}/Texture_${material.emissiveMap.id}_emissive.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.emissiveMap, 'emissive'));\n    } else if (material.emissive.getHex() > 0) {\n      inputs.push(`${pad}color3f inputs:emissiveColor = ${this.buildColor(material.emissive)}`);\n    }\n\n    if (material.normalMap !== null) {\n      inputs.push(`${pad}normal3f inputs:normal.connect = </Materials/Material_${material.id}/Texture_${material.normalMap.id}_normal.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.normalMap, 'normal'));\n    }\n\n    if (material.aoMap !== null) {\n      inputs.push(`${pad}float inputs:occlusion.connect = </Materials/Material_${material.id}/Texture_${material.aoMap.id}_occlusion.outputs:r>`);\n      samplers.push(this.buildTexture(material, material.aoMap, 'occlusion'));\n    }\n\n    if (material.roughnessMap !== null && material.roughness === 1) {\n      inputs.push(`${pad}float inputs:roughness.connect = </Materials/Material_${material.id}/Texture_${material.roughnessMap.id}_roughness.outputs:g>`);\n      samplers.push(this.buildTexture(material, material.roughnessMap, 'roughness'));\n    } else {\n      inputs.push(`${pad}float inputs:roughness = ${material.roughness}`);\n    }\n\n    if (material.metalnessMap !== null && material.metalness === 1) {\n      inputs.push(`${pad}float inputs:metallic.connect = </Materials/Material_${material.id}/Texture_${material.metalnessMap.id}_metallic.outputs:b>`);\n      samplers.push(this.buildTexture(material, material.metalnessMap, 'metallic'));\n    } else {\n      inputs.push(`${pad}float inputs:metallic = ${material.metalness}`);\n    }\n\n    inputs.push(`${pad}float inputs:opacity = ${material.opacity}`);\n\n    if (material instanceof MeshPhysicalMaterial) {\n      inputs.push(`${pad}float inputs:clearcoat = ${material.clearcoat}`);\n      inputs.push(`${pad}float inputs:clearcoatRoughness = ${material.clearcoatRoughness}`);\n      inputs.push(`${pad}float inputs:ior = ${material.ior}`);\n    }\n\n    return `\n    def Material \"Material_${material.id}\"\n    {\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${inputs.join('\\n')}\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n        token outputs:surface.connect = </Materials/Material_${material.id}/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = \"st\"\n        def Shader \"uvReader_st\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            token inputs:varname.connect = </Materials/Material_${material.id}.inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n${samplers.join('\\n')}\n    }\n`;\n  }\n\n  buildTexture(material, texture, mapType, color) {\n    const id = texture.id + (color ? '_' + color.getHexString() : '');\n    const isRGBA = texture.format === 1023;\n    this.textures[id] = texture;\n    return `\n      def Shader \"Transform2d_${mapType}\" (\n          sdrMetadata = {\n              string role = \"math\"\n          }\n      )\n      {\n          uniform token info:id = \"UsdTransform2d\"\n          float2 inputs:in.connect = </Materials/Material_${material.id}/uvReader_st.outputs:result>\n          float2 inputs:scale = ${this.buildVector2(texture.repeat)}\n          float2 inputs:translation = ${this.buildVector2(texture.offset)}\n          float2 outputs:result\n      }\n      def Shader \"Texture_${texture.id}_${mapType}\"\n      {\n          uniform token info:id = \"UsdUVTexture\"\n          asset inputs:file = @textures/Texture_${id}.${isRGBA ? 'png' : 'jpg'}@\n          float2 inputs:st.connect = </Materials/Material_${material.id}/Transform2d_${mapType}.outputs:result>\n          token inputs:wrapS = \"repeat\"\n          token inputs:wrapT = \"repeat\"\n          float outputs:r\n          float outputs:g\n          float outputs:b\n          float3 outputs:rgb\n      }`;\n  }\n\n  buildColor(color) {\n    return `(${color.r}, ${color.g}, ${color.b})`;\n  }\n\n  buildVector2(vector) {\n    return `(${vector.x}, ${vector.y})`;\n  }\n\n}\n\nexport { USDZExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}