{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { PropertyBinding, InterpolateLinear, Vector3, RGBAFormat, ShaderMaterial, MeshStandardMaterial, MeshBasicMaterial, MeshPhysicalMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshToonMaterial, MeshLambertMaterial, DoubleSide, LineSegments, LineLoop, Line, Points, MeshDepthMaterial, InterleavedBufferAttribute, BufferAttribute, Object3D, Material, OrthographicCamera, PerspectiveCamera, MathUtils, InterpolateDiscrete, SkinnedMesh, Matrix4, Mesh, Camera, Scene, DirectionalLight, PointLight, SpotLight, NearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter, LinearFilter, LinearMipmapNearestFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping, RepeatWrapping, MirroredRepeatWrapping } from 'three';\nclass GLTFExporter {\n  constructor() {\n    _defineProperty(this, \"pluginCallbacks\", void 0);\n    this.pluginCallbacks = [];\n    this.register(function (writer) {\n      return new GLTFLightExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsUnlitExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsPBRSpecularGlossiness(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsTransmissionExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsVolumeExtension(writer);\n    });\n  }\n  register(callback) {\n    if (this.pluginCallbacks.indexOf(callback) === -1) {\n      this.pluginCallbacks.push(callback);\n    }\n    return this;\n  }\n  unregister(callback) {\n    if (this.pluginCallbacks.indexOf(callback) !== -1) {\n      this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(callback), 1);\n    }\n    return this;\n  }\n  parse(input, onDone, options) {\n    const writer = new GLTFWriter();\n    const plugins = [];\n    for (let i = 0, il = this.pluginCallbacks.length; i < il; i++) {\n      plugins.push(this.pluginCallbacks[i](writer));\n    }\n    writer.setPlugins(plugins);\n    writer.write(input, onDone, options);\n  }\n  /**\n   * Static utility functions\n   */\n} //------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n_defineProperty(GLTFExporter, \"Utils\", {\n  insertKeyframe: function (track, time) {\n    const tolerance = 0.001; // 1ms\n\n    const valueSize = track.getValueSize(); // @ts-expect-error\n\n    const times = new track.TimeBufferType(track.times.length + 1); // @ts-expect-error\n\n    const values = new track.ValueBufferType(track.values.length + valueSize);\n    /**\n     * NOTE: createInterpolant does not exist in the type, but it does exist as a property of the class\n     * https://github.com/mrdoob/three.js/blob/77480d339d737b7505b335101ffd3cf29a30738d/src/animation/KeyframeTrack.js#L117\n     */\n    // @ts-expect-error\n\n    const interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));\n    let index;\n    if (track.times.length === 0) {\n      times[0] = time;\n      for (let i = 0; i < valueSize; i++) {\n        values[i] = 0;\n      }\n      index = 0;\n    } else if (time < track.times[0]) {\n      if (Math.abs(track.times[0] - time) < tolerance) return 0;\n      times[0] = time;\n      times.set(track.times, 1);\n      values.set(interpolant.evaluate(time), 0);\n      values.set(track.values, valueSize);\n      index = 0;\n    } else if (time > track.times[track.times.length - 1]) {\n      if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {\n        return track.times.length - 1;\n      }\n      times[times.length - 1] = time;\n      times.set(track.times, 0);\n      values.set(track.values, 0);\n      values.set(interpolant.evaluate(time), track.values.length);\n      index = times.length - 1;\n    } else {\n      for (let i = 0; i < track.times.length; i++) {\n        if (Math.abs(track.times[i] - time) < tolerance) return i;\n        if (track.times[i] < time && track.times[i + 1] > time) {\n          times.set(track.times.slice(0, i + 1), 0);\n          times[i + 1] = time;\n          times.set(track.times.slice(i + 1), i + 2);\n          values.set(track.values.slice(0, (i + 1) * valueSize), 0);\n          values.set(interpolant.evaluate(time), (i + 1) * valueSize);\n          values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);\n          index = i + 1;\n          break;\n        }\n      }\n    }\n    track.times = times;\n    track.values = values;\n    return index;\n  },\n  mergeMorphTargetTracks: function (clip, root) {\n    const tracks = [];\n    const mergedTracks = {};\n    const sourceTracks = clip.tracks;\n    for (let i = 0; i < sourceTracks.length; ++i) {\n      let sourceTrack = sourceTracks[i];\n      const sourceTrackBinding = PropertyBinding.parseTrackName(sourceTrack.name);\n      const sourceTrackNode = PropertyBinding.findNode(root, sourceTrackBinding.nodeName);\n      if (sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined) {\n        // Tracks that don't affect morph targets, or that affect all morph targets together, can be left as-is.\n        tracks.push(sourceTrack);\n        continue;\n      }\n      if (\n      // @ts-expect-error\n      sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete &&\n      // @ts-expect-error\n      sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {\n        // @ts-expect-error\n        if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n          // This should never happen, because glTF morph target animations\n          // affect all targets already.\n          throw new Error('THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.');\n        }\n        console.warn('THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.');\n        sourceTrack = sourceTrack.clone();\n        sourceTrack.setInterpolation(InterpolateLinear);\n      }\n      const targetCount = sourceTrackNode.morphTargetInfluences.length;\n      const targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];\n      if (targetIndex === undefined) {\n        throw new Error('THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex);\n      }\n      let mergedTrack; // If this is the first time we've seen this object, create a new\n      // track to store merged keyframe data for each morph target.\n\n      if (mergedTracks[sourceTrackNode.uuid] === undefined) {\n        mergedTrack = sourceTrack.clone(); // @ts-expect-error\n\n        const values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);\n        for (let j = 0; j < mergedTrack.times.length; j++) {\n          values[j * targetCount + targetIndex] = mergedTrack.values[j];\n        } // We need to take into consideration the intended target node\n        // of our original un-merged morphTarget animation.\n\n        mergedTrack.name = (sourceTrackBinding.nodeName || '') + '.morphTargetInfluences';\n        mergedTrack.values = values;\n        mergedTracks[sourceTrackNode.uuid] = mergedTrack;\n        tracks.push(mergedTrack);\n        continue;\n      } // @ts-expect-error\n\n      const sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));\n      mergedTrack = mergedTracks[sourceTrackNode.uuid]; // For every existing keyframe of the merged track, write a (possibly\n      // interpolated) value from the source track.\n\n      for (let j = 0; j < mergedTrack.times.length; j++) {\n        mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);\n      } // For every existing keyframe of the source track, write a (possibly\n      // new) keyframe to the merged track. Values from the previous loop may\n      // be written again, but keyframes are de-duplicated.\n\n      for (let j = 0; j < sourceTrack.times.length; j++) {\n        const keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);\n        mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];\n      }\n    }\n    clip.tracks = tracks;\n    return clip;\n  }\n});\nconst WEBGL_CONSTANTS = {\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006,\n  UNSIGNED_BYTE: 0x1401,\n  UNSIGNED_SHORT: 0x1403,\n  FLOAT: 0x1406,\n  UNSIGNED_INT: 0x1405,\n  ARRAY_BUFFER: 0x8892,\n  ELEMENT_ARRAY_BUFFER: 0x8893,\n  NEAREST: 0x2600,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_NEAREST: 0x2700,\n  LINEAR_MIPMAP_NEAREST: 0x2701,\n  NEAREST_MIPMAP_LINEAR: 0x2702,\n  LINEAR_MIPMAP_LINEAR: 0x2703,\n  CLAMP_TO_EDGE: 33071,\n  MIRRORED_REPEAT: 33648,\n  REPEAT: 10497\n};\nconst THREE_TO_WEBGL = {};\nTHREE_TO_WEBGL[NearestFilter] = WEBGL_CONSTANTS.NEAREST;\nTHREE_TO_WEBGL[NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[LinearFilter] = WEBGL_CONSTANTS.LINEAR;\nTHREE_TO_WEBGL[LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\nTHREE_TO_WEBGL[RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;\nTHREE_TO_WEBGL[MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\nconst PATH_PROPERTIES = {\n  scale: 'scale',\n  position: 'translation',\n  quaternion: 'rotation',\n  morphTargetInfluences: 'weights'\n}; // GLB constants\n// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n\nconst GLB_HEADER_BYTES = 12;\nconst GLB_HEADER_MAGIC = 0x46546c67;\nconst GLB_VERSION = 2;\nconst GLB_CHUNK_PREFIX_BYTES = 8;\nconst GLB_CHUNK_TYPE_JSON = 0x4e4f534a;\nconst GLB_CHUNK_TYPE_BIN = 0x004e4942;\n/**\n * Writer\n */\n\nclass GLTFWriter {\n  constructor() {\n    _defineProperty(this, \"plugins\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"pending\", void 0);\n    _defineProperty(this, \"buffers\", void 0);\n    _defineProperty(this, \"byteOffset\", void 0);\n    _defineProperty(this, \"nodeMap\", void 0);\n    _defineProperty(this, \"skins\", void 0);\n    _defineProperty(this, \"extensionsUsed\", void 0);\n    _defineProperty(this, \"uids\", void 0);\n    _defineProperty(this, \"uid\", void 0);\n    _defineProperty(this, \"json\", void 0);\n    _defineProperty(this, \"cache\", void 0);\n    _defineProperty(this, \"cachedCanvas\", void 0);\n    this.plugins = [];\n    this.options = {};\n    this.pending = [];\n    this.buffers = [];\n    this.byteOffset = 0;\n    this.nodeMap = new Map();\n    this.skins = [];\n    this.extensionsUsed = {};\n    this.uids = new Map();\n    this.uid = 0;\n    this.json = {\n      asset: {\n        version: '2.0',\n        generator: 'THREE.GLTFExporter'\n      }\n    };\n    this.cache = {\n      meshes: new Map(),\n      attributes: new Map(),\n      attributesNormalized: new Map(),\n      materials: new Map(),\n      textures: new Map(),\n      images: new Map()\n    };\n    this.cachedCanvas = null;\n  }\n  setPlugins(plugins) {\n    this.plugins = plugins;\n  }\n  /**\n   * Parse scenes and generate GLTF output\n   * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n   * @param  {Function} onDone  Callback on completed\n   * @param  {Object} options options\n   */\n\n  write(input, onDone, options) {\n    this.options = Object.assign({}, {\n      // default options\n      binary: false,\n      trs: false,\n      onlyVisible: true,\n      truncateDrawRange: true,\n      embedImages: true,\n      maxTextureSize: Infinity,\n      animations: [],\n      includeCustomExtensions: false\n    }, options);\n    if (this.options.animations !== undefined && this.options.animations.length > 0) {\n      // Only TRS properties, and not matrices, may be targeted by animation.\n      this.options.trs = true;\n    }\n    this.processInput(input);\n    const writer = this;\n    Promise.all(this.pending).then(() => {\n      const buffers = writer.buffers;\n      const json = writer.json;\n      const options = writer.options;\n      const extensionsUsed = writer.extensionsUsed; // Merge buffers.\n\n      const blob = new Blob(buffers, {\n        type: 'application/octet-stream'\n      }); // Declare extensions.\n\n      const extensionsUsedList = Object.keys(extensionsUsed);\n      if (extensionsUsedList.length > 0) json.extensionsUsed = extensionsUsedList; // Update bytelength of the single buffer.\n\n      if (json.buffers && json.buffers.length > 0) json.buffers[0].byteLength = blob.size;\n      if (options.binary) {\n        // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n        const reader = new window.FileReader();\n        reader.readAsArrayBuffer(blob);\n        reader.onloadend = () => {\n          if (reader.result !== null && typeof reader.result !== 'string') {\n            // Binary chunk.\n            const binaryChunk = this.getPaddedArrayBuffer(reader.result);\n            const binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n            binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\n            binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true); // JSON chunk.\n\n            const jsonChunk = this.getPaddedArrayBuffer(this.stringToArrayBuffer(JSON.stringify(json)), 0x20);\n            const jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n            jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\n            jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true); // GLB header.\n\n            const header = new ArrayBuffer(GLB_HEADER_BYTES);\n            const headerView = new DataView(header);\n            headerView.setUint32(0, GLB_HEADER_MAGIC, true);\n            headerView.setUint32(4, GLB_VERSION, true);\n            const totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n            headerView.setUint32(8, totalByteLength, true);\n            const glbBlob = new Blob([header, jsonChunkPrefix, jsonChunk, binaryChunkPrefix, binaryChunk], {\n              type: 'application/octet-stream'\n            });\n            const glbReader = new window.FileReader();\n            glbReader.readAsArrayBuffer(glbBlob);\n            glbReader.onloadend = function () {\n              if (glbReader.result !== null && typeof glbReader.result !== 'string') {\n                onDone(glbReader.result);\n              }\n            };\n          }\n        };\n      } else {\n        if (json.buffers && json.buffers.length > 0) {\n          const reader = new window.FileReader();\n          reader.readAsDataURL(blob);\n          reader.onloadend = function () {\n            const base64data = reader.result;\n            if (json.buffers !== undefined && base64data !== null) {\n              json.buffers[0].uri = base64data;\n              onDone(json);\n            }\n          };\n        } else {\n          onDone(json);\n        }\n      }\n    });\n  }\n  /**\n   * Serializes a userData.\n   *\n   * @param {THREE.Object3D|THREE.Material} object\n   * @param {Object} objectDef\n   */\n\n  serializeUserData(object, objectDef) {\n    if (Object.keys(object.userData).length === 0) return;\n    const options = this.options;\n    const extensionsUsed = this.extensionsUsed;\n    try {\n      const json = JSON.parse(JSON.stringify(object.userData));\n      if (options.includeCustomExtensions && json.gltfExtensions) {\n        if (objectDef.extensions === undefined) objectDef.extensions = {};\n        for (const extensionName in json.gltfExtensions) {\n          objectDef.extensions[extensionName] = json.gltfExtensions[extensionName];\n          extensionsUsed[extensionName] = true;\n        }\n        delete json.gltfExtensions;\n      }\n      if (Object.keys(json).length > 0) objectDef.extras = json;\n    } catch (error) {\n      if (error instanceof Error) {\n        console.warn(\"THREE.GLTFExporter: userData of '\" + object.name + \"' \" + \"won't be serialized because of JSON.stringify error - \" + error.message);\n      }\n    }\n  }\n  /**\n   * Assign and return a temporal unique id for an object\n   * especially which doesn't have .uuid\n   * @param  {Object} object\n   * @return {Integer}\n   */\n\n  getUID(object) {\n    if (!this.uids.has(object)) this.uids.set(object, this.uid++);\n    return this.uids.get(object);\n  }\n  /**\n   * Checks if normal attribute values are normalized.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {Boolean}\n   */\n\n  isNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal)) return false;\n    const v = new Vector3();\n    for (let i = 0, il = normal.count; i < il; i++) {\n      // 0.0005 is from glTF-validator\n      if (Math.abs(v.fromBufferAttribute(normal, i).length() - 1.0) > 0.0005) return false;\n    }\n    return true;\n  }\n  /**\n   * Creates normalized normal buffer attribute.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {BufferAttribute}\n   *\n   */\n\n  createNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal)) return cache.attributesNormalized.get(normal);\n    const attribute = normal.clone();\n    const v = new Vector3();\n    for (let i = 0, il = attribute.count; i < il; i++) {\n      v.fromBufferAttribute(attribute, i);\n      if (v.x === 0 && v.y === 0 && v.z === 0) {\n        // if values can't be normalized set (1, 0, 0)\n        v.setX(1.0);\n      } else {\n        v.normalize();\n      }\n      attribute.setXYZ(i, v.x, v.y, v.z);\n    }\n    cache.attributesNormalized.set(normal, attribute);\n    return attribute;\n  }\n  /**\n   * Applies a texture transform, if present, to the map definition. Requires\n   * the KHR_texture_transform extension.\n   *\n   * @param {Object} mapDef\n   * @param {THREE.Texture} texture\n   */\n\n  applyTextureTransform(mapDef, texture) {\n    let didTransform = false;\n    const transformDef = {};\n    if (texture.offset.x !== 0 || texture.offset.y !== 0) {\n      transformDef.offset = texture.offset.toArray();\n      didTransform = true;\n    }\n    if (texture.rotation !== 0) {\n      transformDef.rotation = texture.rotation;\n      didTransform = true;\n    }\n    if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {\n      transformDef.scale = texture.repeat.toArray();\n      didTransform = true;\n    }\n    if (didTransform) {\n      mapDef.extensions = mapDef.extensions || {};\n      mapDef.extensions['KHR_texture_transform'] = transformDef;\n      this.extensionsUsed['KHR_texture_transform'] = true;\n    }\n  }\n  /**\n   * Process a buffer to append to the default one.\n   * @param  {ArrayBuffer} buffer\n   * @return {Integer}\n   */\n\n  processBuffer(buffer) {\n    const json = this.json;\n    const buffers = this.buffers;\n    if (!json.buffers) json.buffers = [{\n      byteLength: 0\n    }]; // All buffers are merged before export.\n\n    buffers.push(buffer);\n    return 0;\n  }\n  /**\n   * Process and generate a BufferView\n   * @param  {BufferAttribute} attribute\n   * @param  {number} componentType\n   * @param  {number} start\n   * @param  {number} count\n   * @param  {number} target (Optional) Target usage of the BufferView\n   * @return {Object}\n   */\n\n  processBufferView(attribute, componentType, start, count, target) {\n    const json = this.json;\n    if (!json.bufferViews) json.bufferViews = []; // Create a new dataview and dump the attribute's array into it\n\n    let componentSize;\n    if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n      componentSize = 1;\n    } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n      componentSize = 2;\n    } else {\n      componentSize = 4;\n    }\n    const byteLength = this.getPaddedBufferSize(count * attribute.itemSize * componentSize);\n    const dataView = new DataView(new ArrayBuffer(byteLength));\n    let offset = 0;\n    for (let i = start; i < start + count; i++) {\n      for (let a = 0; a < attribute.itemSize; a++) {\n        let value;\n        if (attribute.itemSize > 4) {\n          // no support for interleaved data for itemSize > 4\n          value = attribute.array[i * attribute.itemSize + a];\n        } else {\n          if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n        }\n        if (value !== undefined) {\n          if (componentType === WEBGL_CONSTANTS.FLOAT) {\n            dataView.setFloat32(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {\n            dataView.setUint32(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n            dataView.setUint16(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n            dataView.setUint8(offset, value);\n          }\n        }\n        offset += componentSize;\n      }\n    }\n    const bufferViewDef = {\n      buffer: this.processBuffer(dataView.buffer),\n      byteOffset: this.byteOffset,\n      byteLength: byteLength\n    };\n    if (target !== undefined) bufferViewDef.target = target;\n    if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {\n      // Only define byteStride for vertex attributes.\n      bufferViewDef.byteStride = attribute.itemSize * componentSize;\n    }\n    this.byteOffset += byteLength;\n    json.bufferViews.push(bufferViewDef); // @TODO Merge bufferViews where possible.\n\n    const output = {\n      id: json.bufferViews.length - 1,\n      byteLength: 0\n    };\n    return output;\n  }\n  /**\n   * Process and generate a BufferView from an image Blob.\n   * @param {Blob} blob\n   * @return {Promise<Integer>}\n   */\n\n  processBufferViewImage(blob) {\n    const writer = this;\n    const json = writer.json;\n    if (!json.bufferViews) json.bufferViews = [];\n    return new Promise(resolve => {\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(blob);\n      reader.onloadend = () => {\n        if (reader.result !== null && typeof reader.result !== 'string' && json.bufferViews !== undefined) {\n          const buffer = this.getPaddedArrayBuffer(reader.result);\n          const bufferViewDef = {\n            buffer: writer.processBuffer(buffer),\n            byteOffset: writer.byteOffset,\n            byteLength: buffer.byteLength\n          };\n          writer.byteOffset += buffer.byteLength;\n          resolve(json.bufferViews.push(bufferViewDef) - 1);\n        }\n      };\n    });\n  }\n  /**\n   * Process attribute to generate an accessor\n   * @param  {BufferAttribute} attribute Attribute to process\n   * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n   * @param  {Integer} start (Optional)\n   * @param  {Integer} count (Optional)\n   * @return {Integer|null} Index of the processed accessor on the \"accessors\" array\n   */\n\n  processAccessor(attribute, geometry, start, count) {\n    const options = this.options;\n    const json = this.json;\n    const types = {\n      1: 'SCALAR',\n      2: 'VEC2',\n      3: 'VEC3',\n      4: 'VEC4',\n      16: 'MAT4'\n    };\n    let componentType; // Detect the component type of the attribute array (float, uint or ushort)\n\n    if (attribute.array.constructor === Float32Array) {\n      componentType = WEBGL_CONSTANTS.FLOAT;\n    } else if (attribute.array.constructor === Uint32Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n    } else if (attribute.array.constructor === Uint16Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n    } else if (attribute.array.constructor === Uint8Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n    } else {\n      throw new Error('THREE.GLTFExporter: Unsupported bufferAttribute component type.');\n    }\n    if (start === undefined) start = 0;\n    if (count === undefined) count = attribute.count; // @TODO Indexed buffer geometry with drawRange not supported yet\n\n    if (options.truncateDrawRange && geometry !== undefined && geometry.index === null) {\n      const end = start + count;\n      const end2 = geometry.drawRange.count === Infinity ? attribute.count : geometry.drawRange.start + geometry.drawRange.count;\n      start = Math.max(start, geometry.drawRange.start);\n      count = Math.min(end, end2) - start;\n      if (count < 0) count = 0;\n    } // Skip creating an accessor if the attribute doesn't have data to export\n\n    if (count === 0) return null;\n    const minMax = this.getMinMax(attribute, start, count);\n    let bufferViewTarget; // If geometry isn't provided, don't infer the target usage of the bufferView. For\n    // animation samplers, target must not be set.\n\n    if (geometry !== undefined) {\n      bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n    }\n    if (bufferViewTarget !== undefined) {\n      const bufferView = this.processBufferView(attribute, componentType, start, count, bufferViewTarget);\n      const accessorDef = {\n        bufferView: bufferView.id,\n        byteOffset: bufferView.byteOffset,\n        componentType: componentType,\n        count: count,\n        max: minMax.max,\n        min: minMax.min,\n        type: types[attribute.itemSize]\n      };\n      if (attribute.normalized) accessorDef.normalized = true;\n      if (!json.accessors) json.accessors = [];\n      return json.accessors.push(accessorDef) - 1;\n    }\n  }\n  /**\n   * Process image\n   * @param  {Image} image to process\n   * @param  {Integer} format of the image (RGBAFormat)\n   * @param  {Boolean} flipY before writing out the image\n   * @return {Integer}     Index of the processed texture in the \"images\" array\n   */\n\n  processImage(image, format, flipY) {\n    const writer = this;\n    const cache = writer.cache;\n    const json = writer.json;\n    const options = writer.options;\n    const pending = writer.pending;\n    if (!cache.images.has(image)) cache.images.set(image, {});\n    const cachedImages = cache.images.get(image);\n    const mimeType = format === RGBAFormat ? 'image/png' : 'image/jpeg';\n    const key = mimeType + ':flipY/' + flipY.toString();\n    if (cachedImages !== undefined && cachedImages[key] !== undefined) return cachedImages[key];\n    if (!json.images) json.images = [];\n    const imageDef = {\n      mimeType: mimeType\n    };\n    if (options.embedImages && options.maxTextureSize !== undefined) {\n      const canvas = this.cachedCanvas = this.cachedCanvas || document.createElement('canvas');\n      canvas.width = Math.min(image.width, options.maxTextureSize);\n      canvas.height = Math.min(image.height, options.maxTextureSize);\n      const ctx = canvas.getContext('2d');\n      if (flipY) {\n        ctx === null || ctx === void 0 ? void 0 : ctx.translate(0, canvas.height);\n        ctx === null || ctx === void 0 ? void 0 : ctx.scale(1, -1);\n      }\n      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n        ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      } else {\n        if (format !== RGBAFormat) {\n          console.error('GLTFExporter: Only RGBA format is supported.');\n        }\n        if (image.width > options.maxTextureSize || image.height > options.maxTextureSize) {\n          console.warn('GLTFExporter: Image size is bigger than maxTextureSize', image);\n        }\n        const data = new Uint8ClampedArray(image.height * image.width * 4);\n        if (image instanceof ImageData) {\n          for (let i = 0; i < data.length; i += 4) {\n            data[i + 0] = image.data[i + 0];\n            data[i + 1] = image.data[i + 1];\n            data[i + 2] = image.data[i + 2];\n            data[i + 3] = image.data[i + 3];\n          }\n        }\n        ctx === null || ctx === void 0 ? void 0 : ctx.putImageData(new ImageData(data, image.width, image.height), 0, 0);\n      }\n      if (options.binary) {\n        pending.push(new Promise(function (resolve) {\n          canvas.toBlob(function (blob) {\n            if (blob !== null) {\n              writer.processBufferViewImage(blob).then(function (bufferViewIndex) {\n                imageDef.bufferView = bufferViewIndex; // @ts-expect-error\n\n                resolve();\n              });\n            }\n          }, mimeType);\n        }));\n      } else {\n        imageDef.uri = canvas.toDataURL(mimeType);\n      }\n    } else if (image instanceof Image) {\n      imageDef.uri = image.src;\n    }\n    const index = json.images.push(imageDef) - 1;\n    if (cachedImages !== undefined) cachedImages[key] = index;\n    return index;\n  }\n  /**\n   * Process sampler\n   * @param  {Texture} map Texture to process\n   * @return {Integer}     Index of the processed texture in the \"samplers\" array\n   */\n\n  processSampler(map) {\n    const json = this.json;\n    if (!json.samplers) json.samplers = [];\n    const samplerDef = {\n      magFilter: THREE_TO_WEBGL[map.magFilter],\n      minFilter: THREE_TO_WEBGL[map.minFilter],\n      wrapS: THREE_TO_WEBGL[map.wrapS],\n      wrapT: THREE_TO_WEBGL[map.wrapT]\n    };\n    return json.samplers.push(samplerDef) - 1;\n  }\n  /**\n   * Process texture\n   * @param  {Texture} map Map to process\n   * @return {Integer} Index of the processed texture in the \"textures\" array\n   */\n\n  processTexture(map) {\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.textures.has(map)) return cache.textures.get(map);\n    if (!json.textures) json.textures = [];\n    const textureDef = {\n      sampler: this.processSampler(map),\n      source: this.processImage(map.image, map.format, map.flipY)\n    };\n    if (map.name) textureDef.name = map.name;\n    this._invokeAll(function (ext) {\n      ext.writeTexture && ext.writeTexture(map, textureDef);\n    });\n    const index = json.textures.push(textureDef) - 1;\n    cache.textures.set(map, index);\n    return index;\n  }\n  /**\n   * Process material\n   * @param  {THREE.Material} material Material to process\n   * @return {Integer|null} Index of the processed material in the \"materials\" array\n   */\n\n  processMaterial(material) {\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.materials.has(material)) return cache.materials.get(material);\n    if (material instanceof ShaderMaterial && material.isShaderMaterial) {\n      console.warn('GLTFExporter: THREE.ShaderMaterial not supported.');\n      return null;\n    }\n    if (!json.materials) json.materials = []; // @QUESTION Should we avoid including any attribute that has the default value?\n\n    const materialDef = {\n      pbrMetallicRoughness: {}\n    };\n    if (!(material instanceof MeshStandardMaterial && material.isMeshStandardMaterial && material instanceof MeshBasicMaterial &&\n    // @ts-expect-error\n    material.isMeshBasicMaterial)) {\n      console.warn('GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.');\n    }\n    if (material instanceof MeshStandardMaterial || material instanceof MeshPhysicalMaterial) {\n      // pbrMetallicRoughness.baseColorFactor\n      const color = material.color.toArray().concat([material.opacity]);\n      if (!this.equalArray(color, [1, 1, 1, 1])) {\n        materialDef.pbrMetallicRoughness.baseColorFactor = color;\n      }\n    }\n    if (material instanceof MeshStandardMaterial && material.isMeshStandardMaterial) {\n      materialDef.pbrMetallicRoughness.metallicFactor = material.metalness;\n      materialDef.pbrMetallicRoughness.roughnessFactor = material.roughness;\n    } else {\n      materialDef.pbrMetallicRoughness.metallicFactor = 0.5;\n      materialDef.pbrMetallicRoughness.roughnessFactor = 0.5;\n    } // pbrMetallicRoughness.metallicRoughnessTexture\n\n    if (material instanceof MeshStandardMaterial && material.metalnessMap || material instanceof MeshStandardMaterial && material.roughnessMap) {\n      if (material.metalnessMap === material.roughnessMap && material.metalnessMap !== null) {\n        const metalRoughMapDef = {\n          index: this.processTexture(material.metalnessMap)\n        };\n        this.applyTextureTransform(metalRoughMapDef, material.metalnessMap);\n        materialDef.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n      } else {\n        console.warn('THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.');\n      }\n    } // pbrMetallicRoughness.baseColorTexture or pbrSpecularGlossiness diffuseTexture\n\n    if ((material instanceof MeshStandardMaterial || material instanceof MeshPhysicalMaterial) && material.map) {\n      const baseColorMapDef = {\n        index: this.processTexture(material.map)\n      };\n      this.applyTextureTransform(baseColorMapDef, material.map);\n      materialDef.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n    }\n    if ((material instanceof MeshStandardMaterial || material instanceof MeshPhysicalMaterial) && material.emissive) {\n      // note: emissive components are limited to stay within the 0 - 1 range to accommodate glTF spec. see #21849 and #22000.\n      const emissive = material.emissive.clone().multiplyScalar(material.emissiveIntensity);\n      const maxEmissiveComponent = Math.max(emissive.r, emissive.g, emissive.b);\n      if (maxEmissiveComponent > 1) {\n        emissive.multiplyScalar(1 / maxEmissiveComponent);\n        console.warn('THREE.GLTFExporter: Some emissive components exceed 1; emissive has been limited');\n      }\n      if (maxEmissiveComponent > 0) {\n        materialDef.emissiveFactor = emissive.toArray();\n      } // emissiveTexture\n\n      if (material.emissiveMap) {\n        const emissiveMapDef = {\n          index: this.processTexture(material.emissiveMap)\n        };\n        this.applyTextureTransform(emissiveMapDef, material.emissiveMap);\n        materialDef.emissiveTexture = emissiveMapDef;\n      }\n    } // normalTexture\n\n    if ((material instanceof MeshMatcapMaterial || material instanceof MeshNormalMaterial || material instanceof MeshPhongMaterial || material instanceof MeshStandardMaterial || material instanceof MeshToonMaterial) && material.normalMap) {\n      const normalMapDef = {\n        index: this.processTexture(material.normalMap)\n      };\n      if (material.normalScale && material.normalScale.x !== 1) {\n        // glTF normal scale is univariate. Ignore `y`, which may be flipped.\n        // Context: https://github.com/mrdoob/three.js/issues/11438#issuecomment-507003995\n        normalMapDef.scale = material.normalScale.x;\n      }\n      this.applyTextureTransform(normalMapDef, material.normalMap);\n      materialDef.normalTexture = normalMapDef;\n    } // occlusionTexture\n\n    if ((material instanceof MeshBasicMaterial || material instanceof MeshLambertMaterial || material instanceof MeshPhongMaterial || material instanceof MeshStandardMaterial || material instanceof MeshToonMaterial) && material.aoMap) {\n      const occlusionMapDef = {\n        index: this.processTexture(material.aoMap),\n        texCoord: 1\n      };\n      if (material.aoMapIntensity !== 1.0) {\n        occlusionMapDef.strength = material.aoMapIntensity;\n      }\n      this.applyTextureTransform(occlusionMapDef, material.aoMap);\n      materialDef.occlusionTexture = occlusionMapDef;\n    } // alphaMode\n\n    if (material.transparent) {\n      materialDef.alphaMode = 'BLEND';\n    } else {\n      if (material.alphaTest > 0.0) {\n        materialDef.alphaMode = 'MASK';\n        materialDef.alphaCutoff = material.alphaTest;\n      }\n    } // doubleSided\n\n    if (material.side === DoubleSide) materialDef.doubleSided = true;\n    if (material.name !== '') materialDef.name = material.name;\n    this.serializeUserData(material, materialDef);\n    this._invokeAll(function (ext) {\n      ext.writeMaterial && ext.writeMaterial(material, materialDef);\n    });\n    const index = json.materials.push(materialDef) - 1;\n    cache.materials.set(material, index);\n    return index;\n  }\n  /**\n   * Process mesh\n   * @param  {THREE.Mesh} mesh Mesh to process\n   * @return {Integer|null} Index of the processed mesh in the \"meshes\" array\n   */\n\n  processMesh(mesh) {\n    const cache = this.cache;\n    const json = this.json;\n    const meshCacheKeyParts = [mesh.geometry.uuid];\n    if (Array.isArray(mesh.material)) {\n      for (let i = 0, l = mesh.material.length; i < l; i++) {\n        meshCacheKeyParts.push(mesh.material[i].uuid);\n      }\n    } else {\n      meshCacheKeyParts.push(mesh.material.uuid);\n    }\n    const meshCacheKey = meshCacheKeyParts.join(':');\n    if (cache.meshes.has(meshCacheKey)) return cache.meshes.get(meshCacheKey);\n    const geometry = mesh.geometry;\n    let mode; // Use the correct mode\n\n    if (mesh instanceof LineSegments && mesh.isLineSegments) {\n      mode = WEBGL_CONSTANTS.LINES;\n    } else if (mesh instanceof LineLoop && mesh.isLineLoop) {\n      mode = WEBGL_CONSTANTS.LINE_LOOP;\n    } else if (mesh instanceof Line && mesh.isLine) {\n      mode = WEBGL_CONSTANTS.LINE_STRIP;\n    } else if (mesh instanceof Points && mesh.isPoints) {\n      mode = WEBGL_CONSTANTS.POINTS;\n    } else {\n      mode = (mesh.material instanceof MeshBasicMaterial || mesh.material instanceof MeshDepthMaterial || mesh.material instanceof MeshLambertMaterial || mesh.material instanceof MeshNormalMaterial || mesh.material instanceof MeshPhongMaterial || mesh.material instanceof MeshStandardMaterial || mesh.material instanceof MeshToonMaterial || mesh.material instanceof ShaderMaterial) && mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n    }\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.GLTFExporter: Geometry is not of type THREE.BufferGeometry.');\n    }\n    const meshDef = {};\n    const attributes = {};\n    const primitives = [];\n    const targets = []; // Conversion between attributes names in threejs and gltf spec\n\n    const nameConversion = {\n      uv: 'TEXCOORD_0',\n      uv2: 'TEXCOORD_1',\n      color: 'COLOR_0',\n      skinWeight: 'WEIGHTS_0',\n      skinIndex: 'JOINTS_0'\n    };\n    const originalNormal = geometry.getAttribute('normal');\n    if (originalNormal !== undefined && !(originalNormal instanceof InterleavedBufferAttribute) && !this.isNormalizedNormalAttribute(originalNormal)) {\n      console.warn('THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.');\n      geometry.setAttribute('normal', this.createNormalizedNormalAttribute(originalNormal));\n    } // @QUESTION Detect if .vertexColors = true?\n    // For every attribute create an accessor\n\n    let modifiedAttribute = null;\n    for (let attributeName in geometry.attributes) {\n      // Ignore morph target attributes, which are exported later.\n      if (attributeName.substr(0, 5) === 'morph') continue;\n      const attribute = geometry.attributes[attributeName];\n      attributeName = nameConversion[attributeName] || attributeName.toUpperCase(); // Prefix all geometry attributes except the ones specifically\n      // listed in the spec; non-spec attributes are considered custom.\n\n      const validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n      if (!validVertexAttributes.test(attributeName)) attributeName = '_' + attributeName;\n      if (cache.attributes.has(this.getUID(attribute))) {\n        attributes[attributeName] = cache.attributes.get(this.getUID(attribute));\n        continue;\n      } // JOINTS_0 must be UNSIGNED_BYTE or UNSIGNED_SHORT.\n\n      modifiedAttribute = null;\n      const array = attribute.array;\n      if (attributeName === 'JOINTS_0' && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {\n        console.warn('GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.');\n        modifiedAttribute = new BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);\n      }\n      const accessor = modifiedAttribute !== null && this.processAccessor(modifiedAttribute || attribute, geometry);\n      if (accessor) {\n        attributes[attributeName] = accessor;\n        cache.attributes.set(this.getUID(attribute), accessor);\n      }\n    }\n    if (originalNormal !== undefined) geometry.setAttribute('normal', originalNormal); // Skip if no exportable attributes found\n\n    if (Object.keys(attributes).length === 0) return null; // Morph targets\n\n    if (mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0) {\n      const weights = [];\n      const targetNames = [];\n      const reverseDictionary = {};\n      if (mesh.morphTargetDictionary !== undefined) {\n        for (const key in mesh.morphTargetDictionary) {\n          reverseDictionary[mesh.morphTargetDictionary[key]] = key;\n        }\n      }\n      for (let i = 0; i < mesh.morphTargetInfluences.length; ++i) {\n        const target = {};\n        let warned = false;\n        for (const attributeName in geometry.morphAttributes) {\n          // glTF 2.0 morph supports only POSITION/NORMAL/TANGENT.\n          // Three.js doesn't support TANGENT yet.\n          if (attributeName !== 'position' && attributeName !== 'normal') {\n            if (!warned) {\n              console.warn('GLTFExporter: Only POSITION and NORMAL morph are supported.');\n              warned = true;\n            }\n            continue;\n          }\n          const attribute = geometry.morphAttributes[attributeName][i];\n          const gltfAttributeName = attributeName.toUpperCase(); // Three.js morph attribute has absolute values while the one of glTF has relative values.\n          //\n          // glTF 2.0 Specification:\n          // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#morph-targets\n\n          const baseAttribute = geometry.attributes[attributeName];\n          if (cache.attributes.has(this.getUID(attribute))) {\n            target[gltfAttributeName] = cache.attributes.get(this.getUID(attribute));\n            continue;\n          } // Clones attribute not to override\n\n          const relativeAttribute = attribute.clone();\n          if (!geometry.morphTargetsRelative) {\n            for (let j = 0, jl = attribute.count; j < jl; j++) {\n              relativeAttribute.setXYZ(j, attribute.getX(j) - baseAttribute.getX(j), attribute.getY(j) - baseAttribute.getY(j), attribute.getZ(j) - baseAttribute.getZ(j));\n            }\n          }\n          const accessor = this.processAccessor(relativeAttribute, geometry);\n          if (accessor != undefined) {\n            target[gltfAttributeName] = accessor;\n          }\n          cache.attributes.set(this.getUID(baseAttribute), target[gltfAttributeName]);\n        }\n        targets.push(target);\n        weights.push(mesh.morphTargetInfluences[i]);\n        if (mesh.morphTargetDictionary !== undefined) targetNames.push(reverseDictionary[i]);\n      }\n      meshDef.weights = weights;\n      if (targetNames.length > 0) {\n        meshDef.extras = {};\n        meshDef.extras.targetNames = targetNames;\n      }\n    }\n    const isMultiMaterial = Array.isArray(mesh.material);\n    if (isMultiMaterial && geometry.groups.length === 0) return null;\n    const materials = isMultiMaterial ? mesh.material : [mesh.material];\n    const groups = isMultiMaterial ? geometry.groups : [{\n      materialIndex: 0,\n      start: undefined,\n      count: undefined\n    }];\n    for (let i = 0, il = groups.length; i < il; i++) {\n      const primitive = {\n        mode: mode,\n        attributes: attributes\n      };\n      if (geometry instanceof Object3D || geometry instanceof Material) {\n        this.serializeUserData(geometry, primitive);\n      }\n      if (targets.length > 0) primitive.targets = targets;\n      if (geometry.index !== null) {\n        let cacheKey = this.getUID(geometry.index);\n        if (groups[i].start !== undefined || groups[i].count !== undefined) {\n          // @ts-expect-error\n          cacheKey += `:${groups[i].start}:${groups[i].count}`;\n        }\n        if (cache.attributes.has(cacheKey)) {\n          primitive.indices = cache.attributes.get(cacheKey);\n        } else {\n          primitive.indices = this.processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);\n          cache.attributes.set(cacheKey, primitive.indices);\n        }\n        if (primitive.indices === null) delete primitive.indices;\n      }\n      const materialIndex = groups[i].materialIndex;\n      if (materialIndex !== undefined && Array.isArray(materials)) {\n        const targetMaterials = materials[materialIndex];\n        if (!Array.isArray(targetMaterials)) {\n          const material = this.processMaterial(targetMaterials);\n          if (material !== null) primitive.material = material;\n          primitives.push(primitive);\n        }\n      }\n    }\n    meshDef.primitives = primitives;\n    if (!json.meshes) json.meshes = [];\n    this._invokeAll(function (ext) {\n      ext.writeMesh && ext.writeMesh(mesh, meshDef);\n    });\n    const index = json.meshes.push(meshDef) - 1;\n    cache.meshes.set(meshCacheKey, index);\n    return index;\n  }\n  /**\n   * Process camera\n   * @param  {THREE.Camera} camera Camera to process\n   * @return {Integer}      Index of the processed mesh in the \"camera\" array\n   */\n\n  processCamera(camera) {\n    const json = this.json;\n    if (!json.cameras) json.cameras = [];\n    const isOrtho = camera instanceof OrthographicCamera && camera.isOrthographicCamera;\n    const cameraDef = {\n      type: isOrtho ? 'orthographic' : 'perspective'\n    };\n    if (camera instanceof OrthographicCamera && isOrtho) {\n      cameraDef.orthographic = {\n        xmag: camera.right * 2,\n        ymag: camera.top * 2,\n        zfar: camera.far <= 0 ? 0.001 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    } else if (camera instanceof PerspectiveCamera) {\n      cameraDef.perspective = {\n        aspectRatio: camera.aspect,\n        yfov: MathUtils.degToRad(camera.fov),\n        zfar: camera.far <= 0 ? 0.001 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    } // Question: Is saving \"type\" as name intentional?\n\n    if (camera.name !== '') cameraDef.name = camera.type;\n    return json.cameras.push(cameraDef) - 1;\n  }\n  /**\n   * Creates glTF animation entry from AnimationClip object.\n   *\n   * Status:\n   * - Only properties listed in PATH_PROPERTIES may be animated.\n   *\n   * @param {THREE.AnimationClip} clip\n   * @param {THREE.Object3D} root\n   * @return {number|null}\n   */\n\n  processAnimation(clip, root) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n    if (!json.animations) json.animations = [];\n    clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);\n    const tracks = clip.tracks;\n    const channels = [];\n    const samplers = [];\n    for (let i = 0; i < tracks.length; ++i) {\n      const track = tracks[i];\n      const trackBinding = PropertyBinding.parseTrackName(track.name);\n      let trackNode = PropertyBinding.findNode(root, trackBinding.nodeName);\n      const trackProperty = PATH_PROPERTIES[trackBinding.propertyName];\n      if (trackBinding.objectName === 'bones') {\n        if (trackNode.isSkinnedMesh) {\n          trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);\n        } else {\n          trackNode = undefined;\n        }\n      }\n      if (!trackNode || !trackProperty) {\n        console.warn('THREE.GLTFExporter: Could not export animation track \"%s\".', track.name);\n        return null;\n      }\n      const inputItemSize = 1;\n      let outputItemSize = track.values.length / track.times.length;\n      if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {\n        outputItemSize /= trackNode.morphTargetInfluences.length;\n      }\n      let interpolation; // @TODO export CubicInterpolant(InterpolateSmooth) as CUBICSPLINE\n      // Detecting glTF cubic spline interpolant by checking factory method's special property\n      // GLTFCubicSplineInterpolant is a custom interpolant and track doesn't return\n      // valid value from .getInterpolation().\n      // @ts-expect-error\n\n      if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n        interpolation = 'CUBICSPLINE'; // itemSize of CUBICSPLINE keyframe is 9\n        // (VEC3 * 3: inTangent, splineVertex, and outTangent)\n        // but needs to be stored as VEC3 so dividing by 3 here.\n\n        outputItemSize /= 3;\n      } else if (track.getInterpolation() === InterpolateDiscrete) {\n        interpolation = 'STEP';\n      } else {\n        interpolation = 'LINEAR';\n      }\n      samplers.push({\n        input: this.processAccessor(new BufferAttribute(track.times, inputItemSize)),\n        output: this.processAccessor(new BufferAttribute(track.values, outputItemSize)),\n        interpolation: interpolation\n      });\n      channels.push({\n        sampler: samplers.length - 1,\n        target: {\n          node: nodeMap.get(trackNode),\n          path: trackProperty\n        }\n      });\n    }\n    json.animations.push({\n      name: clip.name || 'clip_' + json.animations.length,\n      samplers: samplers,\n      channels: channels\n    });\n    return json.animations.length - 1;\n  }\n  /**\n   * @param {THREE.Object3D} object\n   * @return {number|null}\n   */\n\n  processSkin(object) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n    if (json.nodes !== undefined && object instanceof SkinnedMesh) {\n      const node = json.nodes[nodeMap.get(object)];\n      const skeleton = object.skeleton;\n      if (skeleton === undefined) return null;\n      const rootJoint = object.skeleton.bones[0];\n      if (rootJoint === undefined) return null;\n      const joints = [];\n      const inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);\n      const temporaryBoneInverse = new Matrix4();\n      for (let i = 0; i < skeleton.bones.length; ++i) {\n        joints.push(nodeMap.get(skeleton.bones[i]));\n        temporaryBoneInverse.copy(skeleton.boneInverses[i]);\n        temporaryBoneInverse.multiply(object.bindMatrix).toArray(inverseBindMatrices, i * 16);\n      }\n      if (json.skins === undefined) json.skins = [];\n      json.skins.push({\n        inverseBindMatrices: this.processAccessor(new BufferAttribute(inverseBindMatrices, 16)),\n        joints: joints,\n        skeleton: nodeMap.get(rootJoint)\n      });\n      const skinIndex = node.skin = json.skins.length - 1;\n      return skinIndex;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Process Object3D node\n   * @param  {THREE.Object3D} node Object3D to processNode\n   * @return {Integer} Index of the node in the nodes list\n   */\n\n  processNode(object) {\n    const json = this.json;\n    const options = this.options;\n    const nodeMap = this.nodeMap;\n    if (!json.nodes) json.nodes = [];\n    const nodeDef = {};\n    if (options.trs) {\n      const rotation = object.quaternion.toArray();\n      const position = object.position.toArray();\n      const scale = object.scale.toArray();\n      if (!this.equalArray(rotation, [0, 0, 0, 1])) {\n        nodeDef.rotation = rotation;\n      }\n      if (!this.equalArray(position, [0, 0, 0])) {\n        nodeDef.translation = position;\n      }\n      if (!this.equalArray(scale, [1, 1, 1])) {\n        nodeDef.scale = scale;\n      }\n    } else {\n      if (object.matrixAutoUpdate) {\n        object.updateMatrix();\n      }\n      if (!this.isIdentityMatrix(object.matrix)) {\n        nodeDef.matrix = object.matrix.elements;\n      }\n    } // We don't export empty strings name because it represents no-name in Three.js.\n\n    if (object.name !== '') nodeDef.name = String(object.name);\n    this.serializeUserData(object, nodeDef);\n    if ((object instanceof Mesh && object.isMesh || object instanceof Line && object.isLine || object instanceof Points && object.isPoints) && object instanceof Mesh) {\n      const meshIndex = this.processMesh(object);\n      if (meshIndex !== null) nodeDef.mesh = meshIndex;\n    } else if (object instanceof Camera && object.isCamera) {\n      nodeDef.camera = this.processCamera(object);\n    }\n    if (object instanceof SkinnedMesh && object.isSkinnedMesh) this.skins.push(object);\n    if (object.children.length > 0) {\n      const children = [];\n      for (let i = 0, l = object.children.length; i < l; i++) {\n        const child = object.children[i];\n        if (child.visible || !options.onlyVisible) {\n          const nodeIndex = this.processNode(child);\n          if (nodeIndex !== null) children.push(nodeIndex);\n        }\n      }\n      if (children.length > 0) nodeDef.children = children;\n    }\n    this._invokeAll(function (ext) {\n      ext.writeNode && ext.writeNode(object, nodeDef);\n    });\n    const nodeIndex = json.nodes.push(nodeDef) - 1;\n    nodeMap.set(object, nodeIndex);\n    return nodeIndex;\n  }\n  /**\n   * Process Scene\n   * @param  {Scene} node Scene to process\n   */\n\n  processScene(scene) {\n    const json = this.json;\n    const options = this.options;\n    if (!json.scenes) {\n      json.scenes = [];\n      json.scene = 0;\n    }\n    const sceneDef = {};\n    if (scene.name !== '') sceneDef.name = scene.name;\n    json.scenes.push(sceneDef);\n    const nodes = [];\n    for (let i = 0, l = scene.children.length; i < l; i++) {\n      const child = scene.children[i];\n      if (child.visible || !options.onlyVisible) {\n        const nodeIndex = this.processNode(child);\n        if (nodeIndex !== null) nodes.push(nodeIndex);\n      }\n    }\n    if (nodes.length > 0) sceneDef.nodes = nodes;\n    this.serializeUserData(scene, sceneDef);\n  }\n  processObjects(objects) {\n    const scene = new Scene();\n    scene.name = 'AuxScene';\n    for (let i = 0; i < objects.length; i++) {\n      // We push directly to children instead of calling `add` to prevent\n      // modify the .parent and break its original scene and hierarchy\n      scene.children.push(objects[i]);\n    }\n    this.processScene(scene);\n  }\n  /**\n   * @param {THREE.Object3D|Array<THREE.Object3D>} input\n   */\n\n  processInput(input) {\n    const options = this.options;\n    input = input instanceof Array ? input : [input];\n    this._invokeAll(function (ext) {\n      ext.beforeParse && ext.beforeParse(input);\n    });\n    const objectsWithoutScene = [];\n    for (let i = 0; i < input.length; i++) {\n      const inputScene = input[i];\n      if (inputScene instanceof Scene) {\n        this.processScene(inputScene);\n      } else {\n        objectsWithoutScene.push(input[i]);\n      }\n    }\n    if (objectsWithoutScene.length > 0) this.processObjects(objectsWithoutScene);\n    for (let i = 0; i < this.skins.length; ++i) {\n      this.processSkin(this.skins[i]);\n    }\n    for (let i = 0; options.animations !== undefined && i < options.animations.length; ++i) {\n      this.processAnimation(options.animations[i], input[0]);\n    }\n    this._invokeAll(function (ext) {\n      ext.afterParse && ext.afterParse(input);\n    });\n  }\n  _invokeAll(func) {\n    for (let i = 0, il = this.plugins.length; i < il; i++) {\n      func(this.plugins[i]);\n    }\n  } //------------------------------------------------------------------------------\n  // Utility functions\n  //------------------------------------------------------------------------------\n\n  /**\n   * Compare two arrays\n   * @param  {Array} array1 Array 1 to compare\n   * @param  {Array} array2 Array 2 to compare\n   * @return {Boolean}        Returns true if both arrays are equal\n   */\n\n  equalArray(array1, array2) {\n    return array1.length === array2.length && array1.every(function (element, index) {\n      return element === array2[index];\n    });\n  }\n  /**\n   * Converts a string to an ArrayBuffer.\n   * @param  {string} text\n   * @return {ArrayBuffer}\n   */\n\n  stringToArrayBuffer(text) {\n    if (window.TextEncoder !== undefined) {\n      return new TextEncoder().encode(text).buffer;\n    }\n    const array = new Uint8Array(new ArrayBuffer(text.length));\n    for (let i = 0, il = text.length; i < il; i++) {\n      const value = text.charCodeAt(i); // Replacing multi-byte character with space(0x20).\n\n      array[i] = value > 0xff ? 0x20 : value;\n    }\n    return array.buffer;\n  }\n  isIdentityMatrix(matrix) {\n    return this.equalArray(matrix.elements, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n  }\n  getMinMax(attribute, start, count) {\n    const output = {\n      min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),\n      max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)\n    };\n    for (let i = start; i < start + count; i++) {\n      for (let a = 0; a < attribute.itemSize; a++) {\n        let value;\n        if (attribute.itemSize > 4) {\n          // no support for interleaved data for itemSize > 4\n          value = attribute.array[i * attribute.itemSize + a];\n        } else {\n          if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n        }\n        if (value !== undefined) {\n          output.min[a] = Math.min(output.min[a], value);\n          output.max[a] = Math.max(output.max[a], value);\n        }\n      }\n    }\n    return output;\n  }\n  /**\n   * Get the required size + padding for a buffer, rounded to the next 4-byte boundary.\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment\n   */\n\n  getPaddedBufferSize(bufferSize) {\n    return Math.ceil(bufferSize / 4) * 4;\n  }\n  /**\n   * Returns a buffer aligned to 4-byte boundary.\n   *\n   * @param {ArrayBuffer} arrayBuffer Buffer to pad\n   * @param {Integer} paddingByte (Optional)\n   * @returns {ArrayBuffer} The same buffer if it's already aligned to 4-byte boundary or a new buffer\n   */\n\n  getPaddedArrayBuffer(arrayBuffer) {\n    let paddingByte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const paddedLength = this.getPaddedBufferSize(arrayBuffer.byteLength);\n    if (paddedLength !== arrayBuffer.byteLength) {\n      const array = new Uint8Array(paddedLength);\n      array.set(new Uint8Array(arrayBuffer));\n      if (paddingByte !== 0) {\n        for (let i = arrayBuffer.byteLength; i < paddedLength; i++) {\n          array[i] = paddingByte;\n        }\n      }\n      return array.buffer;\n    }\n    return arrayBuffer;\n  }\n}\n/**\n * Punctual Lights Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n */\n\nclass GLTFLightExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n    _defineProperty(this, \"name\", void 0);\n    this.writer = writer;\n    this.name = 'KHR_lights_punctual';\n  }\n  writeNode(light, nodeDef) {\n    if (!light.isLight) return;\n    if (!(light instanceof DirectionalLight && light.isDirectionalLight) &&\n    // @ts-expect-error\n    !(light instanceof PointLight && light.isPointLight) && !(light instanceof SpotLight && light.isSpotLight)) {\n      console.warn('THREE.GLTFExporter: Only directional, point, and spot lights are supported.', light);\n      return;\n    }\n    const writer = this.writer;\n    const json = writer.json;\n    const extensionsUsed = writer.extensionsUsed;\n    const lightDef = {};\n    if (light.name) lightDef.name = light.name;\n    lightDef.color = light.color.toArray();\n    lightDef.intensity = light.intensity;\n    if (light instanceof DirectionalLight && light.isDirectionalLight) {\n      lightDef.type = 'directional';\n    } else if (light instanceof PointLight &&\n    // @ts-expect-error\n    light.isPointLight) {\n      lightDef.type = 'point';\n      if (light.distance > 0) lightDef.range = light.distance;\n    } else if (light instanceof SpotLight && light.isSpotLight) {\n      lightDef.type = 'spot';\n      if (light.distance > 0) lightDef.range = light.distance;\n      lightDef.spot = {};\n      lightDef.spot.innerConeAngle = (light.penumbra - 1.0) * light.angle * -1.0;\n      lightDef.spot.outerConeAngle = light.angle;\n    }\n    if (!(light instanceof DirectionalLight) && light.decay !== undefined && light.decay !== 2) {\n      console.warn('THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, ' + 'and expects light.decay=2.');\n    }\n    if (!(light instanceof PointLight) && light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {\n      console.warn('THREE.GLTFExporter: Light direction may be lost. For best results, ' + 'make light.target a child of the light with position 0,0,-1.');\n    }\n    if (!extensionsUsed[this.name]) {\n      json.extensions = json.extensions || {};\n      json.extensions[this.name] = {\n        lights: []\n      };\n      extensionsUsed[this.name] = true;\n    }\n    if (json.extensions !== undefined) {\n      const lights = json.extensions[this.name].lights;\n      lights.push(lightDef);\n      nodeDef.extensions = nodeDef.extensions || {};\n      nodeDef.extensions[this.name] = {\n        light: lights.length - 1\n      };\n    }\n  }\n}\n/**\n * Unlit Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n */\n\nclass GLTFMaterialsUnlitExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n    _defineProperty(this, \"name\", void 0);\n    this.writer = writer;\n    this.name = 'KHR_materials_unlit';\n  }\n  writeMaterial(material, materialDef) {\n    if (!(material instanceof MeshBasicMaterial &&\n    // @ts-expect-error\n    material.isMeshBasicMaterial)) {\n      return;\n    }\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = {};\n    extensionsUsed[this.name] = true;\n    materialDef.pbrMetallicRoughness.metallicFactor = 0.0;\n    materialDef.pbrMetallicRoughness.roughnessFactor = 0.9;\n  }\n}\n/**\n * Specular-Glossiness Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n */\n\nclass GLTFMaterialsPBRSpecularGlossiness {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n    _defineProperty(this, \"name\", void 0);\n    this.writer = writer;\n    this.name = 'KHR_materials_pbrSpecularGlossiness';\n  }\n  writeMaterial(material, materialDef) {\n    // @ts-expect-error\n    if (!material.isGLTFSpecularGlossinessMaterial) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    if (materialDef.pbrMetallicRoughness.baseColorFactor) {\n      extensionDef.diffuseFactor = materialDef.pbrMetallicRoughness.baseColorFactor;\n    }\n    if (material instanceof MeshPhongMaterial) {\n      const specularFactor = [1, 1, 1];\n      material.specular.toArray(specularFactor, 0);\n      extensionDef.specularFactor = specularFactor;\n      extensionDef.glossinessFactor =\n      // @ts-expect-error\n      material.glossiness;\n    }\n    if (materialDef.pbrMetallicRoughness.baseColorTexture) {\n      extensionDef.diffuseTexture = materialDef.pbrMetallicRoughness.baseColorTexture;\n    }\n    if ((material instanceof MeshBasicMaterial || material instanceof MeshLambertMaterial || material instanceof MeshPhongMaterial) && material.specularMap) {\n      const specularMapDef = {\n        index: writer.processTexture(material.specularMap)\n      };\n      writer.applyTextureTransform(specularMapDef, material.specularMap);\n      extensionDef.specularGlossinessTexture = specularMapDef;\n    }\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\n/**\n * Transmission Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_transmission\n */\n\nclass GLTFMaterialsTransmissionExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n    _defineProperty(this, \"name\", void 0);\n    this.writer = writer;\n    this.name = 'KHR_materials_transmission';\n  }\n  writeMaterial(material, materialDef) {\n    if (!(material instanceof MeshPhysicalMaterial &&\n    // @ts-expect-error\n    material.isMeshPhysicalMaterial) || material.transmission === 0) {\n      return;\n    }\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.transmissionFactor = material.transmission;\n    if (material.transmissionMap) {\n      const transmissionMapDef = {\n        index: writer.processTexture(material.transmissionMap)\n      };\n      writer.applyTextureTransform(transmissionMapDef, material.transmissionMap);\n      extensionDef.transmissionTexture = transmissionMapDef;\n    }\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\n/**\n * Materials Volume Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_volume\n */\n\nclass GLTFMaterialsVolumeExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n    _defineProperty(this, \"name\", void 0);\n    this.writer = writer;\n    this.name = 'KHR_materials_volume';\n  }\n  writeMaterial(material, materialDef) {\n    if (!(material instanceof MeshPhysicalMaterial &&\n    // @ts-expect-error\n    material.isMeshPhysicalMaterial) || material.thickness === 0) {\n      return;\n    }\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.thickness = material.thickness;\n    if (material.thicknessMap) {\n      const thicknessMapDef = {\n        index: writer.processTexture(material.thicknessMap)\n      };\n      writer.applyTextureTransform(thicknessMapDef, material.thicknessMap);\n      extensionDef.thicknessTexture = thicknessMapDef;\n    }\n    extensionDef.attenuationDistance = material.attenuationDistance;\n    extensionDef.attenuationColor =\n    //@ts-expect-error\n    material.attenuationTint.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nexport { GLTFExporter };","map":{"version":3,"names":["_defineProperty","PropertyBinding","InterpolateLinear","Vector3","RGBAFormat","ShaderMaterial","MeshStandardMaterial","MeshBasicMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshToonMaterial","MeshLambertMaterial","DoubleSide","LineSegments","LineLoop","Line","Points","MeshDepthMaterial","InterleavedBufferAttribute","BufferAttribute","Object3D","Material","OrthographicCamera","PerspectiveCamera","MathUtils","InterpolateDiscrete","SkinnedMesh","Matrix4","Mesh","Camera","Scene","DirectionalLight","PointLight","SpotLight","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","GLTFExporter","constructor","pluginCallbacks","register","writer","GLTFLightExtension","GLTFMaterialsUnlitExtension","GLTFMaterialsPBRSpecularGlossiness","GLTFMaterialsTransmissionExtension","GLTFMaterialsVolumeExtension","callback","indexOf","push","unregister","splice","parse","input","onDone","options","GLTFWriter","plugins","i","il","length","setPlugins","write","insertKeyframe","track","time","tolerance","valueSize","getValueSize","times","TimeBufferType","values","ValueBufferType","interpolant","createInterpolant","index","Math","abs","set","evaluate","slice","mergeMorphTargetTracks","clip","root","tracks","mergedTracks","sourceTracks","sourceTrack","sourceTrackBinding","parseTrackName","name","sourceTrackNode","findNode","nodeName","propertyName","propertyIndex","undefined","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","isInterpolantFactoryMethodGLTFCubicSpline","Error","console","warn","clone","setInterpolation","targetCount","morphTargetInfluences","targetIndex","morphTargetDictionary","mergedTrack","uuid","j","sourceInterpolant","keyframeIndex","WEBGL_CONSTANTS","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","UNSIGNED_BYTE","UNSIGNED_SHORT","FLOAT","UNSIGNED_INT","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","NEAREST","LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","CLAMP_TO_EDGE","MIRRORED_REPEAT","REPEAT","THREE_TO_WEBGL","PATH_PROPERTIES","scale","position","quaternion","GLB_HEADER_BYTES","GLB_HEADER_MAGIC","GLB_VERSION","GLB_CHUNK_PREFIX_BYTES","GLB_CHUNK_TYPE_JSON","GLB_CHUNK_TYPE_BIN","pending","buffers","byteOffset","nodeMap","Map","skins","extensionsUsed","uids","uid","json","asset","version","generator","cache","meshes","attributes","attributesNormalized","materials","textures","images","cachedCanvas","Object","assign","binary","trs","onlyVisible","truncateDrawRange","embedImages","maxTextureSize","Infinity","animations","includeCustomExtensions","processInput","Promise","all","then","blob","Blob","type","extensionsUsedList","keys","byteLength","size","reader","window","FileReader","readAsArrayBuffer","onloadend","result","binaryChunk","getPaddedArrayBuffer","binaryChunkPrefix","DataView","ArrayBuffer","setUint32","jsonChunk","stringToArrayBuffer","JSON","stringify","jsonChunkPrefix","header","headerView","totalByteLength","glbBlob","glbReader","readAsDataURL","base64data","uri","serializeUserData","object","objectDef","userData","gltfExtensions","extensions","extensionName","extras","error","message","getUID","has","get","isNormalizedNormalAttribute","normal","v","count","fromBufferAttribute","createNormalizedNormalAttribute","attribute","x","y","z","setX","normalize","setXYZ","applyTextureTransform","mapDef","texture","didTransform","transformDef","offset","toArray","rotation","repeat","processBuffer","buffer","processBufferView","componentType","start","target","bufferViews","componentSize","getPaddedBufferSize","itemSize","dataView","a","value","array","getX","getY","getZ","getW","setFloat32","setUint16","setUint8","bufferViewDef","byteStride","output","id","processBufferViewImage","resolve","processAccessor","geometry","types","Float32Array","Uint32Array","Uint16Array","Uint8Array","end","end2","drawRange","max","min","minMax","getMinMax","bufferViewTarget","bufferView","accessorDef","normalized","accessors","processImage","image","format","flipY","cachedImages","mimeType","key","toString","imageDef","canvas","document","createElement","width","height","ctx","getContext","translate","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","drawImage","data","Uint8ClampedArray","ImageData","putImageData","toBlob","bufferViewIndex","toDataURL","Image","src","processSampler","map","samplers","samplerDef","magFilter","minFilter","wrapS","wrapT","processTexture","textureDef","sampler","source","_invokeAll","ext","writeTexture","processMaterial","material","isShaderMaterial","materialDef","pbrMetallicRoughness","isMeshStandardMaterial","isMeshBasicMaterial","color","concat","opacity","equalArray","baseColorFactor","metallicFactor","metalness","roughnessFactor","roughness","metalnessMap","roughnessMap","metalRoughMapDef","metallicRoughnessTexture","baseColorMapDef","baseColorTexture","emissive","multiplyScalar","emissiveIntensity","maxEmissiveComponent","r","g","b","emissiveFactor","emissiveMap","emissiveMapDef","emissiveTexture","normalMap","normalMapDef","normalScale","normalTexture","aoMap","occlusionMapDef","texCoord","aoMapIntensity","strength","occlusionTexture","transparent","alphaMode","alphaTest","alphaCutoff","side","doubleSided","writeMaterial","processMesh","mesh","meshCacheKeyParts","Array","isArray","l","meshCacheKey","join","mode","isLineSegments","isLineLoop","isLine","isPoints","wireframe","isBufferGeometry","meshDef","primitives","targets","nameConversion","uv","uv2","skinWeight","skinIndex","originalNormal","getAttribute","setAttribute","modifiedAttribute","attributeName","substr","toUpperCase","validVertexAttributes","test","accessor","weights","targetNames","reverseDictionary","warned","morphAttributes","gltfAttributeName","baseAttribute","relativeAttribute","morphTargetsRelative","jl","isMultiMaterial","groups","materialIndex","primitive","cacheKey","indices","targetMaterials","writeMesh","processCamera","camera","cameras","isOrtho","isOrthographicCamera","cameraDef","orthographic","xmag","right","ymag","top","zfar","far","znear","near","perspective","aspectRatio","aspect","yfov","degToRad","fov","processAnimation","Utils","channels","trackBinding","trackNode","trackProperty","objectName","isSkinnedMesh","skeleton","getBoneByName","objectIndex","inputItemSize","outputItemSize","interpolation","getInterpolation","node","path","processSkin","nodes","rootJoint","bones","joints","inverseBindMatrices","temporaryBoneInverse","copy","boneInverses","multiply","bindMatrix","skin","processNode","nodeDef","translation","matrixAutoUpdate","updateMatrix","isIdentityMatrix","matrix","elements","String","isMesh","meshIndex","isCamera","children","child","visible","nodeIndex","writeNode","processScene","scene","scenes","sceneDef","processObjects","objects","beforeParse","objectsWithoutScene","inputScene","afterParse","func","array1","array2","every","element","text","TextEncoder","encode","charCodeAt","fill","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","bufferSize","ceil","arrayBuffer","paddingByte","arguments","paddedLength","light","isLight","isDirectionalLight","isPointLight","isSpotLight","lightDef","intensity","distance","range","spot","innerConeAngle","penumbra","angle","outerConeAngle","decay","parent","lights","isGLTFSpecularGlossinessMaterial","extensionDef","diffuseFactor","specularFactor","specular","glossinessFactor","glossiness","diffuseTexture","specularMap","specularMapDef","specularGlossinessTexture","isMeshPhysicalMaterial","transmission","transmissionFactor","transmissionMap","transmissionMapDef","transmissionTexture","thickness","thicknessMap","thicknessMapDef","thicknessTexture","attenuationDistance","attenuationColor","attenuationTint"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/exporters/GLTFExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { PropertyBinding, InterpolateLinear, Vector3, RGBAFormat, ShaderMaterial, MeshStandardMaterial, MeshBasicMaterial, MeshPhysicalMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshToonMaterial, MeshLambertMaterial, DoubleSide, LineSegments, LineLoop, Line, Points, MeshDepthMaterial, InterleavedBufferAttribute, BufferAttribute, Object3D, Material, OrthographicCamera, PerspectiveCamera, MathUtils, InterpolateDiscrete, SkinnedMesh, Matrix4, Mesh, Camera, Scene, DirectionalLight, PointLight, SpotLight, NearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter, LinearFilter, LinearMipmapNearestFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping, RepeatWrapping, MirroredRepeatWrapping } from 'three';\n\nclass GLTFExporter {\n  constructor() {\n    _defineProperty(this, \"pluginCallbacks\", void 0);\n\n    this.pluginCallbacks = [];\n    this.register(function (writer) {\n      return new GLTFLightExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsUnlitExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsPBRSpecularGlossiness(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsTransmissionExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsVolumeExtension(writer);\n    });\n  }\n\n  register(callback) {\n    if (this.pluginCallbacks.indexOf(callback) === -1) {\n      this.pluginCallbacks.push(callback);\n    }\n\n    return this;\n  }\n\n  unregister(callback) {\n    if (this.pluginCallbacks.indexOf(callback) !== -1) {\n      this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(callback), 1);\n    }\n\n    return this;\n  }\n\n  parse(input, onDone, options) {\n    const writer = new GLTFWriter();\n    const plugins = [];\n\n    for (let i = 0, il = this.pluginCallbacks.length; i < il; i++) {\n      plugins.push(this.pluginCallbacks[i](writer));\n    }\n\n    writer.setPlugins(plugins);\n    writer.write(input, onDone, options);\n  }\n  /**\n   * Static utility functions\n   */\n\n\n} //------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n\n_defineProperty(GLTFExporter, \"Utils\", {\n  insertKeyframe: function (track, time) {\n    const tolerance = 0.001; // 1ms\n\n    const valueSize = track.getValueSize(); // @ts-expect-error\n\n    const times = new track.TimeBufferType(track.times.length + 1); // @ts-expect-error\n\n    const values = new track.ValueBufferType(track.values.length + valueSize);\n    /**\n     * NOTE: createInterpolant does not exist in the type, but it does exist as a property of the class\n     * https://github.com/mrdoob/three.js/blob/77480d339d737b7505b335101ffd3cf29a30738d/src/animation/KeyframeTrack.js#L117\n     */\n    // @ts-expect-error\n\n    const interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));\n    let index;\n\n    if (track.times.length === 0) {\n      times[0] = time;\n\n      for (let i = 0; i < valueSize; i++) {\n        values[i] = 0;\n      }\n\n      index = 0;\n    } else if (time < track.times[0]) {\n      if (Math.abs(track.times[0] - time) < tolerance) return 0;\n      times[0] = time;\n      times.set(track.times, 1);\n      values.set(interpolant.evaluate(time), 0);\n      values.set(track.values, valueSize);\n      index = 0;\n    } else if (time > track.times[track.times.length - 1]) {\n      if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {\n        return track.times.length - 1;\n      }\n\n      times[times.length - 1] = time;\n      times.set(track.times, 0);\n      values.set(track.values, 0);\n      values.set(interpolant.evaluate(time), track.values.length);\n      index = times.length - 1;\n    } else {\n      for (let i = 0; i < track.times.length; i++) {\n        if (Math.abs(track.times[i] - time) < tolerance) return i;\n\n        if (track.times[i] < time && track.times[i + 1] > time) {\n          times.set(track.times.slice(0, i + 1), 0);\n          times[i + 1] = time;\n          times.set(track.times.slice(i + 1), i + 2);\n          values.set(track.values.slice(0, (i + 1) * valueSize), 0);\n          values.set(interpolant.evaluate(time), (i + 1) * valueSize);\n          values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);\n          index = i + 1;\n          break;\n        }\n      }\n    }\n\n    track.times = times;\n    track.values = values;\n    return index;\n  },\n  mergeMorphTargetTracks: function (clip, root) {\n    const tracks = [];\n    const mergedTracks = {};\n    const sourceTracks = clip.tracks;\n\n    for (let i = 0; i < sourceTracks.length; ++i) {\n      let sourceTrack = sourceTracks[i];\n      const sourceTrackBinding = PropertyBinding.parseTrackName(sourceTrack.name);\n      const sourceTrackNode = PropertyBinding.findNode(root, sourceTrackBinding.nodeName);\n\n      if (sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined) {\n        // Tracks that don't affect morph targets, or that affect all morph targets together, can be left as-is.\n        tracks.push(sourceTrack);\n        continue;\n      }\n\n      if ( // @ts-expect-error\n      sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && // @ts-expect-error\n      sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {\n        // @ts-expect-error\n        if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n          // This should never happen, because glTF morph target animations\n          // affect all targets already.\n          throw new Error('THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.');\n        }\n\n        console.warn('THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.');\n        sourceTrack = sourceTrack.clone();\n        sourceTrack.setInterpolation(InterpolateLinear);\n      }\n\n      const targetCount = sourceTrackNode.morphTargetInfluences.length;\n      const targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];\n\n      if (targetIndex === undefined) {\n        throw new Error('THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex);\n      }\n\n      let mergedTrack; // If this is the first time we've seen this object, create a new\n      // track to store merged keyframe data for each morph target.\n\n      if (mergedTracks[sourceTrackNode.uuid] === undefined) {\n        mergedTrack = sourceTrack.clone(); // @ts-expect-error\n\n        const values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);\n\n        for (let j = 0; j < mergedTrack.times.length; j++) {\n          values[j * targetCount + targetIndex] = mergedTrack.values[j];\n        } // We need to take into consideration the intended target node\n        // of our original un-merged morphTarget animation.\n\n\n        mergedTrack.name = (sourceTrackBinding.nodeName || '') + '.morphTargetInfluences';\n        mergedTrack.values = values;\n        mergedTracks[sourceTrackNode.uuid] = mergedTrack;\n        tracks.push(mergedTrack);\n        continue;\n      } // @ts-expect-error\n\n\n      const sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));\n      mergedTrack = mergedTracks[sourceTrackNode.uuid]; // For every existing keyframe of the merged track, write a (possibly\n      // interpolated) value from the source track.\n\n      for (let j = 0; j < mergedTrack.times.length; j++) {\n        mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);\n      } // For every existing keyframe of the source track, write a (possibly\n      // new) keyframe to the merged track. Values from the previous loop may\n      // be written again, but keyframes are de-duplicated.\n\n\n      for (let j = 0; j < sourceTrack.times.length; j++) {\n        const keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);\n        mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];\n      }\n    }\n\n    clip.tracks = tracks;\n    return clip;\n  }\n});\n\nconst WEBGL_CONSTANTS = {\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006,\n  UNSIGNED_BYTE: 0x1401,\n  UNSIGNED_SHORT: 0x1403,\n  FLOAT: 0x1406,\n  UNSIGNED_INT: 0x1405,\n  ARRAY_BUFFER: 0x8892,\n  ELEMENT_ARRAY_BUFFER: 0x8893,\n  NEAREST: 0x2600,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_NEAREST: 0x2700,\n  LINEAR_MIPMAP_NEAREST: 0x2701,\n  NEAREST_MIPMAP_LINEAR: 0x2702,\n  LINEAR_MIPMAP_LINEAR: 0x2703,\n  CLAMP_TO_EDGE: 33071,\n  MIRRORED_REPEAT: 33648,\n  REPEAT: 10497\n};\nconst THREE_TO_WEBGL = {};\nTHREE_TO_WEBGL[NearestFilter] = WEBGL_CONSTANTS.NEAREST;\nTHREE_TO_WEBGL[NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[LinearFilter] = WEBGL_CONSTANTS.LINEAR;\nTHREE_TO_WEBGL[LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\nTHREE_TO_WEBGL[RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;\nTHREE_TO_WEBGL[MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\nconst PATH_PROPERTIES = {\n  scale: 'scale',\n  position: 'translation',\n  quaternion: 'rotation',\n  morphTargetInfluences: 'weights'\n}; // GLB constants\n// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n\nconst GLB_HEADER_BYTES = 12;\nconst GLB_HEADER_MAGIC = 0x46546c67;\nconst GLB_VERSION = 2;\nconst GLB_CHUNK_PREFIX_BYTES = 8;\nconst GLB_CHUNK_TYPE_JSON = 0x4e4f534a;\nconst GLB_CHUNK_TYPE_BIN = 0x004e4942;\n/**\n * Writer\n */\n\nclass GLTFWriter {\n  constructor() {\n    _defineProperty(this, \"plugins\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"pending\", void 0);\n\n    _defineProperty(this, \"buffers\", void 0);\n\n    _defineProperty(this, \"byteOffset\", void 0);\n\n    _defineProperty(this, \"nodeMap\", void 0);\n\n    _defineProperty(this, \"skins\", void 0);\n\n    _defineProperty(this, \"extensionsUsed\", void 0);\n\n    _defineProperty(this, \"uids\", void 0);\n\n    _defineProperty(this, \"uid\", void 0);\n\n    _defineProperty(this, \"json\", void 0);\n\n    _defineProperty(this, \"cache\", void 0);\n\n    _defineProperty(this, \"cachedCanvas\", void 0);\n\n    this.plugins = [];\n    this.options = {};\n    this.pending = [];\n    this.buffers = [];\n    this.byteOffset = 0;\n    this.nodeMap = new Map();\n    this.skins = [];\n    this.extensionsUsed = {};\n    this.uids = new Map();\n    this.uid = 0;\n    this.json = {\n      asset: {\n        version: '2.0',\n        generator: 'THREE.GLTFExporter'\n      }\n    };\n    this.cache = {\n      meshes: new Map(),\n      attributes: new Map(),\n      attributesNormalized: new Map(),\n      materials: new Map(),\n      textures: new Map(),\n      images: new Map()\n    };\n    this.cachedCanvas = null;\n  }\n\n  setPlugins(plugins) {\n    this.plugins = plugins;\n  }\n  /**\n   * Parse scenes and generate GLTF output\n   * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n   * @param  {Function} onDone  Callback on completed\n   * @param  {Object} options options\n   */\n\n\n  write(input, onDone, options) {\n    this.options = Object.assign({}, {\n      // default options\n      binary: false,\n      trs: false,\n      onlyVisible: true,\n      truncateDrawRange: true,\n      embedImages: true,\n      maxTextureSize: Infinity,\n      animations: [],\n      includeCustomExtensions: false\n    }, options);\n\n    if (this.options.animations !== undefined && this.options.animations.length > 0) {\n      // Only TRS properties, and not matrices, may be targeted by animation.\n      this.options.trs = true;\n    }\n\n    this.processInput(input);\n    const writer = this;\n    Promise.all(this.pending).then(() => {\n      const buffers = writer.buffers;\n      const json = writer.json;\n      const options = writer.options;\n      const extensionsUsed = writer.extensionsUsed; // Merge buffers.\n\n      const blob = new Blob(buffers, {\n        type: 'application/octet-stream'\n      }); // Declare extensions.\n\n      const extensionsUsedList = Object.keys(extensionsUsed);\n      if (extensionsUsedList.length > 0) json.extensionsUsed = extensionsUsedList; // Update bytelength of the single buffer.\n\n      if (json.buffers && json.buffers.length > 0) json.buffers[0].byteLength = blob.size;\n\n      if (options.binary) {\n        // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n        const reader = new window.FileReader();\n        reader.readAsArrayBuffer(blob);\n\n        reader.onloadend = () => {\n          if (reader.result !== null && typeof reader.result !== 'string') {\n            // Binary chunk.\n            const binaryChunk = this.getPaddedArrayBuffer(reader.result);\n            const binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n            binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\n            binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true); // JSON chunk.\n\n            const jsonChunk = this.getPaddedArrayBuffer(this.stringToArrayBuffer(JSON.stringify(json)), 0x20);\n            const jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n            jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\n            jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true); // GLB header.\n\n            const header = new ArrayBuffer(GLB_HEADER_BYTES);\n            const headerView = new DataView(header);\n            headerView.setUint32(0, GLB_HEADER_MAGIC, true);\n            headerView.setUint32(4, GLB_VERSION, true);\n            const totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n            headerView.setUint32(8, totalByteLength, true);\n            const glbBlob = new Blob([header, jsonChunkPrefix, jsonChunk, binaryChunkPrefix, binaryChunk], {\n              type: 'application/octet-stream'\n            });\n            const glbReader = new window.FileReader();\n            glbReader.readAsArrayBuffer(glbBlob);\n\n            glbReader.onloadend = function () {\n              if (glbReader.result !== null && typeof glbReader.result !== 'string') {\n                onDone(glbReader.result);\n              }\n            };\n          }\n        };\n      } else {\n        if (json.buffers && json.buffers.length > 0) {\n          const reader = new window.FileReader();\n          reader.readAsDataURL(blob);\n\n          reader.onloadend = function () {\n            const base64data = reader.result;\n\n            if (json.buffers !== undefined && base64data !== null) {\n              json.buffers[0].uri = base64data;\n              onDone(json);\n            }\n          };\n        } else {\n          onDone(json);\n        }\n      }\n    });\n  }\n  /**\n   * Serializes a userData.\n   *\n   * @param {THREE.Object3D|THREE.Material} object\n   * @param {Object} objectDef\n   */\n\n\n  serializeUserData(object, objectDef) {\n    if (Object.keys(object.userData).length === 0) return;\n    const options = this.options;\n    const extensionsUsed = this.extensionsUsed;\n\n    try {\n      const json = JSON.parse(JSON.stringify(object.userData));\n\n      if (options.includeCustomExtensions && json.gltfExtensions) {\n        if (objectDef.extensions === undefined) objectDef.extensions = {};\n\n        for (const extensionName in json.gltfExtensions) {\n          objectDef.extensions[extensionName] = json.gltfExtensions[extensionName];\n          extensionsUsed[extensionName] = true;\n        }\n\n        delete json.gltfExtensions;\n      }\n\n      if (Object.keys(json).length > 0) objectDef.extras = json;\n    } catch (error) {\n      if (error instanceof Error) {\n        console.warn(\"THREE.GLTFExporter: userData of '\" + object.name + \"' \" + \"won't be serialized because of JSON.stringify error - \" + error.message);\n      }\n    }\n  }\n  /**\n   * Assign and return a temporal unique id for an object\n   * especially which doesn't have .uuid\n   * @param  {Object} object\n   * @return {Integer}\n   */\n\n\n  getUID(object) {\n    if (!this.uids.has(object)) this.uids.set(object, this.uid++);\n    return this.uids.get(object);\n  }\n  /**\n   * Checks if normal attribute values are normalized.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {Boolean}\n   */\n\n\n  isNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal)) return false;\n    const v = new Vector3();\n\n    for (let i = 0, il = normal.count; i < il; i++) {\n      // 0.0005 is from glTF-validator\n      if (Math.abs(v.fromBufferAttribute(normal, i).length() - 1.0) > 0.0005) return false;\n    }\n\n    return true;\n  }\n  /**\n   * Creates normalized normal buffer attribute.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {BufferAttribute}\n   *\n   */\n\n\n  createNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal)) return cache.attributesNormalized.get(normal);\n    const attribute = normal.clone();\n    const v = new Vector3();\n\n    for (let i = 0, il = attribute.count; i < il; i++) {\n      v.fromBufferAttribute(attribute, i);\n\n      if (v.x === 0 && v.y === 0 && v.z === 0) {\n        // if values can't be normalized set (1, 0, 0)\n        v.setX(1.0);\n      } else {\n        v.normalize();\n      }\n\n      attribute.setXYZ(i, v.x, v.y, v.z);\n    }\n\n    cache.attributesNormalized.set(normal, attribute);\n    return attribute;\n  }\n  /**\n   * Applies a texture transform, if present, to the map definition. Requires\n   * the KHR_texture_transform extension.\n   *\n   * @param {Object} mapDef\n   * @param {THREE.Texture} texture\n   */\n\n\n  applyTextureTransform(mapDef, texture) {\n    let didTransform = false;\n    const transformDef = {};\n\n    if (texture.offset.x !== 0 || texture.offset.y !== 0) {\n      transformDef.offset = texture.offset.toArray();\n      didTransform = true;\n    }\n\n    if (texture.rotation !== 0) {\n      transformDef.rotation = texture.rotation;\n      didTransform = true;\n    }\n\n    if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {\n      transformDef.scale = texture.repeat.toArray();\n      didTransform = true;\n    }\n\n    if (didTransform) {\n      mapDef.extensions = mapDef.extensions || {};\n      mapDef.extensions['KHR_texture_transform'] = transformDef;\n      this.extensionsUsed['KHR_texture_transform'] = true;\n    }\n  }\n  /**\n   * Process a buffer to append to the default one.\n   * @param  {ArrayBuffer} buffer\n   * @return {Integer}\n   */\n\n\n  processBuffer(buffer) {\n    const json = this.json;\n    const buffers = this.buffers;\n    if (!json.buffers) json.buffers = [{\n      byteLength: 0\n    }]; // All buffers are merged before export.\n\n    buffers.push(buffer);\n    return 0;\n  }\n  /**\n   * Process and generate a BufferView\n   * @param  {BufferAttribute} attribute\n   * @param  {number} componentType\n   * @param  {number} start\n   * @param  {number} count\n   * @param  {number} target (Optional) Target usage of the BufferView\n   * @return {Object}\n   */\n\n\n  processBufferView(attribute, componentType, start, count, target) {\n    const json = this.json;\n    if (!json.bufferViews) json.bufferViews = []; // Create a new dataview and dump the attribute's array into it\n\n    let componentSize;\n\n    if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n      componentSize = 1;\n    } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n      componentSize = 2;\n    } else {\n      componentSize = 4;\n    }\n\n    const byteLength = this.getPaddedBufferSize(count * attribute.itemSize * componentSize);\n    const dataView = new DataView(new ArrayBuffer(byteLength));\n    let offset = 0;\n\n    for (let i = start; i < start + count; i++) {\n      for (let a = 0; a < attribute.itemSize; a++) {\n        let value;\n\n        if (attribute.itemSize > 4) {\n          // no support for interleaved data for itemSize > 4\n          value = attribute.array[i * attribute.itemSize + a];\n        } else {\n          if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n        }\n\n        if (value !== undefined) {\n          if (componentType === WEBGL_CONSTANTS.FLOAT) {\n            dataView.setFloat32(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {\n            dataView.setUint32(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n            dataView.setUint16(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n            dataView.setUint8(offset, value);\n          }\n        }\n\n        offset += componentSize;\n      }\n    }\n\n    const bufferViewDef = {\n      buffer: this.processBuffer(dataView.buffer),\n      byteOffset: this.byteOffset,\n      byteLength: byteLength\n    };\n    if (target !== undefined) bufferViewDef.target = target;\n\n    if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {\n      // Only define byteStride for vertex attributes.\n      bufferViewDef.byteStride = attribute.itemSize * componentSize;\n    }\n\n    this.byteOffset += byteLength;\n    json.bufferViews.push(bufferViewDef); // @TODO Merge bufferViews where possible.\n\n    const output = {\n      id: json.bufferViews.length - 1,\n      byteLength: 0\n    };\n    return output;\n  }\n  /**\n   * Process and generate a BufferView from an image Blob.\n   * @param {Blob} blob\n   * @return {Promise<Integer>}\n   */\n\n\n  processBufferViewImage(blob) {\n    const writer = this;\n    const json = writer.json;\n    if (!json.bufferViews) json.bufferViews = [];\n    return new Promise(resolve => {\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onloadend = () => {\n        if (reader.result !== null && typeof reader.result !== 'string' && json.bufferViews !== undefined) {\n          const buffer = this.getPaddedArrayBuffer(reader.result);\n          const bufferViewDef = {\n            buffer: writer.processBuffer(buffer),\n            byteOffset: writer.byteOffset,\n            byteLength: buffer.byteLength\n          };\n          writer.byteOffset += buffer.byteLength;\n          resolve(json.bufferViews.push(bufferViewDef) - 1);\n        }\n      };\n    });\n  }\n  /**\n   * Process attribute to generate an accessor\n   * @param  {BufferAttribute} attribute Attribute to process\n   * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n   * @param  {Integer} start (Optional)\n   * @param  {Integer} count (Optional)\n   * @return {Integer|null} Index of the processed accessor on the \"accessors\" array\n   */\n\n\n  processAccessor(attribute, geometry, start, count) {\n    const options = this.options;\n    const json = this.json;\n    const types = {\n      1: 'SCALAR',\n      2: 'VEC2',\n      3: 'VEC3',\n      4: 'VEC4',\n      16: 'MAT4'\n    };\n    let componentType; // Detect the component type of the attribute array (float, uint or ushort)\n\n    if (attribute.array.constructor === Float32Array) {\n      componentType = WEBGL_CONSTANTS.FLOAT;\n    } else if (attribute.array.constructor === Uint32Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n    } else if (attribute.array.constructor === Uint16Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n    } else if (attribute.array.constructor === Uint8Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n    } else {\n      throw new Error('THREE.GLTFExporter: Unsupported bufferAttribute component type.');\n    }\n\n    if (start === undefined) start = 0;\n    if (count === undefined) count = attribute.count; // @TODO Indexed buffer geometry with drawRange not supported yet\n\n    if (options.truncateDrawRange && geometry !== undefined && geometry.index === null) {\n      const end = start + count;\n      const end2 = geometry.drawRange.count === Infinity ? attribute.count : geometry.drawRange.start + geometry.drawRange.count;\n      start = Math.max(start, geometry.drawRange.start);\n      count = Math.min(end, end2) - start;\n      if (count < 0) count = 0;\n    } // Skip creating an accessor if the attribute doesn't have data to export\n\n\n    if (count === 0) return null;\n    const minMax = this.getMinMax(attribute, start, count);\n    let bufferViewTarget; // If geometry isn't provided, don't infer the target usage of the bufferView. For\n    // animation samplers, target must not be set.\n\n    if (geometry !== undefined) {\n      bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n    }\n\n    if (bufferViewTarget !== undefined) {\n      const bufferView = this.processBufferView(attribute, componentType, start, count, bufferViewTarget);\n      const accessorDef = {\n        bufferView: bufferView.id,\n        byteOffset: bufferView.byteOffset,\n        componentType: componentType,\n        count: count,\n        max: minMax.max,\n        min: minMax.min,\n        type: types[attribute.itemSize]\n      };\n      if (attribute.normalized) accessorDef.normalized = true;\n      if (!json.accessors) json.accessors = [];\n      return json.accessors.push(accessorDef) - 1;\n    }\n  }\n  /**\n   * Process image\n   * @param  {Image} image to process\n   * @param  {Integer} format of the image (RGBAFormat)\n   * @param  {Boolean} flipY before writing out the image\n   * @return {Integer}     Index of the processed texture in the \"images\" array\n   */\n\n\n  processImage(image, format, flipY) {\n    const writer = this;\n    const cache = writer.cache;\n    const json = writer.json;\n    const options = writer.options;\n    const pending = writer.pending;\n    if (!cache.images.has(image)) cache.images.set(image, {});\n    const cachedImages = cache.images.get(image);\n    const mimeType = format === RGBAFormat ? 'image/png' : 'image/jpeg';\n    const key = mimeType + ':flipY/' + flipY.toString();\n    if (cachedImages !== undefined && cachedImages[key] !== undefined) return cachedImages[key];\n    if (!json.images) json.images = [];\n    const imageDef = {\n      mimeType: mimeType\n    };\n\n    if (options.embedImages && options.maxTextureSize !== undefined) {\n      const canvas = this.cachedCanvas = this.cachedCanvas || document.createElement('canvas');\n      canvas.width = Math.min(image.width, options.maxTextureSize);\n      canvas.height = Math.min(image.height, options.maxTextureSize);\n      const ctx = canvas.getContext('2d');\n\n      if (flipY) {\n        ctx === null || ctx === void 0 ? void 0 : ctx.translate(0, canvas.height);\n        ctx === null || ctx === void 0 ? void 0 : ctx.scale(1, -1);\n      }\n\n      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n        ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      } else {\n        if (format !== RGBAFormat) {\n          console.error('GLTFExporter: Only RGBA format is supported.');\n        }\n\n        if (image.width > options.maxTextureSize || image.height > options.maxTextureSize) {\n          console.warn('GLTFExporter: Image size is bigger than maxTextureSize', image);\n        }\n\n        const data = new Uint8ClampedArray(image.height * image.width * 4);\n\n        if (image instanceof ImageData) {\n          for (let i = 0; i < data.length; i += 4) {\n            data[i + 0] = image.data[i + 0];\n            data[i + 1] = image.data[i + 1];\n            data[i + 2] = image.data[i + 2];\n            data[i + 3] = image.data[i + 3];\n          }\n        }\n\n        ctx === null || ctx === void 0 ? void 0 : ctx.putImageData(new ImageData(data, image.width, image.height), 0, 0);\n      }\n\n      if (options.binary) {\n        pending.push(new Promise(function (resolve) {\n          canvas.toBlob(function (blob) {\n            if (blob !== null) {\n              writer.processBufferViewImage(blob).then(function (bufferViewIndex) {\n                imageDef.bufferView = bufferViewIndex; // @ts-expect-error\n\n                resolve();\n              });\n            }\n          }, mimeType);\n        }));\n      } else {\n        imageDef.uri = canvas.toDataURL(mimeType);\n      }\n    } else if (image instanceof Image) {\n      imageDef.uri = image.src;\n    }\n\n    const index = json.images.push(imageDef) - 1;\n    if (cachedImages !== undefined) cachedImages[key] = index;\n    return index;\n  }\n  /**\n   * Process sampler\n   * @param  {Texture} map Texture to process\n   * @return {Integer}     Index of the processed texture in the \"samplers\" array\n   */\n\n\n  processSampler(map) {\n    const json = this.json;\n    if (!json.samplers) json.samplers = [];\n    const samplerDef = {\n      magFilter: THREE_TO_WEBGL[map.magFilter],\n      minFilter: THREE_TO_WEBGL[map.minFilter],\n      wrapS: THREE_TO_WEBGL[map.wrapS],\n      wrapT: THREE_TO_WEBGL[map.wrapT]\n    };\n    return json.samplers.push(samplerDef) - 1;\n  }\n  /**\n   * Process texture\n   * @param  {Texture} map Map to process\n   * @return {Integer} Index of the processed texture in the \"textures\" array\n   */\n\n\n  processTexture(map) {\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.textures.has(map)) return cache.textures.get(map);\n    if (!json.textures) json.textures = [];\n    const textureDef = {\n      sampler: this.processSampler(map),\n      source: this.processImage(map.image, map.format, map.flipY)\n    };\n    if (map.name) textureDef.name = map.name;\n\n    this._invokeAll(function (ext) {\n      ext.writeTexture && ext.writeTexture(map, textureDef);\n    });\n\n    const index = json.textures.push(textureDef) - 1;\n    cache.textures.set(map, index);\n    return index;\n  }\n  /**\n   * Process material\n   * @param  {THREE.Material} material Material to process\n   * @return {Integer|null} Index of the processed material in the \"materials\" array\n   */\n\n\n  processMaterial(material) {\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.materials.has(material)) return cache.materials.get(material);\n\n    if (material instanceof ShaderMaterial && material.isShaderMaterial) {\n      console.warn('GLTFExporter: THREE.ShaderMaterial not supported.');\n      return null;\n    }\n\n    if (!json.materials) json.materials = []; // @QUESTION Should we avoid including any attribute that has the default value?\n\n    const materialDef = {\n      pbrMetallicRoughness: {}\n    };\n\n    if (!(material instanceof MeshStandardMaterial && material.isMeshStandardMaterial && material instanceof MeshBasicMaterial && // @ts-expect-error\n    material.isMeshBasicMaterial)) {\n      console.warn('GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.');\n    }\n\n    if (material instanceof MeshStandardMaterial || material instanceof MeshPhysicalMaterial) {\n      // pbrMetallicRoughness.baseColorFactor\n      const color = material.color.toArray().concat([material.opacity]);\n\n      if (!this.equalArray(color, [1, 1, 1, 1])) {\n        materialDef.pbrMetallicRoughness.baseColorFactor = color;\n      }\n    }\n\n    if (material instanceof MeshStandardMaterial && material.isMeshStandardMaterial) {\n      materialDef.pbrMetallicRoughness.metallicFactor = material.metalness;\n      materialDef.pbrMetallicRoughness.roughnessFactor = material.roughness;\n    } else {\n      materialDef.pbrMetallicRoughness.metallicFactor = 0.5;\n      materialDef.pbrMetallicRoughness.roughnessFactor = 0.5;\n    } // pbrMetallicRoughness.metallicRoughnessTexture\n\n\n    if (material instanceof MeshStandardMaterial && material.metalnessMap || material instanceof MeshStandardMaterial && material.roughnessMap) {\n      if (material.metalnessMap === material.roughnessMap && material.metalnessMap !== null) {\n        const metalRoughMapDef = {\n          index: this.processTexture(material.metalnessMap)\n        };\n        this.applyTextureTransform(metalRoughMapDef, material.metalnessMap);\n        materialDef.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n      } else {\n        console.warn('THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.');\n      }\n    } // pbrMetallicRoughness.baseColorTexture or pbrSpecularGlossiness diffuseTexture\n\n\n    if ((material instanceof MeshStandardMaterial || material instanceof MeshPhysicalMaterial) && material.map) {\n      const baseColorMapDef = {\n        index: this.processTexture(material.map)\n      };\n      this.applyTextureTransform(baseColorMapDef, material.map);\n      materialDef.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n    }\n\n    if ((material instanceof MeshStandardMaterial || material instanceof MeshPhysicalMaterial) && material.emissive) {\n      // note: emissive components are limited to stay within the 0 - 1 range to accommodate glTF spec. see #21849 and #22000.\n      const emissive = material.emissive.clone().multiplyScalar(material.emissiveIntensity);\n      const maxEmissiveComponent = Math.max(emissive.r, emissive.g, emissive.b);\n\n      if (maxEmissiveComponent > 1) {\n        emissive.multiplyScalar(1 / maxEmissiveComponent);\n        console.warn('THREE.GLTFExporter: Some emissive components exceed 1; emissive has been limited');\n      }\n\n      if (maxEmissiveComponent > 0) {\n        materialDef.emissiveFactor = emissive.toArray();\n      } // emissiveTexture\n\n\n      if (material.emissiveMap) {\n        const emissiveMapDef = {\n          index: this.processTexture(material.emissiveMap)\n        };\n        this.applyTextureTransform(emissiveMapDef, material.emissiveMap);\n        materialDef.emissiveTexture = emissiveMapDef;\n      }\n    } // normalTexture\n\n\n    if ((material instanceof MeshMatcapMaterial || material instanceof MeshNormalMaterial || material instanceof MeshPhongMaterial || material instanceof MeshStandardMaterial || material instanceof MeshToonMaterial) && material.normalMap) {\n      const normalMapDef = {\n        index: this.processTexture(material.normalMap)\n      };\n\n      if (material.normalScale && material.normalScale.x !== 1) {\n        // glTF normal scale is univariate. Ignore `y`, which may be flipped.\n        // Context: https://github.com/mrdoob/three.js/issues/11438#issuecomment-507003995\n        normalMapDef.scale = material.normalScale.x;\n      }\n\n      this.applyTextureTransform(normalMapDef, material.normalMap);\n      materialDef.normalTexture = normalMapDef;\n    } // occlusionTexture\n\n\n    if ((material instanceof MeshBasicMaterial || material instanceof MeshLambertMaterial || material instanceof MeshPhongMaterial || material instanceof MeshStandardMaterial || material instanceof MeshToonMaterial) && material.aoMap) {\n      const occlusionMapDef = {\n        index: this.processTexture(material.aoMap),\n        texCoord: 1\n      };\n\n      if (material.aoMapIntensity !== 1.0) {\n        occlusionMapDef.strength = material.aoMapIntensity;\n      }\n\n      this.applyTextureTransform(occlusionMapDef, material.aoMap);\n      materialDef.occlusionTexture = occlusionMapDef;\n    } // alphaMode\n\n\n    if (material.transparent) {\n      materialDef.alphaMode = 'BLEND';\n    } else {\n      if (material.alphaTest > 0.0) {\n        materialDef.alphaMode = 'MASK';\n        materialDef.alphaCutoff = material.alphaTest;\n      }\n    } // doubleSided\n\n\n    if (material.side === DoubleSide) materialDef.doubleSided = true;\n    if (material.name !== '') materialDef.name = material.name;\n    this.serializeUserData(material, materialDef);\n\n    this._invokeAll(function (ext) {\n      ext.writeMaterial && ext.writeMaterial(material, materialDef);\n    });\n\n    const index = json.materials.push(materialDef) - 1;\n    cache.materials.set(material, index);\n    return index;\n  }\n  /**\n   * Process mesh\n   * @param  {THREE.Mesh} mesh Mesh to process\n   * @return {Integer|null} Index of the processed mesh in the \"meshes\" array\n   */\n\n\n  processMesh(mesh) {\n    const cache = this.cache;\n    const json = this.json;\n    const meshCacheKeyParts = [mesh.geometry.uuid];\n\n    if (Array.isArray(mesh.material)) {\n      for (let i = 0, l = mesh.material.length; i < l; i++) {\n        meshCacheKeyParts.push(mesh.material[i].uuid);\n      }\n    } else {\n      meshCacheKeyParts.push(mesh.material.uuid);\n    }\n\n    const meshCacheKey = meshCacheKeyParts.join(':');\n    if (cache.meshes.has(meshCacheKey)) return cache.meshes.get(meshCacheKey);\n    const geometry = mesh.geometry;\n    let mode; // Use the correct mode\n\n    if (mesh instanceof LineSegments && mesh.isLineSegments) {\n      mode = WEBGL_CONSTANTS.LINES;\n    } else if (mesh instanceof LineLoop && mesh.isLineLoop) {\n      mode = WEBGL_CONSTANTS.LINE_LOOP;\n    } else if (mesh instanceof Line && mesh.isLine) {\n      mode = WEBGL_CONSTANTS.LINE_STRIP;\n    } else if (mesh instanceof Points && mesh.isPoints) {\n      mode = WEBGL_CONSTANTS.POINTS;\n    } else {\n      mode = (mesh.material instanceof MeshBasicMaterial || mesh.material instanceof MeshDepthMaterial || mesh.material instanceof MeshLambertMaterial || mesh.material instanceof MeshNormalMaterial || mesh.material instanceof MeshPhongMaterial || mesh.material instanceof MeshStandardMaterial || mesh.material instanceof MeshToonMaterial || mesh.material instanceof ShaderMaterial) && mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n    }\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.GLTFExporter: Geometry is not of type THREE.BufferGeometry.');\n    }\n\n    const meshDef = {};\n    const attributes = {};\n    const primitives = [];\n    const targets = []; // Conversion between attributes names in threejs and gltf spec\n\n    const nameConversion = {\n      uv: 'TEXCOORD_0',\n      uv2: 'TEXCOORD_1',\n      color: 'COLOR_0',\n      skinWeight: 'WEIGHTS_0',\n      skinIndex: 'JOINTS_0'\n    };\n    const originalNormal = geometry.getAttribute('normal');\n\n    if (originalNormal !== undefined && !(originalNormal instanceof InterleavedBufferAttribute) && !this.isNormalizedNormalAttribute(originalNormal)) {\n      console.warn('THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.');\n      geometry.setAttribute('normal', this.createNormalizedNormalAttribute(originalNormal));\n    } // @QUESTION Detect if .vertexColors = true?\n    // For every attribute create an accessor\n\n\n    let modifiedAttribute = null;\n\n    for (let attributeName in geometry.attributes) {\n      // Ignore morph target attributes, which are exported later.\n      if (attributeName.substr(0, 5) === 'morph') continue;\n      const attribute = geometry.attributes[attributeName];\n      attributeName = nameConversion[attributeName] || attributeName.toUpperCase(); // Prefix all geometry attributes except the ones specifically\n      // listed in the spec; non-spec attributes are considered custom.\n\n      const validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n      if (!validVertexAttributes.test(attributeName)) attributeName = '_' + attributeName;\n\n      if (cache.attributes.has(this.getUID(attribute))) {\n        attributes[attributeName] = cache.attributes.get(this.getUID(attribute));\n        continue;\n      } // JOINTS_0 must be UNSIGNED_BYTE or UNSIGNED_SHORT.\n\n\n      modifiedAttribute = null;\n      const array = attribute.array;\n\n      if (attributeName === 'JOINTS_0' && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {\n        console.warn('GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.');\n        modifiedAttribute = new BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);\n      }\n\n      const accessor = modifiedAttribute !== null && this.processAccessor(modifiedAttribute || attribute, geometry);\n\n      if (accessor) {\n        attributes[attributeName] = accessor;\n        cache.attributes.set(this.getUID(attribute), accessor);\n      }\n    }\n\n    if (originalNormal !== undefined) geometry.setAttribute('normal', originalNormal); // Skip if no exportable attributes found\n\n    if (Object.keys(attributes).length === 0) return null; // Morph targets\n\n    if (mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0) {\n      const weights = [];\n      const targetNames = [];\n      const reverseDictionary = {};\n\n      if (mesh.morphTargetDictionary !== undefined) {\n        for (const key in mesh.morphTargetDictionary) {\n          reverseDictionary[mesh.morphTargetDictionary[key]] = key;\n        }\n      }\n\n      for (let i = 0; i < mesh.morphTargetInfluences.length; ++i) {\n        const target = {};\n        let warned = false;\n\n        for (const attributeName in geometry.morphAttributes) {\n          // glTF 2.0 morph supports only POSITION/NORMAL/TANGENT.\n          // Three.js doesn't support TANGENT yet.\n          if (attributeName !== 'position' && attributeName !== 'normal') {\n            if (!warned) {\n              console.warn('GLTFExporter: Only POSITION and NORMAL morph are supported.');\n              warned = true;\n            }\n\n            continue;\n          }\n\n          const attribute = geometry.morphAttributes[attributeName][i];\n          const gltfAttributeName = attributeName.toUpperCase(); // Three.js morph attribute has absolute values while the one of glTF has relative values.\n          //\n          // glTF 2.0 Specification:\n          // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#morph-targets\n\n          const baseAttribute = geometry.attributes[attributeName];\n\n          if (cache.attributes.has(this.getUID(attribute))) {\n            target[gltfAttributeName] = cache.attributes.get(this.getUID(attribute));\n            continue;\n          } // Clones attribute not to override\n\n\n          const relativeAttribute = attribute.clone();\n\n          if (!geometry.morphTargetsRelative) {\n            for (let j = 0, jl = attribute.count; j < jl; j++) {\n              relativeAttribute.setXYZ(j, attribute.getX(j) - baseAttribute.getX(j), attribute.getY(j) - baseAttribute.getY(j), attribute.getZ(j) - baseAttribute.getZ(j));\n            }\n          }\n\n          const accessor = this.processAccessor(relativeAttribute, geometry);\n\n          if (accessor != undefined) {\n            target[gltfAttributeName] = accessor;\n          }\n\n          cache.attributes.set(this.getUID(baseAttribute), target[gltfAttributeName]);\n        }\n\n        targets.push(target);\n        weights.push(mesh.morphTargetInfluences[i]);\n        if (mesh.morphTargetDictionary !== undefined) targetNames.push(reverseDictionary[i]);\n      }\n\n      meshDef.weights = weights;\n\n      if (targetNames.length > 0) {\n        meshDef.extras = {};\n        meshDef.extras.targetNames = targetNames;\n      }\n    }\n\n    const isMultiMaterial = Array.isArray(mesh.material);\n    if (isMultiMaterial && geometry.groups.length === 0) return null;\n    const materials = isMultiMaterial ? mesh.material : [mesh.material];\n    const groups = isMultiMaterial ? geometry.groups : [{\n      materialIndex: 0,\n      start: undefined,\n      count: undefined\n    }];\n\n    for (let i = 0, il = groups.length; i < il; i++) {\n      const primitive = {\n        mode: mode,\n        attributes: attributes\n      };\n\n      if (geometry instanceof Object3D || geometry instanceof Material) {\n        this.serializeUserData(geometry, primitive);\n      }\n\n      if (targets.length > 0) primitive.targets = targets;\n\n      if (geometry.index !== null) {\n        let cacheKey = this.getUID(geometry.index);\n\n        if (groups[i].start !== undefined || groups[i].count !== undefined) {\n          // @ts-expect-error\n          cacheKey += `:${groups[i].start}:${groups[i].count}`;\n        }\n\n        if (cache.attributes.has(cacheKey)) {\n          primitive.indices = cache.attributes.get(cacheKey);\n        } else {\n          primitive.indices = this.processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);\n          cache.attributes.set(cacheKey, primitive.indices);\n        }\n\n        if (primitive.indices === null) delete primitive.indices;\n      }\n\n      const materialIndex = groups[i].materialIndex;\n\n      if (materialIndex !== undefined && Array.isArray(materials)) {\n        const targetMaterials = materials[materialIndex];\n\n        if (!Array.isArray(targetMaterials)) {\n          const material = this.processMaterial(targetMaterials);\n          if (material !== null) primitive.material = material;\n          primitives.push(primitive);\n        }\n      }\n    }\n\n    meshDef.primitives = primitives;\n    if (!json.meshes) json.meshes = [];\n\n    this._invokeAll(function (ext) {\n      ext.writeMesh && ext.writeMesh(mesh, meshDef);\n    });\n\n    const index = json.meshes.push(meshDef) - 1;\n    cache.meshes.set(meshCacheKey, index);\n    return index;\n  }\n  /**\n   * Process camera\n   * @param  {THREE.Camera} camera Camera to process\n   * @return {Integer}      Index of the processed mesh in the \"camera\" array\n   */\n\n\n  processCamera(camera) {\n    const json = this.json;\n    if (!json.cameras) json.cameras = [];\n    const isOrtho = camera instanceof OrthographicCamera && camera.isOrthographicCamera;\n    const cameraDef = {\n      type: isOrtho ? 'orthographic' : 'perspective'\n    };\n\n    if (camera instanceof OrthographicCamera && isOrtho) {\n      cameraDef.orthographic = {\n        xmag: camera.right * 2,\n        ymag: camera.top * 2,\n        zfar: camera.far <= 0 ? 0.001 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    } else if (camera instanceof PerspectiveCamera) {\n      cameraDef.perspective = {\n        aspectRatio: camera.aspect,\n        yfov: MathUtils.degToRad(camera.fov),\n        zfar: camera.far <= 0 ? 0.001 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    } // Question: Is saving \"type\" as name intentional?\n\n\n    if (camera.name !== '') cameraDef.name = camera.type;\n    return json.cameras.push(cameraDef) - 1;\n  }\n  /**\n   * Creates glTF animation entry from AnimationClip object.\n   *\n   * Status:\n   * - Only properties listed in PATH_PROPERTIES may be animated.\n   *\n   * @param {THREE.AnimationClip} clip\n   * @param {THREE.Object3D} root\n   * @return {number|null}\n   */\n\n\n  processAnimation(clip, root) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n    if (!json.animations) json.animations = [];\n    clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);\n    const tracks = clip.tracks;\n    const channels = [];\n    const samplers = [];\n\n    for (let i = 0; i < tracks.length; ++i) {\n      const track = tracks[i];\n      const trackBinding = PropertyBinding.parseTrackName(track.name);\n      let trackNode = PropertyBinding.findNode(root, trackBinding.nodeName);\n      const trackProperty = PATH_PROPERTIES[trackBinding.propertyName];\n\n      if (trackBinding.objectName === 'bones') {\n        if (trackNode.isSkinnedMesh) {\n          trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);\n        } else {\n          trackNode = undefined;\n        }\n      }\n\n      if (!trackNode || !trackProperty) {\n        console.warn('THREE.GLTFExporter: Could not export animation track \"%s\".', track.name);\n        return null;\n      }\n\n      const inputItemSize = 1;\n      let outputItemSize = track.values.length / track.times.length;\n\n      if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {\n        outputItemSize /= trackNode.morphTargetInfluences.length;\n      }\n\n      let interpolation; // @TODO export CubicInterpolant(InterpolateSmooth) as CUBICSPLINE\n      // Detecting glTF cubic spline interpolant by checking factory method's special property\n      // GLTFCubicSplineInterpolant is a custom interpolant and track doesn't return\n      // valid value from .getInterpolation().\n      // @ts-expect-error\n\n      if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n        interpolation = 'CUBICSPLINE'; // itemSize of CUBICSPLINE keyframe is 9\n        // (VEC3 * 3: inTangent, splineVertex, and outTangent)\n        // but needs to be stored as VEC3 so dividing by 3 here.\n\n        outputItemSize /= 3;\n      } else if (track.getInterpolation() === InterpolateDiscrete) {\n        interpolation = 'STEP';\n      } else {\n        interpolation = 'LINEAR';\n      }\n\n      samplers.push({\n        input: this.processAccessor(new BufferAttribute(track.times, inputItemSize)),\n        output: this.processAccessor(new BufferAttribute(track.values, outputItemSize)),\n        interpolation: interpolation\n      });\n      channels.push({\n        sampler: samplers.length - 1,\n        target: {\n          node: nodeMap.get(trackNode),\n          path: trackProperty\n        }\n      });\n    }\n\n    json.animations.push({\n      name: clip.name || 'clip_' + json.animations.length,\n      samplers: samplers,\n      channels: channels\n    });\n    return json.animations.length - 1;\n  }\n  /**\n   * @param {THREE.Object3D} object\n   * @return {number|null}\n   */\n\n\n  processSkin(object) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n\n    if (json.nodes !== undefined && object instanceof SkinnedMesh) {\n      const node = json.nodes[nodeMap.get(object)];\n      const skeleton = object.skeleton;\n      if (skeleton === undefined) return null;\n      const rootJoint = object.skeleton.bones[0];\n      if (rootJoint === undefined) return null;\n      const joints = [];\n      const inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);\n      const temporaryBoneInverse = new Matrix4();\n\n      for (let i = 0; i < skeleton.bones.length; ++i) {\n        joints.push(nodeMap.get(skeleton.bones[i]));\n        temporaryBoneInverse.copy(skeleton.boneInverses[i]);\n        temporaryBoneInverse.multiply(object.bindMatrix).toArray(inverseBindMatrices, i * 16);\n      }\n\n      if (json.skins === undefined) json.skins = [];\n      json.skins.push({\n        inverseBindMatrices: this.processAccessor(new BufferAttribute(inverseBindMatrices, 16)),\n        joints: joints,\n        skeleton: nodeMap.get(rootJoint)\n      });\n      const skinIndex = node.skin = json.skins.length - 1;\n      return skinIndex;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Process Object3D node\n   * @param  {THREE.Object3D} node Object3D to processNode\n   * @return {Integer} Index of the node in the nodes list\n   */\n\n\n  processNode(object) {\n    const json = this.json;\n    const options = this.options;\n    const nodeMap = this.nodeMap;\n    if (!json.nodes) json.nodes = [];\n    const nodeDef = {};\n\n    if (options.trs) {\n      const rotation = object.quaternion.toArray();\n      const position = object.position.toArray();\n      const scale = object.scale.toArray();\n\n      if (!this.equalArray(rotation, [0, 0, 0, 1])) {\n        nodeDef.rotation = rotation;\n      }\n\n      if (!this.equalArray(position, [0, 0, 0])) {\n        nodeDef.translation = position;\n      }\n\n      if (!this.equalArray(scale, [1, 1, 1])) {\n        nodeDef.scale = scale;\n      }\n    } else {\n      if (object.matrixAutoUpdate) {\n        object.updateMatrix();\n      }\n\n      if (!this.isIdentityMatrix(object.matrix)) {\n        nodeDef.matrix = object.matrix.elements;\n      }\n    } // We don't export empty strings name because it represents no-name in Three.js.\n\n\n    if (object.name !== '') nodeDef.name = String(object.name);\n    this.serializeUserData(object, nodeDef);\n\n    if ((object instanceof Mesh && object.isMesh || object instanceof Line && object.isLine || object instanceof Points && object.isPoints) && object instanceof Mesh) {\n      const meshIndex = this.processMesh(object);\n      if (meshIndex !== null) nodeDef.mesh = meshIndex;\n    } else if (object instanceof Camera && object.isCamera) {\n      nodeDef.camera = this.processCamera(object);\n    }\n\n    if (object instanceof SkinnedMesh && object.isSkinnedMesh) this.skins.push(object);\n\n    if (object.children.length > 0) {\n      const children = [];\n\n      for (let i = 0, l = object.children.length; i < l; i++) {\n        const child = object.children[i];\n\n        if (child.visible || !options.onlyVisible) {\n          const nodeIndex = this.processNode(child);\n          if (nodeIndex !== null) children.push(nodeIndex);\n        }\n      }\n\n      if (children.length > 0) nodeDef.children = children;\n    }\n\n    this._invokeAll(function (ext) {\n      ext.writeNode && ext.writeNode(object, nodeDef);\n    });\n\n    const nodeIndex = json.nodes.push(nodeDef) - 1;\n    nodeMap.set(object, nodeIndex);\n    return nodeIndex;\n  }\n  /**\n   * Process Scene\n   * @param  {Scene} node Scene to process\n   */\n\n\n  processScene(scene) {\n    const json = this.json;\n    const options = this.options;\n\n    if (!json.scenes) {\n      json.scenes = [];\n      json.scene = 0;\n    }\n\n    const sceneDef = {};\n    if (scene.name !== '') sceneDef.name = scene.name;\n    json.scenes.push(sceneDef);\n    const nodes = [];\n\n    for (let i = 0, l = scene.children.length; i < l; i++) {\n      const child = scene.children[i];\n\n      if (child.visible || !options.onlyVisible) {\n        const nodeIndex = this.processNode(child);\n        if (nodeIndex !== null) nodes.push(nodeIndex);\n      }\n    }\n\n    if (nodes.length > 0) sceneDef.nodes = nodes;\n    this.serializeUserData(scene, sceneDef);\n  }\n\n  processObjects(objects) {\n    const scene = new Scene();\n    scene.name = 'AuxScene';\n\n    for (let i = 0; i < objects.length; i++) {\n      // We push directly to children instead of calling `add` to prevent\n      // modify the .parent and break its original scene and hierarchy\n      scene.children.push(objects[i]);\n    }\n\n    this.processScene(scene);\n  }\n  /**\n   * @param {THREE.Object3D|Array<THREE.Object3D>} input\n   */\n\n\n  processInput(input) {\n    const options = this.options;\n    input = input instanceof Array ? input : [input];\n\n    this._invokeAll(function (ext) {\n      ext.beforeParse && ext.beforeParse(input);\n    });\n\n    const objectsWithoutScene = [];\n\n    for (let i = 0; i < input.length; i++) {\n      const inputScene = input[i];\n\n      if (inputScene instanceof Scene) {\n        this.processScene(inputScene);\n      } else {\n        objectsWithoutScene.push(input[i]);\n      }\n    }\n\n    if (objectsWithoutScene.length > 0) this.processObjects(objectsWithoutScene);\n\n    for (let i = 0; i < this.skins.length; ++i) {\n      this.processSkin(this.skins[i]);\n    }\n\n    for (let i = 0; options.animations !== undefined && i < options.animations.length; ++i) {\n      this.processAnimation(options.animations[i], input[0]);\n    }\n\n    this._invokeAll(function (ext) {\n      ext.afterParse && ext.afterParse(input);\n    });\n  }\n\n  _invokeAll(func) {\n    for (let i = 0, il = this.plugins.length; i < il; i++) {\n      func(this.plugins[i]);\n    }\n  } //------------------------------------------------------------------------------\n  // Utility functions\n  //------------------------------------------------------------------------------\n\n  /**\n   * Compare two arrays\n   * @param  {Array} array1 Array 1 to compare\n   * @param  {Array} array2 Array 2 to compare\n   * @return {Boolean}        Returns true if both arrays are equal\n   */\n\n\n  equalArray(array1, array2) {\n    return array1.length === array2.length && array1.every(function (element, index) {\n      return element === array2[index];\n    });\n  }\n  /**\n   * Converts a string to an ArrayBuffer.\n   * @param  {string} text\n   * @return {ArrayBuffer}\n   */\n\n\n  stringToArrayBuffer(text) {\n    if (window.TextEncoder !== undefined) {\n      return new TextEncoder().encode(text).buffer;\n    }\n\n    const array = new Uint8Array(new ArrayBuffer(text.length));\n\n    for (let i = 0, il = text.length; i < il; i++) {\n      const value = text.charCodeAt(i); // Replacing multi-byte character with space(0x20).\n\n      array[i] = value > 0xff ? 0x20 : value;\n    }\n\n    return array.buffer;\n  }\n\n  isIdentityMatrix(matrix) {\n    return this.equalArray(matrix.elements, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n  }\n\n  getMinMax(attribute, start, count) {\n    const output = {\n      min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),\n      max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)\n    };\n\n    for (let i = start; i < start + count; i++) {\n      for (let a = 0; a < attribute.itemSize; a++) {\n        let value;\n\n        if (attribute.itemSize > 4) {\n          // no support for interleaved data for itemSize > 4\n          value = attribute.array[i * attribute.itemSize + a];\n        } else {\n          if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n        }\n\n        if (value !== undefined) {\n          output.min[a] = Math.min(output.min[a], value);\n          output.max[a] = Math.max(output.max[a], value);\n        }\n      }\n    }\n\n    return output;\n  }\n  /**\n   * Get the required size + padding for a buffer, rounded to the next 4-byte boundary.\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment\n   */\n\n\n  getPaddedBufferSize(bufferSize) {\n    return Math.ceil(bufferSize / 4) * 4;\n  }\n  /**\n   * Returns a buffer aligned to 4-byte boundary.\n   *\n   * @param {ArrayBuffer} arrayBuffer Buffer to pad\n   * @param {Integer} paddingByte (Optional)\n   * @returns {ArrayBuffer} The same buffer if it's already aligned to 4-byte boundary or a new buffer\n   */\n\n\n  getPaddedArrayBuffer(arrayBuffer, paddingByte = 0) {\n    const paddedLength = this.getPaddedBufferSize(arrayBuffer.byteLength);\n\n    if (paddedLength !== arrayBuffer.byteLength) {\n      const array = new Uint8Array(paddedLength);\n      array.set(new Uint8Array(arrayBuffer));\n\n      if (paddingByte !== 0) {\n        for (let i = arrayBuffer.byteLength; i < paddedLength; i++) {\n          array[i] = paddingByte;\n        }\n      }\n\n      return array.buffer;\n    }\n\n    return arrayBuffer;\n  }\n\n}\n/**\n * Punctual Lights Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n */\n\n\nclass GLTFLightExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_lights_punctual';\n  }\n\n  writeNode(light, nodeDef) {\n    if (!light.isLight) return;\n\n    if (!(light instanceof DirectionalLight && light.isDirectionalLight) && // @ts-expect-error\n    !(light instanceof PointLight && light.isPointLight) && !(light instanceof SpotLight && light.isSpotLight)) {\n      console.warn('THREE.GLTFExporter: Only directional, point, and spot lights are supported.', light);\n      return;\n    }\n\n    const writer = this.writer;\n    const json = writer.json;\n    const extensionsUsed = writer.extensionsUsed;\n    const lightDef = {};\n    if (light.name) lightDef.name = light.name;\n    lightDef.color = light.color.toArray();\n    lightDef.intensity = light.intensity;\n\n    if (light instanceof DirectionalLight && light.isDirectionalLight) {\n      lightDef.type = 'directional';\n    } else if (light instanceof PointLight && // @ts-expect-error\n    light.isPointLight) {\n      lightDef.type = 'point';\n      if (light.distance > 0) lightDef.range = light.distance;\n    } else if (light instanceof SpotLight && light.isSpotLight) {\n      lightDef.type = 'spot';\n      if (light.distance > 0) lightDef.range = light.distance;\n      lightDef.spot = {};\n      lightDef.spot.innerConeAngle = (light.penumbra - 1.0) * light.angle * -1.0;\n      lightDef.spot.outerConeAngle = light.angle;\n    }\n\n    if (!(light instanceof DirectionalLight) && light.decay !== undefined && light.decay !== 2) {\n      console.warn('THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, ' + 'and expects light.decay=2.');\n    }\n\n    if (!(light instanceof PointLight) && light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {\n      console.warn('THREE.GLTFExporter: Light direction may be lost. For best results, ' + 'make light.target a child of the light with position 0,0,-1.');\n    }\n\n    if (!extensionsUsed[this.name]) {\n      json.extensions = json.extensions || {};\n      json.extensions[this.name] = {\n        lights: []\n      };\n      extensionsUsed[this.name] = true;\n    }\n\n    if (json.extensions !== undefined) {\n      const lights = json.extensions[this.name].lights;\n      lights.push(lightDef);\n      nodeDef.extensions = nodeDef.extensions || {};\n      nodeDef.extensions[this.name] = {\n        light: lights.length - 1\n      };\n    }\n  }\n\n}\n/**\n * Unlit Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n */\n\n\nclass GLTFMaterialsUnlitExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_materials_unlit';\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!(material instanceof MeshBasicMaterial && // @ts-expect-error\n    material.isMeshBasicMaterial)) {\n      return;\n    }\n\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = {};\n    extensionsUsed[this.name] = true;\n    materialDef.pbrMetallicRoughness.metallicFactor = 0.0;\n    materialDef.pbrMetallicRoughness.roughnessFactor = 0.9;\n  }\n\n}\n/**\n * Specular-Glossiness Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n */\n\n\nclass GLTFMaterialsPBRSpecularGlossiness {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_materials_pbrSpecularGlossiness';\n  }\n\n  writeMaterial(material, materialDef) {\n    // @ts-expect-error\n    if (!material.isGLTFSpecularGlossinessMaterial) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n\n    if (materialDef.pbrMetallicRoughness.baseColorFactor) {\n      extensionDef.diffuseFactor = materialDef.pbrMetallicRoughness.baseColorFactor;\n    }\n\n    if (material instanceof MeshPhongMaterial) {\n      const specularFactor = [1, 1, 1];\n      material.specular.toArray(specularFactor, 0);\n      extensionDef.specularFactor = specularFactor;\n      extensionDef.glossinessFactor = // @ts-expect-error\n      material.glossiness;\n    }\n\n    if (materialDef.pbrMetallicRoughness.baseColorTexture) {\n      extensionDef.diffuseTexture = materialDef.pbrMetallicRoughness.baseColorTexture;\n    }\n\n    if ((material instanceof MeshBasicMaterial || material instanceof MeshLambertMaterial || material instanceof MeshPhongMaterial) && material.specularMap) {\n      const specularMapDef = {\n        index: writer.processTexture(material.specularMap)\n      };\n      writer.applyTextureTransform(specularMapDef, material.specularMap);\n      extensionDef.specularGlossinessTexture = specularMapDef;\n    }\n\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n/**\n * Transmission Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_transmission\n */\n\n\nclass GLTFMaterialsTransmissionExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_materials_transmission';\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!(material instanceof MeshPhysicalMaterial && // @ts-expect-error\n    material.isMeshPhysicalMaterial) || material.transmission === 0) {\n      return;\n    }\n\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.transmissionFactor = material.transmission;\n\n    if (material.transmissionMap) {\n      const transmissionMapDef = {\n        index: writer.processTexture(material.transmissionMap)\n      };\n      writer.applyTextureTransform(transmissionMapDef, material.transmissionMap);\n      extensionDef.transmissionTexture = transmissionMapDef;\n    }\n\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n/**\n * Materials Volume Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_volume\n */\n\n\nclass GLTFMaterialsVolumeExtension {\n  constructor(writer) {\n    _defineProperty(this, \"writer\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.writer = writer;\n    this.name = 'KHR_materials_volume';\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!(material instanceof MeshPhysicalMaterial && // @ts-expect-error\n    material.isMeshPhysicalMaterial) || material.thickness === 0) {\n      return;\n    }\n\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.thickness = material.thickness;\n\n    if (material.thicknessMap) {\n      const thicknessMapDef = {\n        index: writer.processTexture(material.thicknessMap)\n      };\n      writer.applyTextureTransform(thicknessMapDef, material.thicknessMap);\n      extensionDef.thicknessTexture = thicknessMapDef;\n    }\n\n    extensionDef.attenuationDistance = material.attenuationDistance;\n    extensionDef.attenuationColor = //@ts-expect-error\n    material.attenuationTint.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n\nexport { GLTFExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}