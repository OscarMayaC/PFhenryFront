{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { useFBO } from './useFBO.js';\nimport { useHelper } from './useHelper.js';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { Edges } from './Edges.js';\nimport { FullScreenQuad } from 'three-stdlib';\nfunction createNormalMaterial() {\n  let side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : THREE.FrontSide;\n  const viewMatrix = {\n    value: new THREE.Matrix4()\n  };\n  return Object.assign(new THREE.MeshNormalMaterial({\n    side\n  }), {\n    viewMatrix,\n    onBeforeCompile: shader => {\n      shader.uniforms.viewMatrix = viewMatrix;\n      shader.fragmentShader = `vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n           return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n         }\\n` + shader.fragmentShader.replace('#include <normal_fragment_maps>', `#include <normal_fragment_maps>\n           normal = inverseTransformDirection( normal, viewMatrix );\\n`);\n    }\n  });\n}\nconst CausticsProjectionMaterial = shaderMaterial({\n  causticsTexture: null,\n  causticsTextureB: null,\n  color: new THREE.Color(),\n  lightProjMatrix: new THREE.Matrix4(),\n  lightViewMatrix: new THREE.Matrix4()\n}, `varying vec3 vWorldPosition;   \n   void main() {\n     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n     vec4 worldPosition = modelMatrix * vec4(position, 1.);\n     vWorldPosition = worldPosition.xyz;\n   }`, `varying vec3 vWorldPosition;\n  uniform vec3 color;\n  uniform sampler2D causticsTexture; \n  uniform sampler2D causticsTextureB; \n  uniform mat4 lightProjMatrix;\n  uniform mat4 lightViewMatrix;\n   void main() {\n    // Apply caustics  \n    vec4 lightSpacePos = lightProjMatrix * lightViewMatrix * vec4(vWorldPosition, 1.0);\n    lightSpacePos.xyz /= lightSpacePos.w;\n    lightSpacePos.xyz = lightSpacePos.xyz * 0.5 + 0.5; \n    vec3 front = texture2D(causticsTexture, lightSpacePos.xy).rgb;\n    vec3 back = texture2D(causticsTextureB, lightSpacePos.xy).rgb;\n    gl_FragColor = vec4((front + back) * color, 1.0);\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n   }`);\nconst CausticsMaterial = shaderMaterial({\n  cameraMatrixWorld: new THREE.Matrix4(),\n  cameraProjectionMatrixInv: new THREE.Matrix4(),\n  normalTexture: null,\n  depthTexture: null,\n  lightDir: new THREE.Vector3(0, 1, 0),\n  lightPlaneNormal: new THREE.Vector3(0, 1, 0),\n  lightPlaneConstant: 0,\n  near: 0.1,\n  far: 100,\n  modelMatrix: new THREE.Matrix4(),\n  worldRadius: 1 / 40,\n  ior: 1.1,\n  bounces: 0,\n  resolution: 1024,\n  size: 10,\n  intensity: 0.5\n}, /* glsl */\n`\n  varying vec2 vUv;\n  void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }`, /* glsl */\n`  \n  uniform mat4 cameraMatrixWorld;\n  uniform mat4 cameraProjectionMatrixInv;\n  uniform vec3 lightDir;\n  uniform vec3 lightPlaneNormal;\n  uniform float lightPlaneConstant;\n  uniform float near;\n  uniform float far;\n  uniform float time;\n  uniform float worldRadius;\n  uniform float resolution;\n  uniform float size;\n  uniform float intensity;\n  uniform float ior;\n  precision highp isampler2D;\n  precision highp usampler2D;\n  uniform sampler2D normalTexture;\n  uniform sampler2D depthTexture;\n  uniform float bounces;\n  varying vec2 vUv;\n  vec3 WorldPosFromDepth(float depth, vec2 coord) {\n    float z = depth * 2.0 - 1.0;\n    vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\n    vec4 viewSpacePosition = cameraProjectionMatrixInv * clipSpacePosition;\n    // Perspective division\n    viewSpacePosition /= viewSpacePosition.w;\n    vec4 worldSpacePosition = cameraMatrixWorld * viewSpacePosition;\n    return worldSpacePosition.xyz;\n  }                  \n  float sdPlane( vec3 p, vec3 n, float h ) {\n    // n must be normalized\n    return dot(p,n) + h;\n  }\n  float planeIntersect( vec3 ro, vec3 rd, vec4 p ) {\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n  }\n  vec3 totalInternalReflection(vec3 ro, vec3 rd, vec3 pos, vec3 normal, float ior, out vec3 rayOrigin, out vec3 rayDirection) {\n    rayOrigin = ro;\n    rayDirection = rd;\n    rayDirection = refract(rayDirection, normal, 1.0 / ior);\n    rayOrigin = pos + rayDirection * 0.1;\n    return rayDirection;\n  }\n  void main() {\n    // Each sample consists of random offset in the x and y direction\n    float caustic = 0.0;\n    float causticTexelSize = (1.0 / resolution) * size * 2.0;\n    float texelsNeeded = worldRadius / causticTexelSize;\n    float sampleRadius = texelsNeeded / resolution;\n    float sum = 0.0;\n    if (texture2D(depthTexture, vUv).x == 1.0) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      return;\n    }\n    vec2 offset1 = vec2(-0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset2 = vec2(-0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset3 = vec2(0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset4 = vec2(0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 uv1 = vUv + offset1 * sampleRadius;\n    vec2 uv2 = vUv + offset2 * sampleRadius;\n    vec2 uv3 = vUv + offset3 * sampleRadius;\n    vec2 uv4 = vUv + offset4 * sampleRadius;\n    vec3 normal1 = texture2D(normalTexture, uv1, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal2 = texture2D(normalTexture, uv2, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal3 = texture2D(normalTexture, uv3, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal4 = texture2D(normalTexture, uv4, -10.0).rgb * 2.0 - 1.0;\n    float depth1 = texture2D(depthTexture, uv1, -10.0).x;\n    float depth2 = texture2D(depthTexture, uv2, -10.0).x;\n    float depth3 = texture2D(depthTexture, uv3, -10.0).x;\n    float depth4 = texture2D(depthTexture, uv4, -10.0).x;\n    // Sanity check the depths\n    if (depth1 == 1.0 || depth2 == 1.0 || depth3 == 1.0 || depth4 == 1.0) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      return;\n    }\n    vec3 pos1 = WorldPosFromDepth(depth1, uv1);\n    vec3 pos2 = WorldPosFromDepth(depth2, uv2);\n    vec3 pos3 = WorldPosFromDepth(depth3, uv3);\n    vec3 pos4 = WorldPosFromDepth(depth4, uv4);\n    vec3 originPos1 = WorldPosFromDepth(0.0, uv1);\n    vec3 originPos2 = WorldPosFromDepth(0.0, uv2);\n    vec3 originPos3 = WorldPosFromDepth(0.0, uv3);\n    vec3 originPos4 = WorldPosFromDepth(0.0, uv4);\n    vec3 endPos1, endPos2, endPos3, endPos4;\n    vec3 endDir1, endDir2, endDir3, endDir4;\n    totalInternalReflection(originPos1, lightDir, pos1, normal1, ior, endPos1, endDir1);\n    totalInternalReflection(originPos2, lightDir, pos2, normal2, ior, endPos2, endDir2);\n    totalInternalReflection(originPos3, lightDir, pos3, normal3, ior, endPos3, endDir3);\n    totalInternalReflection(originPos4, lightDir, pos4, normal4, ior, endPos4, endDir4);\n    float lightPosArea = length(cross(originPos2 - originPos1, originPos3 - originPos1)) + length(cross(originPos3 - originPos1, originPos4 - originPos1));\n    float t1 = planeIntersect(endPos1, endDir1, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t2 = planeIntersect(endPos2, endDir2, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t3 = planeIntersect(endPos3, endDir3, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t4 = planeIntersect(endPos4, endDir4, vec4(lightPlaneNormal, lightPlaneConstant));\n    vec3 finalPos1 = endPos1 + endDir1 * t1;\n    vec3 finalPos2 = endPos2 + endDir2 * t2;\n    vec3 finalPos3 = endPos3 + endDir3 * t3;\n    vec3 finalPos4 = endPos4 + endDir4 * t4;\n    float finalArea = length(cross(finalPos2 - finalPos1, finalPos3 - finalPos1)) + length(cross(finalPos3 - finalPos1, finalPos4 - finalPos1));\n    caustic += intensity * (lightPosArea / finalArea);\n    // Calculate the area of the triangle in light spaces\n    gl_FragColor = vec4(vec3(max(caustic, 0.0)), 1.0);\n  }`);\nconst NORMALPROPS = {\n  depth: true,\n  minFilter: THREE.LinearFilter,\n  magFilter: THREE.LinearFilter,\n  encoding: THREE.LinearEncoding,\n  type: THREE.UnsignedByteType\n};\nconst CAUSTICPROPS = {\n  minFilter: THREE.LinearMipmapLinearFilter,\n  magFilter: THREE.LinearFilter,\n  encoding: THREE.LinearEncoding,\n  format: THREE.RGBAFormat,\n  type: THREE.FloatType,\n  generateMipmaps: true\n};\nconst Caustics = /*#__PURE__*/React.forwardRef((_ref, fref) => {\n  let {\n    debug,\n    children,\n    frames = 1,\n    ior = 1.1,\n    color = 'white',\n    causticsOnly = false,\n    backside = false,\n    backsideIOR = 1.1,\n    worldRadius = 0.3125,\n    intensity = 0.05,\n    resolution = 2024,\n    lightSource = [5, 5, 5],\n    ...props\n  } = _ref;\n  extend({\n    CausticsProjectionMaterial\n  });\n  const ref = React.useRef(null);\n  const camera = React.useRef(null);\n  const scene = React.useRef(null);\n  const plane = React.useRef(null);\n  const gl = useThree(state => state.gl);\n  const helper = useHelper(debug && camera, THREE.CameraHelper); // Buffers for front and back faces\n\n  const normalTarget = useFBO(resolution, resolution, NORMALPROPS);\n  const normalTargetB = useFBO(resolution, resolution, NORMALPROPS);\n  const causticsTarget = useFBO(resolution, resolution, CAUSTICPROPS);\n  const causticsTargetB = useFBO(resolution, resolution, CAUSTICPROPS); // Normal materials for front and back faces\n\n  const [normalMat] = React.useState(() => createNormalMaterial());\n  const [normalMatB] = React.useState(() => createNormalMaterial(THREE.BackSide)); // The quad that catches the caustics\n\n  const [causticsMaterial] = React.useState(() => new CausticsMaterial());\n  const [causticsQuad] = React.useState(() => new FullScreenQuad(causticsMaterial));\n  React.useLayoutEffect(() => {\n    ref.current.updateWorldMatrix(false, true);\n  });\n  let count = 0;\n  const v = new THREE.Vector3();\n  const lpF = new THREE.Frustum();\n  const lpM = new THREE.Matrix4();\n  const lpP = new THREE.Plane();\n  const lightDir = new THREE.Vector3();\n  const lightDirInv = new THREE.Vector3();\n  const bounds = new THREE.Box3();\n  const focusPos = new THREE.Vector3();\n  useFrame((state, delta) => {\n    if (frames === Infinity || count++ < frames) {\n      var _scene$current$parent, _helper$current;\n      if (Array.isArray(lightSource)) lightDir.fromArray(lightSource).normalize();else lightDir.copy(ref.current.worldToLocal(lightSource.current.getWorldPosition(v)).normalize());\n      lightDirInv.copy(lightDir).multiplyScalar(-1);\n      let boundsVertices = [];\n      (_scene$current$parent = scene.current.parent) == null ? void 0 : _scene$current$parent.matrixWorld.identity();\n      bounds.setFromObject(scene.current, true);\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.max.z));\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.max.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.max.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.max.z));\n      const worldVerts = boundsVertices.map(v => v.clone());\n      bounds.getCenter(focusPos);\n      boundsVertices = boundsVertices.map(v => v.clone().sub(focusPos));\n      const lightPlane = lpP.set(lightDirInv, 0);\n      const projectedVerts = boundsVertices.map(v => lightPlane.projectPoint(v, new THREE.Vector3()));\n      const centralVert = projectedVerts.reduce((a, b) => a.add(b), v.set(0, 0, 0)).divideScalar(projectedVerts.length);\n      const radius = projectedVerts.map(v => v.distanceTo(centralVert)).reduce((a, b) => Math.max(a, b));\n      const dirLength = boundsVertices.map(x => x.dot(lightDir)).reduce((a, b) => Math.max(a, b)); // Shadows\n\n      camera.current.position.copy(lightDir.clone().multiplyScalar(dirLength).add(focusPos));\n      camera.current.lookAt(scene.current.localToWorld(focusPos.clone()));\n      const dirMatrix = lpM.lookAt(camera.current.position, focusPos, v.set(0, 1, 0));\n      camera.current.left = -radius;\n      camera.current.right = radius;\n      camera.current.top = radius;\n      camera.current.bottom = -radius;\n      const yOffset = v.set(0, radius, 0).applyMatrix4(dirMatrix);\n      const yTime = (camera.current.position.y + yOffset.y) / lightDir.y;\n      camera.current.near = 0.1;\n      camera.current.far = yTime;\n      camera.current.updateProjectionMatrix();\n      camera.current.updateMatrixWorld(); // Now find size of ground plane\n\n      const groundProjectedCoords = worldVerts.map(v => v.add(lightDir.clone().multiplyScalar(-v.y / lightDir.y)));\n      const centerPos = groundProjectedCoords.reduce((a, b) => a.add(b), v.set(0, 0, 0)).divideScalar(groundProjectedCoords.length);\n      const maxSize = 2 * groundProjectedCoords.map(v => Math.hypot(v.x - centerPos.x, v.z - centerPos.z)).reduce((a, b) => Math.max(a, b));\n      plane.current.scale.setScalar(maxSize);\n      plane.current.position.copy(centerPos);\n      if (debug) (_helper$current = helper.current) == null ? void 0 : _helper$current.update(); // Inject uniforms\n\n      normalMatB.viewMatrix.value = normalMat.viewMatrix.value = camera.current.matrixWorldInverse;\n      const dirLightNearPlane = lpF.setFromProjectionMatrix(lpM.multiplyMatrices(camera.current.projectionMatrix, camera.current.matrixWorldInverse)).planes[4];\n      causticsMaterial.cameraMatrixWorld = camera.current.matrixWorld;\n      causticsMaterial.cameraProjectionMatrixInv = camera.current.projectionMatrixInverse;\n      causticsMaterial.lightDir = lightDirInv;\n      causticsMaterial.lightPlaneNormal = dirLightNearPlane.normal;\n      causticsMaterial.lightPlaneConstant = dirLightNearPlane.constant;\n      causticsMaterial.near = camera.current.near;\n      causticsMaterial.far = camera.current.far;\n      causticsMaterial.resolution = resolution;\n      causticsMaterial.size = radius;\n      causticsMaterial.intensity = intensity;\n      causticsMaterial.worldRadius = worldRadius; // Switch the scene on\n\n      scene.current.visible = true; // Render front face normals\n\n      gl.setRenderTarget(normalTarget);\n      gl.clear();\n      scene.current.overrideMaterial = normalMat;\n      gl.render(scene.current, camera.current); // Render back face normals, if enabled\n\n      gl.setRenderTarget(normalTargetB);\n      gl.clear();\n      if (backside) {\n        scene.current.overrideMaterial = normalMatB;\n        gl.render(scene.current, camera.current);\n      } // Remove the override material\n\n      scene.current.overrideMaterial = null; // Render front face caustics\n\n      causticsMaterial.ior = ior;\n      plane.current.material.lightProjMatrix = camera.current.projectionMatrix;\n      plane.current.material.lightViewMatrix = camera.current.matrixWorldInverse;\n      causticsMaterial.normalTexture = normalTarget.texture;\n      causticsMaterial.depthTexture = normalTarget.depthTexture;\n      gl.setRenderTarget(causticsTarget);\n      gl.clear();\n      causticsQuad.render(gl); // Render back face caustics, if enabled\n\n      causticsMaterial.ior = backsideIOR;\n      causticsMaterial.normalTexture = normalTargetB.texture;\n      causticsMaterial.depthTexture = normalTargetB.depthTexture;\n      gl.setRenderTarget(causticsTargetB);\n      gl.clear();\n      if (backside) causticsQuad.render(gl); // Reset render target\n\n      gl.setRenderTarget(null); // Switch the scene off if caustics is all that's wanted\n\n      if (causticsOnly) scene.current.visible = false;\n    }\n  });\n  React.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props), /*#__PURE__*/React.createElement(\"scene\", {\n    ref: scene\n  }, /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: camera,\n    up: [0, 1, 0]\n  }), children), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: 2,\n    ref: plane,\n    \"rotation-x\": -Math.PI / 2\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", null), /*#__PURE__*/React.createElement(\"causticsProjectionMaterial\", {\n    transparent: true,\n    color: color,\n    causticsTexture: causticsTarget.texture,\n    causticsTextureB: causticsTargetB.texture,\n    blending: THREE.CustomBlending,\n    blendSrc: THREE.OneFactor,\n    blendDst: THREE.SrcAlphaFactor,\n    depthWrite: false\n  }), debug && /*#__PURE__*/React.createElement(Edges, null, /*#__PURE__*/React.createElement(\"lineBasicMaterial\", {\n    color: \"#ffff00\",\n    toneMapped: false\n  }))));\n});\nexport { Caustics };","map":{"version":3,"names":["_extends","THREE","React","extend","useThree","useFrame","useFBO","useHelper","shaderMaterial","Edges","FullScreenQuad","createNormalMaterial","side","arguments","length","undefined","FrontSide","viewMatrix","value","Matrix4","Object","assign","MeshNormalMaterial","onBeforeCompile","shader","uniforms","fragmentShader","replace","CausticsProjectionMaterial","causticsTexture","causticsTextureB","color","Color","lightProjMatrix","lightViewMatrix","CausticsMaterial","cameraMatrixWorld","cameraProjectionMatrixInv","normalTexture","depthTexture","lightDir","Vector3","lightPlaneNormal","lightPlaneConstant","near","far","modelMatrix","worldRadius","ior","bounces","resolution","size","intensity","NORMALPROPS","depth","minFilter","LinearFilter","magFilter","encoding","LinearEncoding","type","UnsignedByteType","CAUSTICPROPS","LinearMipmapLinearFilter","format","RGBAFormat","FloatType","generateMipmaps","Caustics","forwardRef","_ref","fref","debug","children","frames","causticsOnly","backside","backsideIOR","lightSource","props","ref","useRef","camera","scene","plane","gl","state","helper","CameraHelper","normalTarget","normalTargetB","causticsTarget","causticsTargetB","normalMat","useState","normalMatB","BackSide","causticsMaterial","causticsQuad","useLayoutEffect","current","updateWorldMatrix","count","v","lpF","Frustum","lpM","lpP","Plane","lightDirInv","bounds","Box3","focusPos","delta","Infinity","_scene$current$parent","_helper$current","Array","isArray","fromArray","normalize","copy","worldToLocal","getWorldPosition","multiplyScalar","boundsVertices","parent","matrixWorld","identity","setFromObject","push","min","x","y","z","max","worldVerts","map","clone","getCenter","sub","lightPlane","set","projectedVerts","projectPoint","centralVert","reduce","a","b","add","divideScalar","radius","distanceTo","Math","dirLength","dot","position","lookAt","localToWorld","dirMatrix","left","right","top","bottom","yOffset","applyMatrix4","yTime","updateProjectionMatrix","updateMatrixWorld","groundProjectedCoords","centerPos","maxSize","hypot","scale","setScalar","update","matrixWorldInverse","dirLightNearPlane","setFromProjectionMatrix","multiplyMatrices","projectionMatrix","planes","projectionMatrixInverse","normal","constant","visible","setRenderTarget","clear","overrideMaterial","render","material","texture","useImperativeHandle","createElement","up","renderOrder","PI","transparent","blending","CustomBlending","blendSrc","OneFactor","blendDst","SrcAlphaFactor","depthWrite","toneMapped"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/@react-three/drei/core/Caustics.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { useFBO } from './useFBO.js';\nimport { useHelper } from './useHelper.js';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { Edges } from './Edges.js';\nimport { FullScreenQuad } from 'three-stdlib';\n\nfunction createNormalMaterial(side = THREE.FrontSide) {\n  const viewMatrix = {\n    value: new THREE.Matrix4()\n  };\n  return Object.assign(new THREE.MeshNormalMaterial({\n    side\n  }), {\n    viewMatrix,\n    onBeforeCompile: shader => {\n      shader.uniforms.viewMatrix = viewMatrix;\n      shader.fragmentShader = `vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n           return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n         }\\n` + shader.fragmentShader.replace('#include <normal_fragment_maps>', `#include <normal_fragment_maps>\n           normal = inverseTransformDirection( normal, viewMatrix );\\n`);\n    }\n  });\n}\n\nconst CausticsProjectionMaterial = shaderMaterial({\n  causticsTexture: null,\n  causticsTextureB: null,\n  color: new THREE.Color(),\n  lightProjMatrix: new THREE.Matrix4(),\n  lightViewMatrix: new THREE.Matrix4()\n}, `varying vec3 vWorldPosition;   \n   void main() {\n     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n     vec4 worldPosition = modelMatrix * vec4(position, 1.);\n     vWorldPosition = worldPosition.xyz;\n   }`, `varying vec3 vWorldPosition;\n  uniform vec3 color;\n  uniform sampler2D causticsTexture; \n  uniform sampler2D causticsTextureB; \n  uniform mat4 lightProjMatrix;\n  uniform mat4 lightViewMatrix;\n   void main() {\n    // Apply caustics  \n    vec4 lightSpacePos = lightProjMatrix * lightViewMatrix * vec4(vWorldPosition, 1.0);\n    lightSpacePos.xyz /= lightSpacePos.w;\n    lightSpacePos.xyz = lightSpacePos.xyz * 0.5 + 0.5; \n    vec3 front = texture2D(causticsTexture, lightSpacePos.xy).rgb;\n    vec3 back = texture2D(causticsTextureB, lightSpacePos.xy).rgb;\n    gl_FragColor = vec4((front + back) * color, 1.0);\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n   }`);\nconst CausticsMaterial = shaderMaterial({\n  cameraMatrixWorld: new THREE.Matrix4(),\n  cameraProjectionMatrixInv: new THREE.Matrix4(),\n  normalTexture: null,\n  depthTexture: null,\n  lightDir: new THREE.Vector3(0, 1, 0),\n  lightPlaneNormal: new THREE.Vector3(0, 1, 0),\n  lightPlaneConstant: 0,\n  near: 0.1,\n  far: 100,\n  modelMatrix: new THREE.Matrix4(),\n  worldRadius: 1 / 40,\n  ior: 1.1,\n  bounces: 0,\n  resolution: 1024,\n  size: 10,\n  intensity: 0.5\n},\n/* glsl */\n`\n  varying vec2 vUv;\n  void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }`,\n/* glsl */\n`  \n  uniform mat4 cameraMatrixWorld;\n  uniform mat4 cameraProjectionMatrixInv;\n  uniform vec3 lightDir;\n  uniform vec3 lightPlaneNormal;\n  uniform float lightPlaneConstant;\n  uniform float near;\n  uniform float far;\n  uniform float time;\n  uniform float worldRadius;\n  uniform float resolution;\n  uniform float size;\n  uniform float intensity;\n  uniform float ior;\n  precision highp isampler2D;\n  precision highp usampler2D;\n  uniform sampler2D normalTexture;\n  uniform sampler2D depthTexture;\n  uniform float bounces;\n  varying vec2 vUv;\n  vec3 WorldPosFromDepth(float depth, vec2 coord) {\n    float z = depth * 2.0 - 1.0;\n    vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\n    vec4 viewSpacePosition = cameraProjectionMatrixInv * clipSpacePosition;\n    // Perspective division\n    viewSpacePosition /= viewSpacePosition.w;\n    vec4 worldSpacePosition = cameraMatrixWorld * viewSpacePosition;\n    return worldSpacePosition.xyz;\n  }                  \n  float sdPlane( vec3 p, vec3 n, float h ) {\n    // n must be normalized\n    return dot(p,n) + h;\n  }\n  float planeIntersect( vec3 ro, vec3 rd, vec4 p ) {\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n  }\n  vec3 totalInternalReflection(vec3 ro, vec3 rd, vec3 pos, vec3 normal, float ior, out vec3 rayOrigin, out vec3 rayDirection) {\n    rayOrigin = ro;\n    rayDirection = rd;\n    rayDirection = refract(rayDirection, normal, 1.0 / ior);\n    rayOrigin = pos + rayDirection * 0.1;\n    return rayDirection;\n  }\n  void main() {\n    // Each sample consists of random offset in the x and y direction\n    float caustic = 0.0;\n    float causticTexelSize = (1.0 / resolution) * size * 2.0;\n    float texelsNeeded = worldRadius / causticTexelSize;\n    float sampleRadius = texelsNeeded / resolution;\n    float sum = 0.0;\n    if (texture2D(depthTexture, vUv).x == 1.0) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      return;\n    }\n    vec2 offset1 = vec2(-0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset2 = vec2(-0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset3 = vec2(0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset4 = vec2(0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 uv1 = vUv + offset1 * sampleRadius;\n    vec2 uv2 = vUv + offset2 * sampleRadius;\n    vec2 uv3 = vUv + offset3 * sampleRadius;\n    vec2 uv4 = vUv + offset4 * sampleRadius;\n    vec3 normal1 = texture2D(normalTexture, uv1, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal2 = texture2D(normalTexture, uv2, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal3 = texture2D(normalTexture, uv3, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal4 = texture2D(normalTexture, uv4, -10.0).rgb * 2.0 - 1.0;\n    float depth1 = texture2D(depthTexture, uv1, -10.0).x;\n    float depth2 = texture2D(depthTexture, uv2, -10.0).x;\n    float depth3 = texture2D(depthTexture, uv3, -10.0).x;\n    float depth4 = texture2D(depthTexture, uv4, -10.0).x;\n    // Sanity check the depths\n    if (depth1 == 1.0 || depth2 == 1.0 || depth3 == 1.0 || depth4 == 1.0) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      return;\n    }\n    vec3 pos1 = WorldPosFromDepth(depth1, uv1);\n    vec3 pos2 = WorldPosFromDepth(depth2, uv2);\n    vec3 pos3 = WorldPosFromDepth(depth3, uv3);\n    vec3 pos4 = WorldPosFromDepth(depth4, uv4);\n    vec3 originPos1 = WorldPosFromDepth(0.0, uv1);\n    vec3 originPos2 = WorldPosFromDepth(0.0, uv2);\n    vec3 originPos3 = WorldPosFromDepth(0.0, uv3);\n    vec3 originPos4 = WorldPosFromDepth(0.0, uv4);\n    vec3 endPos1, endPos2, endPos3, endPos4;\n    vec3 endDir1, endDir2, endDir3, endDir4;\n    totalInternalReflection(originPos1, lightDir, pos1, normal1, ior, endPos1, endDir1);\n    totalInternalReflection(originPos2, lightDir, pos2, normal2, ior, endPos2, endDir2);\n    totalInternalReflection(originPos3, lightDir, pos3, normal3, ior, endPos3, endDir3);\n    totalInternalReflection(originPos4, lightDir, pos4, normal4, ior, endPos4, endDir4);\n    float lightPosArea = length(cross(originPos2 - originPos1, originPos3 - originPos1)) + length(cross(originPos3 - originPos1, originPos4 - originPos1));\n    float t1 = planeIntersect(endPos1, endDir1, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t2 = planeIntersect(endPos2, endDir2, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t3 = planeIntersect(endPos3, endDir3, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t4 = planeIntersect(endPos4, endDir4, vec4(lightPlaneNormal, lightPlaneConstant));\n    vec3 finalPos1 = endPos1 + endDir1 * t1;\n    vec3 finalPos2 = endPos2 + endDir2 * t2;\n    vec3 finalPos3 = endPos3 + endDir3 * t3;\n    vec3 finalPos4 = endPos4 + endDir4 * t4;\n    float finalArea = length(cross(finalPos2 - finalPos1, finalPos3 - finalPos1)) + length(cross(finalPos3 - finalPos1, finalPos4 - finalPos1));\n    caustic += intensity * (lightPosArea / finalArea);\n    // Calculate the area of the triangle in light spaces\n    gl_FragColor = vec4(vec3(max(caustic, 0.0)), 1.0);\n  }`);\nconst NORMALPROPS = {\n  depth: true,\n  minFilter: THREE.LinearFilter,\n  magFilter: THREE.LinearFilter,\n  encoding: THREE.LinearEncoding,\n  type: THREE.UnsignedByteType\n};\nconst CAUSTICPROPS = {\n  minFilter: THREE.LinearMipmapLinearFilter,\n  magFilter: THREE.LinearFilter,\n  encoding: THREE.LinearEncoding,\n  format: THREE.RGBAFormat,\n  type: THREE.FloatType,\n  generateMipmaps: true\n};\nconst Caustics = /*#__PURE__*/React.forwardRef(({\n  debug,\n  children,\n  frames = 1,\n  ior = 1.1,\n  color = 'white',\n  causticsOnly = false,\n  backside = false,\n  backsideIOR = 1.1,\n  worldRadius = 0.3125,\n  intensity = 0.05,\n  resolution = 2024,\n  lightSource = [5, 5, 5],\n  ...props\n}, fref) => {\n  extend({\n    CausticsProjectionMaterial\n  });\n  const ref = React.useRef(null);\n  const camera = React.useRef(null);\n  const scene = React.useRef(null);\n  const plane = React.useRef(null);\n  const gl = useThree(state => state.gl);\n  const helper = useHelper(debug && camera, THREE.CameraHelper); // Buffers for front and back faces\n\n  const normalTarget = useFBO(resolution, resolution, NORMALPROPS);\n  const normalTargetB = useFBO(resolution, resolution, NORMALPROPS);\n  const causticsTarget = useFBO(resolution, resolution, CAUSTICPROPS);\n  const causticsTargetB = useFBO(resolution, resolution, CAUSTICPROPS); // Normal materials for front and back faces\n\n  const [normalMat] = React.useState(() => createNormalMaterial());\n  const [normalMatB] = React.useState(() => createNormalMaterial(THREE.BackSide)); // The quad that catches the caustics\n\n  const [causticsMaterial] = React.useState(() => new CausticsMaterial());\n  const [causticsQuad] = React.useState(() => new FullScreenQuad(causticsMaterial));\n  React.useLayoutEffect(() => {\n    ref.current.updateWorldMatrix(false, true);\n  });\n  let count = 0;\n  const v = new THREE.Vector3();\n  const lpF = new THREE.Frustum();\n  const lpM = new THREE.Matrix4();\n  const lpP = new THREE.Plane();\n  const lightDir = new THREE.Vector3();\n  const lightDirInv = new THREE.Vector3();\n  const bounds = new THREE.Box3();\n  const focusPos = new THREE.Vector3();\n  useFrame((state, delta) => {\n    if (frames === Infinity || count++ < frames) {\n      var _scene$current$parent, _helper$current;\n\n      if (Array.isArray(lightSource)) lightDir.fromArray(lightSource).normalize();else lightDir.copy(ref.current.worldToLocal(lightSource.current.getWorldPosition(v)).normalize());\n      lightDirInv.copy(lightDir).multiplyScalar(-1);\n      let boundsVertices = [];\n      (_scene$current$parent = scene.current.parent) == null ? void 0 : _scene$current$parent.matrixWorld.identity();\n      bounds.setFromObject(scene.current, true);\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.max.z));\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.max.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.max.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.max.z));\n      const worldVerts = boundsVertices.map(v => v.clone());\n      bounds.getCenter(focusPos);\n      boundsVertices = boundsVertices.map(v => v.clone().sub(focusPos));\n      const lightPlane = lpP.set(lightDirInv, 0);\n      const projectedVerts = boundsVertices.map(v => lightPlane.projectPoint(v, new THREE.Vector3()));\n      const centralVert = projectedVerts.reduce((a, b) => a.add(b), v.set(0, 0, 0)).divideScalar(projectedVerts.length);\n      const radius = projectedVerts.map(v => v.distanceTo(centralVert)).reduce((a, b) => Math.max(a, b));\n      const dirLength = boundsVertices.map(x => x.dot(lightDir)).reduce((a, b) => Math.max(a, b)); // Shadows\n\n      camera.current.position.copy(lightDir.clone().multiplyScalar(dirLength).add(focusPos));\n      camera.current.lookAt(scene.current.localToWorld(focusPos.clone()));\n      const dirMatrix = lpM.lookAt(camera.current.position, focusPos, v.set(0, 1, 0));\n      camera.current.left = -radius;\n      camera.current.right = radius;\n      camera.current.top = radius;\n      camera.current.bottom = -radius;\n      const yOffset = v.set(0, radius, 0).applyMatrix4(dirMatrix);\n      const yTime = (camera.current.position.y + yOffset.y) / lightDir.y;\n      camera.current.near = 0.1;\n      camera.current.far = yTime;\n      camera.current.updateProjectionMatrix();\n      camera.current.updateMatrixWorld(); // Now find size of ground plane\n\n      const groundProjectedCoords = worldVerts.map(v => v.add(lightDir.clone().multiplyScalar(-v.y / lightDir.y)));\n      const centerPos = groundProjectedCoords.reduce((a, b) => a.add(b), v.set(0, 0, 0)).divideScalar(groundProjectedCoords.length);\n      const maxSize = 2 * groundProjectedCoords.map(v => Math.hypot(v.x - centerPos.x, v.z - centerPos.z)).reduce((a, b) => Math.max(a, b));\n      plane.current.scale.setScalar(maxSize);\n      plane.current.position.copy(centerPos);\n      if (debug) (_helper$current = helper.current) == null ? void 0 : _helper$current.update(); // Inject uniforms\n\n      normalMatB.viewMatrix.value = normalMat.viewMatrix.value = camera.current.matrixWorldInverse;\n      const dirLightNearPlane = lpF.setFromProjectionMatrix(lpM.multiplyMatrices(camera.current.projectionMatrix, camera.current.matrixWorldInverse)).planes[4];\n      causticsMaterial.cameraMatrixWorld = camera.current.matrixWorld;\n      causticsMaterial.cameraProjectionMatrixInv = camera.current.projectionMatrixInverse;\n      causticsMaterial.lightDir = lightDirInv;\n      causticsMaterial.lightPlaneNormal = dirLightNearPlane.normal;\n      causticsMaterial.lightPlaneConstant = dirLightNearPlane.constant;\n      causticsMaterial.near = camera.current.near;\n      causticsMaterial.far = camera.current.far;\n      causticsMaterial.resolution = resolution;\n      causticsMaterial.size = radius;\n      causticsMaterial.intensity = intensity;\n      causticsMaterial.worldRadius = worldRadius; // Switch the scene on\n\n      scene.current.visible = true; // Render front face normals\n\n      gl.setRenderTarget(normalTarget);\n      gl.clear();\n      scene.current.overrideMaterial = normalMat;\n      gl.render(scene.current, camera.current); // Render back face normals, if enabled\n\n      gl.setRenderTarget(normalTargetB);\n      gl.clear();\n\n      if (backside) {\n        scene.current.overrideMaterial = normalMatB;\n        gl.render(scene.current, camera.current);\n      } // Remove the override material\n\n\n      scene.current.overrideMaterial = null; // Render front face caustics\n\n      causticsMaterial.ior = ior;\n      plane.current.material.lightProjMatrix = camera.current.projectionMatrix;\n      plane.current.material.lightViewMatrix = camera.current.matrixWorldInverse;\n      causticsMaterial.normalTexture = normalTarget.texture;\n      causticsMaterial.depthTexture = normalTarget.depthTexture;\n      gl.setRenderTarget(causticsTarget);\n      gl.clear();\n      causticsQuad.render(gl); // Render back face caustics, if enabled\n\n      causticsMaterial.ior = backsideIOR;\n      causticsMaterial.normalTexture = normalTargetB.texture;\n      causticsMaterial.depthTexture = normalTargetB.depthTexture;\n      gl.setRenderTarget(causticsTargetB);\n      gl.clear();\n      if (backside) causticsQuad.render(gl); // Reset render target\n\n      gl.setRenderTarget(null); // Switch the scene off if caustics is all that's wanted\n\n      if (causticsOnly) scene.current.visible = false;\n    }\n  });\n  React.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props), /*#__PURE__*/React.createElement(\"scene\", {\n    ref: scene\n  }, /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: camera,\n    up: [0, 1, 0]\n  }), children), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: 2,\n    ref: plane,\n    \"rotation-x\": -Math.PI / 2\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", null), /*#__PURE__*/React.createElement(\"causticsProjectionMaterial\", {\n    transparent: true,\n    color: color,\n    causticsTexture: causticsTarget.texture,\n    causticsTextureB: causticsTargetB.texture,\n    blending: THREE.CustomBlending,\n    blendSrc: THREE.OneFactor,\n    blendDst: THREE.SrcAlphaFactor,\n    depthWrite: false\n  }), debug && /*#__PURE__*/React.createElement(Edges, null, /*#__PURE__*/React.createElement(\"lineBasicMaterial\", {\n    color: \"#ffff00\",\n    toneMapped: false\n  }))));\n});\n\nexport { Caustics };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}