{"version":3,"file":"ndarray-pixels-browser.modern.js","sources":["../src/browser-save-pixels.ts","../src/index.ts","../src/browser-get-pixels.ts"],"sourcesContent":["import ndarray from 'ndarray';\nimport type { NdArray } from 'ndarray';\nimport ops from 'ndarray-ops';\n\nexport interface SavePixelsOptions {quality?: number}\n\nexport default savePixels;\n\nfunction savePixels(array: NdArray, type: 'canvas'): HTMLCanvasElement;\nfunction savePixels(array: NdArray, type: 'png'): Readable;\nfunction savePixels(array: NdArray, type: 'jpeg' | 'jpg', options?: SavePixelsOptions): Readable;\nfunction savePixels(\n\tarray: NdArray, type: 'canvas' | 'png' | 'jpeg' | 'jpg',\n\toptions: SavePixelsOptions = {}\n): Readable | HTMLCanvasElement {\n\n\t// Create HTMLCanvasElement and write pixel data.\n\tconst canvas = document.createElement('canvas');\n\tcanvas.width = array.shape[0];\n\tcanvas.height = array.shape[1];\n\n\tconst context = canvas.getContext('2d')!;\n\tconst imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n\n\ttry {\n\t\thandleData(array, imageData.data);\n\t} catch (e) {\n\t\t// Pass errors to stream, to match 'save-pixels' behavior.\n\t\treturn Readable.from(Promise.reject(e));\n\t}\n\n\tcontext.putImageData(imageData, 0, 0);\n\n\tconst quality = options.quality ? options.quality / 100 : undefined;\n\n\t// Encode to target format.\n\tswitch (type) {\n\t\tcase 'canvas':\n\t\t\treturn canvas;\n\t\tcase 'jpg':\n\t\tcase 'jpeg':\n\t\t\treturn streamCanvas(canvas, 'image/jpeg', quality);\n\t\tcase 'png':\n\t\t\treturn streamCanvas(canvas, 'image/png');\n\t\tdefault:\n\t\t\tthrow new Error('[ndarray-pixels] Unsupported file type: ' + type);\n\t}\n}\n\n/** Creates readable stream from given HTMLCanvasElement and options. */\nfunction streamCanvas(canvas: HTMLCanvasElement, mimeType: string, quality?: number): Readable {\n\tconst promise = new Promise<Uint8Array>((resolve, reject) => {\n\t\tcanvas.toBlob(async (blob) => {\n\t\t\tif (blob) {\n\t\t\t\tresolve(new Uint8Array(await blob.arrayBuffer()));\n\t\t\t} else {\n\t\t\t\treject(new Error('[ndarray-pixels] Failed to canvas.toBlob().'));\n\t\t\t}\n\t\t}, mimeType, quality);\n\t});\n\treturn Readable.from(promise);\n}\n\nfunction handleData(\n\tarray: NdArray,\n\tdata: Uint8Array | Uint8ClampedArray,\n\tframe = -1\n): Uint8Array | Uint8ClampedArray {\n\n\tif (array.shape.length === 4) {\n\t\treturn handleData(array.pick(frame), data, 0);\n\t} else if (array.shape.length === 3) {\n\t\tif (array.shape[2] === 3) {\n\t\t\tops.assign(\n\t\t\t\tndarray(\n\t\t\t\t\tdata,\n\t\t\t\t\t[array.shape[0], array.shape[1], 3],\n\t\t\t\t\t[4, 4 * array.shape[0], 1]\n\t\t\t\t),\n\t\t\t\tarray\n\t\t\t);\n\t\t\tops.assigns(\n\t\t\t\tndarray(\n\t\t\t\t\tdata,\n\t\t\t\t\t[array.shape[0] * array.shape[1]],\n\t\t\t\t\t[4],\n\t\t\t\t\t3\n\t\t\t\t),\n\t\t\t\t255\n\t\t\t);\n\t\t} else if (array.shape[2] === 4) {\n\t\t\tops.assign(\n\t\t\t\tndarray(\n\t\t\t\t\tdata,\n\t\t\t\t\t[array.shape[0], array.shape[1], 4],\n\t\t\t\t\t[4, array.shape[0] * 4, 1]\n\t\t\t\t),\n\t\t\t\tarray\n\t\t\t);\n\t\t} else if (array.shape[2] === 1) {\n\t\t\tops.assign(\n\t\t\t\tndarray(\n\t\t\t\t\tdata,\n\t\t\t\t\t[array.shape[0], array.shape[1], 3],\n\t\t\t\t\t[4, 4 * array.shape[0], 1]\n\t\t\t\t),\n\t\t\t\tndarray(\n\t\t\t\t\tarray.data,\n\t\t\t\t\t[array.shape[0], array.shape[1], 3],\n\t\t\t\t\t[array.stride[0], array.stride[1], 0],\n\t\t\t\t\tarray.offset\n\t\t\t\t)\n\t\t\t);\n\t\t\tops.assigns(\n\t\t\t\tndarray(\n\t\t\t\t\tdata,\n\t\t\t\t\t[array.shape[0] * array.shape[1]],\n\t\t\t\t\t[4],\n\t\t\t\t\t3\n\t\t\t\t),\n\t\t\t\t255\n\t\t\t);\n\t\t} else {\n\t\t\tthrow new Error('[ndarray-pixels] Incompatible array shape.');\n\t\t}\n\t} else if (array.shape.length === 2) {\n\t\tops.assign(\n\t\t\tndarray(data,\n\t\t\t[array.shape[0], array.shape[1], 3],\n\t\t\t[4, 4 * array.shape[0], 1]),\n\t\t\tndarray(array.data,\n\t\t\t[array.shape[0], array.shape[1], 3],\n\t\t\t[array.stride[0], array.stride[1], 0],\n\t\t\tarray.offset)\n\t\t);\n\t\tops.assigns(\n\t\t\tndarray(data,\n\t\t\t[array.shape[0] * array.shape[1]],\n\t\t\t[4],\n\t\t\t3),\n\t\t\t255\n\t\t);\n\t} else {\n\t\tthrow new Error('[ndarray-pixels] Incompatible array shape.');\n\t}\n\treturn data;\n}\n\nclass Readable {\n\tconstructor (private _promise: Promise<Uint8Array>) {}\n\n\ton(event: 'data' | 'error' | 'end', fn: (res?: Uint8Array | Error) => void): this {\n\t\tif (event === 'data') {\n\t\t\tthis._promise.then(fn);\n\t\t} else if (event === 'error') {\n\t\t\tthis._promise.catch(fn)\n\t\t} else if (event === 'end') {\n\t\t\tthis._promise.finally(fn);\n\t\t}\n\t\treturn this;\n\t}\n\n\tstatic from (promise: Promise<Uint8Array>): Readable {\n\t\treturn new Readable(promise);\n\t}\n}\n","import getPixelsInternal from 'get-pixels';\nimport type { NdArray } from 'ndarray';\nimport savePixelsInternal from 'save-pixels';\n\n/**\n * Decodes image data to an `ndarray`.\n *\n * MIME type is optional when given a path or URL, and required when given a Uint8Array.\n *\n * Accepts `image/png` or `image/jpeg` in Node.js, and additional formats on browsers with\n * the necessary support in Canvas 2D.\n *\n * @param data\n * @param mimeType `image/jpeg`, `image/png`, etc.\n * @returns\n */\nasync function getPixels (data: string | Uint8Array, mimeType?: string): Promise<NdArray> {\n    // In Node.js, get-pixels needs a Buffer and won't accept Uint8Array.\n    if (data instanceof Uint8Array && typeof Buffer !== 'undefined') {\n        data = Buffer.from(data);\n    }\n\n    return new Promise((resolve, reject) => {\n        getPixelsInternal(data, mimeType!, (err: Error | null, pixels: NdArray) => {\n            if (pixels && !err) {\n                resolve(pixels);\n            } else {\n                reject(err);\n            }\n        });\n    });\n}\n\n/**\n * Encodes an `ndarray` as image data in the given format.\n *\n * If the source `ndarray` was constructed manually with default stride, use\n * `ndarray.transpose(1, 0)` to reshape it and ensure an identical result from getPixels(). For an\n * ndarray created by getPixels(), this isn't necessary.\n *\n * Accepts `image/png` or `image/jpeg` in Node.js, and additional formats on browsers with\n * the necessary support in Canvas 2D.\n *\n * @param pixels ndarray of shape W x H x 4.\n * @param mimeType `image/jpeg`, `image/png`, etc.\n * @returns\n */\nasync function savePixels (pixels: NdArray, mimeType: string): Promise<Uint8Array> {\n    return new Promise((resolve, reject) => {\n        const chunks: Uint8Array[] = [];\n        const internalType = mimeType.replace('image/', '') as 'png' | 'gif';\n        savePixelsInternal(pixels, internalType)\n            .on('data', (d: Uint8Array) => chunks.push(d))\n            .on('end', () => resolve(concat(chunks)))\n            .on('error', (e: Error) => reject(e));\n    });\n}\n\nfunction concat (arrays: Uint8Array[]): Uint8Array {\n    let totalByteLength = 0;\n    for (const array of arrays) {\n        totalByteLength += array.byteLength;\n    }\n\n    const result = new Uint8Array(totalByteLength);\n\n    let byteOffset = 0;\n    for (const array of arrays) {\n        result.set(array, byteOffset);\n        byteOffset += array.byteLength;\n    }\n\n    return result;\n}\n\nexport {getPixels, savePixels};\n","import ndarray from 'ndarray';\nimport type { NdArray } from 'ndarray';\n\nexport type GetPixelsCallback = (err: string | Event | null, pixels?: NdArray) => void;\n\nexport default getPixels;\n\nfunction getPixels(path: string, callback: GetPixelsCallback): void;\nfunction getPixels(path: string | Uint8Array, type: string, callback: GetPixelsCallback): void\nfunction getPixels(path: string | Uint8Array, typeOrCallback: string | GetPixelsCallback, callback?: GetPixelsCallback): void {\n\tcallback = callback || typeOrCallback as GetPixelsCallback;\n\n\t// Construct a Blob URL for Uint8Array inputs.\n\tif (path instanceof Uint8Array) {\n\t\tif (typeof typeOrCallback !== 'string') {\n\t\t\tthrow new Error('[ndarray-pixels] Type must be given for Uint8Array image data');\n\t\t}\n\t\tconst blob = new Blob([path], {type: typeOrCallback});\n\t\tpath = URL.createObjectURL(blob);\n\t}\n\n\t// Decode image with Canvas API.\n\tconst img = new Image();\n\timg.crossOrigin = 'anonymous';\n\timg.onload = function() {\n\t\tURL.revokeObjectURL(path as string);\n\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = img.width;\n\t\tcanvas.height = img.height;\n\t\tconst context = canvas.getContext('2d')!;\n\t\tcontext.drawImage(img, 0, 0);\n\t\tconst pixels = context.getImageData(0, 0, img.width, img.height)\n\t\tcallback!(null, ndarray(new Uint8Array(pixels.data), [img.width, img.height, 4], [4, 4*img.width, 1], 0));\n\t}\n\timg.onerror = (err) => {\n\t\tURL.revokeObjectURL(path as string);\n\t\tcallback!(err);\n\t};\n\timg.src = path;\n}\n"],"names":["savePixels","array","type","options","canvas","document","createElement","width","shape","height","context","getContext","imageData","getImageData","handleData","data","e","Readable","from","Promise","reject","putImageData","quality","undefined","streamCanvas","Error","mimeType","promise","resolve","toBlob","async","blob","Uint8Array","arrayBuffer","frame","length","pick","ops","assign","ndarray","assigns","stride","offset","constructor","_promise","this","on","event","fn","then","catch","finally","[object Object]","getPixels","Buffer","path","typeOrCallback","callback","Blob","URL","createObjectURL","img","Image","crossOrigin","onload","revokeObjectURL","drawImage","pixels","onerror","err","src","getPixelsInternal","chunks","internalType","replace","savePixelsInternal","d","push","arrays","totalByteLength","byteLength","result","byteOffset","set","concat"],"mappings":"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"}