{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, sRGBEncoding, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from 'three';\nimport { unzlibSync } from 'fflate';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error('THREE.FBXLoader: Unknown format.');\n      }\n      if (getFbxVersion(FBXText) < 7000) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n      }\n      fbxTree = new TextParser().parse(FBXText);\n    } // console.log( fbxTree );\n\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n} // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  } // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n\n  parseConnections() {\n    const connectionMap = new Map();\n    if ('Connections' in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n        const parentRelationship = {\n          ID: toID,\n          relationship: relationship\n        };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n        const childRelationship = {\n          ID: fromID,\n          relationship: relationship\n        };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n    return connectionMap;\n  } // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n\n  parseImages() {\n    const images = {};\n    const blobs = {};\n    if ('Video' in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n        if ('Content' in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n    }\n    return images;\n  } // Parse embedded image data in FBXTree.Video.Content\n\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n    let type;\n    switch (extension) {\n      case 'bmp':\n        type = 'image/bmp';\n        break;\n      case 'jpg':\n      case 'jpeg':\n        type = 'image/jpeg';\n        break;\n      case 'png':\n        type = 'image/png';\n        break;\n      case 'tif':\n        type = 'image/tiff';\n        break;\n      case 'tga':\n        if (this.manager.getHandler('.tga') === null) {\n          console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n        }\n        type = 'image/tga';\n        break;\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n    if (typeof content === 'string') {\n      // ASCII format\n      return 'data:' + type + ';base64,' + content;\n    } else {\n      // Binary Format\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], {\n        type: type\n      }));\n    }\n  } // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n\n  parseTextures(images) {\n    const textureMap = new Map();\n    if ('Texture' in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n    return textureMap;\n  } // Parse individual node in FBXTree.Objects.Texture\n\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n    // 0: repeat(default), 1: clamp\n\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    if ('Scaling' in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n    return texture;\n  } // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n    if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n      fileName = images[children[0].ID];\n      if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n        this.textureLoader.setPath(undefined);\n      }\n    }\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n    if (extension === 'tga') {\n      const loader = this.manager.getHandler('.tga');\n      if (loader === null) {\n        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        loader.setPath(this.textureLoader.path);\n        texture = loader.load(fileName);\n      }\n    } else if (extension === 'psd') {\n      console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  } // Parse nodes in FBXTree.Objects.Material\n\n  parseMaterials(textureMap) {\n    const materialMap = new Map();\n    if ('Material' in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null) materialMap.set(parseInt(nodeID), material);\n      }\n    }\n    return materialMap;\n  } // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n    if (typeof type === 'object') {\n      type = type.value;\n    } // Ignore unused materials which don't have any connections.\n\n    if (!connections.has(ID)) return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n    switch (type.toLowerCase()) {\n      case 'phong':\n        material = new MeshPhongMaterial();\n        break;\n      case 'lambert':\n        material = new MeshLambertMaterial();\n        break;\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  } // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n      // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n    }\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n      // The blender exporter exports emissive color here instead of in materialNode.Emissive\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n    }\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n    if (parameters.opacity < 1.0) {\n      parameters.transparent = true;\n    }\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n      // The blender exporter exports specular color here instead of in materialNode.Specular\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n    }\n    const scope = this;\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship;\n      switch (type) {\n        case 'Bump':\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'Maya|TEX_ao_map':\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'DiffuseColor':\n        case 'Maya|TEX_color_map':\n          parameters.map = scope.getTexture(textureMap, child.ID);\n          if (parameters.map !== undefined) {\n            parameters.map.encoding = sRGBEncoding;\n          }\n          break;\n        case 'DisplacementColor':\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'EmissiveColor':\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.emissiveMap !== undefined) {\n            parameters.emissiveMap.encoding = sRGBEncoding;\n          }\n          break;\n        case 'NormalMap':\n        case 'Maya|TEX_normal_map':\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'ReflectionColor':\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.envMap !== undefined) {\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            parameters.envMap.encoding = sRGBEncoding;\n          }\n          break;\n        case 'SpecularColor':\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.specularMap !== undefined) {\n            parameters.specularMap.encoding = sRGBEncoding;\n          }\n          break;\n        case 'TransparentColor':\n        case 'TransparencyFactor':\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n        case 'AmbientColor':\n        case 'ShininessExponent': // AKA glossiness map\n\n        case 'SpecularFactor': // AKA specularLevel\n\n        case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n        default:\n          console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n          break;\n      }\n    });\n    return parameters;\n  } // get a texture from the textureMap for use by a material.\n\n  getTexture(textureMap, id) {\n    // if the texture is a layered texture, just use the first layer and issue a warning\n    if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n      id = connections.get(id).children[0].ID;\n    }\n    return textureMap.get(id);\n  } // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n    if ('Deformer' in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n        if (deformerNode.attrType === 'Skin') {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n          }\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === 'BlendShape') {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n          }\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n    return {\n      skeletons: skeletons,\n      morphTargets: morphTargets\n    };\n  } // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== 'Cluster') return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n      };\n\n      if ('Indexes' in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones: rawBones,\n      bones: []\n    };\n  } // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n        return child.relationship === undefined;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n    return rawMorphTargets;\n  } // create the main Group() to be returned by the loader\n\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== undefined) parent.add(model);\n      });\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n    sceneGraph.animations = animations;\n  } // parse nodes in FBXTree.Objects.Model\n\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = new Map();\n    const modelNodes = fbxTree.Objects.Model;\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n      if (!model) {\n        switch (node.attrType) {\n          case 'Camera':\n            model = this.createCamera(relationships);\n            break;\n          case 'Light':\n            model = this.createLight(relationships);\n            break;\n          case 'Mesh':\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n          case 'NurbsCurve':\n            model = this.createCurve(relationships, geometryMap);\n            break;\n          case 'LimbNode':\n          case 'Root':\n            model = new Bone();\n            break;\n          case 'Null':\n          default:\n            model = new Group();\n            break;\n        }\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n        model.ID = id;\n      }\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n    return modelMap;\n  }\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n            bone.ID = id;\n            skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n            // duplicate the bone here and and it as a child of the first bone\n\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  } // create a PerspectiveCamera or OrthographicCamera\n\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== undefined) {\n        cameraAttribute = attr;\n      }\n    });\n    if (cameraAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n      if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n      let nearClippingPlane = 1;\n      if (cameraAttribute.NearPlane !== undefined) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n      }\n      let farClippingPlane = 1000;\n      if (cameraAttribute.FarPlane !== undefined) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n      }\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n      if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n      const aspect = width / height;\n      let fov = 45;\n      if (cameraAttribute.FieldOfView !== undefined) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n      switch (type) {\n        case 0:\n          // Perspective\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null) model.setFocalLength(focalLength);\n          break;\n        case 1:\n          // Orthographic\n          model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n          break;\n        default:\n          console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n          model = new Object3D();\n          break;\n      }\n    }\n    return model;\n  } // Create a DirectionalLight, PointLight or SpotLight\n\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== undefined) {\n        lightAttribute = attr;\n      }\n    });\n    if (lightAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type; // LightType can be undefined for Point lights\n\n      if (lightAttribute.LightType === undefined) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n      let color = 0xffffff;\n      if (lightAttribute.Color !== undefined) {\n        color = new Color().fromArray(lightAttribute.Color.value);\n      }\n      let intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n      if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n      let distance = 0;\n      if (lightAttribute.FarAttenuationEnd !== undefined) {\n        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n      const decay = 1;\n      switch (type) {\n        case 0:\n          // Point\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n        case 1:\n          // Directional\n          model = new DirectionalLight(color, intensity);\n          break;\n        case 2:\n          // Spot\n          let angle = Math.PI / 3;\n          if (lightAttribute.InnerAngle !== undefined) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n          let penumbra = 0;\n          if (lightAttribute.OuterAngle !== undefined) {\n            // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n        default:\n          console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n          model = new PointLight(color, intensity);\n          break;\n      }\n      if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n    return model;\n  }\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = []; // get geometry and materials(s) from connections\n\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({\n        color: 0xcccccc\n      });\n      materials.push(material);\n    }\n    if ('color' in geometry.attributes) {\n      materials.forEach(function (material) {\n        material.vertexColors = true;\n      });\n    }\n    if (geometry.FBX_Deformer) {\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n    return model;\n  }\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n      return geo;\n    }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n    const material = new LineBasicMaterial({\n      color: 0x3300ff,\n      linewidth: 1\n    });\n    return new Line(geometry, material);\n  } // parse the model node for transform data\n\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n    if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n    if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n    if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n    if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n    if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n    if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n    if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n  setLookAtProperties(model, modelNode) {\n    if ('LookAtProperty' in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function (child) {\n        if (child.relationship === 'LookAtProperty') {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n          if ('Lcl_Translation' in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n            if (model.target !== undefined) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              // Cameras and other Object3Ds\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n  parsePoseNodes() {\n    const bindMatrices = {};\n    if ('Pose' in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === 'BindPose' && BindPoseNode[nodeID].NbPoseNodes > 0) {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n    return bindMatrices;\n  } // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\n  createAmbientLight() {\n    if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b);\n        sceneGraph.add(new AmbientLight(color, 1));\n      }\n    }\n  }\n} // parse Geometry data from FBXTree and return map of BufferGeometries\n\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = new Map();\n    if ('Geometry' in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n    return geometryMap;\n  } // Parse single node in FBXTree.Objects.Geometry\n\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case 'Mesh':\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n      case 'NurbsCurve':\n        return this.parseNurbsGeometry(geoNode);\n    }\n  } // Parse single node mesh geometry in FBXTree.Objects.Geometry\n\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    }); // don't create geometry if it is not associated with any models\n\n    if (modelNodes.length === 0) return;\n    const skeleton = relationships.children.reduce(function (skeleton, child) {\n      if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n      return skeleton;\n    }, null);\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== undefined) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    }); // Assume one model and get the preRotation from that\n    // if there is more than one model associated with the geometry this may cause problems\n\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n    if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n    if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  } // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName) geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute('position', positionAttribute);\n    if (buffers.colors.length > 0) {\n      geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n    }\n    if (skeleton) {\n      geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n      geo.FBX_Deformer = skeleton;\n    }\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute('normal', normalAttribute);\n    }\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      // subsequent uv buffers are called 'uv1', 'uv2', ...\n      let name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n      if (i === 0) {\n        name = 'uv';\n      }\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n      // Convert the material indices of each vertex into rendering groups on the geometry.\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      }); // the loop above doesn't add the last group, do that here.\n\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      } // case where there are multiple materials but the whole geometry is only\n      // using one of them\n\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n        i++;\n      }\n    }\n    geoInfo.weightTable = {};\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        // loop over the bone's vertex indices and weights\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n    return geoInfo;\n  }\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false; // these will hold data for a single face\n\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false; // Face index and vertex index arrays are combined in a single array\n      // A cube with quad faces looks like this:\n      // PolygonVertexIndex: *24 {\n      //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n      //  }\n      // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n      // to find index of last vertex bit shift the index: ^ - 1\n\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n        endOfFace = true;\n      }\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n            displayedWeightsWarning = true;\n          }\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        } // if the weight array is shorter than 4 pad with 0s\n\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n          if (faceUVs[i] === undefined) {\n            faceUVs[i] = [];\n          }\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n      faceLength++;\n      if (endOfFace) {\n        scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n        polygonIndex++;\n        faceLength = 0; // reset arrays for the next face\n\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  } // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n    const scope = this;\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n        if (morphGeoNode !== undefined) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  } // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    } // TODO: add morph normal support\n\n    const morphGeoInfo = {\n      vertexIndices: vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  } // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n    if (referenceType === 'IndexToDirect') {\n      if ('NormalIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if ('NormalsIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n    return {\n      dataSize: 3,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n    return {\n      dataSize: 2,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n    return {\n      dataSize: 4,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n    if (mappingType === 'NoMappingInformation') {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: 'AllSame',\n        referenceType: referenceType\n      };\n    }\n    const materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n    // we expect.So we create an intermediate buffer that points to the index in the buffer,\n    // for conforming with the other functions we've written for other data.\n\n    const materialIndices = [];\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === undefined) {\n      console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n      return new BufferGeometry();\n    }\n    const order = parseInt(geoNode.Order);\n    if (isNaN(order)) {\n      console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n    let startKnot, endKnot;\n    if (geoNode.Form === 'Closed') {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === 'Periodic') {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const points = curve.getPoints(controlPoints.length * 12);\n    return new BufferGeometry().setFromPoints(points);\n  }\n} // parse animation data from FBXTree\n\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n    if (rawClips !== undefined) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n    return animationClips;\n  }\n  parseClips() {\n    // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n    // if this is undefined we can safely assume there are no animations\n    if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  } // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = new Map();\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n    return curveNodesMap;\n  } // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n    // e.g. position times: [0, 0.4, 0. 8]\n    // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n    // clearly, this should be optimised to\n    // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n    // this shows up in nearly every FBX file, and generally time array is length > 100\n\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n      if (relationships !== undefined) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n        }\n      }\n    }\n  } // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = new Map();\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n      if (connection !== undefined) {\n        // all the animationCurveNodes used in the layer\n        const children = connection.children;\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n            if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                if (modelID !== undefined) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n                  if (rawModel === undefined) {\n                    console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                    return;\n                  }\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function (child) {\n                    if (child.ID === rawModel.id) {\n                      node.transform = child.matrix;\n                      if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n\n                  if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                  if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n    return layersMap;\n  } // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n    const rawClips = {};\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n      if (children.length > 1) {\n        // it seems like stacks will always be associated with a single layer. But just in case there are files\n        // where there are multiple layers per stack, we'll display a warning\n        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n      }\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer: layer\n      };\n    }\n    return rawClips;\n  }\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialRotation = new Quaternion();\n    let initialScale = new Vector3();\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n    if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n      if (positionTrack !== undefined) tracks.push(positionTrack);\n    }\n    if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n      if (rotationTrack !== undefined) tracks.push(rotationTrack);\n    }\n    if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n      if (scaleTrack !== undefined) tracks.push(scaleTrack);\n    }\n    if (rawTracks.DeformPercent !== undefined) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== undefined) tracks.push(morphTrack);\n    }\n    return tracks;\n  }\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n  }\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== undefined) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(MathUtils.degToRad);\n    }\n    if (curves.y !== undefined) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(MathUtils.degToRad);\n    }\n    if (curves.z !== undefined) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(MathUtils.degToRad);\n    }\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    if (preRotation !== undefined) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n    if (postRotation !== undefined) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== undefined) quaternion.premultiply(preRotation);\n      if (postRotation !== undefined) quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n    return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n  }\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function (val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n  } // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n\n  getTimesForAllAxes(curves) {\n    let times = []; // first join together the times for each axis, if defined\n\n    if (curves.x !== undefined) times = times.concat(curves.x.times);\n    if (curves.y !== undefined) times = times.concat(curves.y.times);\n    if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n    times = times.sort(function (a, b) {\n      return a - b;\n    }); // and remove duplicates\n\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n      times = times.slice(0, targetIndex);\n    }\n    return times;\n  }\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time);\n      if (curves.y) yIndex = curves.y.times.indexOf(time);\n      if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        // otherwise use the x value from the previous frame\n        values.push(prevValue[0]);\n      }\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  } // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n} // parse an FBX file in ASCII format\n\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n  getCurrentProp() {\n    return this.currentProp;\n  }\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = '';\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty) return;\n      const matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n      const matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n      const matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        // large arrays are split over multiple lines terminated with a ',' character\n        // if this is encountered the line needs to be joined to the previous line\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n    const nodeAttrs = property[2].split(',').map(function (attr) {\n      return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n    });\n    const node = {\n      name: nodeName\n    };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode(); // a top node\n\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      // a subnode\n      // if the subnode already exists, append it\n      if (nodeName in currentNode) {\n        // special case Pose needs PoseNodes as an array\n        if (nodeName === 'PoseNode') {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== undefined) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n        if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === 'number') {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== 'Properties70') {\n        if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n      }\n    }\n    if (typeof attrs.id === 'number') node.id = attrs.id;\n    if (attrs.name !== '') node.attrName = attrs.name;\n    if (attrs.type !== '') node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n    if (attrs[0] !== '') {\n      id = parseInt(attrs[0]);\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n    let name = '',\n      type = '';\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, '');\n      type = attrs[2];\n    }\n    return {\n      id: id,\n      name: name,\n      type: type\n    };\n  }\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n    let propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n    //\tContent: ,\n    //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n    if (propName === 'Content' && propValue === ',') {\n      propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n    }\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n    if (parentName === 'Properties70') {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    } // Connections\n\n    if (propName === 'C') {\n      const connProps = propValue.split(',').slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(',').slice(3);\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, '');\n      });\n      propName = 'connections';\n      propValue = [from, to];\n      append(propValue, rest);\n      if (currentNode[propName] === undefined) {\n        currentNode[propName] = [];\n      }\n    } // Node\n\n    if (propName === 'Node') currentNode.id = propValue; // connections\n\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n    }\n    this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n    if (propName === 'a' && propValue.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n    // so convert the string to an array\n\n    if (line.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  } // parse \"Property70\"\n\n  parseNodeSpecialProperty(line, propName, propValue) {\n    // split this\n    // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n    // into array like below\n    // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n    switch (innerPropType1) {\n      case 'int':\n      case 'enum':\n      case 'bool':\n      case 'ULongLong':\n      case 'double':\n      case 'Number':\n      case 'FieldOfView':\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n      case 'Color':\n      case 'ColorRGB':\n      case 'Vector3D':\n      case 'Lcl_Translation':\n      case 'Lcl_Rotation':\n      case 'Lcl_Scaling':\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    } // CAUTION: these props must append to parent's parent\n\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n} // Parse an FBX file in Binary format\n\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23); // skip magic 23 bytes\n\n    const version = reader.getUint32();\n    if (version < 6400) {\n      throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n    }\n    const allNodes = new FBXTree();\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null) allNodes.add(node.name, node);\n    }\n    return allNodes;\n  } // Check if reader has reached the end of content.\n\n  endOfContent(reader) {\n    // footer size: 160bytes + 16-byte alignment padding\n    // - 16bytes: magic\n    // - padding til 16-byte alignment (at least 1byte?)\n    //\t(seems like some exporters embed fixed 15 or 16bytes?)\n    // - 4bytes: magic\n    // - 4bytes: version\n    // - 120bytes: zero\n    // - 16bytes: magic\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  } // recursively parse nodes until the end of the file is reached\n\n  parseNode(reader, version) {\n    const node = {}; // The first three data sizes depends on version.\n\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n    if (endOffset === 0) return null;\n    const propertyList = [];\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n    const id = propertyList.length > 0 ? propertyList[0] : '';\n    const attrName = propertyList.length > 1 ? propertyList[1] : '';\n    const attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n    // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null) this.parseSubNode(name, node, subNode);\n    }\n    node.propertyList = propertyList; // raw property list used by parent\n\n    if (typeof id === 'number') node.id = id;\n    if (attrName !== '') node.attrName = attrName;\n    if (attrType !== '') node.attrType = attrType;\n    if (name !== '') node.name = name;\n    return node;\n  }\n  parseSubNode(name, node, subNode) {\n    // special case: child node is single property\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === 'Connections' && subNode.name === 'C') {\n      const array = [];\n      subNode.propertyList.forEach(function (property, i) {\n        // first Connection is FBX type (OO, OP, etc.). We'll discard these\n        if (i !== 0) array.push(property);\n      });\n      if (node.connections === undefined) {\n        node.connections = [];\n      }\n      node.connections.push(array);\n    } else if (subNode.name === 'Properties70') {\n      const keys = Object.keys(subNode);\n      keys.forEach(function (key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === 'Properties70' && subNode.name === 'P') {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n      if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n      if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      } // this will be copied to parent, see above\n\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n    } else if (node[subNode.name] === undefined) {\n      if (typeof subNode.id === 'number') {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === 'PoseNode') {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === undefined) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n    switch (type) {\n      case 'C':\n        return reader.getBoolean();\n      case 'D':\n        return reader.getFloat64();\n      case 'F':\n        return reader.getFloat32();\n      case 'I':\n        return reader.getInt32();\n      case 'L':\n        return reader.getInt64();\n      case 'R':\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n      case 'S':\n        length = reader.getUint32();\n        return reader.getString(length);\n      case 'Y':\n        return reader.getInt16();\n      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case 'i':\n      case 'l':\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n        const compressedLength = reader.getUint32();\n        if (encoding === 0) {\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader.getBooleanArray(arrayLength);\n            case 'd':\n              return reader.getFloat64Array(arrayLength);\n            case 'f':\n              return reader.getFloat32Array(arrayLength);\n            case 'i':\n              return reader.getInt32Array(arrayLength);\n            case 'l':\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n        const reader2 = new BinaryReader(data.buffer);\n        switch (type) {\n          case 'b':\n          case 'c':\n            return reader2.getBooleanArray(arrayLength);\n          case 'd':\n            return reader2.getFloat64Array(arrayLength);\n          case 'f':\n            return reader2.getFloat32Array(arrayLength);\n          case 'i':\n            return reader2.getInt32Array(arrayLength);\n          case 'l':\n            return reader2.getInt64Array(arrayLength);\n        }\n      default:\n        throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n    }\n  }\n}\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n  getOffset() {\n    return this.offset;\n  }\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n  skip(length) {\n    this.offset += length;\n  } // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n  getBooleanArray(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n    return a;\n  }\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getInt32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n    return a;\n  }\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  } // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n\n  getInt64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    } // calculate negative value\n\n    if (high & 0x80000000) {\n      high = ~high & 0xffffffff;\n      low = ~low & 0xffffffff;\n      if (low === 0xffffffff) high = high + 1 & 0xffffffff;\n      low = low + 1 & 0xffffffff;\n      return -(high * 0x100000000 + low);\n    }\n    return high * 0x100000000 + low;\n  }\n  getInt64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n    return a;\n  } // Note: see getInt64() comment\n\n  getUint64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n    return high * 0x100000000 + low;\n  }\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getFloat32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n    return a;\n  }\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n  getFloat64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n    return a;\n  }\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n  getString(size) {\n    // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n    let a = [];\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0) a = a.slice(0, nullByte);\n    return LoaderUtils.decodeText(new Uint8Array(a));\n  }\n} // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\n\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n} // ************** UTILITY FUNCTIONS **************\n\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\nfunction isFbxFormatASCII(text) {\n  const CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  let cursor = 0;\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n} // Converts FBX ticks into real time seconds.\n\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\nconst dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\nconst tempEuler = new Euler();\nconst tempVec = new Vector3(); // generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = lParentLSM.clone().invert();\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert(); // Calculate the local transform matrix\n\n  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS); // from global to local\n\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n} // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = ['ZYX',\n  // -> XYZ extrinsic\n  'YZX',\n  // -> XZY extrinsic\n  'XZY',\n  // -> YZX extrinsic\n  'ZXY',\n  // -> YXZ extrinsic\n  'YXZ',\n  // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n  return enums[order];\n} // Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\n\nfunction parseNumberArray(value) {\n  const array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n  return a;\n} // inject array a2 into array a1 at index\n\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\nexport { FBXLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","TextureLoader","RepeatWrapping","ClampToEdgeWrapping","Texture","MeshPhongMaterial","MeshLambertMaterial","Color","sRGBEncoding","EquirectangularReflectionMapping","Matrix4","Group","Bone","PropertyBinding","Object3D","OrthographicCamera","PerspectiveCamera","PointLight","MathUtils","SpotLight","DirectionalLight","SkinnedMesh","Mesh","LineBasicMaterial","Line","Vector3","Skeleton","AmbientLight","BufferGeometry","Float32BufferAttribute","Uint16BufferAttribute","Matrix3","Vector4","AnimationClip","Quaternion","Euler","VectorKeyframeTrack","QuaternionKeyframeTrack","NumberKeyframeTrack","unzlibSync","NURBSCurve","fbxTree","connections","sceneGraph","FBXLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","undefined","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","getTransformData","bone","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","BindPoseNode","Pose","NbPoseNodes","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","curve","points","getPoints","setFromPoints","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","toArray","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","reader2","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","clone","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/loaders/FBXLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, sRGBEncoding, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from 'three';\nimport { unzlibSync } from 'fflate';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\n\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error('THREE.FBXLoader: Unknown format.');\n      }\n\n      if (getFbxVersion(FBXText) < 7000) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n      }\n\n      fbxTree = new TextParser().parse(FBXText);\n    } // console.log( fbxTree );\n\n\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n\n} // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\n\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  } // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n\n\n  parseConnections() {\n    const connectionMap = new Map();\n\n    if ('Connections' in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n\n        const parentRelationship = {\n          ID: toID,\n          relationship: relationship\n        };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n\n        const childRelationship = {\n          ID: fromID,\n          relationship: relationship\n        };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n\n    return connectionMap;\n  } // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n\n\n  parseImages() {\n    const images = {};\n    const blobs = {};\n\n    if ('Video' in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n        if ('Content' in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n    }\n\n    return images;\n  } // Parse embedded image data in FBXTree.Video.Content\n\n\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n    let type;\n\n    switch (extension) {\n      case 'bmp':\n        type = 'image/bmp';\n        break;\n\n      case 'jpg':\n      case 'jpeg':\n        type = 'image/jpeg';\n        break;\n\n      case 'png':\n        type = 'image/png';\n        break;\n\n      case 'tif':\n        type = 'image/tiff';\n        break;\n\n      case 'tga':\n        if (this.manager.getHandler('.tga') === null) {\n          console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n        }\n\n        type = 'image/tga';\n        break;\n\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n\n    if (typeof content === 'string') {\n      // ASCII format\n      return 'data:' + type + ';base64,' + content;\n    } else {\n      // Binary Format\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], {\n        type: type\n      }));\n    }\n  } // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n\n\n  parseTextures(images) {\n    const textureMap = new Map();\n\n    if ('Texture' in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n\n    return textureMap;\n  } // Parse individual node in FBXTree.Objects.Texture\n\n\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n    // 0: repeat(default), 1: clamp\n\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n    if ('Scaling' in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n\n    return texture;\n  } // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\n\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n\n    if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n      fileName = images[children[0].ID];\n\n      if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n        this.textureLoader.setPath(undefined);\n      }\n    }\n\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n\n    if (extension === 'tga') {\n      const loader = this.manager.getHandler('.tga');\n\n      if (loader === null) {\n        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        loader.setPath(this.textureLoader.path);\n        texture = loader.load(fileName);\n      }\n    } else if (extension === 'psd') {\n      console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  } // Parse nodes in FBXTree.Objects.Material\n\n\n  parseMaterials(textureMap) {\n    const materialMap = new Map();\n\n    if ('Material' in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null) materialMap.set(parseInt(nodeID), material);\n      }\n    }\n\n    return materialMap;\n  } // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n\n\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n    if (typeof type === 'object') {\n      type = type.value;\n    } // Ignore unused materials which don't have any connections.\n\n\n    if (!connections.has(ID)) return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n\n    switch (type.toLowerCase()) {\n      case 'phong':\n        material = new MeshPhongMaterial();\n        break;\n\n      case 'lambert':\n        material = new MeshLambertMaterial();\n        break;\n\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  } // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n\n\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n      // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n    }\n\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n      // The blender exporter exports emissive color here instead of in materialNode.Emissive\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n    }\n\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n\n    if (parameters.opacity < 1.0) {\n      parameters.transparent = true;\n    }\n\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n      // The blender exporter exports specular color here instead of in materialNode.Specular\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n    }\n\n    const scope = this;\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship;\n\n      switch (type) {\n        case 'Bump':\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'Maya|TEX_ao_map':\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'DiffuseColor':\n        case 'Maya|TEX_color_map':\n          parameters.map = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.map !== undefined) {\n            parameters.map.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'DisplacementColor':\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'EmissiveColor':\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.emissiveMap !== undefined) {\n            parameters.emissiveMap.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'NormalMap':\n        case 'Maya|TEX_normal_map':\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'ReflectionColor':\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.envMap !== undefined) {\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            parameters.envMap.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'SpecularColor':\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.specularMap !== undefined) {\n            parameters.specularMap.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'TransparentColor':\n        case 'TransparencyFactor':\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n\n        case 'AmbientColor':\n        case 'ShininessExponent': // AKA glossiness map\n\n        case 'SpecularFactor': // AKA specularLevel\n\n        case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n        default:\n          console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n          break;\n      }\n    });\n    return parameters;\n  } // get a texture from the textureMap for use by a material.\n\n\n  getTexture(textureMap, id) {\n    // if the texture is a layered texture, just use the first layer and issue a warning\n    if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n      id = connections.get(id).children[0].ID;\n    }\n\n    return textureMap.get(id);\n  } // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\n\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n\n    if ('Deformer' in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n\n        if (deformerNode.attrType === 'Skin') {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n          }\n\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === 'BlendShape') {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n          }\n\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n\n    return {\n      skeletons: skeletons,\n      morphTargets: morphTargets\n    };\n  } // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n\n\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== 'Cluster') return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n\n      };\n\n      if ('Indexes' in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones: rawBones,\n      bones: []\n    };\n  } // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\n\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n        return child.relationship === undefined;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n\n    return rawMorphTargets;\n  } // create the main Group() to be returned by the loader\n\n\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== undefined) parent.add(model);\n      });\n\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n\n    sceneGraph.animations = animations;\n  } // parse nodes in FBXTree.Objects.Model\n\n\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = new Map();\n    const modelNodes = fbxTree.Objects.Model;\n\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n      if (!model) {\n        switch (node.attrType) {\n          case 'Camera':\n            model = this.createCamera(relationships);\n            break;\n\n          case 'Light':\n            model = this.createLight(relationships);\n            break;\n\n          case 'Mesh':\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n\n          case 'NurbsCurve':\n            model = this.createCurve(relationships, geometryMap);\n            break;\n\n          case 'LimbNode':\n          case 'Root':\n            model = new Bone();\n            break;\n\n          case 'Null':\n          default:\n            model = new Group();\n            break;\n        }\n\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n        model.ID = id;\n      }\n\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n\n    return modelMap;\n  }\n\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n            bone.ID = id;\n            skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n            // duplicate the bone here and and it as a child of the first bone\n\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  } // create a PerspectiveCamera or OrthographicCamera\n\n\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n      if (attr !== undefined) {\n        cameraAttribute = attr;\n      }\n    });\n\n    if (cameraAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n\n      if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n\n      let nearClippingPlane = 1;\n\n      if (cameraAttribute.NearPlane !== undefined) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n      }\n\n      let farClippingPlane = 1000;\n\n      if (cameraAttribute.FarPlane !== undefined) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n      }\n\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n\n      if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n\n      const aspect = width / height;\n      let fov = 45;\n\n      if (cameraAttribute.FieldOfView !== undefined) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n      switch (type) {\n        case 0:\n          // Perspective\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null) model.setFocalLength(focalLength);\n          break;\n\n        case 1:\n          // Orthographic\n          model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n          model = new Object3D();\n          break;\n      }\n    }\n\n    return model;\n  } // Create a DirectionalLight, PointLight or SpotLight\n\n\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n      if (attr !== undefined) {\n        lightAttribute = attr;\n      }\n    });\n\n    if (lightAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type; // LightType can be undefined for Point lights\n\n      if (lightAttribute.LightType === undefined) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n\n      let color = 0xffffff;\n\n      if (lightAttribute.Color !== undefined) {\n        color = new Color().fromArray(lightAttribute.Color.value);\n      }\n\n      let intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n      if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n\n      let distance = 0;\n\n      if (lightAttribute.FarAttenuationEnd !== undefined) {\n        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n      const decay = 1;\n\n      switch (type) {\n        case 0:\n          // Point\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n\n        case 1:\n          // Directional\n          model = new DirectionalLight(color, intensity);\n          break;\n\n        case 2:\n          // Spot\n          let angle = Math.PI / 3;\n\n          if (lightAttribute.InnerAngle !== undefined) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n\n          let penumbra = 0;\n\n          if (lightAttribute.OuterAngle !== undefined) {\n            // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n          model = new PointLight(color, intensity);\n          break;\n      }\n\n      if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n\n    return model;\n  }\n\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = []; // get geometry and materials(s) from connections\n\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({\n        color: 0xcccccc\n      });\n      materials.push(material);\n    }\n\n    if ('color' in geometry.attributes) {\n      materials.forEach(function (material) {\n        material.vertexColors = true;\n      });\n    }\n\n    if (geometry.FBX_Deformer) {\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n\n    return model;\n  }\n\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n      return geo;\n    }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n    const material = new LineBasicMaterial({\n      color: 0x3300ff,\n      linewidth: 1\n    });\n    return new Line(geometry, material);\n  } // parse the model node for transform data\n\n\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n    if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n    if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n    if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n    if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n    if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n    if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n    if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n\n  setLookAtProperties(model, modelNode) {\n    if ('LookAtProperty' in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function (child) {\n        if (child.relationship === 'LookAtProperty') {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n          if ('Lcl_Translation' in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n            if (model.target !== undefined) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              // Cameras and other Object3Ds\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n\n  parsePoseNodes() {\n    const bindMatrices = {};\n\n    if ('Pose' in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === 'BindPose' && BindPoseNode[nodeID].NbPoseNodes > 0) {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n\n    return bindMatrices;\n  } // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\n\n  createAmbientLight() {\n    if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b);\n        sceneGraph.add(new AmbientLight(color, 1));\n      }\n    }\n  }\n\n} // parse Geometry data from FBXTree and return map of BufferGeometries\n\n\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = new Map();\n\n    if ('Geometry' in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n\n    return geometryMap;\n  } // Parse single node in FBXTree.Objects.Geometry\n\n\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case 'Mesh':\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n\n      case 'NurbsCurve':\n        return this.parseNurbsGeometry(geoNode);\n    }\n  } // Parse single node mesh geometry in FBXTree.Objects.Geometry\n\n\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    }); // don't create geometry if it is not associated with any models\n\n    if (modelNodes.length === 0) return;\n    const skeleton = relationships.children.reduce(function (skeleton, child) {\n      if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n      return skeleton;\n    }, null);\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== undefined) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    }); // Assume one model and get the preRotation from that\n    // if there is more than one model associated with the geometry this may cause problems\n\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n    if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n    if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  } // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\n\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName) geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute('position', positionAttribute);\n\n    if (buffers.colors.length > 0) {\n      geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n    }\n\n    if (skeleton) {\n      geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n      geo.FBX_Deformer = skeleton;\n    }\n\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute('normal', normalAttribute);\n    }\n\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      // subsequent uv buffers are called 'uv1', 'uv2', ...\n      let name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n      if (i === 0) {\n        name = 'uv';\n      }\n\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n\n    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n      // Convert the material indices of each vertex into rendering groups on the geometry.\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      }); // the loop above doesn't add the last group, do that here.\n\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      } // case where there are multiple materials but the whole geometry is only\n      // using one of them\n\n\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n\n        i++;\n      }\n    }\n\n    geoInfo.weightTable = {};\n\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        // loop over the bone's vertex indices and weights\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n\n    return geoInfo;\n  }\n\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false; // these will hold data for a single face\n\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false; // Face index and vertex index arrays are combined in a single array\n      // A cube with quad faces looks like this:\n      // PolygonVertexIndex: *24 {\n      //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n      //  }\n      // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n      // to find index of last vertex bit shift the index: ^ - 1\n\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n        endOfFace = true;\n      }\n\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n            displayedWeightsWarning = true;\n          }\n\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        } // if the weight array is shorter than 4 pad with 0s\n\n\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n          if (faceUVs[i] === undefined) {\n            faceUVs[i] = [];\n          }\n\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n\n      faceLength++;\n\n      if (endOfFace) {\n        scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n        polygonIndex++;\n        faceLength = 0; // reset arrays for the next face\n\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  } // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\n\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n    const scope = this;\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n        if (morphGeoNode !== undefined) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  } // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n\n\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    } // TODO: add morph normal support\n\n\n    const morphGeoInfo = {\n      vertexIndices: vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  } // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\n\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      if ('NormalIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if ('NormalsIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n\n    return {\n      dataSize: 3,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\n\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n\n    return {\n      dataSize: 2,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\n\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n\n    return {\n      dataSize: 4,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\n\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n\n    if (mappingType === 'NoMappingInformation') {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: 'AllSame',\n        referenceType: referenceType\n      };\n    }\n\n    const materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n    // we expect.So we create an intermediate buffer that points to the index in the buffer,\n    // for conforming with the other functions we've written for other data.\n\n    const materialIndices = [];\n\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\n\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === undefined) {\n      console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n      return new BufferGeometry();\n    }\n\n    const order = parseInt(geoNode.Order);\n\n    if (isNaN(order)) {\n      console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n\n    let startKnot, endKnot;\n\n    if (geoNode.Form === 'Closed') {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === 'Periodic') {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const points = curve.getPoints(controlPoints.length * 12);\n    return new BufferGeometry().setFromPoints(points);\n  }\n\n} // parse animation data from FBXTree\n\n\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n\n    if (rawClips !== undefined) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n\n    return animationClips;\n  }\n\n  parseClips() {\n    // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n    // if this is undefined we can safely assume there are no animations\n    if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  } // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n\n\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = new Map();\n\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n\n    return curveNodesMap;\n  } // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n\n\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n    // e.g. position times: [0, 0.4, 0. 8]\n    // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n    // clearly, this should be optimised to\n    // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n    // this shows up in nearly every FBX file, and generally time array is length > 100\n\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n\n      if (relationships !== undefined) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n        }\n      }\n    }\n  } // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\n\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = new Map();\n\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n\n      if (connection !== undefined) {\n        // all the animationCurveNodes used in the layer\n        const children = connection.children;\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n            if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n\n                if (modelID !== undefined) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n\n                  if (rawModel === undefined) {\n                    console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                    return;\n                  }\n\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function (child) {\n                    if (child.ID === rawModel.id) {\n                      node.transform = child.matrix;\n                      if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n\n                  if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                  if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n\n    return layersMap;\n  } // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n\n\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n    const rawClips = {};\n\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n\n      if (children.length > 1) {\n        // it seems like stacks will always be associated with a single layer. But just in case there are files\n        // where there are multiple layers per stack, we'll display a warning\n        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n      }\n\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer: layer\n      };\n    }\n\n    return rawClips;\n  }\n\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialRotation = new Quaternion();\n    let initialScale = new Vector3();\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n\n    if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n      if (positionTrack !== undefined) tracks.push(positionTrack);\n    }\n\n    if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n      if (rotationTrack !== undefined) tracks.push(rotationTrack);\n    }\n\n    if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n      if (scaleTrack !== undefined) tracks.push(scaleTrack);\n    }\n\n    if (rawTracks.DeformPercent !== undefined) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== undefined) tracks.push(morphTrack);\n    }\n\n    return tracks;\n  }\n\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n  }\n\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== undefined) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(MathUtils.degToRad);\n    }\n\n    if (curves.y !== undefined) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(MathUtils.degToRad);\n    }\n\n    if (curves.z !== undefined) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(MathUtils.degToRad);\n    }\n\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n    if (preRotation !== undefined) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n\n    if (postRotation !== undefined) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== undefined) quaternion.premultiply(preRotation);\n      if (postRotation !== undefined) quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n\n    return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n  }\n\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function (val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n  } // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n\n\n  getTimesForAllAxes(curves) {\n    let times = []; // first join together the times for each axis, if defined\n\n    if (curves.x !== undefined) times = times.concat(curves.x.times);\n    if (curves.y !== undefined) times = times.concat(curves.y.times);\n    if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n    times = times.sort(function (a, b) {\n      return a - b;\n    }); // and remove duplicates\n\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n\n      times = times.slice(0, targetIndex);\n    }\n\n    return times;\n  }\n\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time);\n      if (curves.y) yIndex = curves.y.times.indexOf(time);\n      if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        // otherwise use the x value from the previous frame\n        values.push(prevValue[0]);\n      }\n\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  } // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n\n\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n\n} // parse an FBX file in ASCII format\n\n\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n\n  getCurrentProp() {\n    return this.currentProp;\n  }\n\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = '';\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty) return;\n      const matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n      const matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n      const matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        // large arrays are split over multiple lines terminated with a ',' character\n        // if this is encountered the line needs to be joined to the previous line\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n    const nodeAttrs = property[2].split(',').map(function (attr) {\n      return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n    });\n    const node = {\n      name: nodeName\n    };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode(); // a top node\n\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      // a subnode\n      // if the subnode already exists, append it\n      if (nodeName in currentNode) {\n        // special case Pose needs PoseNodes as an array\n        if (nodeName === 'PoseNode') {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== undefined) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n\n        if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === 'number') {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== 'Properties70') {\n        if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n      }\n    }\n\n    if (typeof attrs.id === 'number') node.id = attrs.id;\n    if (attrs.name !== '') node.attrName = attrs.name;\n    if (attrs.type !== '') node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n\n    if (attrs[0] !== '') {\n      id = parseInt(attrs[0]);\n\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n\n    let name = '',\n        type = '';\n\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, '');\n      type = attrs[2];\n    }\n\n    return {\n      id: id,\n      name: name,\n      type: type\n    };\n  }\n\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n    let propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n    //\tContent: ,\n    //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n    if (propName === 'Content' && propValue === ',') {\n      propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n    }\n\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n\n    if (parentName === 'Properties70') {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    } // Connections\n\n\n    if (propName === 'C') {\n      const connProps = propValue.split(',').slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(',').slice(3);\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, '');\n      });\n      propName = 'connections';\n      propValue = [from, to];\n      append(propValue, rest);\n\n      if (currentNode[propName] === undefined) {\n        currentNode[propName] = [];\n      }\n    } // Node\n\n\n    if (propName === 'Node') currentNode.id = propValue; // connections\n\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n    }\n\n    this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n    if (propName === 'a' && propValue.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n    // so convert the string to an array\n\n    if (line.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  } // parse \"Property70\"\n\n\n  parseNodeSpecialProperty(line, propName, propValue) {\n    // split this\n    // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n    // into array like below\n    // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n    switch (innerPropType1) {\n      case 'int':\n      case 'enum':\n      case 'bool':\n      case 'ULongLong':\n      case 'double':\n      case 'Number':\n      case 'FieldOfView':\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n\n      case 'Color':\n      case 'ColorRGB':\n      case 'Vector3D':\n      case 'Lcl_Translation':\n      case 'Lcl_Rotation':\n      case 'Lcl_Scaling':\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    } // CAUTION: these props must append to parent's parent\n\n\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n\n} // Parse an FBX file in Binary format\n\n\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23); // skip magic 23 bytes\n\n    const version = reader.getUint32();\n\n    if (version < 6400) {\n      throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n    }\n\n    const allNodes = new FBXTree();\n\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null) allNodes.add(node.name, node);\n    }\n\n    return allNodes;\n  } // Check if reader has reached the end of content.\n\n\n  endOfContent(reader) {\n    // footer size: 160bytes + 16-byte alignment padding\n    // - 16bytes: magic\n    // - padding til 16-byte alignment (at least 1byte?)\n    //\t(seems like some exporters embed fixed 15 or 16bytes?)\n    // - 4bytes: magic\n    // - 4bytes: version\n    // - 120bytes: zero\n    // - 16bytes: magic\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  } // recursively parse nodes until the end of the file is reached\n\n\n  parseNode(reader, version) {\n    const node = {}; // The first three data sizes depends on version.\n\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n    if (endOffset === 0) return null;\n    const propertyList = [];\n\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n    const id = propertyList.length > 0 ? propertyList[0] : '';\n    const attrName = propertyList.length > 1 ? propertyList[1] : '';\n    const attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n    // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null) this.parseSubNode(name, node, subNode);\n    }\n\n    node.propertyList = propertyList; // raw property list used by parent\n\n    if (typeof id === 'number') node.id = id;\n    if (attrName !== '') node.attrName = attrName;\n    if (attrType !== '') node.attrType = attrType;\n    if (name !== '') node.name = name;\n    return node;\n  }\n\n  parseSubNode(name, node, subNode) {\n    // special case: child node is single property\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === 'Connections' && subNode.name === 'C') {\n      const array = [];\n      subNode.propertyList.forEach(function (property, i) {\n        // first Connection is FBX type (OO, OP, etc.). We'll discard these\n        if (i !== 0) array.push(property);\n      });\n\n      if (node.connections === undefined) {\n        node.connections = [];\n      }\n\n      node.connections.push(array);\n    } else if (subNode.name === 'Properties70') {\n      const keys = Object.keys(subNode);\n      keys.forEach(function (key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === 'Properties70' && subNode.name === 'P') {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n      if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n      if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      } // this will be copied to parent, see above\n\n\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n    } else if (node[subNode.name] === undefined) {\n      if (typeof subNode.id === 'number') {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === 'PoseNode') {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === undefined) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n\n    switch (type) {\n      case 'C':\n        return reader.getBoolean();\n\n      case 'D':\n        return reader.getFloat64();\n\n      case 'F':\n        return reader.getFloat32();\n\n      case 'I':\n        return reader.getInt32();\n\n      case 'L':\n        return reader.getInt64();\n\n      case 'R':\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n\n      case 'S':\n        length = reader.getUint32();\n        return reader.getString(length);\n\n      case 'Y':\n        return reader.getInt16();\n\n      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case 'i':\n      case 'l':\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n        const compressedLength = reader.getUint32();\n\n        if (encoding === 0) {\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n        const reader2 = new BinaryReader(data.buffer);\n\n        switch (type) {\n          case 'b':\n          case 'c':\n            return reader2.getBooleanArray(arrayLength);\n\n          case 'd':\n            return reader2.getFloat64Array(arrayLength);\n\n          case 'f':\n            return reader2.getFloat32Array(arrayLength);\n\n          case 'i':\n            return reader2.getInt32Array(arrayLength);\n\n          case 'l':\n            return reader2.getInt64Array(arrayLength);\n        }\n\n      default:\n        throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n    }\n  }\n\n}\n\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  getOffset() {\n    return this.offset;\n  }\n\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n\n  skip(length) {\n    this.offset += length;\n  } // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n\n\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n\n  getBooleanArray(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n\n    return a;\n  }\n\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  getInt32Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n\n    return a;\n  }\n\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  } // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n\n\n  getInt64() {\n    let low, high;\n\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    } // calculate negative value\n\n\n    if (high & 0x80000000) {\n      high = ~high & 0xffffffff;\n      low = ~low & 0xffffffff;\n      if (low === 0xffffffff) high = high + 1 & 0xffffffff;\n      low = low + 1 & 0xffffffff;\n      return -(high * 0x100000000 + low);\n    }\n\n    return high * 0x100000000 + low;\n  }\n\n  getInt64Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n\n    return a;\n  } // Note: see getInt64() comment\n\n\n  getUint64() {\n    let low, high;\n\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n\n    return high * 0x100000000 + low;\n  }\n\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  getFloat32Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n\n    return a;\n  }\n\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n\n  getFloat64Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n\n    return a;\n  }\n\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n\n  getString(size) {\n    // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n    let a = [];\n\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0) a = a.slice(0, nullByte);\n    return LoaderUtils.decodeText(new Uint8Array(a));\n  }\n\n} // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\n\n\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n\n} // ************** UTILITY FUNCTIONS **************\n\n\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\n\nfunction isFbxFormatASCII(text) {\n  const CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  let cursor = 0;\n\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n} // Converts FBX ticks into real time seconds.\n\n\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\n\nconst dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\n\nconst tempEuler = new Euler();\nconst tempVec = new Vector3(); // generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = lParentLSM.clone().invert();\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert(); // Calculate the local transform matrix\n\n  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS); // from global to local\n\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n} // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = ['ZYX', // -> XYZ extrinsic\n  'YZX', // -> XZY extrinsic\n  'XZY', // -> YZX extrinsic\n  'ZXY', // -> YXZ extrinsic\n  'YXZ', // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n\n  return enums[order];\n} // Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\n\n\nfunction parseNumberArray(value) {\n  const array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\n\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\n\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\n\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n\n  return a;\n} // inject array a2 into array a1 at index\n\n\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\n\nexport { FBXLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}