"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.singleItemValueManager = exports.singleItemFieldValueManager = void 0;
var _dateUtils = require("./date-utils");
var _useField = require("../hooks/useField/useField.utils");
const singleItemValueManager = {
  emptyValue: null,
  getTodayValue: utils => utils.date(),
  cleanValue: _dateUtils.replaceInvalidDateByNull,
  areValuesEqual: _dateUtils.areDatesEqual,
  isSameError: (a, b) => a === b,
  defaultErrorState: null
};
exports.singleItemValueManager = singleItemValueManager;
const singleItemFieldValueManager = {
  updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,
  getSectionsFromValue: (utils, localeText, prevSections, date, format) => {
    const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;
    if (shouldReUsePrevDateSections) {
      return prevSections;
    }
    return (0, _useField.addPositionPropertiesToSections)((0, _useField.splitFormatIntoSections)(utils, localeText, format, date));
  },
  getValueStrFromSections: sections => (0, _useField.createDateStrForInputFromSections)(sections),
  getActiveDateSections: sections => sections,
  getActiveDateManager: (utils, state) => ({
    activeDate: state.value,
    referenceActiveDate: state.referenceValue,
    getNewValueFromNewActiveDate: newActiveDate => ({
      value: newActiveDate,
      referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate
    })
  }),
  parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue),
  hasError: error => error != null
};
exports.singleItemFieldValueManager = singleItemFieldValueManager;