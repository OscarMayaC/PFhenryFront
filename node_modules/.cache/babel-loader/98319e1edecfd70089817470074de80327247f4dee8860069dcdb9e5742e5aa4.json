{"ast":null,"code":"import { Vector2 } from 'three';\n\n/**\n * Edge Detection Shader using Frei-Chen filter\n * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n *\n * aspect: vec2 of (1/width, 1/height)\n */\n\nconst FreiChenShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    aspect: {\n      value: new Vector2(512, 512)\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'uniform vec2 aspect;', 'vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);', 'mat3 G[9];',\n  // hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\n  'const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );', 'const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );', 'const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );', 'const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );', 'const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );', 'const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );', 'const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );', 'const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );', 'const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );', 'void main(void)', '{', '\tG[0] = g0,', '\tG[1] = g1,', '\tG[2] = g2,', '\tG[3] = g3,', '\tG[4] = g4,', '\tG[5] = g5,', '\tG[6] = g6,', '\tG[7] = g7,', '\tG[8] = g8;', '\tmat3 I;', '\tfloat cnv[9];', '\tvec3 sample;', /* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n  '\tfor (float i=0.0; i<3.0; i++) {', '\t\tfor (float j=0.0; j<3.0; j++) {', '\t\t\tsample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;', '\t\t\tI[int(i)][int(j)] = length(sample);', '\t\t}', '\t}', /* calculate the convolution values for all the masks */\n  '\tfor (int i=0; i<9; i++) {', '\t\tfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);', '\t\tcnv[i] = dp3 * dp3;', '\t}', '\tfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);', '\tfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);', '\tgl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);', '}'].join('\\n')\n};\nexport { FreiChenShader };","map":{"version":3,"names":["Vector2","FreiChenShader","uniforms","tDiffuse","value","aspect","vertexShader","join","fragmentShader"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/shaders/FreiChenShader.js"],"sourcesContent":["import { Vector2 } from 'three';\n\n/**\n * Edge Detection Shader using Frei-Chen filter\n * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n *\n * aspect: vec2 of (1/width, 1/height)\n */\n\nconst FreiChenShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    aspect: {\n      value: new Vector2(512, 512)\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'uniform vec2 aspect;', 'vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);', 'mat3 G[9];', // hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\n  'const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );', 'const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );', 'const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );', 'const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );', 'const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );', 'const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );', 'const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );', 'const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );', 'const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );', 'void main(void)', '{', '\tG[0] = g0,', '\tG[1] = g1,', '\tG[2] = g2,', '\tG[3] = g3,', '\tG[4] = g4,', '\tG[5] = g5,', '\tG[6] = g6,', '\tG[7] = g7,', '\tG[8] = g8;', '\tmat3 I;', '\tfloat cnv[9];', '\tvec3 sample;',\n  /* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n  '\tfor (float i=0.0; i<3.0; i++) {', '\t\tfor (float j=0.0; j<3.0; j++) {', '\t\t\tsample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;', '\t\t\tI[int(i)][int(j)] = length(sample);', '\t\t}', '\t}',\n  /* calculate the convolution values for all the masks */\n  '\tfor (int i=0; i<9; i++) {', '\t\tfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);', '\t\tcnv[i] = dp3 * dp3;', '\t}', '\tfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);', '\tfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);', '\tgl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);', '}'].join('\\n')\n};\n\nexport { FreiChenShader };\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;;AAE/B;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG;EACrBC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MACRC,KAAK,EAAE;IACT,CAAC;IACDC,MAAM,EAAE;MACND,KAAK,EAAE,IAAIJ,OAAO,CAAC,GAAG,EAAE,GAAG;IAC7B;EACF,CAAC;EACDM,YAAY,EAAE,CAAC,mBAAmB,EAAE,eAAe,EAAE,YAAY,EAAE,4EAA4E,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAChKC,cAAc,EAAE,CAAC,6BAA6B,EAAE,mBAAmB,EAAE,sBAAsB,EAAE,oDAAoD,EAAE,YAAY;EAAE;EACjK,+HAA+H,EAAE,+HAA+H,EAAE,+HAA+H,EAAE,+HAA+H,EAAE,8DAA8D,EAAE,8DAA8D,EAAE,iNAAiN,EAAE,iNAAiN,EAAE,6MAA6M,EAAE,iBAAiB,EAAE,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE,aAAa,EAAE,aAAa,EAAE,aAAa,EAAE,aAAa,EAAE,aAAa,EAAE,aAAa,EAAE,aAAa,EAAE,UAAU,EAAE,gBAAgB,EAAE,eAAe,EACr8C;EACA,kCAAkC,EAAE,mCAAmC,EAAE,wEAAwE,EAAE,wCAAwC,EAAE,KAAK,EAAE,IAAI,EACxM;EACA,4BAA4B,EAAE,6EAA6E,EAAE,uBAAuB,EAAE,IAAI,EAAE,mDAAmD,EAAE,kEAAkE,EAAE,6CAA6C,EAAE,GAAG,CAAC,CAACD,IAAI,CAAC,IAAI;AACpU,CAAC;AAED,SAASN,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}