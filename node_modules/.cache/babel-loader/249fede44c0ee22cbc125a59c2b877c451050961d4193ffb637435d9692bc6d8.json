{"ast":null,"code":"import { Vector3, Loader, FileLoader, Group, BufferGeometry, Float32BufferAttribute, LineBasicMaterial, Material, PointsMaterial, MeshPhongMaterial, LineSegments, Points, Mesh } from 'three';\nconst _object_pattern = /^[og]\\s*(.+)?/; // mtllib file_reference\n\nconst _material_library_pattern = /^mtllib /; // usemtl material_name\n\nconst _material_use_pattern = /^usemtl /; // usemap map_name\n\nconst _map_use_pattern = /^usemap /;\nconst _vA = new Vector3();\nconst _vB = new Vector3();\nconst _vC = new Vector3();\nconst _ab = new Vector3();\nconst _cb = new Vector3();\nfunction ParserState() {\n  const state = {\n    objects: [],\n    object: {},\n    vertices: [],\n    normals: [],\n    colors: [],\n    uvs: [],\n    materials: {},\n    materialLibraries: [],\n    startObject: function (name, fromDeclaration) {\n      // If the current object (initial from reset) is not from a g/o declaration in the parsed\n      // file. We need to use it for the first parsed g/o to keep things in sync.\n      if (this.object && this.object.fromDeclaration === false) {\n        this.object.name = name;\n        this.object.fromDeclaration = fromDeclaration !== false;\n        return;\n      }\n      const previousMaterial = this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined;\n      if (this.object && typeof this.object._finalize === 'function') {\n        this.object._finalize(true);\n      }\n      this.object = {\n        name: name || '',\n        fromDeclaration: fromDeclaration !== false,\n        geometry: {\n          vertices: [],\n          normals: [],\n          colors: [],\n          uvs: [],\n          hasUVIndices: false\n        },\n        materials: [],\n        smooth: true,\n        startMaterial: function (name, libraries) {\n          const previous = this._finalize(false); // New usemtl declaration overwrites an inherited material, except if faces were declared\n          // after the material, then it must be preserved for proper MultiMaterial continuation.\n\n          if (previous && (previous.inherited || previous.groupCount <= 0)) {\n            this.materials.splice(previous.index, 1);\n          }\n          const material = {\n            index: this.materials.length,\n            name: name || '',\n            mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : '',\n            smooth: previous !== undefined ? previous.smooth : this.smooth,\n            groupStart: previous !== undefined ? previous.groupEnd : 0,\n            groupEnd: -1,\n            groupCount: -1,\n            inherited: false,\n            clone: function (index) {\n              const cloned = {\n                index: typeof index === 'number' ? index : this.index,\n                name: this.name,\n                mtllib: this.mtllib,\n                smooth: this.smooth,\n                groupStart: 0,\n                groupEnd: -1,\n                groupCount: -1,\n                inherited: false\n              };\n              cloned.clone = this.clone.bind(cloned);\n              return cloned;\n            }\n          };\n          this.materials.push(material);\n          return material;\n        },\n        currentMaterial: function () {\n          if (this.materials.length > 0) {\n            return this.materials[this.materials.length - 1];\n          }\n          return undefined;\n        },\n        _finalize: function (end) {\n          const lastMultiMaterial = this.currentMaterial();\n          if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {\n            lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n            lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n            lastMultiMaterial.inherited = false;\n          } // Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\n          if (end && this.materials.length > 1) {\n            for (let mi = this.materials.length - 1; mi >= 0; mi--) {\n              if (this.materials[mi].groupCount <= 0) {\n                this.materials.splice(mi, 1);\n              }\n            }\n          } // Guarantee at least one empty material, this makes the creation later more straight forward.\n\n          if (end && this.materials.length === 0) {\n            this.materials.push({\n              name: '',\n              smooth: this.smooth\n            });\n          }\n          return lastMultiMaterial;\n        }\n      }; // Inherit previous objects material.\n      // Spec tells us that a declared material must be set to all objects until a new material is declared.\n      // If a usemtl declaration is encountered while this new object is being parsed, it will\n      // overwrite the inherited material. Exception being that there was already face declarations\n      // to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n      if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function') {\n        const declared = previousMaterial.clone(0);\n        declared.inherited = true;\n        this.object.materials.push(declared);\n      }\n      this.objects.push(this.object);\n    },\n    finalize: function () {\n      if (this.object && typeof this.object._finalize === 'function') {\n        this.object._finalize(true);\n      }\n    },\n    parseVertexIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 3) * 3;\n    },\n    parseNormalIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 3) * 3;\n    },\n    parseUVIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 2) * 2;\n    },\n    addVertex: function (a, b, c) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addVertexPoint: function (a) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n    },\n    addVertexLine: function (a) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n    },\n    addNormal: function (a, b, c) {\n      const src = this.normals;\n      const dst = this.object.geometry.normals;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addFaceNormal: function (a, b, c) {\n      const src = this.vertices;\n      const dst = this.object.geometry.normals;\n      _vA.fromArray(src, a);\n      _vB.fromArray(src, b);\n      _vC.fromArray(src, c);\n      _cb.subVectors(_vC, _vB);\n      _ab.subVectors(_vA, _vB);\n      _cb.cross(_ab);\n      _cb.normalize();\n      dst.push(_cb.x, _cb.y, _cb.z);\n      dst.push(_cb.x, _cb.y, _cb.z);\n      dst.push(_cb.x, _cb.y, _cb.z);\n    },\n    addColor: function (a, b, c) {\n      const src = this.colors;\n      const dst = this.object.geometry.colors;\n      if (src[a] !== undefined) dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      if (src[b] !== undefined) dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      if (src[c] !== undefined) dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addUV: function (a, b, c) {\n      const src = this.uvs;\n      const dst = this.object.geometry.uvs;\n      dst.push(src[a + 0], src[a + 1]);\n      dst.push(src[b + 0], src[b + 1]);\n      dst.push(src[c + 0], src[c + 1]);\n    },\n    addDefaultUV: function () {\n      const dst = this.object.geometry.uvs;\n      dst.push(0, 0);\n      dst.push(0, 0);\n      dst.push(0, 0);\n    },\n    addUVLine: function (a) {\n      const src = this.uvs;\n      const dst = this.object.geometry.uvs;\n      dst.push(src[a + 0], src[a + 1]);\n    },\n    addFace: function (a, b, c, ua, ub, uc, na, nb, nc) {\n      const vLen = this.vertices.length;\n      let ia = this.parseVertexIndex(a, vLen);\n      let ib = this.parseVertexIndex(b, vLen);\n      let ic = this.parseVertexIndex(c, vLen);\n      this.addVertex(ia, ib, ic);\n      this.addColor(ia, ib, ic); // normals\n\n      if (na !== undefined && na !== '') {\n        const nLen = this.normals.length;\n        ia = this.parseNormalIndex(na, nLen);\n        ib = this.parseNormalIndex(nb, nLen);\n        ic = this.parseNormalIndex(nc, nLen);\n        this.addNormal(ia, ib, ic);\n      } else {\n        this.addFaceNormal(ia, ib, ic);\n      } // uvs\n\n      if (ua !== undefined && ua !== '') {\n        const uvLen = this.uvs.length;\n        ia = this.parseUVIndex(ua, uvLen);\n        ib = this.parseUVIndex(ub, uvLen);\n        ic = this.parseUVIndex(uc, uvLen);\n        this.addUV(ia, ib, ic);\n        this.object.geometry.hasUVIndices = true;\n      } else {\n        // add placeholder values (for inconsistent face definitions)\n        this.addDefaultUV();\n      }\n    },\n    addPointGeometry: function (vertices) {\n      this.object.geometry.type = 'Points';\n      const vLen = this.vertices.length;\n      for (let vi = 0, l = vertices.length; vi < l; vi++) {\n        const index = this.parseVertexIndex(vertices[vi], vLen);\n        this.addVertexPoint(index);\n        this.addColor(index);\n      }\n    },\n    addLineGeometry: function (vertices, uvs) {\n      this.object.geometry.type = 'Line';\n      const vLen = this.vertices.length;\n      const uvLen = this.uvs.length;\n      for (let vi = 0, l = vertices.length; vi < l; vi++) {\n        this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));\n      }\n      for (let uvi = 0, l = uvs.length; uvi < l; uvi++) {\n        this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));\n      }\n    }\n  };\n  state.startObject('', false);\n  return state;\n} //\n\nclass OBJLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.materials = null;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  setMaterials(materials) {\n    this.materials = materials;\n    return this;\n  }\n  parse(text) {\n    const state = new ParserState();\n    if (text.indexOf('\\r\\n') !== -1) {\n      // This is faster than String.split with regex that splits on both\n      text = text.replace(/\\r\\n/g, '\\n');\n    }\n    if (text.indexOf('\\\\\\n') !== -1) {\n      // join lines separated by a line continuation character (\\)\n      text = text.replace(/\\\\\\n/g, '');\n    }\n    const lines = text.split('\\n');\n    let line = '',\n      lineFirstChar = '';\n    let lineLength = 0;\n    let result = []; // Faster to just trim left side of the line. Use if available.\n\n    const trimLeft = typeof ''.trimLeft === 'function';\n    for (let i = 0, l = lines.length; i < l; i++) {\n      line = lines[i];\n      line = trimLeft ? line.trimLeft() : line.trim();\n      lineLength = line.length;\n      if (lineLength === 0) continue;\n      lineFirstChar = line.charAt(0); // @todo invoke passed in handler if any\n\n      if (lineFirstChar === '#') continue;\n      if (lineFirstChar === 'v') {\n        const data = line.split(/\\s+/);\n        switch (data[0]) {\n          case 'v':\n            state.vertices.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n            if (data.length >= 7) {\n              state.colors.push(parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]));\n            } else {\n              // if no colors are defined, add placeholders so color and vertex indices match\n              state.colors.push(undefined, undefined, undefined);\n            }\n            break;\n          case 'vn':\n            state.normals.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n            break;\n          case 'vt':\n            state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));\n            break;\n        }\n      } else if (lineFirstChar === 'f') {\n        const lineData = line.substr(1).trim();\n        const vertexData = lineData.split(/\\s+/);\n        const faceVertices = []; // Parse the face vertex data into an easy to work with format\n\n        for (let j = 0, jl = vertexData.length; j < jl; j++) {\n          const vertex = vertexData[j];\n          if (vertex.length > 0) {\n            const vertexParts = vertex.split('/');\n            faceVertices.push(vertexParts);\n          }\n        } // Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n        const v1 = faceVertices[0];\n        for (let j = 1, jl = faceVertices.length - 1; j < jl; j++) {\n          const v2 = faceVertices[j];\n          const v3 = faceVertices[j + 1];\n          state.addFace(v1[0], v2[0], v3[0], v1[1], v2[1], v3[1], v1[2], v2[2], v3[2]);\n        }\n      } else if (lineFirstChar === 'l') {\n        const lineParts = line.substring(1).trim().split(' ');\n        let lineVertices = [];\n        const lineUVs = [];\n        if (line.indexOf('/') === -1) {\n          lineVertices = lineParts;\n        } else {\n          for (let li = 0, llen = lineParts.length; li < llen; li++) {\n            const parts = lineParts[li].split('/');\n            if (parts[0] !== '') lineVertices.push(parts[0]);\n            if (parts[1] !== '') lineUVs.push(parts[1]);\n          }\n        }\n        state.addLineGeometry(lineVertices, lineUVs);\n      } else if (lineFirstChar === 'p') {\n        const lineData = line.substr(1).trim();\n        const pointData = lineData.split(' ');\n        state.addPointGeometry(pointData);\n      } else if ((result = _object_pattern.exec(line)) !== null) {\n        // o object_name\n        // or\n        // g group_name\n        // WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n        // let name = result[ 0 ].substr( 1 ).trim();\n        const name = (' ' + result[0].substr(1).trim()).substr(1);\n        state.startObject(name);\n      } else if (_material_use_pattern.test(line)) {\n        // material\n        state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);\n      } else if (_material_library_pattern.test(line)) {\n        // mtl file\n        state.materialLibraries.push(line.substring(7).trim());\n      } else if (_map_use_pattern.test(line)) {\n        // the line is parsed but ignored since the loader assumes textures are defined MTL files\n        // (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)\n        console.warn('THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.');\n      } else if (lineFirstChar === 's') {\n        result = line.split(' '); // smooth shading\n        // @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n        // but does not define a usemtl for each face set.\n        // This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n        // This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n        // where explicit usemtl defines geometry groups.\n        // Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n        /*\n         * http://paulbourke.net/dataformats/obj/\n         * or\n         * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\n         *\n         * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n         * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n         * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n         * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n         * than 0.\"\n         */\n\n        if (result.length > 1) {\n          const value = result[1].trim().toLowerCase();\n          state.object.smooth = value !== '0' && value !== 'off';\n        } else {\n          // ZBrush can produce \"s\" lines #11707\n          state.object.smooth = true;\n        }\n        const material = state.object.currentMaterial();\n        if (material) material.smooth = state.object.smooth;\n      } else {\n        // Handle null terminated files without exception\n        if (line === '\\0') continue;\n        console.warn('THREE.OBJLoader: Unexpected line: \"' + line + '\"');\n      }\n    }\n    state.finalize();\n    const container = new Group();\n    container.materialLibraries = [].concat(state.materialLibraries);\n    const hasPrimitives = !(state.objects.length === 1 && state.objects[0].geometry.vertices.length === 0);\n    if (hasPrimitives === true) {\n      for (let i = 0, l = state.objects.length; i < l; i++) {\n        const object = state.objects[i];\n        const geometry = object.geometry;\n        const materials = object.materials;\n        const isLine = geometry.type === 'Line';\n        const isPoints = geometry.type === 'Points';\n        let hasVertexColors = false; // Skip o/g line declarations that did not follow with any faces\n\n        if (geometry.vertices.length === 0) continue;\n        const buffergeometry = new BufferGeometry();\n        buffergeometry.setAttribute('position', new Float32BufferAttribute(geometry.vertices, 3));\n        if (geometry.normals.length > 0) {\n          buffergeometry.setAttribute('normal', new Float32BufferAttribute(geometry.normals, 3));\n        }\n        if (geometry.colors.length > 0) {\n          hasVertexColors = true;\n          buffergeometry.setAttribute('color', new Float32BufferAttribute(geometry.colors, 3));\n        }\n        if (geometry.hasUVIndices === true) {\n          buffergeometry.setAttribute('uv', new Float32BufferAttribute(geometry.uvs, 2));\n        } // Create materials\n\n        const createdMaterials = [];\n        for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {\n          const sourceMaterial = materials[mi];\n          const materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\n          let material = state.materials[materialHash];\n          if (this.materials !== null) {\n            material = this.materials.create(sourceMaterial.name); // mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\n            if (isLine && material && !(material instanceof LineBasicMaterial)) {\n              const materialLine = new LineBasicMaterial();\n              Material.prototype.copy.call(materialLine, material);\n              materialLine.color.copy(material.color);\n              material = materialLine;\n            } else if (isPoints && material && !(material instanceof PointsMaterial)) {\n              const materialPoints = new PointsMaterial({\n                size: 10,\n                sizeAttenuation: false\n              });\n              Material.prototype.copy.call(materialPoints, material);\n              materialPoints.color.copy(material.color);\n              materialPoints.map = material.map;\n              material = materialPoints;\n            }\n          }\n          if (material === undefined) {\n            if (isLine) {\n              material = new LineBasicMaterial();\n            } else if (isPoints) {\n              material = new PointsMaterial({\n                size: 1,\n                sizeAttenuation: false\n              });\n            } else {\n              material = new MeshPhongMaterial();\n            }\n            material.name = sourceMaterial.name;\n            material.flatShading = sourceMaterial.smooth ? false : true;\n            material.vertexColors = hasVertexColors;\n            state.materials[materialHash] = material;\n          }\n          createdMaterials.push(material);\n        } // Create mesh\n\n        let mesh;\n        if (createdMaterials.length > 1) {\n          for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {\n            const sourceMaterial = materials[mi];\n            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);\n          }\n          if (isLine) {\n            mesh = new LineSegments(buffergeometry, createdMaterials);\n          } else if (isPoints) {\n            mesh = new Points(buffergeometry, createdMaterials);\n          } else {\n            mesh = new Mesh(buffergeometry, createdMaterials);\n          }\n        } else {\n          if (isLine) {\n            mesh = new LineSegments(buffergeometry, createdMaterials[0]);\n          } else if (isPoints) {\n            mesh = new Points(buffergeometry, createdMaterials[0]);\n          } else {\n            mesh = new Mesh(buffergeometry, createdMaterials[0]);\n          }\n        }\n        mesh.name = object.name;\n        container.add(mesh);\n      }\n    } else {\n      // if there is only the default parser state object with no geometry data, interpret data as point cloud\n      if (state.vertices.length > 0) {\n        const material = new PointsMaterial({\n          size: 1,\n          sizeAttenuation: false\n        });\n        const buffergeometry = new BufferGeometry();\n        buffergeometry.setAttribute('position', new Float32BufferAttribute(state.vertices, 3));\n        if (state.colors.length > 0 && state.colors[0] !== undefined) {\n          buffergeometry.setAttribute('color', new Float32BufferAttribute(state.colors, 3));\n          material.vertexColors = true;\n        }\n        const points = new Points(buffergeometry, material);\n        container.add(points);\n      }\n    }\n    return container;\n  }\n}\nexport { OBJLoader };","map":{"version":3,"names":["Vector3","Loader","FileLoader","Group","BufferGeometry","Float32BufferAttribute","LineBasicMaterial","Material","PointsMaterial","MeshPhongMaterial","LineSegments","Points","Mesh","_object_pattern","_material_library_pattern","_material_use_pattern","_map_use_pattern","_vA","_vB","_vC","_ab","_cb","ParserState","state","objects","object","vertices","normals","colors","uvs","materials","materialLibraries","startObject","name","fromDeclaration","previousMaterial","currentMaterial","undefined","_finalize","geometry","hasUVIndices","smooth","startMaterial","libraries","previous","inherited","groupCount","splice","index","material","length","mtllib","Array","isArray","groupStart","groupEnd","clone","cloned","bind","push","end","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","value","len","parseInt","parseNormalIndex","parseUVIndex","addVertex","a","b","c","src","dst","addVertexPoint","addVertexLine","addNormal","addFaceNormal","fromArray","subVectors","cross","normalize","x","y","z","addColor","addUV","addDefaultUV","addUVLine","addFace","ua","ub","uc","na","nb","nc","vLen","ia","ib","ic","nLen","uvLen","addPointGeometry","type","vi","l","addLineGeometry","uvi","OBJLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","setMaterials","indexOf","replace","lines","split","line","lineFirstChar","lineLength","result","trimLeft","i","trim","charAt","data","parseFloat","lineData","substr","vertexData","faceVertices","j","jl","vertex","vertexParts","v1","v2","v3","lineParts","substring","lineVertices","lineUVs","li","llen","parts","pointData","exec","test","warn","toLowerCase","container","concat","hasPrimitives","isLine","isPoints","hasVertexColors","buffergeometry","setAttribute","createdMaterials","miLen","sourceMaterial","materialHash","create","materialLine","prototype","copy","call","color","materialPoints","size","sizeAttenuation","map","flatShading","vertexColors","mesh","addGroup","add","points"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/loaders/OBJLoader.js"],"sourcesContent":["import { Vector3, Loader, FileLoader, Group, BufferGeometry, Float32BufferAttribute, LineBasicMaterial, Material, PointsMaterial, MeshPhongMaterial, LineSegments, Points, Mesh } from 'three';\n\nconst _object_pattern = /^[og]\\s*(.+)?/; // mtllib file_reference\n\nconst _material_library_pattern = /^mtllib /; // usemtl material_name\n\nconst _material_use_pattern = /^usemtl /; // usemap map_name\n\nconst _map_use_pattern = /^usemap /;\n\nconst _vA = new Vector3();\n\nconst _vB = new Vector3();\n\nconst _vC = new Vector3();\n\nconst _ab = new Vector3();\n\nconst _cb = new Vector3();\n\nfunction ParserState() {\n  const state = {\n    objects: [],\n    object: {},\n    vertices: [],\n    normals: [],\n    colors: [],\n    uvs: [],\n    materials: {},\n    materialLibraries: [],\n    startObject: function (name, fromDeclaration) {\n      // If the current object (initial from reset) is not from a g/o declaration in the parsed\n      // file. We need to use it for the first parsed g/o to keep things in sync.\n      if (this.object && this.object.fromDeclaration === false) {\n        this.object.name = name;\n        this.object.fromDeclaration = fromDeclaration !== false;\n        return;\n      }\n\n      const previousMaterial = this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined;\n\n      if (this.object && typeof this.object._finalize === 'function') {\n        this.object._finalize(true);\n      }\n\n      this.object = {\n        name: name || '',\n        fromDeclaration: fromDeclaration !== false,\n        geometry: {\n          vertices: [],\n          normals: [],\n          colors: [],\n          uvs: [],\n          hasUVIndices: false\n        },\n        materials: [],\n        smooth: true,\n        startMaterial: function (name, libraries) {\n          const previous = this._finalize(false); // New usemtl declaration overwrites an inherited material, except if faces were declared\n          // after the material, then it must be preserved for proper MultiMaterial continuation.\n\n\n          if (previous && (previous.inherited || previous.groupCount <= 0)) {\n            this.materials.splice(previous.index, 1);\n          }\n\n          const material = {\n            index: this.materials.length,\n            name: name || '',\n            mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : '',\n            smooth: previous !== undefined ? previous.smooth : this.smooth,\n            groupStart: previous !== undefined ? previous.groupEnd : 0,\n            groupEnd: -1,\n            groupCount: -1,\n            inherited: false,\n            clone: function (index) {\n              const cloned = {\n                index: typeof index === 'number' ? index : this.index,\n                name: this.name,\n                mtllib: this.mtllib,\n                smooth: this.smooth,\n                groupStart: 0,\n                groupEnd: -1,\n                groupCount: -1,\n                inherited: false\n              };\n              cloned.clone = this.clone.bind(cloned);\n              return cloned;\n            }\n          };\n          this.materials.push(material);\n          return material;\n        },\n        currentMaterial: function () {\n          if (this.materials.length > 0) {\n            return this.materials[this.materials.length - 1];\n          }\n\n          return undefined;\n        },\n        _finalize: function (end) {\n          const lastMultiMaterial = this.currentMaterial();\n\n          if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {\n            lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n            lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n            lastMultiMaterial.inherited = false;\n          } // Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\n\n          if (end && this.materials.length > 1) {\n            for (let mi = this.materials.length - 1; mi >= 0; mi--) {\n              if (this.materials[mi].groupCount <= 0) {\n                this.materials.splice(mi, 1);\n              }\n            }\n          } // Guarantee at least one empty material, this makes the creation later more straight forward.\n\n\n          if (end && this.materials.length === 0) {\n            this.materials.push({\n              name: '',\n              smooth: this.smooth\n            });\n          }\n\n          return lastMultiMaterial;\n        }\n      }; // Inherit previous objects material.\n      // Spec tells us that a declared material must be set to all objects until a new material is declared.\n      // If a usemtl declaration is encountered while this new object is being parsed, it will\n      // overwrite the inherited material. Exception being that there was already face declarations\n      // to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n      if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function') {\n        const declared = previousMaterial.clone(0);\n        declared.inherited = true;\n        this.object.materials.push(declared);\n      }\n\n      this.objects.push(this.object);\n    },\n    finalize: function () {\n      if (this.object && typeof this.object._finalize === 'function') {\n        this.object._finalize(true);\n      }\n    },\n    parseVertexIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 3) * 3;\n    },\n    parseNormalIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 3) * 3;\n    },\n    parseUVIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 2) * 2;\n    },\n    addVertex: function (a, b, c) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addVertexPoint: function (a) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n    },\n    addVertexLine: function (a) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n    },\n    addNormal: function (a, b, c) {\n      const src = this.normals;\n      const dst = this.object.geometry.normals;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addFaceNormal: function (a, b, c) {\n      const src = this.vertices;\n      const dst = this.object.geometry.normals;\n\n      _vA.fromArray(src, a);\n\n      _vB.fromArray(src, b);\n\n      _vC.fromArray(src, c);\n\n      _cb.subVectors(_vC, _vB);\n\n      _ab.subVectors(_vA, _vB);\n\n      _cb.cross(_ab);\n\n      _cb.normalize();\n\n      dst.push(_cb.x, _cb.y, _cb.z);\n      dst.push(_cb.x, _cb.y, _cb.z);\n      dst.push(_cb.x, _cb.y, _cb.z);\n    },\n    addColor: function (a, b, c) {\n      const src = this.colors;\n      const dst = this.object.geometry.colors;\n      if (src[a] !== undefined) dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      if (src[b] !== undefined) dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      if (src[c] !== undefined) dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addUV: function (a, b, c) {\n      const src = this.uvs;\n      const dst = this.object.geometry.uvs;\n      dst.push(src[a + 0], src[a + 1]);\n      dst.push(src[b + 0], src[b + 1]);\n      dst.push(src[c + 0], src[c + 1]);\n    },\n    addDefaultUV: function () {\n      const dst = this.object.geometry.uvs;\n      dst.push(0, 0);\n      dst.push(0, 0);\n      dst.push(0, 0);\n    },\n    addUVLine: function (a) {\n      const src = this.uvs;\n      const dst = this.object.geometry.uvs;\n      dst.push(src[a + 0], src[a + 1]);\n    },\n    addFace: function (a, b, c, ua, ub, uc, na, nb, nc) {\n      const vLen = this.vertices.length;\n      let ia = this.parseVertexIndex(a, vLen);\n      let ib = this.parseVertexIndex(b, vLen);\n      let ic = this.parseVertexIndex(c, vLen);\n      this.addVertex(ia, ib, ic);\n      this.addColor(ia, ib, ic); // normals\n\n      if (na !== undefined && na !== '') {\n        const nLen = this.normals.length;\n        ia = this.parseNormalIndex(na, nLen);\n        ib = this.parseNormalIndex(nb, nLen);\n        ic = this.parseNormalIndex(nc, nLen);\n        this.addNormal(ia, ib, ic);\n      } else {\n        this.addFaceNormal(ia, ib, ic);\n      } // uvs\n\n\n      if (ua !== undefined && ua !== '') {\n        const uvLen = this.uvs.length;\n        ia = this.parseUVIndex(ua, uvLen);\n        ib = this.parseUVIndex(ub, uvLen);\n        ic = this.parseUVIndex(uc, uvLen);\n        this.addUV(ia, ib, ic);\n        this.object.geometry.hasUVIndices = true;\n      } else {\n        // add placeholder values (for inconsistent face definitions)\n        this.addDefaultUV();\n      }\n    },\n    addPointGeometry: function (vertices) {\n      this.object.geometry.type = 'Points';\n      const vLen = this.vertices.length;\n\n      for (let vi = 0, l = vertices.length; vi < l; vi++) {\n        const index = this.parseVertexIndex(vertices[vi], vLen);\n        this.addVertexPoint(index);\n        this.addColor(index);\n      }\n    },\n    addLineGeometry: function (vertices, uvs) {\n      this.object.geometry.type = 'Line';\n      const vLen = this.vertices.length;\n      const uvLen = this.uvs.length;\n\n      for (let vi = 0, l = vertices.length; vi < l; vi++) {\n        this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));\n      }\n\n      for (let uvi = 0, l = uvs.length; uvi < l; uvi++) {\n        this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));\n      }\n    }\n  };\n  state.startObject('', false);\n  return state;\n} //\n\n\nclass OBJLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.materials = null;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  setMaterials(materials) {\n    this.materials = materials;\n    return this;\n  }\n\n  parse(text) {\n    const state = new ParserState();\n\n    if (text.indexOf('\\r\\n') !== -1) {\n      // This is faster than String.split with regex that splits on both\n      text = text.replace(/\\r\\n/g, '\\n');\n    }\n\n    if (text.indexOf('\\\\\\n') !== -1) {\n      // join lines separated by a line continuation character (\\)\n      text = text.replace(/\\\\\\n/g, '');\n    }\n\n    const lines = text.split('\\n');\n    let line = '',\n        lineFirstChar = '';\n    let lineLength = 0;\n    let result = []; // Faster to just trim left side of the line. Use if available.\n\n    const trimLeft = typeof ''.trimLeft === 'function';\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      line = lines[i];\n      line = trimLeft ? line.trimLeft() : line.trim();\n      lineLength = line.length;\n      if (lineLength === 0) continue;\n      lineFirstChar = line.charAt(0); // @todo invoke passed in handler if any\n\n      if (lineFirstChar === '#') continue;\n\n      if (lineFirstChar === 'v') {\n        const data = line.split(/\\s+/);\n\n        switch (data[0]) {\n          case 'v':\n            state.vertices.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n\n            if (data.length >= 7) {\n              state.colors.push(parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]));\n            } else {\n              // if no colors are defined, add placeholders so color and vertex indices match\n              state.colors.push(undefined, undefined, undefined);\n            }\n\n            break;\n\n          case 'vn':\n            state.normals.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n            break;\n\n          case 'vt':\n            state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));\n            break;\n        }\n      } else if (lineFirstChar === 'f') {\n        const lineData = line.substr(1).trim();\n        const vertexData = lineData.split(/\\s+/);\n        const faceVertices = []; // Parse the face vertex data into an easy to work with format\n\n        for (let j = 0, jl = vertexData.length; j < jl; j++) {\n          const vertex = vertexData[j];\n\n          if (vertex.length > 0) {\n            const vertexParts = vertex.split('/');\n            faceVertices.push(vertexParts);\n          }\n        } // Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\n        const v1 = faceVertices[0];\n\n        for (let j = 1, jl = faceVertices.length - 1; j < jl; j++) {\n          const v2 = faceVertices[j];\n          const v3 = faceVertices[j + 1];\n          state.addFace(v1[0], v2[0], v3[0], v1[1], v2[1], v3[1], v1[2], v2[2], v3[2]);\n        }\n      } else if (lineFirstChar === 'l') {\n        const lineParts = line.substring(1).trim().split(' ');\n        let lineVertices = [];\n        const lineUVs = [];\n\n        if (line.indexOf('/') === -1) {\n          lineVertices = lineParts;\n        } else {\n          for (let li = 0, llen = lineParts.length; li < llen; li++) {\n            const parts = lineParts[li].split('/');\n            if (parts[0] !== '') lineVertices.push(parts[0]);\n            if (parts[1] !== '') lineUVs.push(parts[1]);\n          }\n        }\n\n        state.addLineGeometry(lineVertices, lineUVs);\n      } else if (lineFirstChar === 'p') {\n        const lineData = line.substr(1).trim();\n        const pointData = lineData.split(' ');\n        state.addPointGeometry(pointData);\n      } else if ((result = _object_pattern.exec(line)) !== null) {\n        // o object_name\n        // or\n        // g group_name\n        // WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n        // let name = result[ 0 ].substr( 1 ).trim();\n        const name = (' ' + result[0].substr(1).trim()).substr(1);\n        state.startObject(name);\n      } else if (_material_use_pattern.test(line)) {\n        // material\n        state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);\n      } else if (_material_library_pattern.test(line)) {\n        // mtl file\n        state.materialLibraries.push(line.substring(7).trim());\n      } else if (_map_use_pattern.test(line)) {\n        // the line is parsed but ignored since the loader assumes textures are defined MTL files\n        // (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)\n        console.warn('THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.');\n      } else if (lineFirstChar === 's') {\n        result = line.split(' '); // smooth shading\n        // @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n        // but does not define a usemtl for each face set.\n        // This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n        // This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n        // where explicit usemtl defines geometry groups.\n        // Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n        /*\n         * http://paulbourke.net/dataformats/obj/\n         * or\n         * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\n         *\n         * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n         * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n         * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n         * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n         * than 0.\"\n         */\n\n        if (result.length > 1) {\n          const value = result[1].trim().toLowerCase();\n          state.object.smooth = value !== '0' && value !== 'off';\n        } else {\n          // ZBrush can produce \"s\" lines #11707\n          state.object.smooth = true;\n        }\n\n        const material = state.object.currentMaterial();\n        if (material) material.smooth = state.object.smooth;\n      } else {\n        // Handle null terminated files without exception\n        if (line === '\\0') continue;\n        console.warn('THREE.OBJLoader: Unexpected line: \"' + line + '\"');\n      }\n    }\n\n    state.finalize();\n    const container = new Group();\n    container.materialLibraries = [].concat(state.materialLibraries);\n    const hasPrimitives = !(state.objects.length === 1 && state.objects[0].geometry.vertices.length === 0);\n\n    if (hasPrimitives === true) {\n      for (let i = 0, l = state.objects.length; i < l; i++) {\n        const object = state.objects[i];\n        const geometry = object.geometry;\n        const materials = object.materials;\n        const isLine = geometry.type === 'Line';\n        const isPoints = geometry.type === 'Points';\n        let hasVertexColors = false; // Skip o/g line declarations that did not follow with any faces\n\n        if (geometry.vertices.length === 0) continue;\n        const buffergeometry = new BufferGeometry();\n        buffergeometry.setAttribute('position', new Float32BufferAttribute(geometry.vertices, 3));\n\n        if (geometry.normals.length > 0) {\n          buffergeometry.setAttribute('normal', new Float32BufferAttribute(geometry.normals, 3));\n        }\n\n        if (geometry.colors.length > 0) {\n          hasVertexColors = true;\n          buffergeometry.setAttribute('color', new Float32BufferAttribute(geometry.colors, 3));\n        }\n\n        if (geometry.hasUVIndices === true) {\n          buffergeometry.setAttribute('uv', new Float32BufferAttribute(geometry.uvs, 2));\n        } // Create materials\n\n\n        const createdMaterials = [];\n\n        for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {\n          const sourceMaterial = materials[mi];\n          const materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\n          let material = state.materials[materialHash];\n\n          if (this.materials !== null) {\n            material = this.materials.create(sourceMaterial.name); // mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\n            if (isLine && material && !(material instanceof LineBasicMaterial)) {\n              const materialLine = new LineBasicMaterial();\n              Material.prototype.copy.call(materialLine, material);\n              materialLine.color.copy(material.color);\n              material = materialLine;\n            } else if (isPoints && material && !(material instanceof PointsMaterial)) {\n              const materialPoints = new PointsMaterial({\n                size: 10,\n                sizeAttenuation: false\n              });\n              Material.prototype.copy.call(materialPoints, material);\n              materialPoints.color.copy(material.color);\n              materialPoints.map = material.map;\n              material = materialPoints;\n            }\n          }\n\n          if (material === undefined) {\n            if (isLine) {\n              material = new LineBasicMaterial();\n            } else if (isPoints) {\n              material = new PointsMaterial({\n                size: 1,\n                sizeAttenuation: false\n              });\n            } else {\n              material = new MeshPhongMaterial();\n            }\n\n            material.name = sourceMaterial.name;\n            material.flatShading = sourceMaterial.smooth ? false : true;\n            material.vertexColors = hasVertexColors;\n            state.materials[materialHash] = material;\n          }\n\n          createdMaterials.push(material);\n        } // Create mesh\n\n\n        let mesh;\n\n        if (createdMaterials.length > 1) {\n          for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {\n            const sourceMaterial = materials[mi];\n            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);\n          }\n\n          if (isLine) {\n            mesh = new LineSegments(buffergeometry, createdMaterials);\n          } else if (isPoints) {\n            mesh = new Points(buffergeometry, createdMaterials);\n          } else {\n            mesh = new Mesh(buffergeometry, createdMaterials);\n          }\n        } else {\n          if (isLine) {\n            mesh = new LineSegments(buffergeometry, createdMaterials[0]);\n          } else if (isPoints) {\n            mesh = new Points(buffergeometry, createdMaterials[0]);\n          } else {\n            mesh = new Mesh(buffergeometry, createdMaterials[0]);\n          }\n        }\n\n        mesh.name = object.name;\n        container.add(mesh);\n      }\n    } else {\n      // if there is only the default parser state object with no geometry data, interpret data as point cloud\n      if (state.vertices.length > 0) {\n        const material = new PointsMaterial({\n          size: 1,\n          sizeAttenuation: false\n        });\n        const buffergeometry = new BufferGeometry();\n        buffergeometry.setAttribute('position', new Float32BufferAttribute(state.vertices, 3));\n\n        if (state.colors.length > 0 && state.colors[0] !== undefined) {\n          buffergeometry.setAttribute('color', new Float32BufferAttribute(state.colors, 3));\n          material.vertexColors = true;\n        }\n\n        const points = new Points(buffergeometry, material);\n        container.add(points);\n      }\n    }\n\n    return container;\n  }\n\n}\n\nexport { OBJLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}