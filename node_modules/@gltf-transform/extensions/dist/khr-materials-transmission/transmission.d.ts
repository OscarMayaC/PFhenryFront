import { ExtensionProperty, PropertyType, Texture, TextureInfo } from '@gltf-transform/core';
/**
 * # Transmission
 *
 * Defines optical transmission on a PBR {@link Material}. See {@link MaterialsTransmission}.
 */
export declare class Transmission extends ExtensionProperty {
    readonly propertyType = "Transmission";
    readonly parentTypes: PropertyType[];
    readonly extensionName = "KHR_materials_transmission";
    static EXTENSION_NAME: string;
    private _transmissionFactor;
    private transmissionTexture;
    private transmissionTextureInfo;
    copy(other: this, resolve?: <T extends import("@gltf-transform/core").Property>(t: T) => T): this;
    dispose(): void;
    /**********************************************************************************************
     * Transmission.
     */
    /** Transmission; linear multiplier. See {@link getTransmissionTexture}. */
    getTransmissionFactor(): number;
    /** Transmission; linear multiplier. See {@link getTransmissionTexture}. */
    setTransmissionFactor(transmissionFactor: number): this;
    /**
     * Transmission texture; linear multiplier. The `r` channel of this texture specifies
     * transmission [0-1] of the material's surface. By default this is a thin transparency
     * effect, but volume effects (refraction, subsurface scattering) may be introduced with the
     * addition of the `KHR_materials_volume` extension.
     */
    getTransmissionTexture(): Texture | null;
    /**
     * Settings affecting the material's use of its transmission texture. If no texture is attached,
     * {@link TextureInfo} is `null`.
     */
    getTransmissionTextureInfo(): TextureInfo | null;
    /** Sets transmission texture. See {@link getTransmissionTexture}. */
    setTransmissionTexture(texture: Texture | null): this;
}
