{"ast":null,"code":"import { Mesh, Color, Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, WebGLRenderTarget, ShaderMaterial, UniformsUtils } from 'three';\nclass Reflector extends Mesh {\n  constructor(geometry) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(geometry);\n    this.type = 'Reflector';\n    const scope = this;\n    const color = options.color !== undefined ? new Color(options.color) : new Color(0x7f7f7f);\n    const textureWidth = options.textureWidth || 512;\n    const textureHeight = options.textureHeight || 512;\n    const clipBias = options.clipBias || 0;\n    const shader = options.shader || Reflector.ReflectorShader; //\n\n    const reflectorPlane = new Plane();\n    const normal = new Vector3();\n    const reflectorWorldPosition = new Vector3();\n    const cameraWorldPosition = new Vector3();\n    const rotationMatrix = new Matrix4();\n    const lookAtPosition = new Vector3(0, 0, -1);\n    const clipPlane = new Vector4();\n    const view = new Vector3();\n    const target = new Vector3();\n    const q = new Vector4();\n    const textureMatrix = new Matrix4();\n    const virtualCamera = new PerspectiveCamera();\n    const renderTarget = new WebGLRenderTarget(textureWidth, textureHeight);\n    const material = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(shader.uniforms),\n      fragmentShader: shader.fragmentShader,\n      vertexShader: shader.vertexShader\n    });\n    material.uniforms['tDiffuse'].value = renderTarget.texture;\n    material.uniforms['color'].value = color;\n    material.uniforms['textureMatrix'].value = textureMatrix;\n    this.material = material;\n    this.onBeforeRender = function (renderer, scene, camera) {\n      reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n      if (view.dot(normal) > 0) return;\n      view.reflect(normal).negate();\n      view.add(reflectorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(reflectorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(reflectorWorldPosition);\n      virtualCamera.position.copy(view);\n      virtualCamera.up.set(0, 1, 0);\n      virtualCamera.up.applyMatrix4(rotationMatrix);\n      virtualCamera.up.reflect(normal);\n      virtualCamera.lookAt(target);\n      virtualCamera.far = camera.far; // Used in WebGLBackground\n\n      virtualCamera.updateMatrixWorld();\n      virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      textureMatrix.multiply(virtualCamera.projectionMatrix);\n      textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n      // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n      reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n      reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n      clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n      const projectionMatrix = virtualCamera.projectionMatrix;\n      q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n      q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n      q.z = -1.0;\n      q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n      clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n      projectionMatrix.elements[2] = clipPlane.x;\n      projectionMatrix.elements[6] = clipPlane.y;\n      projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias;\n      projectionMatrix.elements[14] = clipPlane.w; // Render\n\n      renderTarget.texture.encoding = renderer.outputEncoding;\n      scope.visible = false;\n      const currentRenderTarget = renderer.getRenderTarget();\n      const currentXrEnabled = renderer.xr.enabled;\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      renderer.xr.enabled = false; // Avoid camera modification\n\n      renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, virtualCamera);\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.setRenderTarget(currentRenderTarget); // Restore viewport\n\n      const viewport = camera.viewport;\n      if (viewport !== undefined) {\n        renderer.state.viewport(viewport);\n      }\n      scope.visible = true;\n    };\n    this.getRenderTarget = function () {\n      return renderTarget;\n    };\n    this.dispose = function () {\n      renderTarget.dispose();\n      scope.material.dispose();\n    };\n  }\n}\nReflector.prototype.isReflector = true;\nReflector.ReflectorShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: /* glsl */\n  `\n\t\tuniform mat4 textureMatrix;\n\t\tvarying vec4 vUv;\n\n\t\t#include <common>\n\t\t#include <logdepthbuf_pars_vertex>\n\n\t\tvoid main() {\n\n\t\t\tvUv = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t#include <logdepthbuf_vertex>\n\n\t\t}`,\n  fragmentShader: /* glsl */\n  `\n\t\tuniform vec3 color;\n\t\tuniform sampler2D tDiffuse;\n\t\tvarying vec4 vUv;\n\n\t\t#include <logdepthbuf_pars_fragment>\n\n\t\tfloat blendOverlay( float base, float blend ) {\n\n\t\t\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n\n\t\t}\n\n\t\tvec3 blendOverlay( vec3 base, vec3 blend ) {\n\n\t\t\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\tvec4 base = texture2DProj( tDiffuse, vUv );\n\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\n\n\t\t}`\n};\nexport { Reflector };","map":{"version":3,"names":["Mesh","Color","Plane","Vector3","Matrix4","Vector4","PerspectiveCamera","WebGLRenderTarget","ShaderMaterial","UniformsUtils","Reflector","constructor","geometry","options","arguments","length","undefined","type","scope","color","textureWidth","textureHeight","clipBias","shader","ReflectorShader","reflectorPlane","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","renderTarget","material","uniforms","clone","fragmentShader","vertexShader","value","texture","onBeforeRender","renderer","scene","camera","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","encoding","outputEncoding","visible","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","viewport","dispose","prototype","isReflector","tDiffuse"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/objects/Reflector.js"],"sourcesContent":["import { Mesh, Color, Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, WebGLRenderTarget, ShaderMaterial, UniformsUtils } from 'three';\n\nclass Reflector extends Mesh {\n  constructor(geometry, options = {}) {\n    super(geometry);\n    this.type = 'Reflector';\n    const scope = this;\n    const color = options.color !== undefined ? new Color(options.color) : new Color(0x7f7f7f);\n    const textureWidth = options.textureWidth || 512;\n    const textureHeight = options.textureHeight || 512;\n    const clipBias = options.clipBias || 0;\n    const shader = options.shader || Reflector.ReflectorShader; //\n\n    const reflectorPlane = new Plane();\n    const normal = new Vector3();\n    const reflectorWorldPosition = new Vector3();\n    const cameraWorldPosition = new Vector3();\n    const rotationMatrix = new Matrix4();\n    const lookAtPosition = new Vector3(0, 0, -1);\n    const clipPlane = new Vector4();\n    const view = new Vector3();\n    const target = new Vector3();\n    const q = new Vector4();\n    const textureMatrix = new Matrix4();\n    const virtualCamera = new PerspectiveCamera();\n    const renderTarget = new WebGLRenderTarget(textureWidth, textureHeight);\n    const material = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(shader.uniforms),\n      fragmentShader: shader.fragmentShader,\n      vertexShader: shader.vertexShader\n    });\n    material.uniforms['tDiffuse'].value = renderTarget.texture;\n    material.uniforms['color'].value = color;\n    material.uniforms['textureMatrix'].value = textureMatrix;\n    this.material = material;\n\n    this.onBeforeRender = function (renderer, scene, camera) {\n      reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n      if (view.dot(normal) > 0) return;\n      view.reflect(normal).negate();\n      view.add(reflectorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(reflectorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(reflectorWorldPosition);\n      virtualCamera.position.copy(view);\n      virtualCamera.up.set(0, 1, 0);\n      virtualCamera.up.applyMatrix4(rotationMatrix);\n      virtualCamera.up.reflect(normal);\n      virtualCamera.lookAt(target);\n      virtualCamera.far = camera.far; // Used in WebGLBackground\n\n      virtualCamera.updateMatrixWorld();\n      virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      textureMatrix.multiply(virtualCamera.projectionMatrix);\n      textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n      // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n      reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n      reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n      clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n      const projectionMatrix = virtualCamera.projectionMatrix;\n      q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n      q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n      q.z = -1.0;\n      q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n      clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n      projectionMatrix.elements[2] = clipPlane.x;\n      projectionMatrix.elements[6] = clipPlane.y;\n      projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias;\n      projectionMatrix.elements[14] = clipPlane.w; // Render\n\n      renderTarget.texture.encoding = renderer.outputEncoding;\n      scope.visible = false;\n      const currentRenderTarget = renderer.getRenderTarget();\n      const currentXrEnabled = renderer.xr.enabled;\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      renderer.xr.enabled = false; // Avoid camera modification\n\n      renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, virtualCamera);\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.setRenderTarget(currentRenderTarget); // Restore viewport\n\n      const viewport = camera.viewport;\n\n      if (viewport !== undefined) {\n        renderer.state.viewport(viewport);\n      }\n\n      scope.visible = true;\n    };\n\n    this.getRenderTarget = function () {\n      return renderTarget;\n    };\n\n    this.dispose = function () {\n      renderTarget.dispose();\n      scope.material.dispose();\n    };\n  }\n\n}\n\nReflector.prototype.isReflector = true;\nReflector.ReflectorShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n\t\tuniform mat4 textureMatrix;\n\t\tvarying vec4 vUv;\n\n\t\t#include <common>\n\t\t#include <logdepthbuf_pars_vertex>\n\n\t\tvoid main() {\n\n\t\t\tvUv = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t#include <logdepthbuf_vertex>\n\n\t\t}`,\n  fragmentShader:\n  /* glsl */\n  `\n\t\tuniform vec3 color;\n\t\tuniform sampler2D tDiffuse;\n\t\tvarying vec4 vUv;\n\n\t\t#include <logdepthbuf_pars_fragment>\n\n\t\tfloat blendOverlay( float base, float blend ) {\n\n\t\t\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n\n\t\t}\n\n\t\tvec3 blendOverlay( vec3 base, vec3 blend ) {\n\n\t\t\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\tvec4 base = texture2DProj( tDiffuse, vUv );\n\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\n\n\t\t}`\n};\n\nexport { Reflector };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}