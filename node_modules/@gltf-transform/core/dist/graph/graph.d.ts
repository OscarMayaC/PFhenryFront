import { Link } from './graph-links';
import { GraphNode } from './graph-node';
/**
 * A graph manages a network of {@link GraphNode} nodes, connected
 * by {@link @Link} edges.
 *
 * @hidden
 * @category Graph
 */
export declare class Graph<T extends GraphNode> {
    private _emptySet;
    private _links;
    private _parentRefs;
    private _childRefs;
    private _listeners;
    on(type: string, fn: (target: unknown) => void): this;
    emit(type: string, target: T): this;
    /** Returns a list of all parent->child links on this graph. */
    getLinks(): Link<T, T>[];
    /** Returns a list of all links on the graph having the given node as their child. */
    listParentLinks(node: T): Link<T, T>[];
    /** Returns a list of parent nodes for the given child node. */
    listParents(node: T): T[];
    /** Returns a list of all links on the graph having the given node as their parent. */
    listChildLinks(node: T): Link<T, T>[];
    /** Returns a list of child nodes for the given parent node. */
    listChildren(node: T): T[];
    disconnectChildren(node: T): this;
    disconnectParents(node: T, filter?: (n: T) => boolean): this;
    swapChild(parent: T, prevChild: T, nextChild: T): this;
    /**
    * Creates a link between two {@link GraphNode} instances. Link is returned
    * for the caller to store.
    * @param a Owner
    * @param b Resource
    */
    link<A extends T>(name: string, a: A, b: null): null;
    link<A extends T, B extends T>(name: string, a: A, b: B): Link<A, B>;
    link<A extends T, B extends T>(name: string, a: A, b: B | null): Link<A, B> | null;
    protected registerLink(link: Link<T, T>): Link<T, T>;
    /**
    * Removes the link from the graph. This method should only be invoked by
    * the onDispose() listener created in {@link link()}. The public method
    * of removing a link is {@link link.dispose()}.
    * @param link
    */
    private unlink;
}
