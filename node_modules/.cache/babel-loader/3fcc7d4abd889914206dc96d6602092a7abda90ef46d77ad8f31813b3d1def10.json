{"ast":null,"code":"import { Group, BufferGeometry, BufferAttribute, LineSegments, LineBasicMaterial, Box3Helper, Box3, MeshBasicMaterial, DoubleSide, Mesh, PlaneGeometry } from 'three';\nclass CSMHelper extends Group {\n  constructor(csm) {\n    super();\n    this.csm = csm;\n    this.displayFrustum = true;\n    this.displayPlanes = true;\n    this.displayShadowBounds = true;\n    const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n    const positions = new Float32Array(24);\n    const frustumGeometry = new BufferGeometry();\n    frustumGeometry.setIndex(new BufferAttribute(indices, 1));\n    frustumGeometry.setAttribute('position', new BufferAttribute(positions, 3, false));\n    const frustumLines = new LineSegments(frustumGeometry, new LineBasicMaterial());\n    this.add(frustumLines);\n    this.frustumLines = frustumLines;\n    this.cascadeLines = [];\n    this.cascadePlanes = [];\n    this.shadowLines = [];\n  }\n  updateVisibility() {\n    const displayFrustum = this.displayFrustum;\n    const displayPlanes = this.displayPlanes;\n    const displayShadowBounds = this.displayShadowBounds;\n    const frustumLines = this.frustumLines;\n    const cascadeLines = this.cascadeLines;\n    const cascadePlanes = this.cascadePlanes;\n    const shadowLines = this.shadowLines;\n    for (let i = 0, l = cascadeLines.length; i < l; i++) {\n      const cascadeLine = cascadeLines[i];\n      const cascadePlane = cascadePlanes[i];\n      const shadowLineGroup = shadowLines[i];\n      cascadeLine.visible = displayFrustum;\n      cascadePlane.visible = displayFrustum && displayPlanes;\n      shadowLineGroup.visible = displayShadowBounds;\n    }\n    frustumLines.visible = displayFrustum;\n  }\n  update() {\n    const csm = this.csm;\n    const camera = csm.camera;\n    const cascades = csm.cascades;\n    const mainFrustum = csm.mainFrustum;\n    const frustums = csm.frustums;\n    const lights = csm.lights;\n    const frustumLines = this.frustumLines;\n    const frustumLinePositions = frustumLines.geometry.getAttribute('position');\n    const cascadeLines = this.cascadeLines;\n    const cascadePlanes = this.cascadePlanes;\n    const shadowLines = this.shadowLines;\n    this.position.copy(camera.position);\n    this.quaternion.copy(camera.quaternion);\n    this.scale.copy(camera.scale);\n    this.updateMatrixWorld(true);\n    while (cascadeLines.length > cascades) {\n      this.remove(cascadeLines.pop());\n      this.remove(cascadePlanes.pop());\n      this.remove(shadowLines.pop());\n    }\n    while (cascadeLines.length < cascades) {\n      const cascadeLine = new Box3Helper(new Box3(), 0xffffff);\n      const planeMat = new MeshBasicMaterial({\n        transparent: true,\n        opacity: 0.1,\n        depthWrite: false,\n        side: DoubleSide\n      });\n      const cascadePlane = new Mesh(new PlaneGeometry(), planeMat);\n      const shadowLineGroup = new Group();\n      const shadowLine = new Box3Helper(new Box3(), 0xffff00);\n      shadowLineGroup.add(shadowLine);\n      this.add(cascadeLine);\n      this.add(cascadePlane);\n      this.add(shadowLineGroup);\n      cascadeLines.push(cascadeLine);\n      cascadePlanes.push(cascadePlane);\n      shadowLines.push(shadowLineGroup);\n    }\n    for (let i = 0; i < cascades; i++) {\n      const frustum = frustums[i];\n      const light = lights[i];\n      const shadowCam = light.shadow.camera;\n      const farVerts = frustum.vertices.far;\n      const cascadeLine = cascadeLines[i];\n      const cascadePlane = cascadePlanes[i];\n      const shadowLineGroup = shadowLines[i];\n      const shadowLine = shadowLineGroup.children[0];\n      cascadeLine.box.min.copy(farVerts[2]);\n      cascadeLine.box.max.copy(farVerts[0]);\n      cascadeLine.box.max.z += 1e-4;\n      cascadePlane.position.addVectors(farVerts[0], farVerts[2]);\n      cascadePlane.position.multiplyScalar(0.5);\n      cascadePlane.scale.subVectors(farVerts[0], farVerts[2]);\n      cascadePlane.scale.z = 1e-4;\n      this.remove(shadowLineGroup);\n      shadowLineGroup.position.copy(shadowCam.position);\n      shadowLineGroup.quaternion.copy(shadowCam.quaternion);\n      shadowLineGroup.scale.copy(shadowCam.scale);\n      shadowLineGroup.updateMatrixWorld(true);\n      this.attach(shadowLineGroup);\n      shadowLine.box.min.set(shadowCam.bottom, shadowCam.left, -shadowCam.far);\n      shadowLine.box.max.set(shadowCam.top, shadowCam.right, -shadowCam.near);\n    }\n    const nearVerts = mainFrustum.vertices.near;\n    const farVerts = mainFrustum.vertices.far;\n    frustumLinePositions.setXYZ(0, farVerts[0].x, farVerts[0].y, farVerts[0].z);\n    frustumLinePositions.setXYZ(1, farVerts[3].x, farVerts[3].y, farVerts[3].z);\n    frustumLinePositions.setXYZ(2, farVerts[2].x, farVerts[2].y, farVerts[2].z);\n    frustumLinePositions.setXYZ(3, farVerts[1].x, farVerts[1].y, farVerts[1].z);\n    frustumLinePositions.setXYZ(4, nearVerts[0].x, nearVerts[0].y, nearVerts[0].z);\n    frustumLinePositions.setXYZ(5, nearVerts[3].x, nearVerts[3].y, nearVerts[3].z);\n    frustumLinePositions.setXYZ(6, nearVerts[2].x, nearVerts[2].y, nearVerts[2].z);\n    frustumLinePositions.setXYZ(7, nearVerts[1].x, nearVerts[1].y, nearVerts[1].z);\n    frustumLinePositions.needsUpdate = true;\n  }\n}\nexport { CSMHelper };","map":{"version":3,"names":["Group","BufferGeometry","BufferAttribute","LineSegments","LineBasicMaterial","Box3Helper","Box3","MeshBasicMaterial","DoubleSide","Mesh","PlaneGeometry","CSMHelper","constructor","csm","displayFrustum","displayPlanes","displayShadowBounds","indices","Uint16Array","positions","Float32Array","frustumGeometry","setIndex","setAttribute","frustumLines","add","cascadeLines","cascadePlanes","shadowLines","updateVisibility","i","l","length","cascadeLine","cascadePlane","shadowLineGroup","visible","update","camera","cascades","mainFrustum","frustums","lights","frustumLinePositions","geometry","getAttribute","position","copy","quaternion","scale","updateMatrixWorld","remove","pop","planeMat","transparent","opacity","depthWrite","side","shadowLine","push","frustum","light","shadowCam","shadow","farVerts","vertices","far","children","box","min","max","z","addVectors","multiplyScalar","subVectors","attach","set","bottom","left","top","right","near","nearVerts","setXYZ","x","y","needsUpdate"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/csm/CSMHelper.js"],"sourcesContent":["import { Group, BufferGeometry, BufferAttribute, LineSegments, LineBasicMaterial, Box3Helper, Box3, MeshBasicMaterial, DoubleSide, Mesh, PlaneGeometry } from 'three';\n\nclass CSMHelper extends Group {\n  constructor(csm) {\n    super();\n    this.csm = csm;\n    this.displayFrustum = true;\n    this.displayPlanes = true;\n    this.displayShadowBounds = true;\n    const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n    const positions = new Float32Array(24);\n    const frustumGeometry = new BufferGeometry();\n    frustumGeometry.setIndex(new BufferAttribute(indices, 1));\n    frustumGeometry.setAttribute('position', new BufferAttribute(positions, 3, false));\n    const frustumLines = new LineSegments(frustumGeometry, new LineBasicMaterial());\n    this.add(frustumLines);\n    this.frustumLines = frustumLines;\n    this.cascadeLines = [];\n    this.cascadePlanes = [];\n    this.shadowLines = [];\n  }\n\n  updateVisibility() {\n    const displayFrustum = this.displayFrustum;\n    const displayPlanes = this.displayPlanes;\n    const displayShadowBounds = this.displayShadowBounds;\n    const frustumLines = this.frustumLines;\n    const cascadeLines = this.cascadeLines;\n    const cascadePlanes = this.cascadePlanes;\n    const shadowLines = this.shadowLines;\n\n    for (let i = 0, l = cascadeLines.length; i < l; i++) {\n      const cascadeLine = cascadeLines[i];\n      const cascadePlane = cascadePlanes[i];\n      const shadowLineGroup = shadowLines[i];\n      cascadeLine.visible = displayFrustum;\n      cascadePlane.visible = displayFrustum && displayPlanes;\n      shadowLineGroup.visible = displayShadowBounds;\n    }\n\n    frustumLines.visible = displayFrustum;\n  }\n\n  update() {\n    const csm = this.csm;\n    const camera = csm.camera;\n    const cascades = csm.cascades;\n    const mainFrustum = csm.mainFrustum;\n    const frustums = csm.frustums;\n    const lights = csm.lights;\n    const frustumLines = this.frustumLines;\n    const frustumLinePositions = frustumLines.geometry.getAttribute('position');\n    const cascadeLines = this.cascadeLines;\n    const cascadePlanes = this.cascadePlanes;\n    const shadowLines = this.shadowLines;\n    this.position.copy(camera.position);\n    this.quaternion.copy(camera.quaternion);\n    this.scale.copy(camera.scale);\n    this.updateMatrixWorld(true);\n\n    while (cascadeLines.length > cascades) {\n      this.remove(cascadeLines.pop());\n      this.remove(cascadePlanes.pop());\n      this.remove(shadowLines.pop());\n    }\n\n    while (cascadeLines.length < cascades) {\n      const cascadeLine = new Box3Helper(new Box3(), 0xffffff);\n      const planeMat = new MeshBasicMaterial({\n        transparent: true,\n        opacity: 0.1,\n        depthWrite: false,\n        side: DoubleSide\n      });\n      const cascadePlane = new Mesh(new PlaneGeometry(), planeMat);\n      const shadowLineGroup = new Group();\n      const shadowLine = new Box3Helper(new Box3(), 0xffff00);\n      shadowLineGroup.add(shadowLine);\n      this.add(cascadeLine);\n      this.add(cascadePlane);\n      this.add(shadowLineGroup);\n      cascadeLines.push(cascadeLine);\n      cascadePlanes.push(cascadePlane);\n      shadowLines.push(shadowLineGroup);\n    }\n\n    for (let i = 0; i < cascades; i++) {\n      const frustum = frustums[i];\n      const light = lights[i];\n      const shadowCam = light.shadow.camera;\n      const farVerts = frustum.vertices.far;\n      const cascadeLine = cascadeLines[i];\n      const cascadePlane = cascadePlanes[i];\n      const shadowLineGroup = shadowLines[i];\n      const shadowLine = shadowLineGroup.children[0];\n      cascadeLine.box.min.copy(farVerts[2]);\n      cascadeLine.box.max.copy(farVerts[0]);\n      cascadeLine.box.max.z += 1e-4;\n      cascadePlane.position.addVectors(farVerts[0], farVerts[2]);\n      cascadePlane.position.multiplyScalar(0.5);\n      cascadePlane.scale.subVectors(farVerts[0], farVerts[2]);\n      cascadePlane.scale.z = 1e-4;\n      this.remove(shadowLineGroup);\n      shadowLineGroup.position.copy(shadowCam.position);\n      shadowLineGroup.quaternion.copy(shadowCam.quaternion);\n      shadowLineGroup.scale.copy(shadowCam.scale);\n      shadowLineGroup.updateMatrixWorld(true);\n      this.attach(shadowLineGroup);\n      shadowLine.box.min.set(shadowCam.bottom, shadowCam.left, -shadowCam.far);\n      shadowLine.box.max.set(shadowCam.top, shadowCam.right, -shadowCam.near);\n    }\n\n    const nearVerts = mainFrustum.vertices.near;\n    const farVerts = mainFrustum.vertices.far;\n    frustumLinePositions.setXYZ(0, farVerts[0].x, farVerts[0].y, farVerts[0].z);\n    frustumLinePositions.setXYZ(1, farVerts[3].x, farVerts[3].y, farVerts[3].z);\n    frustumLinePositions.setXYZ(2, farVerts[2].x, farVerts[2].y, farVerts[2].z);\n    frustumLinePositions.setXYZ(3, farVerts[1].x, farVerts[1].y, farVerts[1].z);\n    frustumLinePositions.setXYZ(4, nearVerts[0].x, nearVerts[0].y, nearVerts[0].z);\n    frustumLinePositions.setXYZ(5, nearVerts[3].x, nearVerts[3].y, nearVerts[3].z);\n    frustumLinePositions.setXYZ(6, nearVerts[2].x, nearVerts[2].y, nearVerts[2].z);\n    frustumLinePositions.setXYZ(7, nearVerts[1].x, nearVerts[1].y, nearVerts[1].z);\n    frustumLinePositions.needsUpdate = true;\n  }\n\n}\n\nexport { CSMHelper };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}