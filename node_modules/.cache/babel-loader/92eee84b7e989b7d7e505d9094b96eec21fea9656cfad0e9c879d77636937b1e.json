{"ast":null,"code":"import { Loader, HalfFloatType, CubeTexture, LinearEncoding, LinearFilter, FloatType, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = HalfFloatType;\n  }\n  load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n    const texture = new CubeTexture();\n    texture.type = this.type;\n    switch (texture.type) {\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n    const scope = this;\n    let loaded = 0;\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        const texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n        if (texData.data !== undefined) {\n          const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n    return texture;\n  }\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n}\nexport { HDRCubeTextureLoader };","map":{"version":3,"names":["Loader","HalfFloatType","CubeTexture","LinearEncoding","LinearFilter","FloatType","FileLoader","DataTexture","RGBELoader","HDRCubeTextureLoader","constructor","manager","hdrLoader","type","load","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","encoding","minFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","setPath","path","setResponseType","setWithCredentials","withCredentials","buffer","texData","parse","data","undefined","dataTexture","width","height","format","images","needsUpdate","length","value"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/restaurante-pf-front/node_modules/three-stdlib/loaders/HDRCubeTextureLoader.js"],"sourcesContent":["import { Loader, HalfFloatType, CubeTexture, LinearEncoding, LinearFilter, FloatType, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\n\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = HalfFloatType;\n  }\n\n  load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n\n    const texture = new CubeTexture();\n    texture.type = this.type;\n\n    switch (texture.type) {\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n\n    const scope = this;\n    let loaded = 0;\n\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        const texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n\n        if (texData.data !== undefined) {\n          const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n\n    return texture;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n\n}\n\nexport { HDRCubeTextureLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}