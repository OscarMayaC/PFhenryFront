{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Color, Vector2, Mesh, Line, Points, Matrix3, BufferAttribute } from 'three';\nclass OBJExporter {\n  constructor() {\n    _defineProperty(this, \"output\", void 0);\n    _defineProperty(this, \"indexVertex\", void 0);\n    _defineProperty(this, \"indexVertexUvs\", void 0);\n    _defineProperty(this, \"indexNormals\", void 0);\n    _defineProperty(this, \"vertex\", void 0);\n    _defineProperty(this, \"color\", void 0);\n    _defineProperty(this, \"normal\", void 0);\n    _defineProperty(this, \"uv\", void 0);\n    _defineProperty(this, \"face\", void 0);\n    this.output = '';\n    this.indexVertex = 0;\n    this.indexVertexUvs = 0;\n    this.indexNormals = 0;\n    this.vertex = new Vector3();\n    this.color = new Color();\n    this.normal = new Vector3();\n    this.uv = new Vector2();\n    this.face = [];\n  }\n  parse(object) {\n    object.traverse(child => {\n      if (child instanceof Mesh && child.isMesh) {\n        this.parseMesh(child);\n      }\n      if (child instanceof Line && child.isLine) {\n        this.parseLine(child);\n      }\n      if (child instanceof Points && child.isPoints) {\n        this.parsePoints(child);\n      }\n    });\n    return this.output;\n  }\n  parseMesh(mesh) {\n    let nbVertex = 0;\n    let nbNormals = 0;\n    let nbVertexUvs = 0;\n    const geometry = mesh.geometry;\n    const normalMatrixWorld = new Matrix3();\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    } // shortcuts\n\n    const vertices = geometry.getAttribute('position');\n    const normals = geometry.getAttribute('normal');\n    const uvs = geometry.getAttribute('uv');\n    const indices = geometry.getIndex(); // name of the mesh object\n\n    this.output += `o ${mesh.name}\\n`; // name of the mesh material\n\n    if (mesh.material && !Array.isArray(mesh.material) && mesh.material.name) {\n      this.output += `usemtl ${mesh.material.name}\\n`;\n    } // vertices\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n        this.vertex.applyMatrix4(mesh.matrixWorld); // transform the vertex to export format\n\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\\n`;\n      }\n    } // uvs\n\n    if (uvs !== undefined) {\n      for (let i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {\n        this.uv.x = uvs.getX(i);\n        this.uv.y = uvs.getY(i); // transform the uv to export format\n\n        this.output += `vt ${this.uv.x} ${this.uv.y}\\n`;\n      }\n    } // normals\n\n    if (normals !== undefined) {\n      normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n      for (let i = 0, l = normals.count; i < l; i++, nbNormals++) {\n        this.normal.x = normals.getX(i);\n        this.normal.y = normals.getY(i);\n        this.normal.z = normals.getZ(i); // transform the normal to world space\n\n        this.normal.applyMatrix3(normalMatrixWorld).normalize(); // transform the normal to export format\n\n        this.output += `vn ${this.normal.x} ${this.normal.y} ${this.normal.z}\\n`;\n      }\n    } // faces\n\n    if (indices !== null) {\n      for (let i = 0, l = indices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = indices.getX(i + m) + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : ''}${normals ? `/${this.indexNormals + j}` : ''}` : '');\n        } // transform the face to export format\n\n        this.output += `f ${this.face.join(' ')}\\n`;\n      }\n    } else {\n      for (let i = 0, l = vertices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = i + m + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : ''}${normals ? `/${this.indexNormals + j}` : ''}` : '');\n        } // transform the face to export format\n\n        this.output += `f ${this.face.join(' ')}\\n`;\n      }\n    } // update index\n\n    this.indexVertex += nbVertex;\n    this.indexVertexUvs += nbVertexUvs;\n    this.indexNormals += nbNormals;\n  }\n  parseLine(line) {\n    let nbVertex = 0;\n    const geometry = line.geometry;\n    const type = line.type;\n    if (geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    } // shortcuts\n\n    const vertices = geometry.getAttribute('position'); // name of the line object\n\n    this.output += `o ${line.name}\\n`;\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n        this.vertex.applyMatrix4(line.matrixWorld); // transform the vertex to export format\n\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\\n`;\n      }\n    }\n    if (type === 'Line') {\n      this.output += 'l ';\n      for (let j = 1, l = vertices.count; j <= l; j++) {\n        this.output += `${this.indexVertex + j} `;\n      }\n      this.output += '\\n';\n    }\n    if (type === 'LineSegments') {\n      for (let j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {\n        this.output += `l ${this.indexVertex + j} ${this.indexVertex + k}\\n`;\n      }\n    } // update index\n\n    this.indexVertex += nbVertex;\n  }\n  parsePoints(points) {\n    let nbVertex = 0;\n    const geometry = points.geometry;\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    }\n    const vertices = geometry.getAttribute('position');\n    const colors = geometry.getAttribute('color');\n    this.output += `o ${points.name}\\n`;\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.fromBufferAttribute(vertices, i);\n        this.vertex.applyMatrix4(points.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}`;\n        if (colors !== undefined && colors instanceof BufferAttribute) {\n          this.color.fromBufferAttribute(colors, i);\n          this.output += ` ${this.color.r} ${this.color.g} ${this.color.b}`;\n        }\n        this.output += '\\n';\n      }\n    }\n    this.output += 'p ';\n    for (let j = 1, l = vertices.count; j <= l; j++) {\n      this.output += `${this.indexVertex + j} `;\n    }\n    this.output += '\\n'; // update index\n\n    this.indexVertex += nbVertex;\n  }\n}\nexport { OBJExporter };","map":{"version":3,"names":["_defineProperty","Vector3","Color","Vector2","Mesh","Line","Points","Matrix3","BufferAttribute","OBJExporter","constructor","output","indexVertex","indexVertexUvs","indexNormals","vertex","color","normal","uv","face","parse","object","traverse","child","isMesh","parseMesh","isLine","parseLine","isPoints","parsePoints","mesh","nbVertex","nbNormals","nbVertexUvs","geometry","normalMatrixWorld","isBufferGeometry","Error","vertices","getAttribute","normals","uvs","indices","getIndex","name","material","Array","isArray","undefined","i","l","count","x","getX","y","getY","z","getZ","applyMatrix4","matrixWorld","getNormalMatrix","applyMatrix3","normalize","m","j","join","line","type","k","points","colors","fromBufferAttribute","r","g","b"],"sources":["/Users/rociopichardo/Desktop/PFhenryFront/node_modules/three-stdlib/exporters/OBJExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Color, Vector2, Mesh, Line, Points, Matrix3, BufferAttribute } from 'three';\n\nclass OBJExporter {\n  constructor() {\n    _defineProperty(this, \"output\", void 0);\n\n    _defineProperty(this, \"indexVertex\", void 0);\n\n    _defineProperty(this, \"indexVertexUvs\", void 0);\n\n    _defineProperty(this, \"indexNormals\", void 0);\n\n    _defineProperty(this, \"vertex\", void 0);\n\n    _defineProperty(this, \"color\", void 0);\n\n    _defineProperty(this, \"normal\", void 0);\n\n    _defineProperty(this, \"uv\", void 0);\n\n    _defineProperty(this, \"face\", void 0);\n\n    this.output = '';\n    this.indexVertex = 0;\n    this.indexVertexUvs = 0;\n    this.indexNormals = 0;\n    this.vertex = new Vector3();\n    this.color = new Color();\n    this.normal = new Vector3();\n    this.uv = new Vector2();\n    this.face = [];\n  }\n\n  parse(object) {\n    object.traverse(child => {\n      if (child instanceof Mesh && child.isMesh) {\n        this.parseMesh(child);\n      }\n\n      if (child instanceof Line && child.isLine) {\n        this.parseLine(child);\n      }\n\n      if (child instanceof Points && child.isPoints) {\n        this.parsePoints(child);\n      }\n    });\n    return this.output;\n  }\n\n  parseMesh(mesh) {\n    let nbVertex = 0;\n    let nbNormals = 0;\n    let nbVertexUvs = 0;\n    const geometry = mesh.geometry;\n    const normalMatrixWorld = new Matrix3();\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    } // shortcuts\n\n\n    const vertices = geometry.getAttribute('position');\n    const normals = geometry.getAttribute('normal');\n    const uvs = geometry.getAttribute('uv');\n    const indices = geometry.getIndex(); // name of the mesh object\n\n    this.output += `o ${mesh.name}\\n`; // name of the mesh material\n\n    if (mesh.material && !Array.isArray(mesh.material) && mesh.material.name) {\n      this.output += `usemtl ${mesh.material.name}\\n`;\n    } // vertices\n\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n        this.vertex.applyMatrix4(mesh.matrixWorld); // transform the vertex to export format\n\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\\n`;\n      }\n    } // uvs\n\n\n    if (uvs !== undefined) {\n      for (let i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {\n        this.uv.x = uvs.getX(i);\n        this.uv.y = uvs.getY(i); // transform the uv to export format\n\n        this.output += `vt ${this.uv.x} ${this.uv.y}\\n`;\n      }\n    } // normals\n\n\n    if (normals !== undefined) {\n      normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n\n      for (let i = 0, l = normals.count; i < l; i++, nbNormals++) {\n        this.normal.x = normals.getX(i);\n        this.normal.y = normals.getY(i);\n        this.normal.z = normals.getZ(i); // transform the normal to world space\n\n        this.normal.applyMatrix3(normalMatrixWorld).normalize(); // transform the normal to export format\n\n        this.output += `vn ${this.normal.x} ${this.normal.y} ${this.normal.z}\\n`;\n      }\n    } // faces\n\n\n    if (indices !== null) {\n      for (let i = 0, l = indices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = indices.getX(i + m) + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : ''}${normals ? `/${this.indexNormals + j}` : ''}` : '');\n        } // transform the face to export format\n\n\n        this.output += `f ${this.face.join(' ')}\\n`;\n      }\n    } else {\n      for (let i = 0, l = vertices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = i + m + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : ''}${normals ? `/${this.indexNormals + j}` : ''}` : '');\n        } // transform the face to export format\n\n\n        this.output += `f ${this.face.join(' ')}\\n`;\n      }\n    } // update index\n\n\n    this.indexVertex += nbVertex;\n    this.indexVertexUvs += nbVertexUvs;\n    this.indexNormals += nbNormals;\n  }\n\n  parseLine(line) {\n    let nbVertex = 0;\n    const geometry = line.geometry;\n    const type = line.type;\n\n    if (geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    } // shortcuts\n\n\n    const vertices = geometry.getAttribute('position'); // name of the line object\n\n    this.output += `o ${line.name}\\n`;\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n        this.vertex.applyMatrix4(line.matrixWorld); // transform the vertex to export format\n\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\\n`;\n      }\n    }\n\n    if (type === 'Line') {\n      this.output += 'l ';\n\n      for (let j = 1, l = vertices.count; j <= l; j++) {\n        this.output += `${this.indexVertex + j} `;\n      }\n\n      this.output += '\\n';\n    }\n\n    if (type === 'LineSegments') {\n      for (let j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {\n        this.output += `l ${this.indexVertex + j} ${this.indexVertex + k}\\n`;\n      }\n    } // update index\n\n\n    this.indexVertex += nbVertex;\n  }\n\n  parsePoints(points) {\n    let nbVertex = 0;\n    const geometry = points.geometry;\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    }\n\n    const vertices = geometry.getAttribute('position');\n    const colors = geometry.getAttribute('color');\n    this.output += `o ${points.name}\\n`;\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.fromBufferAttribute(vertices, i);\n        this.vertex.applyMatrix4(points.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}`;\n\n        if (colors !== undefined && colors instanceof BufferAttribute) {\n          this.color.fromBufferAttribute(colors, i);\n          this.output += ` ${this.color.r} ${this.color.g} ${this.color.b}`;\n        }\n\n        this.output += '\\n';\n      }\n    }\n\n    this.output += 'p ';\n\n    for (let j = 1, l = vertices.count; j <= l; j++) {\n      this.output += `${this.indexVertex + j} `;\n    }\n\n    this.output += '\\n'; // update index\n\n    this.indexVertex += nbVertex;\n  }\n\n}\n\nexport { OBJExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}